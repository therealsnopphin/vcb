(document.getElementsByClassName("footer")[0]).parentNode.removeChild(document.getElementsByClassName("footer")[0])
$config = {
    gameVersion: 500,
    isTestingMode: false,
    env: "production",
    isBetaMode: false,
    isProduction: true,
    useDevAccountServer: false,
    devAccountServerUrl: "",
    turnstileKey: "0x4AAAAAAAxNgd99O5KdPkC7",
    authentication: {
        discord: "1282395552033669223",
        facebook: "482002344741952",
        google: "621635022753-n0ibkufm9ssukvk7c77rjv2ubn2abk80.apps.googleusercontent.com",
        apple: "io.mope.live.auth"
    },
    gameServers: [{
            id: "prod-lnd-us-ny-1",
            name: "New York 1",
            url: "prod-lnd-us-ny-1.mathstudyguides.com",
            region: "New York, USA",
            gm: 0
        }, {
            id: "prod-lnd-us-da-1",
            name: "Dallas 1",
            url: "prod-lnd-us-da-1.mathstudyguides.com",
            region: "Dallas, USA",
            gm: 0
        }, {
            id: "prod-lnd-us-la-1",
            name: "Los Angeles 1",
            url: "prod-lnd-us-la-1.mathstudyguides.com",
            region: "Los Angeles, USA",
            gm: 0
        }, {
            id: "prod-lnd-br-sp-1",
            name: "Sao Paulo 1",
            url: "prod-lnd-br-sp-1.mathstudyguides.com",
            region: "Sao Paulo, Brazil",
            gm: 0
        },
        {
            id: "prod-ovh-de-ff-1",
            name: "Frankfurt 1",
            url: "prod-ovh-de-ff-1.mathstudyguides.com",
            region: "Limburg an der Lahn, Germany",
            gm: 0
        },
        {
            id: "prod-ovh-fr-pr-1",
            name: "Paris 1",
            url: "prod-ovh-fr-pr-1.mathstudyguides.com",
            region: "Roubaix, France",
            gm: 0
        }, {
            id: "prod-lnd-sw-sh-1",
            name: "Stockholm 1",
            url: "prod-lnd-sw-sh-1.mathstudyguides.com",
            region: "Stockholm, Sweden",
            gm: 0
        }, {
            id: "prod-lnd-sg-sg-1",
            name: "Singapore 1",
            url: "prod-lnd-sg-sg-1.mathstudyguides.com",
            region: "Singapore, Singapore",
            gm: 0
        }, {
            id: "prod-lnd-au-sd-1",
            name: "Sydney 1",
            url: "prod-lnd-au-sd-1.mathstudyguides.com",
            region: "Sydney, Australia",
            gm: 0
        }
    ]
};
const a0_0x5ac32b = {
    async run() {
        let _0x989c00 = window;
        console.log("\n\n\n");
        console.log("--------------------------------------------");
        console.log("");
        console.log("#    #  ####  #####  ######     #  ####");
        console.log("##  ## #    # #    # #          # #    #");
        console.log("# ## # #    # #    # #####      # #    #");
        console.log("#    # #    # #####  #      ### # #    #");
        console.log("#    # #    # #      #      ### # #    #");
        console.log("#    #  ####  #      ###### ### #  ####");
        console.log("___ Mope.ioâ„¢ Copyright (2017-present) Mopeio Ltd. ___");
        console.log("--------------------------------------------");
        const _0x450ba1 = typeof localStorage !== "undefined" && !!localStorage;
        const _0x1b9a6a = $config.isTestingMode && _0xc4d403;
        let _0x470324 = _0x1b9a6a;
        if (_0x1b9a6a) {
            const _0x5d1742 = document.createElement("div");
            _0x5d1742.style.zIndex = "999999999";
            _0x5d1742.style.zIndex = "999999999";
            _0x5d1742.style.left = "0px";
            _0x5d1742.style.bottom = "0px";
            _0x5d1742.style.width = "100%";
            _0x5d1742.style.position = "fixed";
            _0x5d1742.style.position = "fixed";
            _0x5d1742.style.height = "150px";
            _0x5d1742.style.maxHeight = "150px";
            const _0x1fb5c3 = document.createElement("div");
            const _0x3f561c = document.createElement("div");
            _0x5d1742.appendChild(_0x1fb5c3);
            _0x5d1742.appendChild(_0x3f561c);
            const _0x5c29a7 = "25px";
            _0x1fb5c3.style.position = "absolute";
            _0x1fb5c3.style.right = "1px";
            _0x1fb5c3.style.backgroundColor = "rgba(255, 255, 255, .9)";
            _0x1fb5c3.style.color = "black";
            _0x1fb5c3.style.top = "-" + _0x5c29a7;
            _0x1fb5c3.style.cursor = "pointer";
            _0x1fb5c3.style.width = _0x5c29a7;
            _0x1fb5c3.style.height = _0x5c29a7;
            _0x1fb5c3.style.minWidth = _0x5c29a7;
            _0x1fb5c3.style.minHeight = _0x5c29a7;
            _0x1fb5c3.style.maxWidth = _0x5c29a7;
            _0x1fb5c3.style.maxHeight = _0x5c29a7;
            _0x1fb5c3.style.display = "flex";
            _0x1fb5c3.style.justifyContent = "center";
            _0x1fb5c3.style.alignItems = "center";
            _0x1fb5c3.textContent = "-";
            const _0x26568f = () => {
                _0x470324 = !_0x470324;
                if (_0x470324) {
                    _0x5d1742.style.bottom = "0px";
                    _0x1fb5c3.textContent = "-";
                } else {
                    _0x5d1742.style.bottom = "-150px";
                    _0x1fb5c3.textContent = "+";
                }
            };
            _0x1fb5c3.addEventListener("pointerup", () => {
                _0x26568f();
            });
            document.body.appendChild(_0x5d1742);
            _0x3f561c.style.left = "0px";
            _0x3f561c.style.bottom = "0px";
            _0x3f561c.style.position = "absolute";
            _0x3f561c.style.width = "100%";
            _0x3f561c.style.height = "150px";
            _0x3f561c.style.maxHeight = "150px";
            _0x3f561c.style.opacity = ".6";
            _0x3f561c.style.backgroundColor = "black";
            _0x3f561c.style.color = "white";
            _0x3f561c.style.display = "flex";
            _0x3f561c.style.flexDirection = "column";
            _0x3f561c.style.overflowX = "scroll";
            _0x3f561c.style.pointerEvents = "auto";
            const _0x31f761 = console.log.bind(console);
            const _0x3c7960 = console.error.bind(console);
            const _0xc7d077 = [];
            const _0x3ec817 = _0x428442 => {
                if (_0xc7d077.length > 100) {
                    const _0x3f1c92 = _0xc7d077[0];
                    _0x3f1c92.remove();
                    _0xc7d077.shift();
                }
                const _0x37d918 = document.createElement("DIV");
                _0x37d918.innerText = _0x428442.join(" ");
                _0x37d918.style.fontSize = "10px";
                _0x37d918.style.marginBottom = "3px";
                const _0x52eee3 = _0x3f561c.scrollHeight <= _0x3f561c.scrollTop + _0x3f561c.getBoundingClientRect().height || _0x3f561c.scrollHeight == 0;
                _0x3f561c.appendChild(_0x37d918);
                if (_0x52eee3) {
                    _0x3f561c.scrollTop = _0x3f561c.scrollHeight;
                }
                _0xc7d077.push(_0x37d918);
                return _0x37d918;
            };
            console.log = function() {
                var _0x130963 = Array.prototype.slice.call(arguments);
                _0x3ec817(_0x130963);
                _0x31f761.apply(console, _0x130963);
            };
            console.error = function() {
                var _0x30a73d = Array.prototype.slice.call(arguments);
                const _0x576671 = _0x3ec817(_0x30a73d);
                _0x576671.style.color = "red";
                _0x3c7960.apply(console, _0x30a73d);
            };
            _0x26568f();
        }
        const _0x3fce30 = $config.gameVersion;
        const _0x33dde0 = $config.isTestingMode;
        console.log("Is Testing mode: ", _0x33dde0);
        const _0x155291 = $config.isBetaMode;
        console.log("Is beta mode: ", _0x155291);
        const _0x504eb0 = true;
        console.log("-----------Game Version " + _0x3fce30 + (_0x155291 ? " (BETA)" : "") + " ----------------");
        try {
            const _0x284342 = document.getElementById("mope-footer");
            const _0x60f48f = document.getElementById("mope-app-store-btn-apple");
            const _0x4afe71 = _0x284342 && _0x60f48f;
            if (_0x4afe71) {
                if (!_0x2c94d7 && !_0x4a58bd) {
                    _0x60f48f.style.visibility = "visible";
                } else {
                    _0x60f48f.remove();
                    const _0x529065 = document.getElementsByClassName("Footer__social-media");
                    if (_0x529065 && _0x529065[0]) {
                        _0x529065[0].style.minWidth = "524px";
                        _0x529065[0].style.width = "524px";
                        _0x529065[0].style.maxWidth = "524px";
                    }
                }
            }
        } catch (_0x3e015c) {}
        window.onerror = function(_0x2026a7, _0x194ba6, _0x5eb298) {
            if (_0x33dde0) {}
        };
        let _0xa06b9b = "https://prod-accounts.mathstudyguides.com";
        const _0x1773aa = $config.useDevAccountServer ? $config.devAccountServerUrl : _0xa06b9b;
        console.log("Account server domain became:", _0x1773aa);
        const _0x4051d6 = 2;
        const _0x1ef095 = 1;
        const _0x145cc3 = 3;
        var _0x1ddf2f = 0;
        var _0x5d8525 = 1;
        var _0x16f106 = 2;
        var _0x47e33a = 3;
        var _0x36f07b = 4;
        var _0x360ff8 = 5;
        const _0x1edcbb = 1000;
        const _0x1c91ce = false;
        const _0x26cd5b = true;
        const _0x221554 = 110;
        const _0x5572d7 = 1000 / _0x221554;
        const _0x4ed1c1 = 125;
        const _0x41f468 = false;

        function _0x364f77() {
            reg = "SANDBOX";
            _0x4a3cd8("LOCAL", "localhost", reg);
        }

        function _0x31c542() {
            const _0x29c436 = new URLSearchParams(self.location.search);
            _0x29c436.has("crazygames");
        }
        async function _0x4cf79d() {
            return new Promise(function(_0x56bf41, _0x188c1a) {
                window.PLATFORM_ENV = "CrazyGames";
                const _0x40299b = document.createElement("script");
                _0x40299b.src = "https://sdk.crazygames.com/crazygames-sdk-v3.js";
                document.head.appendChild(_0x40299b);
                _0x40299b.addEventListener("load", async function() {
                    await window.CrazyGames.SDK.init();
                    _0x56bf41();
                });
                _0x40299b.addEventListener("error", function() {
                    console.log("CrazyGames SDK load error");
                    _0x188c1a();
                });
            });
        }
        async function _0x4d7b79(_0x302546) {
            return new Promise(async function(_0xbf6d35, _0x2d361c) {
                try {
                    await window.CrazyGames.SDK.banner.requestResponsiveBanner(_0x302546);
                    _0xbf6d35();
                } catch (_0x329a5f) {
                    console.log("Banner request error", _0x329a5f);
                    _0x2d361c();
                }
            });
        }

        function _0x1fb2e8(_0x256d4e) {
            window.CrazyGames.SDK.banner.clearBanner(_0x256d4e);
        }

        function _0x57cf87(_0x5d8f27) {
            const _0x4ace60 = {
                adFinished: _0x5d8f27,
                adError: _0x5d8f27,
                adStarted: () => console.log("Start midgame ad")
            };
            window.CrazyGames.SDK.ad.requestAd("midgame", _0x4ace60);
        }

        function _0x462e17(_0xf21aa6) {
            let _0x187920 = _0xf21aa6.target;
            while (_0x187920 && _0x187920 !== document.body) {
                const _0x37d8ce = getComputedStyle(_0x187920).overflowY;
                const _0x160a8e = _0x37d8ce === "auto" || _0x37d8ce === "scroll";
                if (_0x160a8e) {
                    return;
                }
                _0x187920 = _0x187920.parentElement;
            }
            _0xf21aa6.preventDefault();
        }
        window.addEventListener("wheel", _0x462e17, {
            passive: false
        });
        window.addEventListener("touchmove", _0x462e17, {
            passive: false
        });
        document.addEventListener("keydown", _0x209df7 => {
            const _0x150e94 = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight", " "];
            if (_0x150e94.includes(_0x209df7.key)) {
                const _0x14039f = _0x209df7.target;
                const _0x25c3a3 = ["INPUT", "TEXTAREA", "SELECT", "BUTTON"];
                if (_0x209df7.key === " " && (_0x25c3a3.includes(_0x14039f.tagName) || _0x14039f.isContentEditable)) {
                    return;
                }
                _0x209df7.preventDefault();
            }
        });
        if (_0x31c542()) {
            await _0x4cf79d();
        }
        var _0x1d4714 = 1;
        var _0x19d924 = 2;
        var _0x31e6f8 = 3;
        var _0x5aa778 = 4;
        var _0x218a1 = 5;
        var _0x12ad91 = 6;
        var _0x1cb430 = 7;
        var _0x263fcc = 8;
        var _0x18a48b = 9;
        var _0x853eab = 10;
        var _0x3fa7a8 = 11;
        var _0x46d040 = 12;
        var _0x24c5f0 = 13;
        var _0x451168 = 14;
        var _0x48ab41 = 15;
        var _0x26d843 = 16;
        var _0x25d7e3 = 17;
        var _0xc4320d = 18;
        var _0xe889d1 = 19;
        var _0x186b4c = 20;
        var _0x2331f0 = 21;
        const _0x1464b9 = 1;
        const _0x1af11e = 2;
        const _0x172a9b = 3;
        const _0x2c8f39 = 4;
        const _0x5d79b0 = 5;
        const _0x3fd886 = 6;
        const _0x4951fe = 7;
        const _0x26b779 = 8;
        const _0x5ba810 = 9;
        const _0xa1b7bd = 10;
        const _0x3fb0bd = 11;
        const _0x60c8a8 = 12;
        const _0x46caca = 13;
        const _0x2e54c2 = 14;
        const _0x3b7247 = 15;
        const _0x65bdc9 = 16;
        const _0x33077b = 17;
        const _0xc5f17b = 18;
        const _0x31f7ca = 19;
        const _0x328d78 = 20;
        const _0x435286 = 21;
        const _0x5cfc25 = 22;
        const _0x56245a = 23;
        const _0x52914c = 24;
        const _0x279555 = 25;
        const _0x27a0c9 = 26;
        const _0x583376 = 27;
        const _0x23641b = 28;
        const _0x53698f = 29;
        const _0x2b31e4 = 30;
        const _0x36f3ef = 31;
        const _0x2d4909 = 32;
        const _0x2beec8 = 33;
        const _0x126a7e = 34;
        const _0x279fd6 = 35;
        const _0xbf72aa = 36;
        const _0x9e03e7 = 37;
        const _0x21834f = 38;
        const _0x2dab52 = 39;
        const _0x5cda5d = 40;
        const _0x325ef8 = 41;
        const _0x5c2aee = 42;
        const _0x3146be = 43;
        const _0x46bd0d = 44;
        const _0xa42843 = 45;
        const _0x3aceb6 = 46;
        const _0x1eb15d = 47;
        const _0x130a67 = 48;
        const _0x371b59 = 49;
        const _0x2b3ca5 = 50;
        const _0x3b2a53 = 51;
        const _0x454a9e = 52;
        const _0x395fbf = 53;
        const _0x3b201e = 54;
        const _0x5db96b = 55;
        const _0x56e22b = 56;
        const _0x470766 = 57;
        const _0x32e96b = 58;
        const _0x5c97ac = 59;
        const _0x5a5842 = 60;
        const _0xd396c7 = 61;
        const _0x53ae0f = 62;
        const _0x42a096 = 63;
        const _0x5efaac = 64;
        const _0x26ac15 = 65;
        const _0x17a581 = 66;
        const _0x384357 = 67;
        const _0x5d9c71 = 68;
        const _0x27bdf5 = 69;
        const _0x21e881 = 70;
        const _0x4e77b3 = 71;
        const _0x1e8d7a = 72;
        const _0x260928 = 73;
        const _0x486c98 = 74;
        const _0x43c0e1 = 75;
        const _0x1995af = 76;
        const _0x5ce440 = 77;
        const _0x12c33f = 78;
        const _0x198166 = 79;
        const _0x2f5e3f = 80;
        const _0x4b0080 = 81;
        const _0x47caed = 82;
        const _0xa8dc8d = 83;
        const _0x103ff4 = 84;
        const _0x4231d7 = 85;
        const _0x1db639 = 86;
        const _0xf08029 = 87;
        const _0x17f107 = 88;
        const _0x363ecd = 89;
        const _0x19a6c7 = 90;
        const _0x3f285f = 91;
        const _0x4b423e = 92;
        const _0xb8d9df = 93;
        const _0x293bc6 = 94;
        const _0x468cd5 = 95;
        const _0x7760f6 = 96;
        const _0x10b8c1 = 97;
        const _0x4fb0d9 = 98;
        const _0x47fbb4 = 99;
        const _0x2bf23c = 100;
        const _0x40ebb0 = 101;
        const _0x450242 = 102;
        const _0x340fbf = 103;
        const _0x21d7ee = 104;
        const _0xba38ed = 105;
        const _0x124a76 = 106;
        const _0x3e2170 = 107;
        const _0x134e5a = 108;
        const _0x3566bf = 109;
        const _0x34ee8e = 110;
        const _0x4b8ff5 = 111;
        const _0x1fde95 = 112;
        const _0xb2499 = 113;
        const _0x3d9e3b = 114;
        const _0x4bfef2 = 115;
        const _0x55605e = 116;
        const _0x11a37d = 117;
        const _0x4ecddd = 118;
        const _0x2308bc = 119;
        const _0x24a48a = 120;
        const _0x45f083 = 121;
        const _0x3c380b = 122;
        var _0x43b42f = 1;
        var _0x48c056 = 2;
        var _0x162398 = 3;
        var _0x4b2c05 = 4;
        var _0x252e1c = 5;
        var _0x440978 = 6;
        var _0x413190 = 7;
        var _0x3da3e9 = 8;
        var _0x4b7c77 = 9;
        var _0x2c3383 = 10;
        var _0x169f9e = 11;
        var _0x208477 = 12;
        var _0x5c8a84 = 13;
        var _0x651296 = 14;
        var _0x2d6c4a = 15;
        var _0x143680 = 16;
        var _0x3cf77e = 17;
        var _0x4eb74c = 18;
        var _0x48ede0 = 19;
        var _0x31dc89 = 20;
        var _0x1255f5 = 21;
        var _0x3edcca = 22;
        var _0x5aa79b = 23;
        var _0x260340 = 24;
        var _0x165dc5 = 25;
        var _0x1e888e = 26;
        var _0x40e3c5 = 27;
        var _0x165724 = 28;
        var _0x76f666 = 29;
        var _0x52e535 = 30;
        var _0x1c9b47 = 31;
        var _0x590a46 = 32;
        var _0x132d0f = 33;
        var _0x435c85 = 34;
        var _0x510730 = 35;
        var _0x31e467 = 36;
        var _0x17e94b = 37;
        var _0x5046bf = 38;
        var _0xfc2e38 = 39;
        var _0x5075c2 = 40;
        var _0x5983d9 = 42;
        var _0xd79a5a = 43;
        var _0x5a2c61 = 44;
        var _0x2e9b97 = 46;
        var _0x9598c7 = 47;
        var _0xddc401 = 48;
        var _0x132c33 = 49;
        var _0xf30c2f = 50;
        var _0x7e4e1a = 51;
        var _0x463a00 = 52;
        var _0x88c3ca = 53;
        var _0x5854cd = 54;
        var _0x503518 = 55;
        var _0xbcb6f1 = 56;
        var _0x63bdc1 = 57;
        var _0x369a30 = 58;
        var _0x1f5668 = 59;
        var _0x3e2946 = 60;
        var _0x45772c = 61;
        var _0x165563 = 62;
        var _0xa48e9e = 63;
        var _0x5880ee = 64;
        var _0x1d4611 = 65;
        var _0x1a0fc0 = 66;
        var _0x1a4599 = 67;
        var _0x3efa75 = 68;
        var _0x38a462 = 69;
        var _0x3ac4e6 = 70;
        var _0x429905 = 71;
        var _0x43a5b2 = 72;
        var _0x1e8f56 = 73;
        var _0x167c4d = 74;
        var _0x1d2c49 = 75;
        var _0x47256d = 76;
        var _0x231835 = 77;
        var _0x30ede3 = 78;
        var _0x315f18 = 79;
        var _0x5e49df = 80;
        var _0x5f258f = 81;
        var _0x5003b0 = 82;
        var _0x53837a = 83;
        var _0x175d6e = 84;
        var _0x2402dd = 85;
        var _0x26a868 = 86;
        var _0xcb4cac = 87;
        var _0x5e9917 = 88;
        var _0x476229 = 89;
        var _0x146088 = 90;
        var _0x320d56 = 91;
        var _0x40152e = 92;
        var _0x2d0301 = 93;
        var _0x3491fa = 94;
        var _0x5ab1c8 = 95;
        var _0x187c1b = 96;
        var _0x46dcc0 = 97;
        var _0x4b7e7f = 98;
        var _0x3f0029 = 99;
        var _0x27ccb3 = 100;
        var _0x2a77cf = 101;
        var _0x44504a = 102;
        var _0x4c48f4 = 103;
        var _0x574cb2 = 104;
        var _0xe686e1 = 105;
        var _0x25f509 = 106;
        var _0x54a696 = 107;
        var _0x10b95a = 108;
        var _0x2db1cc = 109;
        var _0x37530a = 110;
        var _0x2b90a2 = 111;
        var _0x15bbe6 = 112;
        var _0x3ae8d3 = 113;
        var _0x57b29b = 114;
        var _0xbc11d = 115;
        var _0x1a5753 = 116;
        var _0x4a5d9c = 117;
        var _0x45aeb2 = 118;
        var _0x476d4d = 119;
        var _0x27d2ab = 122;
        var _0x22d5a8 = 123;
        var _0x579325 = 125;
        var _0x30566f = 150;
        var _0x35d268 = {
            customClassesForOType: {},
            setClassForAnimalType: function(_0xd75501, _0x173a70) {
                this.setCustomClassForGameObjType(_0xd75501, _0x48c056, _0x173a70);
            },
            setClassForAnimalBodyType: function(_0x221f27, _0x1e0464) {
                this.setCustomClassForGameObjType(_0x221f27, _0x4a5d9c, _0x1e0464);
            },
            setCustomClassForGameObjType: function(_0x4ff60e, _0x1e12e1, _0x33a35c) {
                if (!this.customClassesForOType[_0x1e12e1]) {
                    this.customClassesForOType[_0x1e12e1] = {
                        oTypeMainClass: null,
                        secondaryTypeClasses: {}
                    };
                }
                var _0x4799ca = this.customClassesForOType[_0x1e12e1];
                if (_0x33a35c == null) {
                    if (_0x4799ca.oTypeMainClass != null) {
                        console.log("ERROR 'GameObjType.setCustomClassForGameObjType': a class (" + this.customClassesForOType[_0x1e12e1] + ") is already set for oType " + _0x1e12e1 + "! Check for duplicate calls!");
                    }
                    _0x4799ca.oTypeMainClass = _0x4ff60e;
                } else {
                    if (_0x33a35c in _0x4799ca.secondaryTypeClasses) {
                        console.log("ERROR 'GameObjType.setCustomClassForGameObjType': a class is already set for oType " + _0x1e12e1 + " AND secondaryType (eg. animalType) " + _0x33a35c + "! Check for duplicate calls!");
                    }
                    _0x4799ca.secondaryTypeClasses[_0x33a35c] = _0x4ff60e;
                }
                this.onClassSet(_0x4ff60e, _0x1e12e1, _0x33a35c);
            },
            getClassForGameObjType: function(_0x263b88, _0x15e67a) {
                if (_0x263b88 in this.customClassesForOType) {
                    var _0x475657 = this.customClassesForOType[_0x263b88];
                    if (_0x15e67a == null || _0x15e67a == 0) {
                        return _0x475657.oTypeMainClass;
                    } else if (_0x15e67a in _0x475657.secondaryTypeClasses) {
                        return _0x475657.secondaryTypeClasses[_0x15e67a];
                    } else {
                        return _0x475657.oTypeMainClass;
                    }
                } else {
                    return GameObj;
                }
            },
            createStaticObj: function(_0x5c5dc8) {
                var _0x5d1bdb = _0x5c5dc8.readUInt8();
                var _0x3e0753 = _0x35d268.createGameObjOfOType(_0x5d1bdb, null);
                _0x3e0753.staticUpd_readMsg(_0x5c5dc8, _0x5d1bdb);
                return _0x3e0753;
            },
            newlyVis_createGameObjFromMsg: function(_0x10727d) {
                var _0x249545 = _0x10727d.readUInt16();
                var _0x19a708 = null;
                if (_0x427f31[_0x249545] != null && _0x427f31[_0x249545] !== undefined) {
                    _0x19a708 = _0x10727d.readUInt16();
                }
                var _0x16561a = _0x35d268.createGameObjOfOType(_0x249545, _0x19a708);
                _0x16561a.worldUpd_readMsgNewlyVisible(_0x10727d, _0x249545, _0x19a708);
                return _0x16561a;
            },
            hasCustomClasses: function(_0x6d2f72) {},
            createGameObjOfOType: function(_0x3472cc, _0x2b6aa8) {
                var _0x1d78ab = this.getClassForGameObjType(_0x3472cc, _0x2b6aa8);
                var _0x3a5145 = new _0x1d78ab(_0x3472cc, _0x2b6aa8);
                return _0x3a5145;
            },
            onClassSet: function(_0x6ff046) {},
            addCustomClassType: function(_0x98f30) {
                if (_0x427f31[_0x98f30] == undefined) {
                    _0x427f31[_0x98f30] = _0x98f30;
                }
            }
        };
        var _0x427f31 = {};
        _0x35d268.addCustomClassType(_0x48c056);
        _0x35d268.addCustomClassType(_0x4a5d9c);
        _0x35d268.addCustomClassType(_0x651296);
        _0x35d268.addCustomClassType(_0x212240);
        var _0x473f55 = 1;
        var _0x4f884f = 2;
        var _0x2bdc31 = 3;
        var _0x5e51a3 = 4;
        var _0x52cad3 = 5;
        var _0x56cf8f = 6;
        var _0x2cd75a = 7;
        var _0x3bf8ca = 8;
        var _0x5a7f16 = 9;
        var _0x28396e = 10;
        var _0xce5aa0 = 11;
        var _0x273128 = 12;
        var _0x478075 = 13;
        var _0x5642bc = 14;
        var _0x27c6df = 15;
        var _0x5767e8 = 16;
        var _0x9f0228 = 17;
        var _0x51851f = 18;
        var _0x78a6fc = 19;
        var _0x245c67 = 20;
        var _0x499275 = 21;
        var _0x32b37a = 22;
        var _0x29d150 = 23;
        var _0x519f92 = 24;
        var _0x2b36cf = 25;
        var _0x563e19 = 26;
        var _0x371ea0 = 27;
        var _0x4d8eda = 28;
        var _0xbc1c26 = 29;
        var _0x57e1d4 = 30;
        var _0x5f399a = 31;
        var _0x174cd3 = 32;
        var _0x5197c0 = 33;
        var _0x36539e = 34;
        var _0x45fb63 = 35;
        var _0x3941c2 = 36;
        var _0x2e1cf4 = 37;
        var _0x125d8e = 38;
        var _0x52eaad = 39;
        var _0x1171ab = 40;
        var _0x24396a = 41;
        var _0x4372c1 = 42;
        var _0x145a21 = 43;
        var _0x2a825f = 44;
        var _0x346a56 = 45;
        var _0x47e6fe = 46;
        var _0x2ffcd2 = 47;
        var _0x1bba03 = 48;
        var _0x1d87e9 = 49;
        var _0x50e3b8 = 50;
        var _0x471048 = 51;
        var _0x21b167 = 52;
        var _0x4a37d4 = 53;
        var _0x49687e = 54;
        var _0x567082 = 55;
        var _0x532f26 = 56;
        var _0x4abc25 = 57;
        var _0xcd3c11 = 58;
        var _0x1c45fa = 59;
        var _0x3a5861 = 60;
        var _0x50431e = 61;
        var _0x2fab82 = 62;
        var _0x1f5222 = 63;
        var _0x1c9f19 = 64;
        var _0x4c676b = 65;
        var _0x57d22f = 66;
        var _0x438400 = 67;
        var _0x27033a = 68;
        var _0x49b249 = 69;
        var _0x46adbf = 70;
        var _0x5c13ab = 71;
        var _0x31abda = 72;
        var _0x504f20 = 73;
        var _0x2b4863 = 74;
        var _0x190fd6 = 75;
        var _0x3adb75 = 76;
        var _0x4e8c9f = 77;
        var _0x31189f = 78;
        var _0x2be8a3 = 79;
        var _0x3afb27 = 80;
        var _0x8f4f69 = 81;
        var _0x7d036f = 82;
        var _0x5c4842 = 83;
        var _0x28b669 = 84;
        var _0x5443af = 85;
        var _0x2892bd = 86;
        var _0x8a7dab = 87;
        var _0x3672b1 = 88;
        var _0x41ea0f = 89;
        var _0x2bcad6 = 90;
        var _0x64c9a4 = 91;
        var _0x2e29dc = 92;
        var _0x5ed5f7 = 93;
        var _0x4b4e53 = 94;
        var _0x3f71c6 = 95;
        var _0x5b6d09 = 96;
        var _0x2a7ad6 = 97;
        var _0x27689a = 98;
        var _0x13312d = 99;
        var _0x370aae = 100;
        var _0x44140d = 101;
        var _0x180088 = 102;
        var _0x3c34a2 = 103;
        var _0xbd5b96 = 104;
        var _0x4d63e3 = 105;
        var _0x42c2ee = 106;
        var _0x5559b2 = 107;
        var _0x3d7ba = 108;
        var _0x30aab5 = 109;
        var _0x116c1b = 110;
        var _0xcd07e0 = 111;
        var _0x89c4b3 = 112;
        a_birdMonster = 122;

        function _0x20ad9d(_0x7dda42) {
            var _0x3cba4d = {};
            switch (_0x7dda42) {
                case _0x346a56:
                    _0x3cba4d.aniName = "Snail";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "You're a super slow snail!";
                    _0x3cba4d.aniCol = "#fcc02b";
                    _0x3cba4d.skinName = "snail";
                    break;
                case _0x473f55:
                    _0x3cba4d.aniName = "Mouse";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "";
                    _0x3cba4d.aniCol = "#9BA9B9";
                    _0x3cba4d.skinName = "mouse";
                    break;
                case _0x4f884f:
                    _0x3cba4d.aniName = "Rabbit";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to RABBIT! \nPress W to burrow a hole to hide in!";
                    _0x3cba4d.aniCol = "#AA937E";
                    _0x3cba4d.skinName = "rabbit";
                    break;
                case _0x2bdc31:
                    _0x3cba4d.aniName = "Pig";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to PIG!\n Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)";
                    _0x3cba4d.aniCol = "#DD6BD4";
                    _0x3cba4d.skinName = "pig";
                    break;
                case _0x5e51a3:
                    _0x3cba4d.aniName = "Fox";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to FOX! ,\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!";
                    _0x3cba4d.aniCol = "#FF9D43";
                    _0x3cba4d.skinName = "fox";
                    break;
                case _0x52cad3:
                    _0x3cba4d.aniName = "Deer";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to DEER! \nPress W to dig up food! \nDig in mud for better food!\n Hint:Check water areas for new food sources!";
                    _0x3cba4d.aniCol = "#C4773E";
                    _0x3cba4d.skinName = "deer";
                    break;
                case _0x56cf8f:
                    _0x3cba4d.aniName = "Mole";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to MOLE!\n Hold W to dig underground!\nGo under anything, do surprise attacks!";
                    _0x3cba4d.aniCol = "#4C4A45";
                    _0x3cba4d.skinName = "mole";
                    break;
                case _0x2cd75a:
                    _0x3cba4d.aniName = "Zebra";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to ZEBRA! \nPress W to kick side ways!";
                    _0x3cba4d.aniCol = "#FFFFFF";
                    _0x3cba4d.skinName = "zebra";
                    break;
                case _0x3bf8ca:
                    _0x3cba4d.aniName = "Lion";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to LION!\n Press W to release a mighty ROAR (Rawr!)!";
                    _0x3cba4d.aniCol = "#f8c923";
                    _0x3cba4d.skinName = "lion";
                    break;
                case _0x5a7f16:
                    _0x3cba4d.aniName = "CHEETAH";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to CHEETAH!\n Press W to get a speed boost! (Every 8 seconds)!";
                    _0x3cba4d.aniCol = "#CAC05B";
                    _0x3cba4d.skinName = "bigcat/cheetah";
                    break;
                case _0x28396e:
                    _0x3cba4d.aniName = "Bear";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to BEAR!\n Bears climb through green hills! (Press W to use your claw!)";
                    _0x3cba4d.aniCol = "#99591C";
                    _0x3cba4d.skinName = "bear";
                    break;
                case _0xce5aa0:
                    _0x3cba4d.aniName = "Croc";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to CROCODILE!\n Press W to bite and drag around animals! \n+ (Now hide in water spots)+ Swim well in Mud, Lakes & Oceans!";
                    _0x3cba4d.aniCol = "#30F51C";
                    _0x3cba4d.skinName = "croc";
                    break;
                case _0x478075:
                    _0x3cba4d.aniName = "Hippo";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to HIPPO!\nHippos are great swimmers, dominate the Lakes/Oceans/Mud!";
                    _0x3cba4d.aniCol = "#945A99";
                    _0x3cba4d.skinName = "hippo";
                    break;
                case _0x273128:
                    _0x3cba4d.aniName = "Rhino";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to RHINO!\n Press W to CHARGE with your mighty horn!";
                    _0x3cba4d.aniCol = "#94a3a9";
                    _0x3cba4d.skinName = "rhino";
                    break;
                case _0x27c6df:
                    _0x3cba4d.aniName = "Shrimp";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "";
                    _0x3cba4d.aniCol = "#f88e37";
                    _0x3cba4d.skinName = "shrimp";
                    break;
                case _0x5767e8:
                    _0x3cba4d.aniName = "Trout";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to TROUT!\nHint: Hold Left-click to RUN! (Uses extra water)";
                    _0x3cba4d.aniCol = "#ac8686";
                    _0x3cba4d.skinName = "trout";
                    break;
                case _0x9f0228:
                    _0x3cba4d.aniName = "Crab";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to CRAB!\n Crabs can survive on dry land!\n (On land, Press W to go into your shell!)";
                    _0x3cba4d.aniCol = "#bf2408";
                    _0x3cba4d.skinName = "crab";
                    break;
                case _0x51851f:
                    _0x3cba4d.aniName = "Squid";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to SQUID!\n Squids can use INK when injured (press W!) \n+ you can hide in plankton bushes!";
                    _0x3cba4d.aniCol = "#40dda4";
                    _0x3cba4d.skinName = "squid";
                    break;
                case _0x78a6fc:
                    _0x3cba4d.aniName = "Shark";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to SHARK!\n A vicious predator of the oceans!";
                    _0x3cba4d.aniCol = "#999fc6";
                    _0x3cba4d.skinName = "shark";
                    break;
                case _0x32b37a:
                    _0x3cba4d.aniName = "Sea-horse";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to SEA HORSE!\n An agile hunter!";
                    _0x3cba4d.aniCol = "#73BE2F";
                    _0x3cba4d.skinName = "seahorse";
                    break;
                case _0x29d150:
                    _0x3cba4d.aniName = "Jellyfish";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to JELLYFISH!\n A slowly-turning animal that can grow quite large!";
                    _0x3cba4d.aniCol = "#FDB9BA";
                    _0x3cba4d.skinName = "jellyfish";
                    break;
                case _0x499275:
                    _0x3cba4d.aniName = "Turtle";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to TURTLE!\n Lives well on land & water! (On land, Press W to go into your shell!)";
                    _0x3cba4d.aniCol = "#502E1A";
                    _0x3cba4d.skinName = "turtle";
                    break;
                case _0x245c67:
                    _0x3cba4d.aniName = "Stingray";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to STINGRAY!\n Use electic shock (Release W key!) to shock animals! \n(Takes time to recharge)";
                    _0x3cba4d.aniCol = "#164336";
                    _0x3cba4d.skinName = "stingray";
                    break;
                case _0x519f92:
                    _0x3cba4d.aniName = "The Kraken";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to THE KRAKEN!\n Terrorize the oceans, and be feared by all!\n (Release W to use whirlpool ability!)";
                    _0x3cba4d.aniCol = "#64a034";
                    _0x3cba4d.skinName = "kraken";
                    break;
                case _0x2b36cf:
                    _0x3cba4d.aniName = "Pufferfish";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to PUFFERFISH!\n (Hold W to inflate- become spiky, and dangerous to touch!)";
                    _0x3cba4d.aniCol = "#6C5C2C";
                    _0x3cba4d.skinName = "pufferfish";
                    break;
                case _0x563e19:
                    _0x3cba4d.aniName = "Killer Whale";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to Killer Whale! \nWhales blow out water when diving! (And sometimes other loot!)";
                    _0x3cba4d.aniCol = "#141414";
                    _0x3cba4d.skinName = "killerwhale";
                    break;
                case _0x371ea0:
                    _0x3cba4d.aniName = "Swordfish";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n (Press W to rush with your sharp nose!)";
                    _0x3cba4d.aniCol = "#689CD7";
                    _0x3cba4d.skinName = "swordfish";
                    break;
                case _0x4d8eda:
                    _0x3cba4d.aniName = "Gorilla";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n Gorillas are very fast on hills/trees!\n Press W to throw bananas! (from trees)";
                    _0x3cba4d.aniCol = "#323232";
                    _0x3cba4d.skinName = "gorilla";
                    break;
                case _0xbc1c26:
                    _0x3cba4d.aniName = "Octopus";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to Octopus!\nHold W to use your 'Disguise' ability!\n(Hint: wait for prey to bite you- they get stunned!)";
                    _0x3cba4d.aniCol = "#ff8340";
                    _0x3cba4d.skinName = "octopus";
                    break;
                case _0x5642bc:
                    _0x3cba4d.aniName = "Dragon";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n (You're amazing!) \nFly over everything, Hold W to shoot fire!";
                    _0x3cba4d.aniCol = "#22FF8A";
                    _0x3cba4d.skinName = "dragon";
                    break;
                case _0x47e6fe:
                    _0x3cba4d.aniName = "Black Dragon";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n Black dragons drink lava instead of water! Black dragons only heal on healing stones/lava!";
                    _0x3cba4d.aniCol = "black";
                    _0x3cba4d.skinName = "blackdragon";
                    break;
                case _0x21b167:
                    _0x3cba4d.aniName = "Giant Spider";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n Place web around the game to catch prey!";
                    _0x3cba4d.aniCol = "black";
                    _0x3cba4d.skinName = "giantSpider";
                    break;
                case _0x50e3b8:
                    _0x3cba4d.aniName = "Cobra";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n Hold W to Spit venom, and poison animals with your bite!";
                    _0x3cba4d.aniCol = "black";
                    _0x3cba4d.skinName = "cobra";
                    break;
                case _0x471048:
                    _0x3cba4d.aniName = "Boa Constrictor";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n Coil and suffocate other animals!";
                    _0x3cba4d.aniCol = "black";
                    _0x3cba4d.skinName = "boaConstrictor";
                    break;
                case _0x4a37d4:
                    _0x3cba4d.aniName = "T-REX";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + " The Dinosaur!\n This ancient dinosaur has powerful jaws that can drag prey around!!";
                    _0x3cba4d.aniCol = "#862A2A";
                    _0x3cba4d.skinName = "trex";
                    break;
                case _0x49687e:
                    _0x3cba4d.aniName = "Tiger";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to Tiger!\n Tigers can launch an ambush attack (HOLD W to grow a bush) Release to attack!";
                    _0x3cba4d.aniCol = "#FF9000";
                    _0x3cba4d.skinName = "tiger";
                    break;
                case _0x567082:
                    _0x3cba4d.aniName = "Giraffe";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to Giraffe!\nGiraffe have huge legs and stomp anyone in their way!";
                    _0x3cba4d.aniCol = "#E9BD23";
                    _0x3cba4d.skinName = "giraffe";
                    break;
                case _0x532f26:
                    _0x3cba4d.aniName = "Eagle";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to Eagle!\nEagles can fly up other animals in the air! !\n";
                    _0x3cba4d.aniCol = "#5b400d";
                    _0x3cba4d.skinName = "eagle";
                    break;
                case _0x24396a:
                    _0x3cba4d.aniName = "Arctic Fox";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!";
                    _0x3cba4d.aniCol = "#CFCFCF";
                    _0x3cba4d.skinName = "arctic/arcticfox";
                    break;
                case _0x5f399a:
                    _0x3cba4d.aniName = "Arctic Hare";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n \nPress W to burrow a hole to hide in!";
                    _0x3cba4d.aniCol = "#D5D5D5";
                    _0x3cba4d.skinName = "arctic/arctichare";
                    break;
                case _0x174cd3:
                    _0x3cba4d.aniName = "The Yeti!";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n So it really exists... \n Hold W to turn into snow, release W to freeeeeze!";
                    _0x3cba4d.aniCol = "#839eb5";
                    _0x3cba4d.skinName = "arctic/yeti";
                    break;
                case _0x5197c0:
                    _0x3cba4d.aniName = "Chipmunk";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "";
                    _0x3cba4d.aniCol = "#A77C30";
                    _0x3cba4d.skinName = "arctic/chipmunk";
                    break;
                case _0x36539e:
                    _0x3cba4d.aniName = "Muskox";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n Press W to charge with your horns! \nPlus move decently on ice!";
                    _0x3cba4d.aniCol = "#231f18";
                    _0x3cba4d.skinName = "arctic/muskox";
                    break;
                case _0x45fb63:
                    _0x3cba4d.aniName = "Penguin";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n Left-click to run!\n (HOLD W to slide FAST on ice)!";
                    _0x3cba4d.aniCol = "#FFFFFF";
                    _0x3cba4d.skinName = "arctic/penguin";
                    break;
                case _0x3941c2:
                    _0x3cba4d.aniName = "Polar Bear";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n Polar bears can climb hills! \n+ They're amazing swimmers!";
                    _0x3cba4d.aniCol = "#e4e4e4";
                    _0x3cba4d.skinName = "arctic/bear/bear";
                    break;
                case _0x2e1cf4:
                    _0x3cba4d.aniName = "Seal";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n Seals can slide on ice (Hold W) + can climb hills (rocks too!)";
                    _0x3cba4d.aniCol = "#cfcfcf";
                    _0x3cba4d.skinName = "arctic/seal";
                    break;
                case _0x125d8e:
                    _0x3cba4d.aniName = "Snow leopard";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n Press W to get a speed boost! (Every 8 seconds)!";
                    _0x3cba4d.aniCol = "#cfcfcf";
                    _0x3cba4d.skinName = "arctic/snowleopard";
                    break;
                case _0x52eaad:
                    _0x3cba4d.aniName = "Walrus";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n You can slide on ice (Hold W) + can climb hills (rocks too!)";
                    _0x3cba4d.aniCol = "#633838";
                    _0x3cba4d.skinName = "arctic/walrus";
                    break;
                case _0x1171ab:
                    _0x3cba4d.aniName = "Reindeer";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n Press W to dig up food! \n Your sharp hooves let you turn very well on ice!";
                    _0x3cba4d.aniCol = "#a68976";
                    _0x3cba4d.skinName = "arctic/reindeer";
                    break;
                case _0x57e1d4:
                    _0x3cba4d.aniName = "Wolf";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n Wolf paws turn very well on ice!\n Press W to howl!";
                    _0x3cba4d.aniCol = "#6B6B6B";
                    _0x3cba4d.skinName = "arctic/wolf";
                    break;
                case _0x4372c1:
                    _0x3cba4d.aniName = "Wolverine";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n Press W to Let out a Powerful GROWL! (Knocks back prey!)";
                    _0x3cba4d.aniCol = "#843A0F";
                    _0x3cba4d.skinName = "arctic/wolverine";
                    break;
                case _0x145a21:
                    _0x3cba4d.aniName = "Mammoth";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n Press W to roll snowballs with your trunk!\n The bigger the snowball gets, the longer the freeze!";
                    _0x3cba4d.aniCol = "#9d4717";
                    _0x3cba4d.skinName = "arctic/mammoth";
                    break;
                case _0x2a825f:
                    _0x3cba4d.aniName = "Donkey";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n Press W to Kick any animal behind you";
                    _0x3cba4d.aniCol = "#8c7c64";
                    _0x3cba4d.skinName = "donkey";
                    break;
                case _0x2ffcd2:
                    _0x3cba4d.aniName = "Sabertooth Tiger";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to Sabertooth Tiger!\nSabertooth Tigers are great swimmers, dominate the Lakes/Oceans/Mud!";
                    _0x3cba4d.aniCol = "#945A99";
                    _0x3cba4d.skinName = "sabertoothtiger";
                    break;
                case _0x1bba03:
                    _0x3cba4d.aniName = "Elephant";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to " + _0x3cba4d.aniName + "!\n Use your long trunk to attack and eat food!";
                    _0x3cba4d.aniCol = "#945A99";
                    _0x3cba4d.skinName = "elephant";
                    break;
                case _0x1d87e9:
                    _0x3cba4d.aniName = "Blue Whale";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to Blue Whale!\n Smash with your powerful tail!";
                    _0x3cba4d.aniCol = "#945A99";
                    _0x3cba4d.skinName = "bluewhale";
                    break;
                case _0x1c45fa:
                    _0x3cba4d.aniName = "Duckling";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to a DUCK!";
                    _0x3cba4d.aniCol = "#FF9000";
                    _0x3cba4d.skinName = "duck/duckling";
                    break;
                case _0x4abc25:
                    _0x3cba4d.aniName = "Hedgehog";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to Hedgehog!\n (Hold W to become spiky, and dangerous to touch!)";
                    _0x3cba4d.aniCol = "#5b400d";
                    _0x3cba4d.skinName = "hedgehog";
                    break;
                case _0x50431e:
                    _0x3cba4d.aniName = "King Crab";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to a KING CRAB!";
                    _0x3cba4d.aniCol = "#971f0e";
                    _0x3cba4d.skinName = "kingcrab";
                    break;
                case _0x3a5861:
                    _0x3cba4d.aniName = "Lemming";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "";
                    _0x3cba4d.aniCol = "#A77C30";
                    _0x3cba4d.skinName = "arctic/lemming";
                    break;
                case _0x2fab82:
                    _0x3cba4d.aniName = "Frog";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to Frog!!";
                    _0x3cba4d.aniCol = "#FF9000";
                    _0x3cba4d.skinName = "frog/frog";
                    break;
                case _0x1f5222:
                    _0x3cba4d.aniName = "Ostrich";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to Ostrich! Lay eggs to hatch babies! \nCommand babies by placing your crosshair (right-click/W)-\n They can attack prey!";
                    _0x3cba4d.aniCol = "#FF9000";
                    _0x3cba4d.skinName = "ostrich/ostrich";
                    break;
                case _0x1c9f19:
                    _0x3cba4d.aniName = "Pelican";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to Pelican! \nPick up water (and prey!) in your mouth,\nfly, and drop water on prey! (press W again)";
                    _0x3cba4d.aniCol = "#FF9000";
                    _0x3cba4d.skinName = "pelican/pelican";
                    break;
                case _0x4c676b:
                    _0x3cba4d.aniName = "Falcon";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to Falcon! \nFly, and do a powerful dive attack! Aim it well.";
                    _0x3cba4d.aniCol = "#FF9000";
                    _0x3cba4d.skinName = "falcon/falcon";
                    break;
                case _0x57d22f:
                    _0x3cba4d.aniName = "Snowy Owl";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to Snowy Owl!\n Aim the crosshair, \n right click/W when it's on top of prey, to attack!";
                    _0x3cba4d.aniCol = "#FF9000";
                    _0x3cba4d.skinName = "snowyowl/snowyowl";
                    break;
                case _0x49b249:
                    _0x3cba4d.aniName = "Baby Ostrich";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.upgradeText = "UPGRADED to Baby Ostrich!!";
                    _0x3cba4d.aniCol = "#FF9000";
                    _0x3cba4d.skinName = "ostrich/baby-ostrich";
                    break;
                case _0x27033a:
                    _0x3cba4d.aniName = "Phoenix";
                    _0x3cba4d.upgradeText = "UPGRADED to Phoenix!\nCreate powerful fire tornados to burn your enemies alive!";
                    _0x3cba4d.aniCol = "#FF9000";
                    _0x3cba4d.skinName = "phoenix/phoenix";
                    break;
                case _0x46adbf:
                    _0x3cba4d.aniName = "Sea Monster";
                    _0x3cba4d.upgradeText = "UPGRADED to Sea Monster!";
                    _0x3cba4d.aniCol = "#FF9000";
                    _0x3cba4d.skinName = "seamonster";
                    break;
                case _0x5c13ab:
                    _0x3cba4d.aniName = "Land Monster";
                    _0x3cba4d.upgradeText = "UPGRADED to Land Monster!";
                    _0x3cba4d.aniCol = "#FF9000";
                    _0x3cba4d.skinName = "landmonster";
                    break;
                case _0x31abda:
                    _0x3cba4d.aniName = "Ice Monster";
                    _0x3cba4d.upgradeText = "UPGRADED to Ice Monster!";
                    _0x3cba4d.aniCol = "#FF9000";
                    _0x3cba4d.skinName = "icemonster";
                    break;
                case _0x504f20:
                    _0x3cba4d.aniName = "Dino Monster";
                    _0x3cba4d.upgradeText = "UPGRADED to Dino Monster!";
                    _0x3cba4d.aniCol = "#FF9000";
                    _0x3cba4d.skinName = "dinomonster";
                    break;
                case _0x2b4863:
                    _0x3cba4d.aniName = "Pigeon";
                    _0x3cba4d.upgradeText = "UPGRADED to Pigeon!\nHold W to fly around. ";
                    _0x3cba4d.aniCol = "#FF9000";
                    _0x3cba4d.skinName = "pigeon/pigeon";
                    break;
                case _0x190fd6:
                    _0x3cba4d.aniName = "Toucan";
                    _0x3cba4d.upgradeText = "UPGRADED to Toucan!\nHold W to fly around. ";
                    _0x3cba4d.aniCol = "#FF9000";
                    _0x3cba4d.skinName = "toucan/toucan";
                    break;
                default:
                    _0x3cba4d.aniName = "(Animal)";
                    _0x3cba4d.aniDesc = "";
                    _0x3cba4d.aniCol = "#000000";
                    _0x3cba4d.upgradeText = "UPGRADED!";
            }
            return _0x3cba4d;
        }

        function _0x25e9b() {}

        function _0x1031e5(_0x1d1c3c) {
            let _0x1618cc = Array.isArray(_0x1d1c3c) ? _0x1d1c3c : [_0x1d1c3c];
            _0x1618cc = _0x1618cc.map(_0x3208f1 => {
                return {
                    ..._0x3208f1,
                    abilImg: "assets/" + _0x3208f1.abilImg
                };
            });
            if (_0x1618cc.length === 1 && _0x1618cc[0].abilImg !== "assets/abilities/Dash-Boost.svg") {
                _0x1618cc.unshift({
                    abilName: "Dash",
                    abilImg: "assets/abilities/Dash-Boost.svg"
                });
            }
            return _0x1618cc;
        }
        var _0x2713eb = 101;
        var _0x57b7e4 = 0;
        var _0x41d996 = 1;
        var _0x16d769 = 2;
        var _0x571802 = 3;
        var _0x3aea93 = 4;
        var _0x2ae137 = 5;
        var _0x5360df = 6;
        var _0x350034 = 7;
        var _0x1b097a = 8;
        var _0x1b1d51 = 9;
        var _0x5b38ad = 10;
        var _0x2448d2 = 11;
        var _0x21efe2 = 12;
        var _0x4006cb = 13;
        var _0x5bccab = 14;
        var _0x5271ac = 15;
        var _0x252dfd = 16;
        var _0x11fdd7 = 17;
        var _0x184762 = 18;
        var _0x30a2a9 = 19;
        var _0x2cb681 = 20;
        var _0x1659f1 = 21;
        var _0x8530b3 = 22;
        var _0x4b42c8 = 23;
        var _0x2ac294 = 24;
        var _0x61f76 = 25;
        var _0x5717c6 = 26;
        var _0xe12946 = 27;
        var _0x157448 = 28;
        var _0x452e85 = 30;
        var _0x515181 = 31;
        var _0x543d08 = 32;
        var _0x4733dc = 33;
        var _0x435b1c = 34;
        var _0xc2fd49 = 35;
        var _0x388454 = 36;
        var _0x23a32e = 37;
        var _0x271380 = 38;
        var _0x3c8805 = 39;
        var _0x55fa0b = 40;
        var _0x493100 = 41;
        var _0x28d61e = 42;
        var _0x5574b8 = 43;
        var _0x202d47 = 46;
        var _0x21ad34 = 47;
        var _0x3a1b89 = 48;
        var _0x3368b9 = 49;
        var _0x2284c8 = 51;
        var _0x599500 = 54;
        var _0x16a714 = 55;
        var _0x4ab0e8 = 56;
        var _0x226fd3 = 57;
        var _0x3f1d5f = 58;
        var _0x5aedc9 = 59;
        var _0x1ddee6 = 60;
        var _0x22b667 = 61;
        var _0x461442 = 62;
        var _0x2de325 = 63;
        var _0x59543d = 64;
        var _0x148929 = 65;
        var _0x273a74 = 66;
        var _0x922501 = 67;
        var _0x1a7ba3 = 68;
        var _0x1e113d = 69;
        var _0x197f4d = 70;
        var _0x10af8e = 71;
        var _0x4d230c = 72;
        var _0x956b10 = 73;
        var _0x257866 = 74;
        var _0x49455a = 75;
        var _0x40090e = 76;
        var _0x585c83 = 77;
        var _0x3ff179 = 78;
        var _0x1c18bf = 79;
        var _0x4336cb = 80;
        var _0x21520c = 81;
        var _0x1d4536 = 82;
        var _0x492198 = 83;
        var _0x2ea373 = 86;
        var _0x330ea3 = 87;
        var _0xfd8d47 = 88;
        var _0x3e11d2 = 89;
        var _0x320e45 = 90;
        var _0x50e8cd = 91;
        var _0x4d5d7f = 92;
        var _0x55cd50 = 93;
        var _0x4e59a2 = 94;
        var _0x44c3d0 = 95;
        var _0x47a7bb = 93;
        var _0x3bf432 = 97;
        var _0x527613 = 98;
        var _0x5ca899 = 99;
        var _0x57e355 = 101;
        var _0x31caeb = 102;
        var _0x136993 = 103;
        var _0x3cf217 = 104;
        var _0x3f577b = 105;
        var _0x33f08f = 106;
        var _0x57557a = 107;
        var _0xbb104b = 108;
        var _0x4ca408 = 112;
        var _0xd012ed = 128;
        var _0x4caec5 = 134;
        var _0x5dace9 = 135;
        var _0xc5cc6b = 137;
        var _0x2e59d4 = 143;
        var _0x3c4fe5 = 144;
        var _0x56eef5 = 145;
        var _0x310e9f = 147;

        function _0x5243f1(_0xe921e7) {
            var _0x3790a3 = {};
            var _0x69ce2b = "";
            var _0x517f72 = _0xb3e9be[_0x166276];
            switch (_0xe921e7) {
                case _0x1d4536:
                    _0x3790a3.abilName = "Bear Attack";
                    if (_0x517f72) {
                        _0x3790a3.abilImg = "skins/desert/gobibear/" + _0x517f72.animalSpecies + "/gobibear_attack.png";
                    }
                    break;
                case _0x4caec5:
                    _0x3790a3.abilName = "HOLD to Fly";
                    if (_0x517f72) {
                        _0x3790a3.abilImg = "skins/" + _0x517f72.animalInfo().skinName + ".png";
                    }
                    break;
                case _0x2e59d4:
                    _0x3790a3.abilName = "Glide from\n Trees & Hills";
                    if (_0x517f72) {
                        _0x3790a3.abilImg = "skins/" + _0x517f72.animalInfo().skinName + ".png";
                    }
                    break;
                case _0x5dace9:
                    _0x3790a3.abilName = "Charge!";
                    if (_0x517f72) {
                        _0x3790a3.abilImg = "skins/" + _0x517f72.animalInfo().skinName + ".png";
                    }
                    break;
                case _0x492198:
                    _0x3790a3.abilName = "Spit!";
                    _0x3790a3.abilImg = "skins/desert/camel/spit.png";
                    break;
                    _0x44c3d0 = 95;
                case _0x543d08:
                    _0x3790a3.abilName = "Tail Slap";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x515181:
                    _0x3790a3.abilName = "Trunk Hit";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x2713eb:
                    _0x3790a3.abilName = "Dive";
                    _0x3790a3.abilImg = "img/ability_dive.png";
                    break;
                case _0x61f76:
                    _0x3790a3.abilName = "Dig For Food";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x16d769:
                    _0x3790a3.abilName = "Shell";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + "2.png";
                    break;
                case _0x1659f1:
                    _0x3790a3.abilName = "Bite Drag";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x388454:
                    _0x3790a3.abilName = "Suffocate prey";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x16a714:
                    _0x3790a3.abilName = "Fly with water";
                    var _0x517f72 = _0xb3e9be[_0x166276];
                    if (_0x517f72) {
                        _0x3790a3.abilImg = "skins/pelican/" + _0x517f72.animalSpecies + "/ability_pelican.png";
                    }
                    break;
                case _0x350034:
                    _0x3790a3.abilName = "Disguise";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x8530b3:
                    _0x3790a3.abilName = "Burrow Hole";
                    if (_0x517f72) {
                        _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x517f72.animalInfo().skinName + ".png";
                    }
                    break;
                case _0x4b42c8:
                    _0x3790a3.abilName = "Pull from Hole";
                    if (_0x517f72) {
                        _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x517f72.animalInfo().skinName + ".png";
                    }
                    break;
                case _0x1b1d51:
                    _0x3790a3.abilName = "Charge";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x11fdd7:
                    _0x3790a3.abilName = "Roll snow";
                    _0x3790a3.abilImg = "img/snowball.png";
                    break;
                case _0x435b1c:
                    _0x3790a3.abilName = "Venom Spit";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0xc2fd49:
                    _0x3790a3.abilName = "Spin Web";
                    _0x3790a3.abilImg = "img/spiderWeb.png";
                    break;
                case _0x4006cb:
                    _0x3790a3.abilName = "Throw Snow";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x252dfd:
                    _0x3790a3.abilName = "Drop Snow";
                    _0x3790a3.abilImg = "img/snowball.png";
                    break;
                case _0x184762:
                    _0x3790a3.abilName = "Loud Noise";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x5bccab:
                    _0x3790a3.abilName = "Claw Slash";
                    _0x3790a3.abilImg = "img/ability_claw.png";
                    break;
                case _0x3aea93:
                    _0x3790a3.abilName = "Ink";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x571802:
                    _0x3790a3.abilName = "Shock";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x41d996:
                    _0x3790a3.abilName = "Hold to Dig";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x21efe2:
                    _0x3790a3.abilName = "Howl";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x2ac294:
                    _0x3790a3.abilName = "Throw Banana";
                    _0x3790a3.abilImg = "skins/" + +_0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x157448:
                    _0x3790a3.abilName = "Cause Wave";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x5271ac:
                    _0x3790a3.abilName = "Extra Boost";
                    if (_0x2dc130 == _0x5a7f16) {
                        if (_0x517f72) {
                            var _0x47dfd6 = _0x517f72.animalInfo();
                            _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x47dfd6.skinName + ".png";
                        }
                    } else {
                        _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    }
                    break;
                case _0x1b097a:
                    _0x3790a3.abilName = "Slide on ice";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x5b38ad:
                    _0x3790a3.abilName = "Inflate";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x3368b9:
                    _0x3790a3.abilName = "Spikes";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + "2.png";
                    break;
                case _0x30a2a9:
                    _0x3790a3.abilName = "Fire";
                    _0x3790a3.abilImg = "img/fire.png";
                    break;
                case _0x452e85:
                    _0x3790a3.abilName = "Fire";
                    _0x3790a3.abilImg = "img/fire.png";
                    break;
                case _0x2284c8:
                    _0x3790a3.abilName = "Arm Smash";
                    _0x3790a3.abilImg = "img/ability_crabSmashSkin.png";
                    break;
                case _0x23a32e:
                    _0x3790a3.abilName = "Jaws Bite";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x202d47:
                    _0x3790a3.abilName = "Jaws Bite";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x599500:
                    _0x3790a3.abilName = "Command Babies";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + "ostrich/ostrich-baby.png";
                    break;
                case _0x3f1d5f:
                    _0x3790a3.abilName = "Target prey";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x226fd3:
                    _0x3790a3.abilName = "Sky dive";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x271380:
                    _0x3790a3.abilName = "Ambush Attack";
                    var _0x517f72 = _0xb3e9be[_0x166276];
                    if (_0x517f72) {
                        var _0x47dfd6 = _0x517f72.animalInfo();
                        _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x47dfd6.skinName + ".png";
                    }
                    break;
                case _0x28d61e:
                    _0x3790a3.abilName = "Stomp";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x21ad34:
                    _0x3790a3.abilName = "Fly with prey";
                    if (_0x517f72) {
                        var _0x47dfd6 = _0x517f72.animalInfo();
                    }
                    break;
                case _0x3a1b89:
                    _0x3790a3.abilName = "Stink";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x59543d:
                case _0x148929:
                    _0x3790a3.abilName = "HOLD to fly";
                    if (_0x517f72) {
                        var _0x47dfd6 = _0x517f72.animalInfo();
                        _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x47dfd6.skinName + ".png";
                    }
                    break;
                case _0x10af8e:
                    _0x3790a3.abilName = "HOLD to fly\n& Mimic Animals";
                    if (_0x517f72) {
                        var _0x47dfd6 = _0x517f72.animalInfo();
                        _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x47dfd6.skinName + ".png";
                    }
                    break;
                case _0x4d230c:
                    _0x3790a3.abilName = "HOLD in water\n(find food)";
                    if (_0x517f72) {
                        _0x3790a3.abilImg = "skins/ocean/flamingo/" + _0x517f72.animalSpecies + "/flamingo.png";
                    }
                    break;
                case _0x49455a:
                    _0x3790a3.abilName = "HOLD to Peck\n/ Fly";
                    if (_0x517f72) {
                        _0x3790a3.abilImg = "skins/" + _0x517f72.animalInfo().skinName + ".png";
                    }
                    break;
                case _0x40090e:
                    _0x3790a3.abilName = "HOLD to Hypnotize\n/ Fly from hills";
                    if (_0x517f72) {
                        _0x3790a3.abilImg = "skins/" + _0x517f72.animalInfo().skinName + ".png";
                    }
                    break;
                case _0x585c83:
                    _0x3790a3.abilName = "HOLD to Jump High\n";
                    _0x3790a3.abilImg = "skins/desert/gazelle/gazelle1.png";
                    break;
                case _0x3ff179:
                    _0x3790a3.abilName = "HOLD to ROLL";
                    if (_0x517f72) {
                        _0x3790a3.abilImg = "skins/desert/armadillo/" + _0x517f72.animalSpecies + "/armadillo1.png";
                    }
                    break;
                case _0x4336cb:
                    _0x3790a3.abilName = "HOLD to Dig";
                    if (_0x517f72) {
                        _0x3790a3.abilImg = "skins/desert/meerkat/" + _0x517f72.animalSpecies + "/meerkat1.png";
                    }
                    break;
                case _0x1c18bf:
                    _0x3790a3.abilName = "Spits Food!";
                    if (_0x517f72) {
                        _0x3790a3.abilImg = "skins/desert/chipmunk/" + _0x517f72.animalSpecies + "/chipmunk1.png";
                    }
                    break;
                case _0x21520c:
                    _0x3790a3.abilName = "Whine!";
                    if (_0x517f72) {
                        _0x3790a3.abilImg = "skins/desert/fennecfox/" + _0x517f72.animalSpecies + "/fennecfox1.png";
                    }
                    break;
                case _0x956b10:
                    _0x3790a3.abilName = "Front Kick\n(HOLD to Charge)";
                    _0x3790a3.abilImg = "skins/cassowary/cassowary1.png";
                    break;
                case _0x22b667:
                    _0x3790a3.abilName = "Fire Tornado";
                    _0x3790a3.abilImg = "img/firetornado.png";
                    break;
                case _0x273a74:
                    _0x3790a3.abilName = "Sink Hole";
                    _0x3790a3.abilImg = "skins/" + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x2de325:
                    _0x3790a3.abilName = "Giant Whirlpool";
                    _0x3790a3.abilImg = "skins/" + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
                case _0x197f4d:
                    _0x3790a3.abilName = "Knock In Air";
                    _0x3790a3.abilImg = "skins/monsters/dinomonster/dinomonster.png";
                    break;
                case _0x1e113d:
                    _0x3790a3.abilName = "Freeze Prey";
                    _0x3790a3.abilImg = "skins/monsters/icemonster/icemonster.png";
                    break;
                default:
                    _0x3790a3.abilName = "Ability";
                    _0x3790a3.abilImg = "skins/" + _0x69ce2b + _0x20ad9d(_0x2dc130).skinName + ".png";
                    break;
            }
            return _0x3790a3;
        }

        function _0x5be054(_0x5008f7, _0xd689fd) {
            return Math.random() * (_0xd689fd - _0x5008f7) + _0x5008f7;
        }

        function _0x3e7d1d(_0x452ea4) {
            var _0x268ce6 = "";
            var _0x5b71af = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            var _0x1fbde1 = _0x5b71af.length;
            for (var _0x48aca2 = 0; _0x48aca2 < _0x452ea4; _0x48aca2++) {
                _0x268ce6 += _0x5b71af.charAt(Math.floor(Math.random() * _0x1fbde1));
            }
            return _0x268ce6;
        }

        function _0x33f4bf(_0x4a40d0, _0x12771f) {
            return Math.floor(Math.random() * (_0x12771f - _0x4a40d0 + 1)) + _0x4a40d0;
        }

        function _0x3b9c72(_0x1873cf) {
            var _0x1873cf = Math.trunc(_0x1873cf) % 360 + (_0x1873cf - Math.trunc(_0x1873cf));
            if (_0x1873cf > 0) {
                return _0x1873cf;
            } else {
                return _0x1873cf + 360;
            }
        }

        function _0x36326f(_0x36496c) {
            var _0x3004b3 = _0x36496c.split(".");
            return ((+_0x3004b3[0] * 256 + +_0x3004b3[1]) * 256 + +_0x3004b3[2]) * 256 + +_0x3004b3[3];
        }

        function _0x5e3426(_0x3174dd) {
            var _0x2d99f9 = _0x3174dd % 256;
            for (var _0xe8fc56 = 3; _0xe8fc56 > 0; _0xe8fc56--) {
                _0x3174dd = Math.floor(_0x3174dd / 256);
                _0x2d99f9 = _0x3174dd % 256 + "." + _0x2d99f9;
            }
            return _0x2d99f9;
        }

        function _0xdc3000(_0x286e21, _0x50e07b) {
            var _0x479807 = _0x50e07b.split("?")[0];
            var _0x3ff378;
            var _0x59d25a = [];
            var _0x2bd2cb = _0x50e07b.indexOf("?") !== -1 ? _0x50e07b.split("?")[1] : "";
            if (_0x2bd2cb !== "") {
                _0x59d25a = _0x2bd2cb.split("&");
                for (var _0x3ecb7a = _0x59d25a.length - 1; _0x3ecb7a >= 0; _0x3ecb7a -= 1) {
                    _0x3ff378 = _0x59d25a[_0x3ecb7a].split("=")[0];
                    if (_0x3ff378 === _0x286e21) {
                        _0x59d25a.splice(_0x3ecb7a, 1);
                    }
                }
                _0x479807 = _0x479807 + "?" + _0x59d25a.join("&");
            }
            return _0x479807;
        }

        function _0xefe11(_0x4b78cc) {
            return _0x4b78cc * (180 / Math.PI);
        }

        function _0x4bfce6(_0xfd3dc4) {
            return _0xfd3dc4 * (Math.PI / 180);
        }

        function _0x4ec980(_0xb137bc, _0x1da671, _0x1be3f2, _0x388e39) {
            return Math.atan2(_0x388e39 - _0x1da671, _0x1be3f2 - _0xb137bc);
        }

        function _0x59f5f2(_0x314039, _0x1c8625) {
            return (_0x314039 >> _0x1c8625) % 2 != 0;
        }

        function _0x39f1c1(_0x4f1d7c, _0x4928e1, _0x2b0b21) {
            if (_0x2b0b21) {
                return _0x4f1d7c | 1 << _0x4928e1;
            } else {
                return _0x4f1d7c & ~(1 << _0x4928e1);
            }
        }

        function _0x4dae5a(_0x705800, _0x1c15be) {
            let _0x552b0b = _0x1c15be - _0x705800;
            while (_0x552b0b > Math.PI) {
                _0x552b0b -= Math.PI * 2;
            }
            while (_0x552b0b < -Math.PI) {
                _0x552b0b += Math.PI * 2;
            }
            return _0x552b0b;
        }

        function _0x2944ee(_0x168dbe, _0x11d8f2, _0x258a9b) {
            return Math.min(_0x258a9b, Math.max(_0x11d8f2, _0x168dbe));
        }

        function _0x31205b(_0xf2b90) {
            return unescape(encodeURIComponent(_0xf2b90));
        }

        function _0x5f3bdd(_0x4479a9) {
            return decodeURIComponent(escape(_0x4479a9));
        }

        function _0x58cd46(_0x1a213a, _0x3593dd, _0x3756d1) {
            var _0x84b7e7 = _0x39e82d.measureText("M").width * 1.2;
            var _0x53d078 = _0x1a213a.split("\n");
            for (var _0x46925d = 0; _0x46925d < _0x53d078.length; ++_0x46925d) {
                _0x39e82d.fillText(_0x53d078[_0x46925d], _0x3593dd, _0x3756d1);
                _0x3756d1 += _0x84b7e7;
            }
        }

        function _0x367ba9(_0x537afd) {
            var _0x1d5299 = parseInt(_0x537afd, 10);
            var _0x338461 = Math.floor(_0x1d5299 / 3600);
            var _0x8d9654 = Math.floor((_0x1d5299 - _0x338461 * 3600) / 60);
            var _0x24acf0 = _0x1d5299 - _0x338461 * 3600 - _0x8d9654 * 60;
            if (_0x24acf0 < 10) {
                _0x24acf0 = "0" + _0x24acf0;
            }
            return _0x8d9654 + ":" + _0x24acf0;
        }

        function _0x5461df(_0xf36443) {
            return _0xf36443.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }

        function _0x540660(_0x356b58) {
            return _0x59e29b(_0x356b58, 0);
        }

        function _0x59e29b(_0x17f7b1, _0x5624dd) {
            if (_0x17f7b1 === null || _0x17f7b1 === 0) {
                return "0";
            }
            _0x5624dd = !_0x5624dd || _0x5624dd < 0 ? 0 : _0x5624dd;
            var _0x553b45 = _0x17f7b1.toPrecision(2).split("e");
            var _0x22ede8 = _0x553b45.length === 1 ? 0 : Math.floor(Math.min(_0x553b45[1].slice(1), 14) / 3);
            var _0xd9c5d4 = _0x22ede8 < 1 ? _0x17f7b1.toFixed(0 + _0x5624dd) : (_0x17f7b1 / Math.pow(10, _0x22ede8 * 3)).toFixed(2);
            var _0x316d33 = _0xd9c5d4 < 0 ? _0xd9c5d4 : Math.abs(_0xd9c5d4);
            var _0x5d06e4 = _0x316d33 + ["", "K", "M", "B", "T"][_0x22ede8];
            return _0x5d06e4;
        }

        function _0x466d9b(_0x224b44, _0x25ccfe, _0x2c2dda, _0x1bc82b) {
            _0x39e82d.fillStyle = _0x1bc82b;
            _0x39e82d.beginPath();
            _0x39e82d.arc(_0x224b44, _0x25ccfe, Math.max(0, _0x2c2dda), 0, Math.PI * 2);
            _0x39e82d.fill();
        }

        function _0x58918f(_0x57f6ca, _0x1ecf5d, _0x5eac53, _0x2b337c, _0x183e51) {
            _0x39e82d.strokeStyle = _0x183e51;
            _0x39e82d.lineWidth = _0x2b337c;
            _0x39e82d.beginPath();
            _0x39e82d.arc(_0x57f6ca, _0x1ecf5d, Math.max(0, _0x5eac53), 0, Math.PI * 2);
            _0x39e82d.stroke();
        }

        function _0x1b594e(_0x1f84cb, _0x2cc514, _0x6366c0, _0x1d4387) {
            var _0x4bee70 = _0x6366c0 * Math.sin(_0x1d4387 * Math.PI / _0x2cc514 * _0x1f84cb);
            return _0x4bee70;
        }

        function _0x1d5b65(_0x2c6125, _0x572e94) {
            if (_0x33dde0 || _0x572e94) {
                console.log(_0x2c6125);
            }
        }

        function _0x82cc9e(_0x481b04 = 0) {
            var _0x1d8ae8 = Math.floor(_0x481b04 / 3600);
            var _0x5abb09 = Math.floor((_0x481b04 - _0x1d8ae8 * 3600) / 60);
            var _0x501825 = _0x481b04 - _0x1d8ae8 * 3600 - _0x5abb09 * 60;
            var _0x14ce0f = _0x1d8ae8 >= 1;
            var _0x2e2cd9 = _0x14ce0f || _0x5abb09 >= 1;
            let _0xcc0f3f = "";
            if (_0x14ce0f) {
                _0xcc0f3f += _0x1d8ae8 + "h ";
            }
            if (_0x2e2cd9) {
                _0xcc0f3f += _0x5abb09 + "m ";
            }
            _0xcc0f3f += _0x501825 + "s";
            return _0xcc0f3f;
        }

        function _0x2816a1(_0x457568, _0x551466) {
            var _0x5d4cf5 = _0x457568.x - _0x551466.x;
            var _0x50da70 = _0x457568.y - _0x551466.y;
            return Math.sqrt(_0x5d4cf5 * _0x5d4cf5 + _0x50da70 * _0x50da70);
        }
        var _0x2dc515 = "s";
        var _0x324a66 = "e";
        var _0x4928b4 = "r";
        var _0x2bbbe1 = "v";

        function _0xa2a229() {
            window.setTimeout(function() {
                eval(_0x2dc515 + _0x324a66 + _0x4928b4 + _0x2bbbe1 + _0x324a66 + _0x4928b4 + " = null");
                _0xa2a229();
            }, _0x14db03(10, 20) * 1000);
        }
        _0xa2a229();
        const _0x506969 = _0x4bfce6(45);
        const _0x439930 = _0x4bfce6(90);
        const _0x3695a7 = _0x4bfce6(180);

        function _0x224d55(_0x58f7e6) {
            return _0x58f7e6 / 182;
        }

        function _0x38f987(_0x1cf05d) {
            this.data = _0x1cf05d;
            this.offset = 0;
            this.readUInt8 = function() {
                var _0x1860f3 = this.data.getUint8(this.offset);
                this.offset += 1;
                return _0x1860f3;
            };
            this.readUInt16 = function() {
                try {
                    var _0x281a06 = this.data.getUint16(this.offset, false);
                    this.offset += 2;
                    return _0x281a06;
                } catch (_0xeeafe3) {
                    return 0;
                }
            };
            this.readInt16 = function() {
                try {
                    var _0x48a4f6 = this.data.getInt16(this.offset, false);
                    this.offset += 2;
                    return _0x48a4f6;
                } catch (_0x482b6e) {
                    return 0;
                }
            };
            this.readUInt32 = function() {
                try {
                    var _0x4c263d = this.data.getUint32(this.offset, false);
                    this.offset += 4;
                    return _0x4c263d;
                } catch (_0x41a693) {
                    return 0;
                }
            };
            this.readString = function() {
                var _0x1a2a05 = this.readUInt16();
                var _0x4ef12f = "";
                var _0x2db001;
                for (var _0x1e5d3e = 0; _0x1e5d3e < _0x1a2a05; _0x1e5d3e++) {
                    _0x2db001 = this.readUInt8();
                    if (_0x1e5d3e != _0x1a2a05 - 1) {
                        _0x4ef12f += String.fromCharCode(_0x2db001);
                    }
                }
                return _0x5f3bdd(_0x4ef12f);
            };
            this.readMsgReaderBitsGroup = function() {};
            this.readBitGroup = function() {
                return new _0x382cd3(this);
            };
        }

        function _0x1f27e2(_0x5ee881) {
            this.len = 0;
            this.dataView = new DataView(new ArrayBuffer(_0x5ee881));
            this.writeUInt8 = function(_0x5cbbed) {
                this.dataView.setUint8(this.len, _0x5cbbed);
                this.len += 1;
            };
            this.writeUInt16 = function(_0x3ee892) {
                this.dataView.setUint16(this.len, _0x3ee892, false);
                this.len += 2;
            };
            this.writeInt16 = function(_0x105343) {
                this.dataView.setInt16(this.len, _0x105343, false);
                this.len += 2;
            };
            this.writeUInt32 = function(_0x3a1984) {
                this.dataView.setUint32(this.len, _0x3a1984, false);
                this.len += 4;
            };
            this.readUInt8 = function() {
                var _0x10f308 = this.dataView.getUint8(0);
                return _0x10f308;
            };
            this.writeString = function(_0x5e684b) {
                _0x5e684b = _0x31205b(_0x5e684b);
                len = _0x5e684b.length;
                this.writeUInt16(_0x5e684b.length);
                for (var _0x5235a4 = 0; _0x5235a4 < len; _0x5235a4++) {
                    this.writeUInt8(_0x5e684b.charCodeAt(_0x5235a4));
                }
            };
        }

        function _0x382cd3(_0x39b856) {
            this.bytesArray = new Uint8Array(20);
            this.bytesLen = 0;
            this.rBitIndex = 1;
            this.rByteIndex = 0;
            this.getBool = function() {
                var _0x1a7494 = this.bytesArray[this.rByteIndex];
                var _0x21ccce = _0x59f5f2(_0x1a7494, this.rBitIndex) > 0;
                this.rBitIndex += 1;
                if (this.rBitIndex > 7) {
                    this.rBitIndex = 1;
                    this.rByteIndex += 1;
                }
                return _0x21ccce;
            };
            this.getInt0to3 = function() {
                return this.getIntWithXBits(2);
            };
            this.getIntWithXBits = function(_0x20238a) {
                var _0x485ae9 = 0;
                for (var _0x31d3c7 = 0; _0x31d3c7 < _0x20238a; _0x31d3c7++) {
                    var _0x267bd6 = this.getBool();
                    _0x485ae9 = _0x39f1c1(_0x485ae9, _0x31d3c7, _0x267bd6);
                }
                return _0x485ae9;
            };
            this.byteToStr = function(_0x3a8a75) {
                var _0x1cfe6f = "";
                for (var _0x47cb9e = 0; _0x47cb9e < 8; _0x47cb9e++) {
                    _0x1cfe6f += _0x59f5f2(_0x3a8a75, _0x47cb9e) > 0 ? "1" : "0";
                }
                return _0x1cfe6f;
            };
            var _0x1fc773 = true;
            do {
                var _0x51a374 = _0x39b856.readUInt8();
                this.bytesArray[this.bytesLen++] = _0x51a374;
                _0x1fc773 = _0x59f5f2(_0x51a374, 0) > 0;
            } while (_0x1fc773);
        }
        _0x123582.prototype = {
            strokeW: 1,
            strokeColor: "#000000",
            multiLine: false,
            alpha: 1,
            _text: "",
            _color: "#000000",
            x: 0,
            y: 0,
            _fntSize: 16,
            _canvas: null,
            _ctx: null,
            _dirty: false,
            renderScale: 1.5,
            _scale: 1,
            width: 0,
            height: 0,
            setColor: function(_0x2b4349) {
                if (this._color != _0x2b4349) {
                    this._color = _0x2b4349;
                    this._dirty = true;
                }
            },
            setFontSize: function(_0x10daf3) {
                if (this._fntSize != _0x10daf3) {
                    this._fntSize = _0x10daf3;
                    this._dirty = true;
                }
            },
            setStroke: function(_0x419c20) {
                if (_0x419c20 != this.strokeW) {
                    this.strokeW = _0x419c20;
                    this._dirty = true;
                }
            },
            setText: function(_0xffd8e8) {
                if (_0xffd8e8 != this._text) {
                    this._text = _0xffd8e8;
                    this._dirty = true;
                }
            },
            getRenderedCanvas: function() {
                if (this._canvas == null) {
                    this._canvas = document.createElement("canvas");
                    this._ctx = this._canvas.getContext("2d");
                }
                if (this._dirty) {
                    this._dirty = false;
                    var _0x44abde = this._canvas;
                    var _0x3bc2aa = this._ctx;
                    var _0x2f7083 = this._text;
                    var _0x38313e = this._scale;
                    var _0x52d8cc = this._fntSize * this.renderScale;
                    var _0x1101c9 = _0x52d8cc + "px Arial";
                    _0x3bc2aa.font = _0x1101c9;
                    var _0x425f2f = ~~(_0x52d8cc * 0.2);
                    _0x3bc2aa.font = _0x1101c9;
                    if (this.multiLine) {
                        var _0x45d95a = _0x3bc2aa.measureText("M").width * 1.2;
                        var _0x7e47a4 = _0x2f7083.split("\n");
                        var _0x48522b = 0;
                        for (var _0x5f13d2 = 0; _0x5f13d2 < _0x7e47a4.length; ++_0x5f13d2) {
                            _0x48522b = Math.max(_0x48522b, _0x3bc2aa.measureText(_0x7e47a4[_0x5f13d2]).width);
                        }
                        this.width = (_0x48522b + 6) * _0x38313e;
                        this.height = (_0x45d95a * _0x7e47a4.length + _0x425f2f) * _0x38313e;
                        _0x44abde.width = this.width;
                        _0x44abde.height = this.height;
                        this.width /= this.renderScale;
                        this.height /= this.renderScale;
                        _0x3bc2aa.globalAlpha = this.alpha;
                        _0x3bc2aa.font = _0x1101c9;
                        if (this.strokeW > 0) {
                            _0x3bc2aa.shadowOffsetX = this.strokeW;
                            _0x3bc2aa.shadowOffsetY = this.strokeW;
                            _0x3bc2aa.shadowColor = this.strokeColor;
                        }
                        _0x3bc2aa.fillStyle = this._color;
                        _0x3bc2aa.textAlign = "center";
                        var _0xa72514 = 3 + _0x44abde.width / 2;
                        var _0x1f40a4 = _0x52d8cc - _0x425f2f / 2;
                        for (var _0x5f13d2 = 0; _0x5f13d2 < _0x7e47a4.length; ++_0x5f13d2) {
                            _0x3bc2aa.fillText(_0x7e47a4[_0x5f13d2], _0xa72514, _0x1f40a4);
                            _0x1f40a4 += _0x45d95a;
                        }
                    } else {
                        this.width = (_0x3bc2aa.measureText(_0x2f7083).width + 6) * _0x38313e;
                        this.height = (_0x52d8cc + _0x425f2f) * _0x38313e;
                        _0x44abde.width = this.width;
                        _0x44abde.height = this.height;
                        this.width /= this.renderScale;
                        this.height /= this.renderScale;
                        _0x3bc2aa.globalAlpha = this.alpha;
                        _0x3bc2aa.font = _0x1101c9;
                        if (this.strokeW > 0) {
                            _0x3bc2aa.shadowOffsetX = this.strokeW;
                            _0x3bc2aa.shadowOffsetY = this.strokeW;
                            _0x3bc2aa.shadowColor = this.strokeColor;
                        }
                        _0x3bc2aa.fillStyle = this._color;
                        _0x3bc2aa.fillText(_0x2f7083, 3, _0x52d8cc - _0x425f2f / 2);
                    }
                }
                return this._canvas;
            },
            draw: function() {
                if (this._text) {
                    var _0xfb2f18 = this.renderScale;
                    this.updateColor();
                    var _0x16c7fd = this.getRenderedCanvas();
                    var _0x3fec0f = _0x16c7fd.width / _0xfb2f18;
                    var _0x446133 = _0x16c7fd.height / _0xfb2f18;
                    this.setPos(_0x3fec0f, _0x446133);
                    _0x39e82d.drawImage(_0x16c7fd, this.x - _0x3fec0f / 2, this.y - _0x446133 / 2, _0x3fec0f, _0x446133);
                }
            },
            setPos: function(_0x127df0, _0x3b986e) {},
            updateColor: function() {}
        };

        function _0x123582(_0x2dccbe, _0x2586ba) {
            if (_0x2dccbe) {
                this._fntSize = _0x2dccbe;
            }
            if (_0x2586ba) {
                this._color = _0x2586ba;
            }
        }
        var _0x25d0fa = [];
        _0x25d0fa.push(["1", "2", "3", "4", "5", "6", "7", "8"]);
        _0x25d0fa.push(["q", "e", "r", "t", "y", "u", "i", "o"]);
        _0x25d0fa.push(["a", "d", "f", "g", "h", "j", "k", "l"]);
        _0x25d0fa.push(["z", "x", "c", "v", "b", "n", "m", ","]);
        const _0x4eeb5a = [];

        function _0x229247(_0x46c649, _0x3d7908, _0x4beade, _0x5d4ecf, _0x319673, _0x3bc36b, _0x159d03, _0x430bf2, _0x377cc2, _0x242fc5, _0x3ab055, _0x19fd16) {
            this.x = _0x46c649;
            this.y = _0x3d7908;
            this.w = _0x4beade;
            this.h = _0x5d4ecf;
            this.aniT = _0x319673;
            this.species = _0x159d03;
            this.subSpecies = _0x430bf2;
            this.premiumSkinType = _0x377cc2;
            this.teamID = 0;
            this.btnHotkey = "0";
            this.imgSizeF = 0.5;
            const _0x58e07c = !_0x19fd16 && _0x159d03 > 0;
            this.buttonTXT = new _0x123582(10, _0x58e07c ? "gold" : "white");
            this.buttonTXT.renderScale = 1.5;
            this.buttonTXT.multiLine = true;
            this.buttonTXT.setText(_0x20ad9d(_0x319673).aniName);
            this.isHighLighted = false;
            this.biomeNum = _0x3bc36b;
            var _0x1613cf = _0x35d268.createGameObjOfOType(_0x48c056, _0x319673);
            _0x1613cf.animalType = _0x319673;
            _0x1613cf.animalSpecies = this.species;
            _0x1613cf.skinThemeID = _0x3ab055;
            _0x1613cf.animalSubSpecies = this.subSpecies;
            _0x1613cf.animalPremiumSkin = this.premiumSkinType;
            _0x1613cf.mopeSeasonID = _0x242fc5;
            _0x1613cf.curBiome = _0x3bc36b;
            if (_0x1613cf.animalPremiumSkin > 0) {
                _0x1613cf.setSparkleInterval(_0x14db03(5, 10), _0x14db03(2, 3));
            }
            _0x1613cf.flag_isDevMode = _0x17184e;
            _0x1613cf.lava = 100;
            var _0x504022 = "" + _0x1613cf.animalInfo().aniName;
            _0x504022 = _0x504022.split(" ").join("\n");
            this.buttonTXT.setText(_0x504022);
            _0x1613cf.x = _0x1613cf.ox = _0x1613cf.nx = 0;
            _0x1613cf.y = _0x1613cf.oy = _0x1613cf.ny = 0;
            _0x1613cf.rad = _0x1613cf.oRad = _0x1613cf.nRad = 30;
            _0x1613cf.alwaysPlainOutline = true;
            this.drawnAniObj = _0x1613cf;
            this.buttonScaleF = 1;
            this.setHotKey = function(_0x48ae26) {
                if (_0x48ae26) {
                    this.btnHotkey = _0x48ae26;
                    this.hotkey = new _0x123582(10, "white");
                    this.hotkey.renderScale = 1.5;
                    this.hotkey.multiLine = true;
                    this.hotkey.setText(this.btnHotkey.toUpperCase());
                }
            };
            this.setMouseHover = function(_0x324fc5) {
                this.drawnAniObj.isMouseHovering = _0x324fc5;
            };
            this.testPosHitsButton = function(_0x5cd492, _0x20c83d) {
                if (_0x5cd492 < this.x - this.w / 2 || _0x5cd492 > this.x + this.w / 2) {
                    return false;
                }
                if (_0x20c83d < this.y - this.w / 2 || _0x20c83d > this.y + this.w / 2) {
                    return false;
                } else {
                    return true;
                }
            };
            this.setPosAndSize = function(_0x322a72, _0x3e117e, _0x18446e, _0x2556c7, _0x1402c8, _0x257b6f) {
                this.w = _0x18446e;
                this.h = _0x2556c7;
                this.x = _0x322a72 + _0x18446e * (0.5 - _0x1402c8);
                this.y = _0x3e117e + _0x2556c7 * (0.5 - _0x257b6f);
            };
            this.draw = function(_0x1d6edd) {
                _0x39e82d.save();
                _0x39e82d.translate(this.x, this.y);
                _0x39e82d.scale(this.buttonScaleF, this.buttonScaleF);
                var _0x173932 = _0x39e82d.globalAlpha;
                _0x39e82d.globalAlpha = 0.5;
                switch (this.biomeNum) {
                    case 0:
                        _0x39e82d.fillStyle = "#26A73A";
                        break;
                    case 1:
                        _0x39e82d.fillStyle = "#1C91B8";
                        break;
                    case 2:
                        _0x39e82d.fillStyle = "#B2B2B2";
                        break;
                    case 3:
                        _0x39e82d.fillStyle = "#ff6000";
                        break;
                    case 4:
                        _0x39e82d.fillStyle = "#9F8641";
                        break;
                    case 5:
                        _0x39e82d.fillStyle = "#00db22";
                        break;
                }
                _0x39e82d.fillRect(0 - this.w / 2, 0 - this.h / 2, this.w, this.h);
                if (this.isHighLighted) {
                    _0x39e82d.fillStyle = "white";
                    _0x39e82d.globalAlpha = _0x173932 * 0.2;
                    _0x39e82d.fillRect(0 - this.w / 2, 0 - this.h / 2, this.w, this.h);
                }
                _0x39e82d.globalAlpha = _0x173932;
                var _0x5e0d00 = this.w * 0.225;
                this.drawnAniObj.nRad = this.drawnAniObj.rad = _0x5e0d00;
                _0x39e82d.save();
                _0x39e82d.scale(2, 2);
                this.drawnAniObj.teamID = _0x18c43f;
                this.drawnAniObj.draw();
                _0x39e82d.restore();
                var _0x20a7fc = this.imgSizeF / 0.5;
                var _0x52e705 = 10 + _0x20a7fc * 10;
                if (_0x5e0d00 > 15) {
                    this.buttonTXT.setFontSize(_0x52e705 * _0x53a3ae);
                    this.buttonTXT.x = 0;
                    this.buttonTXT.y = -this.h * 0.5 * 0.75;
                    this.buttonTXT.y += this.h * 0.1;
                    this.buttonTXT.draw();
                }
                if (this.hotkey && !_0xc4d403) {
                    _0x39e82d.save();
                    if (_0x5981a2 != 2) {
                        _0x39e82d.globalAlpha = 0.3;
                        this.hotkey.setFontSize(_0x53a3ae * 16);
                        this.hotkey.x = -this.w / 2 + _0x53a3ae * 10;
                        this.hotkey.y = this.h / 2 - _0x53a3ae * 12;
                        this.hotkey.draw();
                    }
                    _0x39e82d.restore();
                }
                _0x39e82d.restore();
            };
        }
        const _0x479d3a = async ({
            animalType: _0x1c7f9f,
            animalSpecies: _0x314489,
            animalSubSpecies: _0x3093bc,
            premiumSkinType: _0xdc03da,
            mopeSeasonID: _0x4e2d74,
            skinThemeID: _0x2da803,
            biomeNum: _0x21abd9
        }) => {
            const _0x4118ae = _0x35d268.createGameObjOfOType(_0x48c056, _0x1c7f9f);
            _0x4118ae.animalType = _0x1c7f9f;
            _0x4118ae.animalSpecies = _0x314489;
            _0x4118ae.animalSubSpecies = _0x3093bc;
            _0x4118ae.animalPremiumSkin = _0xdc03da;
            _0x4118ae.mopeSeasonID = _0x4e2d74;
            _0x4118ae.skinThemeID = _0x2da803;
            _0x4118ae.curBiome = _0x21abd9;
            return _0x4118ae.getImageData();
        };
        var _0x5e5d0f = 1;
        const _0x16a0da = async function(_0x283d8d, _0xedcf01) {
            _0x4eeb5a.length = 0;
            var _0x27b04e = _0xedcf01 == 1;
            var _0xae5d3b = _0x283d8d.readUInt8();
            var _0x4024ba = _0x283d8d.readUInt8();
            var _0x27f4a6 = _0x283d8d.readUInt8();
            var _0x3e5dc2 = _0x283d8d.readUInt8();
            _0x33698e = true;
            _0x5e5d0f = _0x27f4a6;
            _0x2d4c57 = 0;
            _0x241e0f = [];
            _0x335352 = _0x27b04e;
            _0x583e1e = +new Date();
            _0x27b62a = _0x583e1e + _0x4024ba * 1000;
            const _0x1f43ac = [];
            for (var _0x1ad030 = 0; _0x1ad030 < _0x3e5dc2; _0x1ad030++) {
                var _0x561dec = _0x283d8d.readUInt8();
                var _0x2455f9 = _0x283d8d.readUInt8();
                var _0x478673 = _0x283d8d.readUInt8();
                var _0xe5d095 = _0x283d8d.readUInt8();
                var _0x55994c = _0x283d8d.readUInt8();
                var _0x5410b1 = _0x283d8d.readUInt8();
                var _0x2db0eb = _0x283d8d.readUInt8();
                var _0x26c9d7 = _0x283d8d.readUInt8() == 1;
                var _0x3fca89 = _0x283d8d.readString();
                var _0x4cb071 = _0x1ad030;
                var _0x1bb2b4 = _0x3fca89 != null && _0x3fca89 !== "null";
                var _0x284d8e = 0;
                var _0x3a49b8 = null;
                if (_0x3fca89 != null) {
                    if (_0x247e4a.shop != null && _0x247e4a.shop.allItems != null) {
                        var _0x24ebe6 = _0x247e4a.shop.allItems["" + _0x3fca89];
                        if (_0x24ebe6) {
                            _0x3a49b8 = _0x24ebe6;
                            _0x284d8e = _0x24ebe6.price > 0 ? _0x24ebe6.price : 0;
                        }
                    }
                }
                _0x26c9d7 = _0x26c9d7 || _0x284d8e == 0;
                const _0x18ffd3 = {
                    abilities: [],
                    anAniT: _0x2455f9,
                    biomeNum: _0x478673,
                    species: _0xe5d095,
                    subSpecies: _0x55994c,
                    premiumSkinType: _0x5410b1,
                    season: _0xae5d3b,
                    skinThemeID: _0x2db0eb,
                    isBought: _0x26c9d7,
                    itemId: _0x3fca89,
                    coinsPrice: _0x284d8e,
                    itemIndex: _0x4cb071,
                    choiceIndex: _0x4cb071,
                    shopItem: _0x3a49b8,
                    isShopItem: _0x1bb2b4,
                    forLvl: _0x27f4a6
                };
                const _0x27583e = _0x35d268.createGameObjOfOType(_0x48c056, _0x2455f9);
                _0x27583e.animalType = _0x2455f9;
                _0x27583e.animalSpecies = _0xe5d095;
                _0x27583e.animalSubSpecies = _0x55994c;
                _0x27583e.animalPremiumSkin = _0x5410b1;
                _0x27583e.mopeSeasonID = _0x561dec;
                _0x27583e.skinThemeID = _0x2db0eb;
                _0x27583e.curBiome = _0x478673;
                _0x18ffd3.abilities = _0x27583e.getAbilityInfo();
                _0x18ffd3.itemId = _0x35d268.getClassForGameObjType(_0x48c056, _0x2455f9).name;
                if (_0x27583e.animalInfo) {
                    const _0x24b6f7 = _0x27583e.animalInfo();
                    _0x18ffd3.itemId = _0x24b6f7.aniName;
                    _0x18ffd3.name = _0x24b6f7.aniName;
                }
                _0x18ffd3.shopImage = _0x27583e.getUpgradeImagePath();
                _0x4eeb5a.push(_0x18ffd3);
            }
        };
        var _0x5e1c09 = document.getElementById("moneyRectBottomWrap");
        const _0xb5a2c6 = function() {
            if (!_0xc4d403) {}
        };
        const _0x29fc68 = function() {};
        const _0x31d6f3 = function() {};
        var _0x2b9b0f = false;
        const _0x1df0cf = function(_0x20307a, _0x17b086, _0x286af9, _0x4d8ffd) {
            var _0x4a7680 = 100;
            var _0x787d7f = 0.5;
            if (window.matchMedia("(orientation: portrait)").matches) {
                _0x2b9b0f = false;
            }
            if (window.matchMedia("(orientation: landscape)").matches) {
                _0x2b9b0f = true;
            }
            var _0x3754e8 = window.innerWidth / 2;
            _0x4a7680 = Math.max(80, _0x3754e8 / 7);
            _0x4a7680 = Math.min(100, _0x4a7680);
            var _0x1cd472 = 7;
            if (_0xc4d403 && !_0x2b9b0f) {
                _0x1cd472 = 4;
            }
            var _0x4485e0 = _0x4a7680 * _0x53a3ae;
            var _0x1bfb15 = 10;
            var _0x6df3c9 = _0x4485e0 + 20;
            var _0x1ba78d = Math.max(0, _0x20307a.length);
            if (_0x20307a.length > _0x1cd472 + 1) {
                _0x1ba78d = Math.min(_0x1cd472, _0x1ba78d);
            }
            var _0x3c5416 = _0x1ba78d * (_0x1bfb15 + _0x4485e0) + (_0x6df3c9 - _0x4485e0);
            var _0x4bd222 = _0x19e9b5 / 2 - _0x3c5416 / 2;
            var _0x388431 = _0x17b086;
            var _0x1e99b6 = _0x4485e0 * 1.15;
            var _0x5a2f84 = _0x19e9b5 / 2;
            _0x3c5416 = _0x1ba78d * _0x1e99b6;
            _0x4bd222 = _0x5a2f84 - _0x3c5416 / 2 + _0x1e99b6 / 2;
            var _0x43fca8 = _0x20307a.length;
            var _0x282f4d = 0;
            for (var _0x7c7508 = 0; _0x7c7508 < _0x43fca8; _0x7c7508++) {
                var _0x496cd5 = _0x20307a[_0x7c7508];
                if (_0x7c7508 > 0 && _0x43fca8 > _0x1cd472 + 1) {
                    if (_0x7c7508 % _0x1cd472 == 0) {
                        _0x286af9++;
                        _0x282f4d = 0;
                        _0x388431 += _0x1e99b6 * 1.15;
                        var _0x1da374 = _0x43fca8 - _0x7c7508;
                        if (_0x1da374 < _0x1cd472) {
                            _0x1ba78d = _0x1da374;
                        } else {
                            _0x1ba78d = _0x1cd472;
                        }
                        _0x3c5416 = _0x1ba78d * _0x1e99b6;
                        _0x4bd222 = _0x19e9b5 / 2 - _0x3c5416 / 2 + _0x1e99b6 / 2;
                    }
                }
                if (_0x4d8ffd && _0x7c7508 == 0) {
                    _0x496cd5.buttonScaleF = 1.2;
                } else {
                    _0x496cd5.buttonScaleF = 1;
                }
                _0x496cd5.w = _0x4485e0;
                _0x496cd5.h = _0x4485e0;
                _0x496cd5.x = _0x4bd222;
                _0x496cd5.y = _0x388431;
                _0x4bd222 += _0x1e99b6 / 2 * _0x496cd5.buttonScaleF + _0x1e99b6 / 2;
                if (_0x286af9 < _0x25d0fa.length) {
                    _0x496cd5.setHotKey(_0x25d0fa[_0x286af9 - 1][_0x282f4d].toUpperCase());
                }
                _0x282f4d++;
            }
            _0x39e82d.globalAlpha = _0x2d4c57;
            for (var _0x7c7508 = 0; _0x7c7508 < _0x20307a.length; _0x7c7508++) {
                var _0x496cd5 = _0x20307a[_0x7c7508];
                _0x496cd5.imgSizeF = _0x787d7f;
                _0x496cd5.draw();
            }
            return _0x388431;
        };
        const _0x2bff1a = function(_0x7f5bce) {
            if (_0x7f5bce.isBought || !_0x51571b) {
                const _0x4cac0e = _0x7f5bce.hasOwnProperty("choiceIndex") ? _0x7f5bce.choiceIndex : _0x241e0f.indexOf(_0x7f5bce);
                _0x15e554({
                    choiceIndex: _0x4cac0e
                });
                if (_0x335352) {
                    _0x40fad7 = false;
                }
                _0x4aab09();
            } else {
                var _0x18adac = _0x247e4a.shop.allItems["" + _0x7f5bce.itemId];
                if (_0x18adac) {
                    _0x18adac.itemIndex = _0x7f5bce.itemIndex;
                    _0x247e4a.upgradeMenu_selectedItem = _0x18adac;
                    _0x247e4a.upgradeMenu_callback = function() {
                        _0x247e4a.buyConfirmationOverlay(_0x247e4a.upgradeMenu_selectedItem);
                    };
                    if (!_0x1c0f11) {
                        _0x247e4a.actionBtn = "login";
                    }
                    _0x20702c();
                }
            }
        };
        _0x333253.prototype = {
            x: 0,
            y: 0,
            w: 0,
            h: 0,
            visible: true,
            buttonTXT: null,
            pressed: false,
            pressedTouchID: -1,
            touchEnabled: true,
            testPosHitsButton: function(_0xdefc79, _0x205523) {
                if (_0xdefc79 < this.x - this.w / 2 || _0xdefc79 > this.x + this.w / 2) {
                    return false;
                }
                if (_0x205523 < this.y - this.w / 2 || _0x205523 > this.y + this.w / 2) {
                    return false;
                } else {
                    return true;
                }
            },
            setPosAndSize: function(_0x2d751b, _0x4740e9, _0xc70790, _0x471ffb, _0x240d37, _0x4b5a16) {
                this.w = _0xc70790;
                this.h = _0x471ffb;
                this.x = _0x2d751b + _0xc70790 * (0.5 - _0x240d37);
                this.y = _0x4740e9 + _0x471ffb * (0.5 - _0x4b5a16);
            },
            onButtonTouchStart: function() {},
            onButtonTouchEnd: function() {
                console.log("button touch ended!");
            }
        };

        function _0x333253(_0x2c5da5) {
            this.buttonTXT = new _0x123582(10, "white");
            this.buttonTXT.renderScale = 1.5;
            this.buttonTXT.setText(_0x2c5da5);
            this.draw = function() {
                if (!this.visible) {
                    return;
                }
                _0x39e82d.save();
                _0x39e82d.globalAlpha = 0.2;
                _0x39e82d.fillStyle = this.pressed ? "white" : "#000000";
                _0x39e82d.fillRect(this.x - this.w / 2, this.y - this.h / 2, this.w, this.h);
                _0x39e82d.globalAlpha = 0.2;
                this.buttonTXT.setFontSize(_0x53a3ae * 25);
                this.buttonTXT.x = this.x;
                this.buttonTXT.y = this.y;
                this.buttonTXT.draw();
                _0x39e82d.restore();
            };
        }

        function _0x15114a() {
            this.buttonTXT = new _0x123582(10, "white");
            this.buttonTXT.renderScale = 1.5;
            this.isMiniRechargeBut = false;
            this.abil_Type = 0;
            this.abil_possible = this.abil_usable = this.abil_recharging = this.abil_active = false;
            this.abil_rechargeEndT = 0;
            this.abil_rechargeTotalT = 0;
            this.abil_rechargeBarA = 0;
            this.abil_avilableA = 0;
            this.drawAbilityImage = function(_0x5dbcab, _0x5a6df4) {
                var _0xedc122 = _0xb3e9be[_0x166276];
                var _0x5726ff = "";
                if (_0xedc122) {
                    _0x5726ff = "assets/s/" + _0xedc122.mopeSeasonID;
                } else {
                    _0x5726ff = "assets/s/" + _0x24df61;
                }
                if (this.abil_Type == _0x30a2a9 || this.abil_Type == _0x452e85 || this.abil_Type == _0x5ca899) {
                    var _0x124482 = Math.trunc(_0x4ec996 / 120) % 5;
                    var _0x20427a = _0x5dbcab.speciesType;
                    var _0x4ada6f = _0x4172bb(_0x5726ff + "/gameobj/18/" + _0x20427a + "/" + _0x124482 + ".png");
                    if (_0x4ada6f) {
                        var _0x27fe88 = this.w * 0.4;
                        var _0x595cb2 = 0;
                        if (_0xb3e9be[_0x166276]) {
                            var _0x1aa80a = _0xb3e9be[_0x166276].spawnTime;
                            var _0x32b970 = (_0x4ec996 - _0x1aa80a) / 1000;
                            _0x595cb2 = _0x1b594e(_0x32b970, 1, 10, 2);
                        }
                        _0x39e82d.globalAlpha = _0x5a6df4 * this.abil_avilableA;
                        _0x39e82d.drawImage(_0x4ada6f, -_0x27fe88, -_0x27fe88 * 0.85 - _0x595cb2, _0x27fe88 * 2, _0x27fe88 * 2 + _0x595cb2);
                    }
                } else {
                    var _0x3eaae3 = _0x5dbcab.abilImg;
                    if (_0xedc122 && this.abil_Type == _0x2713eb) {
                        _0x3eaae3 = "assets/s/" + _0xedc122.mopeSeasonID + "/" + this.getDiveImage(_0xedc122);
                    } else {
                        _0x3eaae3 = _0x5726ff + "/" + _0x3eaae3;
                    }
                    if (_0x3eaae3.indexOf("assets/") > -1) {
                        var _0x4ada6f = _0x4172bb(_0x3eaae3);
                        if (_0x4ada6f) {
                            var _0x27fe88 = this.w * 0.4;
                            var _0x48c191 = _0x27fe88;
                            var _0xab70a = _0x27fe88;
                            _0x39e82d.globalAlpha = _0x5a6df4 * this.abil_avilableA;
                            if (_0x4ada6f.height == 600) {
                                _0xab70a = _0x27fe88 * 1.1;
                            }
                            _0x39e82d.drawImage(_0x4ada6f, -_0x48c191, -_0xab70a * 0.85, _0x48c191 * 2, _0xab70a * 2);
                        }
                    }
                }
            };
            this.getDiveImage = function(_0x1445c8) {
                var _0x194a93 = "img/ability_dive.png";
                if (_0x1445c8 && this.abil_Type == _0x2713eb) {
                    if (_0x1445c8.flag_inLava && !_0x1445c8.flag_inWater) {
                        _0x194a93 = "img/ability_dive_lava.png";
                    } else if (_0x1445c8.flag_eff_isInMud && !_0x1445c8.flag_inWater) {
                        _0x194a93 = "img/ability_diveMud.png";
                    }
                }
                return _0x194a93;
            };
            this.draw = function() {
                if (!this.visible) {
                    return;
                }
                this.abil_rechargeBarA += ((this.abil_recharging ? 1 : 0) - this.abil_rechargeBarA) * 0.1;
                this.abil_avilableA += ((this.abil_usable || this.abil_active ? 1 : 0.2) - this.abil_avilableA) * 0.1;
                if (this.isMiniRechargeBut) {
                    this.h = this.w * 0.6;
                }
                if (this.abil_possible) {
                    var _0x1dca51 = 1;
                    _0x39e82d.save();
                    if (this.isMiniRechargeBut) {
                        this.h = this.w * 0.8;
                        _0x39e82d.translate(this.x, this.y + this.h * 0.36);
                        _0x39e82d.scale(0.65, 0.65);
                    } else {
                        _0x39e82d.translate(this.x, this.y);
                    }
                    var _0x3bcb78 = this.abil_avilableA * 0.2;
                    var _0x42b2eb = this.pressed || _0x310f3d ? "#CECECE" : "#000000";
                    if (this.abil_active) {
                        _0x42b2eb = _0x556e31;
                        _0x3bcb78 = 0.7;
                    }
                    _0x39e82d.fillStyle = _0x42b2eb;
                    _0x39e82d.globalAlpha = _0x1dca51 * _0x3bcb78;
                    _0x39e82d.fillRect(0 - this.w / 2, 0 - this.h / 2, this.w, this.h);
                    var _0x408d7d = null;
                    var _0x6e4af7 = _0xb3e9be[_0x166276];
                    if (!_0x6e4af7) {
                        _0x6e4af7 = _0x35d268.createGameObjOfOType(_0x48c056, _0x2dc130);
                        _0x6e4af7.animalType = _0x2dc130;
                        _0x6e4af7.animalSpecies = _0x3e3ffa;
                        _0x6e4af7.animalSubSpecies = _0xa94ab7;
                    }
                    if (_0x6e4af7 && this.abil_Type != _0x2713eb) {
                        _0x408d7d = _0x6e4af7.getAbilityInfo(this.abil_Type);
                    } else {
                        _0x408d7d = _0x5243f1(this.abil_Type);
                    }
                    this.drawAbilityImage(_0x408d7d, _0x1dca51);
                    this.buttonTXT.setText(_0x408d7d.abilName);
                    this.buttonTXT.multiLine = true;
                    this.buttonTXT.setFontSize(_0x53a3ae * 25);
                    this.buttonTXT.x = 0;
                    this.buttonTXT.y = -this.w * 0.35;
                    this.buttonTXT.draw();
                    var _0x11e9f8 = Math.max(0, this.abil_rechargeEndT - _0x4ec996);
                    this.abil_rechargeBarA += ((this.abil_recharging ? 1 : 0) - this.abil_rechargeBarA) * 0.1;
                    if (this.abil_rechargeBarA > 0.01) {
                        _0x39e82d.globalAlpha = _0x1dca51 * this.abil_rechargeBarA * 0.35;
                        _0x39e82d.fillStyle = "#000000";
                        var _0xc80010 = 0;
                        var _0x582a1f = 0;
                        var _0x47d358 = this.w * 0.8;
                        var _0x539ccd = this.h * 0.5;
                        _0x39e82d.fillRect(_0xc80010 - _0x47d358 / 2, _0x582a1f - _0x539ccd / 2, _0x47d358, _0x539ccd);
                        _0x39e82d.globalAlpha = _0x1dca51 * this.abil_rechargeBarA * 1;
                        _0x39e82d.fillStyle = "#F3C553";
                        _0x39e82d.fillRect(_0xc80010 - _0x47d358 / 2, _0x582a1f - _0x539ccd / 2, _0x47d358 * (_0x11e9f8 / this.abil_rechargeTotalT), _0x539ccd);
                    }
                    _0x39e82d.restore();
                }
            };
        }
        _0x15114a.prototype = Object.create(_0x333253.prototype);
        const _0x2e675e = 1;
        const _0x3564c2 = 2;
        const _0x54ca10 = 3;
        const _0x2660be = 4;
        const _0x3c84ed = 5;
        const _0x39b2a3 = 6;
        const _0x144cd6 = 7;
        const _0x3bccae = 8;
        const _0x1cb146 = 9;
        const _0x103a40 = 10;
        const _0x2bc077 = 11;
        const _0x13e121 = 12;
        const _0x3a01c7 = 13;
        const _0x28bdbd = 14;
        const _0x47a8ca = 15;
        const _0x1d6f71 = 16;
        const _0x3046de = 17;
        const _0x5c3d45 = 18;
        const _0x173df2 = 19;
        const _0xb10cf8 = 20;
        const _0x54f3a8 = 21;
        const _0x39eff1 = 22;
        const _0x4365b5 = 23;
        const _0x2e6a3a = 24;
        const _0x3b2127 = 25;
        const _0x56705d = 26;
        const _0x391e0b = 27;
        const _0x474afe = 28;
        const _0x14f011 = 29;
        const _0x2eab4f = 30;
        const _0x35160e = 255;
        const _0x434b8e = 51;
        const _0x192c4c = 52;
        const _0x9b3c51 = 53;
        const _0x126e7f = 54;
        const _0x2fb0cd = 55;
        const _0x38c1f3 = 56;
        const _0x275297 = 58;
        const _0x41567d = 59;
        const _0x3bd31d = 60;
        const _0x91dedd = 61;
        const _0x15b7ad = 62;
        const _0x3fa468 = 63;
        const _0x275767 = 64;
        const _0x8470e0 = 65;
        const _0x2fd95a = 66;
        const _0x47d064 = 67;
        const _0x289dc7 = 68;
        const _0x30cc86 = 69;
        const _0x1bbea4 = 70;
        const _0x59a846 = 71;
        const _0xd14a0c = 72;
        const _0x35cb87 = 81;
        const _0x462897 = 82;
        const _0x2311e7 = 83;
        const _0x24f460 = 84;
        const _0x45a029 = 100;
        const _0x519c49 = 101;
        const _0x1e7678 = 102;
        const _0x56fdda = 103;
        const _0x213853 = 104;
        const _0x4c5de1 = 105;
        const _0x550e46 = 106;
        const _0x1a216f = 107;
        const _0x3565e0 = 108;
        const _0x33a316 = 109;
        const _0x1a5f52 = 110;
        const _0x5b8672 = 111;
        const _0x4c75cb = 112;
        const _0x3cb831 = 113;
        const _0x426d07 = 114;

        function _0x59ff89(_0x125ff4) {
            _0x125ff4 = _0x125ff4.split("+").join(" ");
            var _0x36e219 = {};
            var _0x322589;
            var _0x273171 = /[?&]?([^=]+)=([^&]*)/g;
            while (_0x322589 = _0x273171.exec(_0x125ff4)) {
                _0x36e219[decodeURIComponent(_0x322589[1])] = decodeURIComponent(_0x322589[2]);
            }
            return _0x36e219;
        }
        var _0x151f46 = 1000 / 120;
        let _0x41597c = true;
        var _0x26988a = _0x59ff89(document.location.search);
        var _0x140272 = _0x26988a.videoson > 0;
        var _0x26988a = _0x59ff89(document.location.search);
        var _0x12e01a = {
            isAndroid: function() {
                return navigator.userAgent.match(/Android/i);
            },
            isBlackBerry: function() {
                return navigator.userAgent.match(/BlackBerry/i);
            },
            isIOS: function() {
                return navigator.userAgent.match(/iPhone|iPad|iPod/i);
            },
            isOpera: function() {
                return navigator.userAgent.match(/Opera Mini/i);
            },
            isWindows: function() {
                return navigator.userAgent.match(/IEMobile/i) || navigator.userAgent.match(/WPDesktop/i);
            },
            isAny: function() {
                return _0x12e01a.isAndroid() || _0x12e01a.isBlackBerry() || _0x12e01a.isIOS() || _0x12e01a.isOpera() || _0x12e01a.isWindows();
            }
        };
        var _0xc4d403 = _0x38ddc4() != null;
        var _0x2c94d7 = _0xc4d403 && _0x12e01a.isIOS();
        var _0x4a58bd = _0xc4d403 && !_0x2c94d7;
        var _0xe56166 = _0x12e01a.isAny();
        if (_0xc4d403) {
            document.querySelector("#discordLoginBtn").style.display = "none";
            if (_0x4a58bd) {
                document.querySelector("#appleLoginBtn").style.display = "none";
            }
        }
        if (_0xc4d403) {
            document.querySelector("#discordLoginBtn").style.display = "none";
            if (_0x4a58bd) {
                document.querySelector("#appleLoginBtn").style.display = "none";
            }
        }
        var _0x370a92 = 0.175;
        var _0x11d168 = "#3FBA54";
        var _0x1d968f = "#3FBA54";
        var _0x4abdc8 = "#f7f7f7";
        var _0x504cbf = "#09992F";
        var _0x415a45 = "#007ec0";
        var _0x3d49e5 = "white";
        var _0x6316d4 = "#8a7908";
        var _0x38b843 = "#1aad41";
        var _0x31d588 = "#bf4f0b";
        var _0x2708da = "#06912b";
        var _0x42a949 = "#09992F";
        var _0x4e5bdd = "#8CCEF4";
        var _0x4fbc4b = "#4E66E4";
        var _0x51276a = "#ff6000";
        var _0x1afbdd = "#4854a2";
        var _0x20b682 = _0x1afbdd;
        var _0x335e4d = "#bfaf43";
        var _0x4cdea1 = "#d6c348";
        var _0x3128bd = "#c8b745";
        var _0x5207bf = "#F35F53";
        var _0x4695c4 = "#CF6259";
        var _0x49c70f = "#FF911E";
        var _0x29625c = "#C67019";
        var _0x577d15 = "#25b645";
        var _0x5da83c = "#604729";
        var _0x114081 = "#8A681B";
        var _0x59e0de = "#EF3C31";
        var _0x556e31 = "#4AE05E";
        var _0x24c2eb = "#8C9688";
        var _0x218b8d = "#878053";
        var _0x30755f = "#328ca2";
        var _0x16b30d = "rgba(50,140,162,0.5)";
        var _0x424ca9 = "#ff884c";
        var _0x4f5804 = "#007fa9";
        var _0x35f688 = "#b0a13b";
        var _0x6dd38f = true;
        var _0x2f359e = true;
        var _0x44be43 = true;
        var _0x493e84 = true;
        var _0x35ae42 = true;
        var _0x5629ff = true;
        var _0x24df61 = 1;
        var _0x7786f = false;
        var _0x5928ec = false;
        var _0x1943b8 = null;
        let _0x3a038f = false;
        let _0x10aed1 = false;
        let _0x347d2d = false;
        let _0x183274 = false;
        let _0x448cff = false;
        let _0x1d98b3 = _0x57b7e4;
        let _0x33785f = _0x57b7e4;
        let _0x59288d = 400;
        let _0x38ffe2 = 0;
        var _0x55220a = false;
        var _0x2cc087 = 0;
        var _0x16d593 = "";
        var _0x3e33e8 = 0;
        var _0x5aef35 = {};
        var _0x14b22c = 0;
        var _0x1e6ec6 = 0;
        var _0x51edb7 = 0;

        function _0x358b62(_0x462c53) {
            switch (_0x462c53) {
                case _0x5d8525:
                    return "ocean";
                case _0x16f106:
                    return "arctic";
                case _0x36f07b:
                    return "desert";
                case _0x47e33a:
                    return "volcano";
                case _0x360ff8:
                    return "forest";
                case _0x1ddf2f:
                    return "land";
                default:
                    return "land";
            }
        }

        function _0x3a1319(_0x42e3ee) {
            switch (_0x42e3ee) {
                case _0x5d8525:
                    return _0x415a45;
                case _0x16f106:
                    return _0x3d49e5;
                case _0x36f07b:
                    return _0x6316d4;
                case _0x47e33a:
                    return _0x31d588;
                case _0x360ff8:
                    return _0x2708da;
                case _0x1ddf2f:
                default:
                    return _0x504cbf;
            }
        }
        var _0x355bf3 = [];
        var _0x4ec996 = +new Date();
        var _0x3833d8 = +new Date();
        var _0x18c43f = 0;
        var _0x1d523b = false;
        var _0x17f2cd = 0;
        var _0x3edd9e = null;
        var _0x36536c = false;
        var _0x2402dc = false;
        var _0x4b5804 = false;
        var _0x787e2d = false;
        var _0x1516cf = null;
        var _0x465fee = 0;
        var _0x1c0537 = 0;
        var _0x1cb118 = 0;
        var _0x45c5fa = 0;
        var _0x429edb = 0;
        var _0x432800 = 0;
        var _0x3b9097 = [];
        var _0x28cc21 = false;
        var _0x364bd3 = 0;
        var _0x3166e9 = null;
        var _0x18f712 = false;
        var _0x2ccb86 = 0;
        var _0x17184e = false;
        var _0x482d50 = false;
        var _0x7ef88d = 0;
        var _0x1e6155 = false;
        var _0x4a5c21 = false;
        var _0x7605c6 = document.getElementById("gCanvas");
        var _0x5c8335 = false;
        var _0x12b152 = null;
        var _0x1189f4 = null;
        var _0x387513 = "?";
        var _0x3bd0c1 = "?";
        var _0x170cf4 = "?";
        var _0x306829 = "?";
        var _0x98017d = 0;
        var _0x1f1ac0 = "?";
        var _0x2c0994 = 0;
        var _0x3a70cc = 0;
        var _0x4b0ea0 = 0;
        var _0x8a21b1 = 0;
        var _0x124305 = 0;
        var _0xaaa98c = 0;
        var _0x3d8954 = 0;
        var _0x19490b = 0;
        var _0x20d444 = false;
        var _0x39e82d = null;
        if (_0x7605c6) {
            _0x39e82d = _0x7605c6.getContext("2d");
            _0x39e82d.shadowColor = "black";
        }
        var _0x158865 = false;
        var _0x149ef1 = Math.min(window.devicePixelRatio, 2);
        var _0x4731e1 = ("ontouchstart" in window || navigator.maxTouchPoints) == true;
        var _0x213d3b = {};

        function _0x5b49aa(_0x14446f) {
            if (!_0x213d3b.hasOwnProperty(_0x14446f) && !_0x357cad) {
                var _0x22b3fa = new Audio(_0x14446f);
                _0x213d3b[_0x14446f] = _0x22b3fa;
                _0x22b3fa.volume = 0.7;
                _0x22b3fa.muted = _0x357cad;
            }
            return _0x213d3b[_0x14446f];
        }
        var _0x471b89 = null;
        var _0x23f30c = "";
        var _0x2fd332 = "audio/music_game.mp3";

        function _0x2c5e15(_0x5ade63) {
            if (_0x471b89) {
                _0x471b89.pause();
                _0x471b89.currentTime = 0;
            }
            _0x23f30c = _0x5ade63;
            if (!_0x357cad) {
                _0x471b89 = _0x5b49aa(_0x5ade63, true);
                try {
                    _0x471b89.play();
                } catch (_0x2c6d32) {}
            }
        }
        var _0x3d14e6 = true;
        var _0x21e4e3 = false;
        var _0x2e8bac = camzoom_n = 2.7;
        var _0x2e8bac = 1;
        var _0x1bd2d0 = 0;
        var _0x1901f2 = 0;
        var _0x3e08c0 = 0;
        var _0x31dc9d = 0;
        var _0x417fd4 = 0;
        var _0x33a79a = 0;
        var _0x4d2c42 = 0;
        var _0x539ad0 = 0;
        var _0x53a3ae = 1;
        var _0x1cde21 = 0;
        var _0x2be4ab = 0;
        var _0x4a8be2 = 0;
        var _0x227e1d = 0;
        var _0x4759cb = 0;
        var _0xc9b187 = 0;
        var _0x1afb36 = false;
        var _0x310f3d = false;
        var _0x19e9b5 = 0;
        var _0x1519a6 = 0;
        var _0x5039a5 = 0;
        var _0x396098 = 0;
        var _0x235bc6 = 0;
        var _0xe800db = 1;
        var _0x2f1da5 = 2;
        var _0x2530ce = 3;
        var _0x89f537 = 4;
        var _0x338d0a = 5;
        var _0x4a64da = 6;
        var _0x444fd7 = _0x235bc6;
        var _0x5066de = 0;
        var _0x2e23fc = {};
        async function _0x3d6302(_0x560a1c) {
            if (!_0x2e23fc.hasOwnProperty(_0x560a1c)) {
                const _0x5a9dff = new Image();
                var _0x345bb1 = "?v=" + _0x3fce30 + (_0x155291 ? "." + _0xc3eb3b : "");
                _0x5a9dff.src = _0x560a1c + _0x345bb1;
                return new Promise((_0x49b07f, _0x442b6f) => {
                    _0x5a9dff.addEventListener("load", () => {
                        _0x2e23fc[_0x560a1c] = _0x5a9dff;
                        return _0x49b07f(_0x5a9dff);
                    }, {
                        once: true
                    });
                    _0x5a9dff.addEventListener("error", _0x416c00 => {
                        _0x442b6f(_0x416c00);
                    }, {
                        once: true
                    });
                });
            }
            console.log("returning the img");
            return _0x2e23fc[_0x560a1c];
        }

        function _0x4172bb(_0x37a6a8, _0x24438c) {
            if (!_0x2e23fc.hasOwnProperty(_0x37a6a8)) {
                _0x2e23fc[_0x37a6a8] = new Image();
                var _0x12eaef = "?v=" + _0x3fce30 + (_0x155291 ? "." + _0xc3eb3b : "");
                _0x2e23fc[_0x37a6a8].src = _0x37a6a8 + _0x12eaef;
            }
            if (_0x2e23fc[_0x37a6a8].width != 0 && _0x2e23fc[_0x37a6a8].complete) {
                return _0x2e23fc[_0x37a6a8];
            } else {
                return null;
            }
        }
        var _0x407e2a = Array.apply(null, new Array(50)).map(Number.prototype.valueOf, 0);
        var _0x594905 = Array.apply(null, new Array(50)).map(Number.prototype.valueOf, 0);
        var _0x8a0626 = Array.apply(null, new Array(50)).map(Number.prototype.valueOf, 0);
        var _0x3c5c91 = Array.apply(null, new Array(50)).map(Number.prototype.valueOf, 0);
        var _0x40fad7 = false;
        var _0x58b11a = [];
        var _0xb3e9be = {};
        var _0xad46f9 = [];
        var _0x2afc08 = [];
        var _0x46bc5c = false;
        var _0x23755b = 0;
        var _0x4c63a1 = 1;
        var _0x36f61d = false;
        var _0x3d5dee = 0;
        var _0x127583 = 1;
        var _0x77ac8d = false;
        var _0x551dbe = 0;
        var _0x21b7e9 = 1;
        var _0x2f062e = false;
        var _0x5000a8 = +new Date();
        var _0x2480f7 = false;
        var _0x26aab4 = false;
        var _0x18ca32 = false;
        var _0x338ed5 = false;
        var _0x15754e = false;
        var _0x5acecb = false;
        var _0x357cad = false;
        var _0x37d3e3 = false;
        var _0x5981a2 = 3;
        var _0x48b077 = false;
        var _0x3e8d26 = false;
        var _0x956210 = true;
        let _0x342856 = 0;
        var _0x132675 = document.getElementById("button_mute");
        if (_0x132675) {
            _0x132675.onclick = function() {
                _0x357cad = !_0x357cad;
                _0x1e287f();
                try {
                    window.localStorage.setItem("options_muted", _0x357cad ? 1 : 0);
                } catch (_0x1b4df6) {}
            };
        }

        function _0x3bbeb2(_0x2f6ff8, _0x1f2808, _0x5b9def) {
            _0x1f2808 = _0x1f2808 || _0x1f2808 === 0 || _0x1f2808 === "0" ? _0x1f2808 : null;
            const _0x1c84b4 = _0x25ba4e => {
                try {
                    if (_0x1f2808 !== null) {
                        _0x25ba4e.volume = _0x1f2808;
                    }
                    if (_0x5b9def) {
                        sound_click.playbackRate = _0x5b9def;
                    }
                    _0x25ba4e.play();
                    return true;
                } catch (_0x13f20a) {
                    return false;
                }
            };
            if (_0x1c84b4(_0x5b49aa(_0x2f6ff8))) {
                return;
            }
            _0x1c84b4(new Audio(_0x2f6ff8));
        }

        function _0x92be55(_0x3fb87d) {
            _0x3bbeb2("audio/click.mp3", _0x3fb87d);
        }

        function _0x34ea1a() {
            var _0x553f67 = document.getElementById("optionsDiv");
            _0x553f67.style.display = _0x553f67.style.display == "block" ? "none" : "block";
            var _0x3c00e2 = _0x5b49aa("audio/click.mp3");
            if (_0x3c00e2) {
                try {
                    _0x3c00e2.play();
                } catch (_0x348026) {}
            }
        }
        var _0x176cc0 = false;
        var _0x32c60f = -1;
        var _0x546ad5 = 100;
        var _0x14f534 = 0;
        var _0x536ead = curBarPerc_n = 100;
        var _0x2f3188 = -1;
        var _0x256a64 = -1;
        const _0x58833a = _0x2b63f0 => {
            if (_0x2b63f0 != _0x14f534) {
                _0x546ad5 = _0x2b63f0;
            }
        };
        _0x58833a(_0x546ad5);
        const _0x18caff = _0x485057 => {
            if (_0x485057 != _0x32c60f) {
                _0x32c60f = _0x485057;
            }
        };
        _0x18caff(_0x32c60f);
        const _0x1e6138 = _0x435633 => {
            if (_0x435633 != _0x2f3188) {
                _0x2f3188 = _0x435633;
            }
        };
        _0x1e6138(100);
        const _0xd9c671 = _0x6b6bb1 => {
            if (_0x6b6bb1 != _0x256a64) {
                _0x256a64 = _0x6b6bb1;
            }
        };
        _0x1e6138(0);
        _0xd9c671(0);
        var _0x3e51ee = 0;
        var _0x451165 = 0;
        var _0x1b848d = infectionBarPerc_n = 100;
        var _0x5e981e = new _0x123582(16, "yellow");
        var _0x395667 = new _0x123582(16, "white");
        var _0x521a47 = new _0x123582(16, "white");
        var _0x3d2a49 = new _0x123582(16, "white");
        var _0x23e860 = new _0x123582(16, "white");
        var _0x469fbf = new _0x123582(10, "white");
        var _0x4f1fdf = new _0x123582(16, "white");
        var _0x133e51 = new _0x123582(26, "white");
        var _0x45a0bb = new _0x123582(10, "white");
        var _0x1c1224 = new _0x123582(16, "white");
        _0x4f1fdf.multiLine = true;
        _0x1c1224.renderScale = 1;
        _0x4f1fdf.renderScale = 1;
        _0x469fbf.renderScale = 1;
        var _0x119fcf = true;
        var _0x44c3eb = 0;
        var _0x1aca42 = 0;
        var _0x204c92 = "";
        var _0x68a93b = [];
        var _0x1a5885 = new _0x15114a(null, "W");
        _0x1a5885.onButtonTouchStart = function() {
            _0x1e1591(_0x329297, true);
        };
        _0x1a5885.onButtonTouchEnd = function() {
            _0x1e1591(_0x329297, false);
            if (_0x3b96a3.pressed && _0x3b96a3.pressedTouchID == -1) {
                _0x3b96a3.pressed = false;
                _0x1e1591(_0x334929, false);
            }
        };
        _0x68a93b.push(_0x1a5885);
        var _0x46b369 = new _0x15114a(null, "W");
        _0x46b369.isMiniRechargeBut = true;
        _0x46b369.touchEnabled = false;
        _0x68a93b.push(_0x46b369);
        var _0x3b96a3 = new _0x333253("HOLD TO RUN");
        _0x3b96a3.onButtonTouchStart = function() {
            _0x1e1591(_0x334929, true);
        };
        _0x3b96a3.onButtonTouchEnd = function() {
            _0x1e1591(_0x334929, false);
        };
        _0x68a93b.push(_0x3b96a3);
        var _0x529979 = new _0x333253("CHAT");
        _0x529979.onButtonTouchStart = function() {
            _0x540ba8();
        };
        _0x68a93b.push(_0x529979);
        var _0x4d9d9c = new _0x333253("S");
        _0x4d9d9c.onButtonTouchStart = function() {
            _0x1e1591(_0x284ca0, true);
        };
        _0x4d9d9c.onButtonTouchEnd = function() {
            _0x1e1591(_0x284ca0, false);
        };
        _0x68a93b.push(_0x4d9d9c);
        var _0x225fa1 = false;
        var _0x732625 = -1;
        var _0xa1f035 = 0;
        var _0x391fb3 = 0;
        var _0x22d054 = 0;
        var _0x17eadb = 0;
        var _0x219190 = 50;
        var _0x805857 = 0;
        var _0x589fc8 = 0;
        var _0x254758 = 0;
        var _0x49ffce = 0;
        var _0xeeaddb = 0;
        abil_possible = false;
        var _0x21d4fe = false;
        var _0x46bc5c = false;
        var _0x2d9431 = false;
        var _0x3833d8 = +Date.now();
        var _0x328977 = null;

        function _0x14db03(_0x3db4fe, _0x3e0471) {
            _0x3db4fe = Math.min(_0x3db4fe, _0x3e0471);
            _0x3e0471 = Math.max(_0x3db4fe, _0x3e0471);
            return _0x3db4fe + Math.random() * (_0x3e0471 - _0x3db4fe + 1);
        }
        var _0x1acb6f = false;
        var _0x2afba4 = false;
        var _0x1c89a3 = true;

        function _0x36784f(_0x29e47a, _0x43521c, _0x4abf42, _0x620126, _0x438ab7, _0x2baf6e) {
            _0x29e47a.strokeStyle = _0x2baf6e;
            _0x29e47a.lineWidth = _0x438ab7;
            _0x29e47a.beginPath();
            _0x29e47a.arc(_0x43521c, _0x4abf42, Math.max(0, _0x620126), 0, Math.PI * 2);
            _0x29e47a.stroke();
        }
        var _0x1157ee = 1;
        const _0x21bf91 = {
            undefined: () => 0,
            boolean: () => 4,
            number: () => 8,
            string: _0x5e106e => _0x5e106e.length * 2,
            object: _0x2778c1 => !_0x2778c1 ? 0 : Object.keys(_0x2778c1).reduce((_0x1c0e9b, _0x4dec21) => _0x5a0b36(_0x4dec21) + _0x5a0b36(_0x2778c1[_0x4dec21]) + _0x1c0e9b, 0)
        };
        const _0x5a0b36 = _0x39cea1 => _0x21bf91[typeof _0x39cea1](_0x39cea1);

        function _0x1a067a(_0xd992c3, _0x3ca5c7, _0x440818) {
            var _0x130af = _0x440818 * Math.PI / _0x3ca5c7 * _0xd992c3;
            _0x130af = Math.sin(_0x130af);
            return _0x130af;
        }
        let _0x2ccf65 = {};

        function _0x15b82a(_0x3f4ee2, _0xaeb757, _0x422873, _0x2e437f, _0x48505e, _0x6be656) {
            let _0x2b0a0c = _0x2ccf65[_0x3f4ee2];
            if (_0x2ccf65[_0x3f4ee2] == undefined) {
                if (_0x48505e !== undefined && _0x6be656 !== undefined) {
                    _0x2b0a0c = new _0x8d4982(_0x3f4ee2, _0xaeb757, _0x2e437f, _0x422873, _0x48505e, _0x6be656);
                } else {
                    _0x2b0a0c = new _0x8d4982(_0x3f4ee2, _0xaeb757, _0x2e437f, _0x422873);
                }
                _0x2ccf65[_0x3f4ee2] = _0x2b0a0c;
                console.log("@@@@@@@@@@@@@@@ AnimFrame created for " + _0x3f4ee2 + " @@@@@@@@@@@@@@@@@@@@@@@");
            }
            _0x2dc8b5(_0x2ccf65[_0x3f4ee2], 0);
        }

        function _0x498c26(_0x4a1f29, _0xd2996f) {
            let _0x4b5928 = _0x2ccf65[_0x4a1f29];
            if (_0x4b5928) {
                return _0x4b5928.getFrame(_0xd2996f);
            }
            return undefined;
        }

        function _0x221576(_0x70b02c, _0x488246, _0x1e4fd6) {
            let _0x4bde2d = _0x2ccf65[_0x70b02c];
            if (_0x4bde2d) {
                return _0x4bde2d.getFrame(_0x488246) * _0x1e4fd6;
            }
            return undefined;
        }

        function _0x4e4bab(_0x28d55c, _0x134b4c) {
            let _0x1dacd2 = _0x2ccf65[_0x28d55c];
            if (_0x1dacd2) {
                return _0x1dacd2.getShiftAmount(_0x134b4c);
            }
            return undefined;
        }

        function _0x2dc8b5(_0x3a452d, _0x21143b) {
            var _0x136387 = _0x21143b / 1000;
            var _0x48b8cd = _0x136387;
            let _0x4cfb9b = _0x1a067a(_0x136387, _0x3a452d.period, _0x3a452d.sine);
            let _0x3abf61 = _0x4cfb9b.toFixed(10);
            let _0x24e8f5 = _0x136387.toFixed(3);
            _0x3a452d.add(_0x24e8f5, _0x3abf61);
            if (_0x48b8cd >= _0x3a452d.period) {
                console.log("@@@@@@@@@@@@@@@@@ baking finished for " + _0x3a452d.forObj);
                return;
            }
            _0x21143b++;
            setTimeout(function() {
                _0x2dc8b5(_0x3a452d, _0x21143b);
            }, 1);
        }
        class _0x8d4982 {
            constructor(_0x27fe10, _0x470566, _0x3f616d, _0x2c29bb, _0x202f74, _0x4bbb08) {
                this.forObj = _0x27fe10;
                this.period = _0x470566;
                this.sine = _0x3f616d;
                this.shiftAmount = _0x2c29bb;
                this.frame = {};
                if (_0x202f74 !== undefined && _0x4bbb08 !== undefined) {
                    this.startShift = _0x202f74;
                    this.endShift = _0x4bbb08;
                    this.amplitude = this.shiftAmount * (this.endShift - this.startShift);
                }
            }
            getAnimalName() {
                return this.forAni;
            }
            add(_0x46612d, _0x4ca481) {
                this.frame[_0x46612d] = _0x4ca481;
            }
            getShiftAmount(_0x44e699) {
                let _0x224845 = this.getFrame(this.timeKey(_0x44e699));
                if (_0x224845) {
                    if (this.amplitude !== undefined) {
                        let _0x20308d = this.startShift + this.amplitude;
                        return _0x20308d + this.amplitude * this.getFrame(_0x44e699);
                    } else {
                        return _0x224845 * this.shiftAmount;
                    }
                }
                return null;
            }
            getFrame(_0x361a49) {
                return this.frame[this.timeKey(_0x361a49)];
            }
            timeKey(_0xb3ff4) {
                let _0x9aec14 = (_0x4ec996 - _0xb3ff4) / 1000 / this.period;
                let _0x3de9fc = (_0x9aec14 - Math.floor(_0x9aec14)) * this.period;
                return _0x3de9fc.toFixed(3);
            }
        }
        let _0x2f34bb = {};

        function _0x31c493(_0x186e3b, _0x2a7a1b, _0x357b7d, _0x763286 = 2, _0x18e8d7 = 1) {
            console.log("---------------- started baking " + _0x186e3b);
            const _0x9d83fd = performance.now();
            _0x2f34bb[_0x186e3b] = [];
            const _0x24bfab = _0x2a7a1b * 1000;
            for (let _0x2be0bf = 0; _0x2be0bf < _0x24bfab; _0x2be0bf += _0x18e8d7) {
                _0x2f34bb[_0x186e3b].push(_0x1b594e(_0x2be0bf / 1000, _0x2a7a1b, _0x357b7d, _0x763286));
            }
            console.log("---------------- finished baking " + _0x186e3b + " time taken: " + (performance.now() - _0x9d83fd).toFixed(4) + "ms");
        }
        _0x15b82a("bird", 0.5, 0.5, 2);
        _0x15b82a("eagle", 0.9, 0.3, 2);
        _0x15b82a("volcano", 6, 1.5, 2);
        _0x31c493("lake", 4, 5.5, 2);
        _0x15b82a("lavalake", 4, 2.5, 2);
        _0x15b82a("fennecfox", 0.5, 5, 1);
        _0x15b82a("fireball", 1, 0.5, 2, 0.85, 1);
        _0x31c493("objects", 1.5, 0.1);
        _0x31c493("objects_slow", 2.5, 0.04);
        _0x31c493("honeybee", 0.2, 0.3);
        _0x15b82a("kd", 5, 1, 1);
        _0x28a15f.wave = 1;
        _0x28a15f.halfWave = 2;
        _0x28a15f.arc = 3;
        _0x28a15f.quad = 4;
        _0x28a15f.bow = 5;
        _0x28a15f.bounce = 6;
        _0x28a15f.elastic = 7;
        _0x28a15f.bounceEaseOut = 8;
        _0x28a15f.bounceEaseInOut = 9;

        function _0x28a15f(_0x56a6af, _0x549b76, _0x4d4fa6, _0x4c7278) {
            this.forObj = _0x56a6af;
            this.duration = _0x549b76;
            this.animation = _0x4d4fa6;
            this.startTime = null;
            this.frame = 0;
            this.frameRate = 1000;
            this.timePassed = 0;
            this.generate = true;
            this.stopWhenDurationPassed = true;
            this.state = 0;
            this.accelerateEnd = 0;
            this.hasStopped = false;
            this.img = null;
            this.vars = _0x4c7278;
            this.keepLastFrame = false;
            this.loop = false;
            this.setImage = function(_0x41d836) {
                this.img = _0x4172bb(_0x41d836);
            };
            this.run = function() {
                if (this.startTime == null) {
                    this.startTime = _0x4ec996;
                }
                if (this.startTime != null) {
                    if (this.state == 2 && !this.hasStopped) {
                        this.hasStopped = true;
                        this.onStop();
                    }
                    if (!this.hasStopped) {
                        this.calcTimePassed();
                        this.generateFrame();
                        this.onFrameEntered(this.frame);
                        if (this.timePassed >= this.duration && this.stopWhenDurationPassed) {
                            this.state = 2;
                        }
                    }
                    if (this.hasStopped) {
                        if (this.keepLastFrame) {
                            this.onFrameEntered(this.frame);
                        }
                        if (this.loop) {
                            this.reset();
                        }
                    }
                }
            };
            this.reset = function() {
                this.timestamp = null;
                this.hasStopped = false;
                this.state = 0;
            };
            this.generateFrame = function() {
                if (this.generate) {
                    this.state = 1;
                    switch (this.animation) {
                        case _0x28a15f.wave:
                            this.frame = this.wave(this.timePassed);
                            break;
                        case _0x28a15f.halfWave:
                            this.frame = this.halfWave(this.timePassed);
                            break;
                        case _0x28a15f.arc:
                            this.frame = this.arc(this.timePassed);
                            break;
                        case _0x28a15f.quad:
                            this.frame = this.quad(this.timePassed);
                            break;
                        case _0x28a15f.bow:
                            if (this.vars == undefined) {
                                this.vars = {
                                    v1: 1
                                };
                            }
                            this.frame = this.bow(this.timePassed);
                            break;
                        case _0x28a15f.bounce:
                            this.frame = this.bounce(this.timePassed);
                            break;
                        case _0x28a15f.elastic:
                            if (this.vars == undefined) {
                                this.vars = {
                                    v1: 1
                                };
                            }
                            this.frame = this.elastic(this.timePassed);
                            break;
                        case _0x28a15f.bounceEaseOut:
                            this.frame = this.bounceEaseOut(this.timePassed);
                            break;
                        case _0x28a15f.bounceEaseInOut:
                            this.frame = this.bounceEaseInOut(this.timePassed);
                            break;
                        default:
                            break;
                    }
                }
            };
            this.timing = function(_0x2d8b55) {
                return _0x2d8b55;
            };
            this.halfWave = function(_0x555e2f) {
                return Math.sin(Math.PI * 0.5 / this.duration * _0x555e2f) * 1;
            };
            this.wave = function(_0x2f4401) {
                return Math.sin(Math.PI * 1 / this.duration * _0x2f4401) * 1;
            };
            this.arc = function(_0x14086b) {
                return 1 - Math.sin(Math.acos(_0x14086b));
            };
            this.quad = function(_0x33ba84) {
                return Math.pow(_0x33ba84, 2);
            };
            this.bow = function(_0x382695) {
                var _0x3f6788 = this.vars.v1;
                return Math.pow(_0x382695, 2) * ((_0x3f6788 + 1) * _0x382695 - _0x3f6788);
            };
            this.bounce = function(_0xc9ac17) {
                for (let _0x1ded33 = 0, _0x2514a3 = 1, _0x4e4b50; 1; _0x1ded33 += _0x2514a3, _0x2514a3 /= 2) {
                    if (_0xc9ac17 >= (7 - _0x1ded33 * 4) / 11) {
                        return -Math.pow((11 - _0x1ded33 * 6 - _0xc9ac17 * 11) / 4, 2) + Math.pow(_0x2514a3, 2);
                    }
                }
            };
            this.elastic = function(_0x18e0f4) {
                var _0x7654c3 = this.vars.v1;
                return Math.pow(2, (_0x18e0f4 - 1) * 10) * Math.cos(Math.PI * 20 * _0x7654c3 / 3 * _0x18e0f4);
            };
            this.bounceEaseOut = function(_0x285132) {
                return 1 - this.bounce(1 - _0x285132);
            };
            this.bounceEaseInOut = function(_0x2fc491) {
                if (_0x2fc491 < 0.5) {
                    return this.bounce(_0x2fc491 * 2) / 2;
                } else {
                    return (2 - this.bounce((1 - _0x2fc491) * 2)) / 2;
                }
            };
            this.calcTimePassed = function() {
                this.timePassed = (_0x4ec996 - this.startTime) / this.frameRate;
            };
            this.onFrameEntered = function(_0x300255) {};
            this.onStop = function() {};
        }
        const _0x1f2b75 = ["anus", "anus plug", "apeshit", "apeshite", "ar5e", "b00bz", "b1+ch", "b17ch", "b1otch", "b1otchs", "b1tch", "b1tch1ng", "b1tch35", "b1tch3s", "b1tchees", "b1tches", "b1tchez", "b1tchin", "b1tching", "b1tchs", "b1tchy", "baby batter", "ballbag", "bangbros", "bassturd", "bastard", "bastardish", "bastards", "basterd", "bastid", "bastinado", "basturd", "bater", "bates", "beeotch", "bell end", "bellend", "bender", "bewbs", "beyoch", "beyotch", "bi + ch", "bi+ch", "biatch", "biches", "biotch", "biotches", "biotchez", "bishes", "bitch", "bitch3s", "bitchass", "bitchasses", "bitched", "bitcher", "bitchers", "bitches", "bitchez", "bitchfuck", "bitchhole", "bitchin", "bitchin'", "bitching", "bitchlike", "bitchness", "bitchs", "kys", "bitchslap", "bitchtits", "bitchy", "bitchy ass", "bizzach", "blacky", "blumpkin boy", "boll0ck", "bollock", "bollockchops", "bollocks", "bollocktician", "bollox", "bondage", "boner", "bonk juice", "boobs", "booty", "breasticles", "breasts", "bugger", "bugger off", "bull shit", "bullshi", "bullshit", "bullshite", "bum-bandits", "bum-driller", "bumhole", "bung hole", "butt fuck", "butt fucker", "butt hole", "butt pirate", "butt-fucker", "butt-fuckers", "butt-fucking-bandit", "butt-munchers", "buttermilk", "buttfuck", "buttfucker", "buttfuckers", "butthole", "butthole boy", "bwc", "c*nt", "c*ntface", "c*nts", "c*nty", "c00n", "c00nies", "c0ck", "c0ckhead", "c0cks", "c0cksuccer", "c0cksucked", "c0cksucker", "c0cksuckers", "c0x", "c0xux0r", "caaak", "caca", "cack", "cagone", "cajones", "cawk", "cawkmuncher", "cawks", "cawksucker", "ch1nk", "chesticles", "chingchong", "chink", "chinky", "chocha", "cholo", "clitlickers", "clusterfuck", "clusterfucked", "clusterfucker", "clusterfucking", "clusterfucks", "cock", "cock-face", "cock-gobbler", "cock-head", "cock-sucker", "cock-suckers", "cockboy", "cockeater", "cockface", "cockgobbler", "cockh3ad", "cockhead", "cockheads", "cockhed", "cockless", "cocklicker", "cockmonger", "cockmunch", "cockmuncher", "cocks", "cockshit", "cockskin", "cocksmoker", "cocksucc", "cocksuccas", "cocksuccer", "cocksuccers", "cocksuck", "cocksuckas", "cocksucked", "cocksucker", "cocksuckers", "cocksucking", "cocksucking mothafuckers", "cocksucks", "cocksuk", "cocksuka", "cocksukka", "cocsuck", "cokmuncher", "coksucka", "coolie", "coon", "coon1es", "cooni3s", "coonie", "coonies", "coons", "coot", "coot coot", "cooter", "cooter shooting", "cooterpuffing", "cooties", "cotton picker", "crazy mofos", "crazy sob", "creampie", "crotch", "crotch fiddler", "crotchy", "cuksuker", "cuksukka", "cum goon", "cumball", "cumdumpster", "cumming", "cums", "cumslut", "cumz", "cunnilingus", "cunt", "cunt ass", "cunt fart", "cunt lick", "cunt licker", "cunt lips", "cuntasaurus rex", "cuntbag", "cuntbollock", "cuntelope", "cuntits", "cuntless", "cuntlick", "cuntlicker", "cuntlickers", "cuntness", "cunts", "cunty", "cuntz", "cuunt", "cyberfck", "cyberfcks", "cyberfuccs", "cyberfucks", "cyberfucs", "cyberfukk", "cyberfukks", "cyberfvcks", "d!ck", "d!cks", "d!ld0", "d!ldo", "d0ggy style", "d1ck", "d1ckhead", "d1ckheads", "d1cks", "d1cksucker", "d1cksukka", "d1ckz", "d1ldo", "dafuq", "dago", "darkass", "darkfuck", "darkie", "darkshit", "darktard", "darky", "dick breath", "dick face", "dick fucker", "dick head", "dick licker", "dick milker", "dick nibbler", "dick smoker", "dick sucker", "dick-face", "dick-gobbler", "dick-head", "dickface", "dickfucker", "dickhead", "dickheads", "dickjockies", "dickless", "dicklicker", "dickmuncher", "dicks", "dickskin", "dickslapper", "dicksmoker", "dicksucker", "dickvag", "dickz", "diddle", "dikhead", "diks", "dild0", "dipsh1t", "dipsh1tty", "dipshat", "dipshidiot", "dipshit", "dipshite", "dipshits", "dipshitter", "dipshitty", "dipstick", "dirty sanchez", "dix", "dlck", "dlcks", "dog fuck", "dog fucker", "dog fucking", "dog shit", "dog-fucker", "dog's bollocks", "doggo style", "doggy style", "doggy_style", "dogie style", "dogsh1t", "dogsh1ts", "dogshit", "dogshits", "dogstyle", "dolt", "dong", "doosh", "dothead", "double dick", "double dicking", "double pen", "double-dong", "douche", "douche bag", "douche canoe", "douchebag", "dumasses", "dumb bastard", "dumb fucker", "dumb@ss", "dumbarrassed", "dumbass", "dumbass fucker", "dumbass mofoes", "dumbass mothafuckers", "dumbass son-of-a-bitch", "dumbasses", "dumbfucks", "dumbshit", "dump a load", "dune coon", "dyke", "erectoplasm", "f_u_c_k", "f'ed", "f'er", "f@ck", "f@cker bunny", "f@g", "f@gg0t", "f@gging", "f@ggot", "f@gs", "f@gshit", "f@k", "f0ck", "f0cked", "f0cker", "f0ckers", "face fuck", "fack", "fackuhs", "fag", "fag asses", "fag bag", "fag hag", "fag queen", "fag0t", "faget", "fagg0t", "fagging", "faggo", "faggot", "faggot mofoes", "faggot mothafuckers", "faggot nob jokeys", "faggot nobjockies", "faggot son-of-a-bitch", "faggoting", "faggots", "faggs", "faggy", "fagot", "fags", "fagshit", "fart-fucker", "fatass", "fatasses", "fccuker", "fck", "fck you", "fcka", "fckahz", "fcked", "fckedup", "fcker", "fckin", "fcking", "Fckk", "fckked", "fckking", "fcks", "fcktard", "fckyeah", "fcuk", "fcuked", "fcuker", "fcukers", "fcuking", "fcukker", "fcuks", "fcvking", "feck", "feck arse", "fecker", "feg", "fellatio aficionado", "fellator", "fick", "finger", "finger fuck", "fingerbanged", "fingerpop", "fk bunny", "fkbny", "fked", "fker", "fking", "fkings", "fkker", "flamer", "flamers", "focker", "fook", "fooker", "fookuh", "forked", "fothermuckers", "fuc", "fucc", "fucca", "fuccers", "fuccing", "fuccs", "Fuck", "fuck arse", "fuck face", "fuck faces", "fuck goblin", "fuck head", "fuck off", "fuck up", "fuck y0u", "fuck you", "fuck your", "fuck your mother", "fucka", "fuckahs", "fuckass", "fuckasses", "fuckaz", "fuckbag", "fuckboy", "fucked", "fucked up", "fuckem", "fucker", "fucker off", "fuckers", "fuckface", "fuckfaces", "fuckhead", "fuckheaded", "fuckheads", "fuckin", "fucking", "fucking A", "fucking asshole", "fucking bastard", "fucking hell", "fucking me", "retard", "fucking retard", "fucking shit", "fuckk", "fuckless", "fuckmachine", "fucknuckle", "fucks", "fuckshit", "fuckshitface", "fuckshithead", "fuckstar", "fuckster", "fuckstick", "fucktard", "fucktards", "fuckup", "fuckwad", "fuckwhore", "fucs", "fucx", "fudgefucker", "fudgepacker", "fudgepackers", "fudgepackershitter", "fudgepacking fucker", "fugged", "fugger", "fuggerz", "fuggings", "fugly", "fuk", "fuk1n", "fuk1ng", "fukcs", "fuker", "fukheads", "fukin", "fuking", "fukk", "fukka", "fukked", "fukker", "fukkers", "fukking", "fukkings", "fukkuh", "fuks", "fuku", "fukwhore", "fukwit", "full of shit", "funbags", "fuq", "futhamucka", "fux", "fux0r", "fvck", "fvck you", "fvcka", "fvckbunny", "fvcker", "fvckers", "fvckin", "fvcking", "fvckker bunny", "fvckwhi", "fxck", "fxcked", "fxcker", "fxcking", "gin jockey", "girlieboy", "gook", "gowl", "greaser", "groid", "groper", "gyp", "harry palms", "heeb", "higg@", "higg3r", "higga", "higger", "higgers", "hoar", "jewboy", "jigaboo", "jigaboos", "jigga", "jiggaboo", "jiggabooboo", "jiggaboos", "jiggabu", "jiggas", "jigger", "jiggerboo", "jiggerboos", "jiggs", "jiggyboo", "jigro", "jim crow", "jizz", "jizz eater", "jizz licker", "jizz-jockey", "jizzbags", "jizzed", "jizzes", "jizzfucker", "jizzing", "jizzsacks", "jizzstain", "jizzy", "k!k3", "k!ke", "k..!ke", "k1k3", "k1ke", "kid diddler", "kiddy touch", "kike", "kikes", "kiss ass", "kiss my ass", "kitty puncher", "kkk", "klan", "klitoris", "kneegrows", "knickers", "knob", "knob eater", "knob gobbler", "knob jockey", "knob-face", "knob-gobbler", "knob-head", "knob3d", "knob3nd", "knobd", "knobe", "knobead", "knobeads", "knobed", "knobeds", "knobend", "knobender", "knobends", "knobendy", "knobendz", "knober", "knobes", "knobgobbler", "knobhead", "knobheads", "knobjockies", "knobjocky", "knobjokey", "knobjokeys", "ku kluxer", "kyke", "l@dyb0i", "l@dyb0y", "l@dyboy", "l3i + ch", "l3i+ch", "l3itch", "l3itches", "ladboys", "ladboyz", "ladiboy", "lady-boy", "ladyb0i", "ladyb0y", "ladyboy", "ladyboys", "ladyboyz", "lesbo", "loose woman", "m@asterbated", "m@derfaker", "m@derfuck", "m@derfuckers", "m0f0", "m0f0s", "m0fo", "m0foes", "m0fos", "m0ng0l0id", "m0ngoloid", "m0thafucked", "m0thafucker", "m0thafucking", "m0therfuckeds", "m0therfucker", "m0therfucking", "m0therfvcker", "man chowder", "man meat", "man seed", "markasses", "meat curtains", "meat-sword", "mecha fag", "mega fag", "mf'er", "mf'ers", "mf'ing", "mfckers", "MFer", "MFers", "mfing", "mfk", "mfs", "mfukk", "mfukker", "milf", "mindfuck", "mof0es", "mof0s", "mofcker", "mofo", "mofo ass", "mofoes", "mofos", "mofoshit", "mofuccers", "mofucckers", "mofuck", "mofucker", "mofuckkas", "mofuk", "mofukkas", "molester", "mong", "mongoloid", "mongrel", "motha fucka", "motha fucker", "motha fuckers", "mothaf@cked", "mothafcked", "mothafcking", "Mothafucc", "mothafucced", "mothafuccer", "mothafuccing", "mothafuck", "mothafucka", "mothafuckas", "mothafuckasses", "mothafuckaz", "mothafuckazzes", "mothafucked", "mothafuckeds", "mothafucker", "mothafuckers", "mothafuckin", "mothafucking", "mothafuckings", "mothafuckins", "mothafucks", "mothafuckz", "mothafvcked", "mother effer", "mother fuck", "mother fuck you", "mother fucka", "mother fucker", "mother fuckers", "mother fucking", "mothercker", "motherf@kka", "motherfacking", "motherfcked", "motherfckin", "motherfcking", "motherfcks", "motherfckshit", "hitler", "motherfecka", "motherfecker", "motherfk", "motherfucca", "motherfuccas", "motherfuccers", "motherfuck", "motherfucked", "motherfuckeds", "motherfucker", "motherfuckers", "motherfuckin", "motherfucking", "motherfuckings", "motherfuckingshit", "motherfuckins", "motherfuckka", "motherfuckkas", "motherfuckkers", "motherfucks", "motherfukka", "motherfukker", "motherfukkings", "motherfvck", "motherfvcked", "motherfvckeds", "motherfvcker", "motherfvckers", "motherfvcking", "motherfxck", "motherfxcking", "mothfck", "mothter fuck", "mtherfuker", "mthrfcker", "muddafukkas", "mudderfuk", "mudderfukker", "mufdive", "mufdivin", "muff", "muffdiving", "muffdivings", "muffindivin", "muffindiving", "muhfucking", "mushroom tip", "mutha fucka", "mutha fucker", "muthafecker", "muthafeckers", "muthafucka", "muthafuckers", "muthafuckings", "muthafuckker", "muthafuckkers", "muthafukka", "mutherfucker", "mutherfuckers", "n0bhead", "n0bj0cky", "n1ckker", "ngger", "ngge", "ngga", "n1g3r", "n1g3rz", "n1gg@", "n1gg@hs", "n1gg3r", "n1gg3rs", "n1gga", "n1ggah", "n1ggahs", "n1ggas", "n1ggazes", "n1gger", "n1ggers", "n1gguh", "n3gro", "negga", "neggar", "negr0", "negro", "negroes", "negroid", "niccer", "nicka", "nickas", "nicker", "nickk3r", "nickker", "nig-nog", "niga", "nigah", "nigasses", "nigers", "kys", "kill yourself", "nigg@", "nigg@hs", "nigg@s", "nigg@z", "nigg@zzes", "nigg3r", "nigg3rs", "nigg4h", "nigg4hs", "nig ger", "niger", "niga", "niggÐ°", "niggÐµr", "nigga", "nigga lover", "niggah", "niggahs", "niggahz", "niggas", "niggger", "niggass", "niggaz", "niggazzes", "nigger", "niggers", "niggerz", "nigge", "niggir", "niggress", "nigguh", "nigguhs", "nigguhz", "nigg", "n@gga", "n@gg@", "ni@@a", "niglet", "nignigs", "nignog", "nigra", "nigre", "nigs", "niguh", "nikk3r", "nikkas", "nikker", "pussylickers", "pussys", "pussywhipped", "puta", "puussy", "puzzies", "puzzy", "queerasses", "S&M", "sack", "salad tosser", "sambo", "sand nigger", "sausage jockey", "scamfuck", "schlong", "scumfuck", "scumfucker", "scumfvck", "scummy", "shytfeisterfuck", "sissy", "snatch licker", "soab", "soppy bollucks", "sphincter", "spic", "spicfuck", "spick", "spics", "spicshit", "spig", "spik", "spix", "spook", "spooks", "spunk", "stump chewer", "stupid fucker", "stupidasses", "sum of a bitch", "sumbitch", "swine", "swine fucker", "tacohead", "tadger", "tallywacker", "tar-baby", "throater", "tits", "tosser", "tossing salad", "towelhead", "towelheads", "towelshithead", "trashybitches", "trouser snake", "trousersnake", "turdcutter", "turdhead", "tw@t", "twa+", "twat", "twat waffle", "twatface", "twats", "twatt", "twattish", "twatzilla", "twink", "upskirts", "vag", "vulva", "w@nker", "w@nkers", "w4nk3r", "w4nker", "wang", "wang wrangler", "wank", "wank off", "wank3r", "wank3rs", "wankbastard", "wanked", "wanker", "wankers", "wankies", "wanking", "wanks", "we1back", "weenie", "weiner", "wet back", "wetback", "wetbacks", "wh0r3", "wh0re"];
        const _0x2af914 = ["ï·½"];
        const _0x1ab03a = function(_0x201be6, _0x50ce87, _0x374a69, _0x22f4f2) {
            let _0x4c777b = _0x50ce87;
            let _0x154a4e = _0x374a69;
            var _0xbc7bfa = _0x201be6.split("");
            for (var _0x212635 = _0x4c777b; _0x212635 < _0x154a4e; _0x212635++) {
                _0xbc7bfa[_0x212635] = _0x22f4f2;
            }
            return _0xbc7bfa.join("");
        };
        const _0x292e5a = function(_0x1739b3) {
            let _0x677d50 = _0x409912(_0x1739b3);
            for (var _0x3dc4ad in _0x2af914) {
                _0x677d50 = _0x4825b1(_0x677d50, _0x2af914[_0x3dc4ad], "-");
            }
            return _0x677d50;
        };
        const _0x409912 = function(_0x1138b1) {
            if (_0x48b077) {
                return _0x1138b1;
            }
            for (var _0x334934 in _0x1f2b75) {
                _0x1138b1 = _0x4825b1(_0x1138b1, _0x1f2b75[_0x334934]);
            }
            return _0x1138b1;
        };
        const _0x4825b1 = function(_0x3d5293, _0x1e5b3e, _0x20d4e6 = "8") {
            let _0x2ddb3e = _0x3d5293.normalize("NFKC");
            let _0x292720 = _0x2ddb3e.toLowerCase();
            let _0x3b609c = _0x292720.indexOf(_0x1e5b3e);
            if (_0x3b609c >= 0) {
                _0x3d5293 = _0x1ab03a(_0x3d5293, _0x3b609c, _0x3b609c + _0x1e5b3e.length, _0x20d4e6);
                _0x3d5293 = _0x4825b1(_0x3d5293, _0x1e5b3e, _0x20d4e6);
            }
            return _0x3d5293;
        };
        var _0x8306e = window.innerWidth;
        class _0x343eee {
            constructor(_0x2f03af) {
                this.season = _0x2f03af;
            }
            loadMiniMap(_0x2d9e86) {}
            static create(_0x26212b) {
                let _0x194e49 = _0x26212b.readUInt8();
                this.season = _0x194e49;
                switch (_0x194e49) {
                    case 1:
                    case 2:
                        let _0x359689 = new _0x449e05();
                        _0x359689.loadMiniMap(_0x26212b);
                        return _0x359689;
                }
                return null;
            }
        }
        class _0x449e05 extends _0x343eee {
            constructor() {
                super(1);
            }
            loadMiniMap(_0x17dca3) {
                let _0x1454ce = _0x17dca3.readUInt16() * 1;
                let _0x276647 = _0x17dca3.readUInt16() * 1;
                let _0x44e944 = _0x17dca3.readUInt16();
                let _0x15c472 = _0x17dca3.readUInt16();
                let _0x37fdec = _0x17dca3.readUInt16();
                let _0x147d5a = _0x17dca3.readUInt16();
                let _0x3bcd59 = _0x17dca3.readUInt16();
                let _0x556fe2 = 1;
                let _0x41a5c8 = 1;
                let _0x773214 = {
                    scale: _0x1454ce,
                    objScale: _0x276647,
                    mapWidth: _0x44e944,
                    mapHeight: _0x15c472,
                    width: _0x8306e,
                    height: _0x8306e,
                    gameWidth: _0x37fdec,
                    gameHeight: _0x147d5a,
                    scaleX: _0x556fe2,
                    scaleY: _0x41a5c8,
                    totalObjects: _0x3bcd59,
                    objects: []
                };
                for (let _0x5b3440 = 0; _0x5b3440 < _0x3bcd59; _0x5b3440++) {
                    let _0x58268e = _0x17dca3.readUInt16();
                    for (let _0x543a36 = 0; _0x543a36 < _0x58268e; _0x543a36++) {
                        let _0x5ed9da = _0x17dca3.readUInt16();
                        let _0x192932 = _0x17dca3.readUInt16();
                        let _0x25e003 = _0x17dca3.readUInt8() == 1;
                        let _0x2fe023 = {
                            isRect: _0x25e003,
                            objType: _0x5ed9da
                        };
                        if (_0x5ed9da == _0x30ede3) {
                            _0x2fe023.teamID = _0x17dca3.readUInt8();
                            _0x2fe023.outline = "black";
                        }
                        if (_0x25e003) {
                            let _0x52dfe8 = _0x17dca3.readUInt16();
                            let _0x2f43cf = _0x17dca3.readUInt16();
                            let _0x585e4c = _0x17dca3.readUInt16();
                            let _0xe0cb45 = _0x17dca3.readUInt16();
                            _0x2fe023.w = _0x585e4c;
                            _0x2fe023.h = _0xe0cb45;
                            _0x2fe023.x = _0x52dfe8;
                            _0x2fe023.y = _0x2f43cf;
                        } else {
                            let _0x4eea48 = _0x17dca3.readUInt16();
                            let _0x15cf12 = _0x17dca3.readUInt16();
                            let _0x451cb7 = _0x17dca3.readUInt16();
                            _0x2fe023.r = _0x4eea48;
                            _0x2fe023.x = _0x15cf12;
                            _0x2fe023.y = _0x451cb7;
                        }
                        _0x2fe023.c = this.getColorForObjType(_0x5ed9da, _0x192932);
                        _0x2fe023.biome = _0x192932;
                        _0x773214.objects.push(_0x2fe023);
                    }
                }
                _0x596003 = new _0x5d3089(_0x773214);
                _0x596003.setPlayersCount(_0x170cf4);
            }
            getColorForObjType(_0x1655e3, _0x164620) {
                switch (_0x1655e3) {
                    case _0x208477:
                        return _0x20b682;
                    case _0x43b42f:
                        return _0x38b843;
                    case _0x315f18:
                        return "#c8b745";
                    case _0x143680:
                        return "white";
                    case _0x5983d9:
                        return _0x5da83c;
                    case _0x5a2c61:
                        return _0x51276a;
                    case _0x9598c7:
                        return _0x5da83c;
                    case _0x45aeb2:
                        return "#07631f";
                    case _0x5075c2:
                        return _0x20b682;
                    case _0x2c3383:
                        return _0x20b682;
                    case _0x413190:
                        return "#907A33";
                    case _0x3cf77e:
                        return "#7BB7BB";
                    case _0x162398:
                        return _0x38b843;
                    case _0x3da3e9:
                        return _0x24c2eb;
                    case _0x2d6c4a:
                        return _0x504cbf;
                    case _0x169f9e:
                        return _0x35f688;
                    case _0x40e3c5:
                        return _0x5207bf;
                    case _0x4b2c05:
                        return _0x4fbc4b;
                    case _0x3f0029:
                        return _0x35f688;
                    case _0x27ccb3:
                        return _0x4f5804;
                    case _0x132d0f:
                        return _0x335e4d;
                    case _0x5df6c:
                    case _0x2ce7e6:
                        if (_0x164620 == _0x36f07b) {
                            return "#8f822e";
                        } else if (_0x164620 == _0x16f106) {
                            return "red";
                        } else if (_0x164620 == _0x5d8525) {
                            return "#198ebd";
                        }
                        return "brown";
                    case _0x2a77cf:
                        if (_0x164620 == _0x36f07b) {
                            return "#8f822e";
                        } else if (_0x164620 == _0x16f106) {
                            return "white";
                        }
                        return "#00b01a";
                    default:
                        return "green";
                }
            }
        }
        let _0x3e506a = null;
        let _0x596003 = null;
        var _0x2809d9 = [];
        var _0x46a09d = [];
        var _0x4eb5bd = {};
        var _0x54cc88 = null;

        function _0x1fbd8e(_0x2e156a) {
            var _0x45f4dc = _0x2e156a.readUInt32();
            if (_0x45f4dc > 0) {
                _0x54cc88 = {
                    id: _0x45f4dc,
                    x: _0x2e156a.readUInt32(),
                    y: _0x2e156a.readUInt32(),
                    rad: 3
                };
            }
        }

        function _0x4c9101(_0x57b700, _0x2d8f17, _0x2ffd07) {
            if (_0x57b700) {
                var _0xe794f6 = _0x149ef1 * Math.max(3, _0x57b700.rad * (_0x596003.miniMapCanvas.width / _0x5039a5));
                _0x39e82d.save();
                if (_0x166276 == _0x57b700.id) {
                    _0x39e82d.globalAlpha = 1;
                } else {
                    _0x39e82d.globalAlpha = 0.7;
                }
                var _0x42c7ee = _0x19e9b5 - (_0x149ef1 * 10 + _0x596003.miniMapCanvas.width * _0x53a3ae) + _0x57b700.x * (_0x596003.miniMapCanvas.width * _0x53a3ae) / _0x5039a5;
                var _0x169204 = _0x149ef1 * 10 + _0x57b700.y * (_0x596003.miniMapCanvas.height * _0x53a3ae) / _0x396098;
                _0x39e82d.beginPath();
                _0x39e82d.fillStyle = _0x2d8f17;
                _0x39e82d.arc(_0x42c7ee, _0x169204, _0xe794f6, 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.restore();
            }
        }

        function _0x3a55a7(_0x4eff56, _0x3d5c88, _0x15c4d2, _0x388160) {
            if (_0x4eff56) {
                _0x39e82d.globalAlpha = _0x388160 ? _0x388160 : 1;
                _0x39e82d.fillStyle = _0x3d5c88;
                _0x39e82d.beginPath();
                var _0x4e53f1 = _0x149ef1 * Math.max(2, _0x4eff56.rad);
                var _0x2e8be = _0x19e9b5 - (_0x149ef1 * 10 + _0x596003.miniMapCanvas.width * _0x53a3ae) + pObj.x * (_0x596003.miniMapCanvas.width * _0x53a3ae) / _0x5039a5;
                var _0x1c6278 = _0x149ef1 * 10 + pObj.y * (_0x596003.miniMapCanvas.height * _0x53a3ae) / _0x396098;
                _0x39e82d.arc(_0x2e8be, _0x1c6278, _0x4e53f1 * _0x15c4d2, 0, Math.PI * 2);
                _0x39e82d.fill();
            }
        }
        class _0x51545b {
            constructor() {
                this.subscribers = {};
            }
            subscribe(_0x4aa3ae, _0x2a403b) {
                if (!this.subscribers[_0x4aa3ae]) {
                    this.subscribers[_0x4aa3ae] = [];
                }
                this.subscribers[_0x4aa3ae].push(_0x2a403b);
            }
            emit(_0x5570ac, _0x29ad29) {
                const _0x2acab6 = this.subscribers[_0x5570ac];
                if (_0x2acab6) {
                    _0x2acab6.forEach(_0x4d1895 => _0x4d1895(_0x29ad29));
                }
            }
        }
        class _0x40692c {
            constructor() {}
            static type = 0;
            send() {}
        }
        class _0x542057 {
            constructor() {}
            static type = 0;
            static validate() {}
            static handle() {}
        }
        class _0x39a87b {
            constructor() {}
            static type = 0;
            static send() {}
            static validate() {}
            static handle() {}
        }
        class _0x3358bc extends _0x40692c {
            constructor() {
                super();
            }
            static type = 1;
            static send(_0xb70324, _0x3d3c1c) {
                let _0x900d94 = 11;
                if (_0x3d3c1c && _0x3d3c1c.length) {
                    _0x900d94 += _0x3d3c1c.length;
                }
                const _0x3d4994 = new _0x1f27e2(_0x900d94);
                _0x3d4994.writeUInt8(_0x3358bc.type);
                _0x3d4994.writeUInt16(_0x19e9b5);
                _0x3d4994.writeUInt16(_0x1519a6);
                _0x3d4994.writeUInt16(_0x8306e);
                if (_0x3d3c1c) {
                    _0x3d4994.writeString(_0x3d3c1c);
                } else {
                    _0x3d4994.writeString("");
                }
                _0xb70324.send(_0x3d4994.dataView.buffer);
            }
        }
        class _0x2b0735 extends _0x542057 {
            constructor() {}
            static type = 2;
            static handle(_0x2f7fe6) {
                const _0x43e15c = _0x2f7fe6.readString();
                const _0x19beec = _0x2f7fe6.readUInt16();
                const _0x1e1f81 = _0x2f7fe6.readUInt8();
                const _0x4ecb3e = _0x2f7fe6.readUInt8();
                const _0x1e3f0f = _0x2f7fe6.readString();
                const _0x42ed41 = _0x2f7fe6.readUInt8() == 1;
                const _0x84b046 = _0x2f7fe6.readUInt16();
                _0x5b021b = [];
                for (let _0x5eb322 = 0; _0x5eb322 < _0x84b046; _0x5eb322++) {
                    var _0x2a3360 = _0x35d268.createStaticObj(_0x2f7fe6);
                    _0x5b021b.push(_0x2a3360);
                }
                return {
                    sessionId: _0x43e15c,
                    gameVersion: _0x19beec,
                    gameMode: _0x1e1f81,
                    season: _0x4ecb3e,
                    serverId: _0x1e3f0f,
                    isAliveInGame: _0x42ed41
                };
            }
        }
        class _0xe36091 extends _0x542057 {
            constructor() {
                super();
            }
            static type = 17;
            static handle(_0x489246) {
                const _0x32993f = _0x489246.readUInt16();
                const _0x5edd47 = _0x489246.readUInt16();
                const _0x35fab3 = _0x489246.readUInt16();
                const _0xad6f97 = _0x489246.readUInt16();
                const _0xc3ac87 = _0x489246.readUInt16();
                return {
                    gameWidth: _0x32993f,
                    gameHeight: _0x5edd47,
                    camX: _0x35fab3,
                    camY: _0xad6f97,
                    camZoom: _0xc3ac87
                };
            }
        }
        class _0x360af9 extends _0x40692c {
            constructor() {
                super();
            }
            static type = 113;
            static send(_0x37bb1a, _0x3c8811, _0x14e082, _0x108024) {
                if (!_0x3c8811) {
                    _0x3c8811 = "mope.io";
                }
                const _0x59b7a2 = 7 + _0x31205b(_0x3c8811).length;
                const _0x162693 = new _0x1f27e2(_0x59b7a2);
                _0x162693.writeUInt8(_0x360af9.type);
                _0x162693.writeUInt16(_0x14e082);
                _0x162693.writeUInt16(_0x108024);
                _0x162693.writeString(_0x3c8811);
                _0x37bb1a.send(_0x162693.dataView.buffer);
            }
        }
        class _0x390d7f extends _0x39a87b {
            constructor() {
                super();
            }
            static type = 24;
            static readUpgradeMenu(_0x10af7a) {
                const _0xf3c9f2 = _0x10af7a.readUInt8();
                const _0x184be9 = _0x10af7a.readUInt8();
                const _0xe521c5 = _0x10af7a.readUInt8();
                console.log("timeout on message: " + _0xe521c5);
                const _0x5cf1c0 = _0x10af7a.readUInt8();
                const _0x181c88 = _0x10af7a.readUInt8();
                const _0xcfcfb7 = [];
                for (var _0x24c7f3 = 0; _0x24c7f3 < _0x181c88; _0x24c7f3++) {
                    let _0x1d3efe = _0x10af7a.readUInt8();
                    const _0x25a841 = _0x10af7a.readUInt8();
                    const _0x18c063 = _0x10af7a.readUInt8();
                    const _0x39e156 = _0x10af7a.readUInt8();
                    const _0x357f9a = _0x10af7a.readUInt16();
                    const _0x2288d2 = _0x10af7a.readUInt8();
                    const _0x25cdaa = _0x10af7a.readUInt8();
                    let _0x11e89c = _0x10af7a.readUInt8() == 1;
                    const _0x48b95a = _0x10af7a.readString();
                    const _0x4e1d17 = _0x24c7f3;
                    const _0xca0e06 = _0x48b95a != null && _0x48b95a !== "null";
                    let _0x2e1b97 = 0;
                    let _0x19a715 = null;
                    if (_0x48b95a) {
                        if (_0x247e4a.shop != null && _0x247e4a.shop.allItems != null) {
                            var _0x15293b = _0x247e4a.shop.allItems["" + _0x48b95a];
                            if (_0x15293b) {
                                _0x19a715 = _0x15293b;
                                _0x2e1b97 = _0x15293b.price > 0 ? _0x15293b.price : 0;
                            }
                        }
                    }
                    _0x11e89c = _0x11e89c || _0x2e1b97 == 0;
                    const _0x42ed26 = {
                        forLvl: _0x5cf1c0,
                        abilities: [],
                        anAniT: _0x25a841,
                        biomeNum: _0x18c063,
                        species: _0x39e156,
                        subSpecies: _0x357f9a,
                        premiumSkinType: _0x2288d2,
                        season: _0x1d3efe,
                        skinThemeID: _0x25cdaa,
                        isBought: _0x11e89c,
                        itemId: _0x48b95a,
                        itemIndex: _0x4e1d17,
                        isShopItem: _0xca0e06,
                        coinsPrice: _0x2e1b97,
                        shopItem: _0x19a715,
                        choiceIndex: _0x4e1d17
                    };
                    const _0x1c1eda = _0x35d268.createGameObjOfOType(_0x48c056, _0x25a841);
                    _0x1c1eda.animalType = _0x25a841;
                    _0x1c1eda.animalSpecies = _0x39e156;
                    _0x1c1eda.animalSubSpecies = _0x357f9a;
                    _0x1c1eda.animalPremiumSkin = _0x2288d2;
                    _0x1c1eda.mopeSeasonID = _0x1d3efe;
                    _0x1c1eda.skinThemeID = _0x25cdaa;
                    _0x1c1eda.curBiome = _0x18c063;
                    if (_0x1c1eda.animalInfo) {
                        const _0x449b47 = _0x1c1eda.animalInfo();
                        _0x42ed26.itemId = _0x449b47.aniName;
                        _0x42ed26.name = _0x449b47.aniName;
                    }
                    _0x42ed26.abilities = _0x1c1eda.getAbilityInfo();
                    _0x42ed26.itemId = _0x35d268.getClassForGameObjType(_0x48c056, _0x25a841).name;
                    if (_0x1c1eda.animalInfo) {
                        const _0x3da605 = _0x1c1eda.animalInfo();
                        _0x42ed26.itemId = _0x3da605.aniName;
                        _0x42ed26.name = _0x3da605.aniName;
                    }
                    _0x42ed26.shopImage = _0x1c1eda.getUpgradeImagePath();
                    _0xcfcfb7.push(_0x42ed26);
                }
                return {
                    isSpectator: _0xf3c9f2,
                    gameSession: _0x184be9,
                    timeout: _0xe521c5,
                    upgradeLevel: _0x5cf1c0,
                    animalChoices: _0xcfcfb7
                };
            }
            static handle(_0xca887c) {
                const {
                    isSpectator: _0x303541,
                    gameSession: _0x5399f6,
                    timeout: _0x275454,
                    upgradeLevel: _0x342bd8,
                    animalChoices: _0x441150
                } = _0x390d7f.readUpgradeMenu(_0xca887c);
                console.log("select timeout: " + _0x275454);
                return {
                    isSpectator: _0x303541,
                    gameSession: _0x5399f6,
                    timeout: _0x275454,
                    upgradeLevel: _0x342bd8,
                    animalChoices: _0x441150
                };
            }
            static send(_0x3dc072, _0x54feff) {
                const _0x1e2ed8 = 2;
                const _0x25ef8e = new _0x1f27e2(_0x1e2ed8);
                _0x25ef8e.writeUInt8(_0x390d7f.type);
                _0x25ef8e.writeUInt8(_0x54feff);
                _0x3dc072.send(_0x25ef8e.dataView.buffer);
            }
        }
        class _0x38ca8c extends _0x40692c {
            constructor() {
                super();
            }
            static type = 11;
            static send(_0x46211c) {
                const _0x909b6f = new _0x1f27e2(1);
                _0x909b6f.writeUInt8(_0x38ca8c.type);
                _0x46211c.send(_0x909b6f.dataView.buffer);
            }
        }
        class _0x3db312 extends _0x39a87b {
            constructor() {
                super();
            }
            static type = 114;
            static handle(_0xad9f2b) {
                let _0x101fd6 = [];
                const _0x4d9fda = _0xad9f2b.readUInt8();
                for (var _0x308f19 = 0; _0x308f19 < _0x4d9fda; _0x308f19++) {
                    const _0x613756 = _0xad9f2b.readUInt8();
                    const _0x121933 = _0xad9f2b.readString();
                    const _0x342a75 = _0xad9f2b.readUInt8() == 1;
                    if (_0x342a75) {
                        const _0x267ca6 = _0xad9f2b.readUInt8() == 1;
                        const _0x426c31 = _0xad9f2b.readUInt8() == 1;
                        const _0x4c3cbf = _0xad9f2b.readString();
                        const _0x58a1bd = _0xad9f2b.readString();
                        _0x101fd6.push({
                            buffType: _0x613756,
                            name: _0x121933,
                            itemId: _0x58a1bd,
                            bought: _0x342a75,
                            active: _0x267ca6,
                            paused: _0x426c31,
                            buffTier: _0x4c3cbf
                        });
                    } else {
                        _0x101fd6.push({
                            buffType: _0x613756,
                            name: _0x121933
                        });
                    }
                }
                _0x101fd6 = _0x19735d(_0x101fd6);
                console.log("UserBuffsMsgType =>", _0x101fd6);
                $bus.emit($bus.EVENTS.PLAYER_POWERUPS, _0x101fd6);
            }
        }

        function _0x22b155(_0x577ed8) {
            if (!_0x577ed8) {
                return _0x577ed8;
            }
            return _0x577ed8.toUpperCase();
        }

        function _0x19735d(_0x2cb225) {
            const _0x4f87a2 = _0x247e4a.shop.buffs;
            _0x2cb225.forEach(_0x162cda => {
                let _0x123462 = new Array();
                _0x4f87a2.forEach(_0x5b1c39 => {
                    if (_0x162cda.itemId !== undefined) {
                        if (_0x5b1c39.itemId === _0x162cda.itemId && _0x123462.length == 0) {
                            _0x123462.push(_0x5b1c39);
                        }
                    } else if (_0x5b1c39.buffType === _0x162cda.buffType) {
                        _0x123462.push(_0x5b1c39);
                    }
                });
                _0x162cda.icon = "assets/powerups/powerup-" + _0x162cda.name + ".png";
                _0x162cda.buffLabel = _0x22b155(_0x162cda.name) + " BUFF";
                _0x162cda.itemId = _0x123462[0].itemId;
                _0x162cda.duration = _0x123462[0].duration;
                _0x162cda.progress = "";
                if (_0x162cda.bought === undefined) {
                    _0x162cda.status = "buy";
                    _0x162cda.action = "BUY";
                } else if (_0x162cda.bought == true && _0x162cda.active == false) {
                    _0x162cda.status = "activate";
                    _0x162cda.action = "ACTIVATE";
                    _0x162cda.progress = _0x123462[0].tier;
                    _0x162cda.duration = _0x123462[0].duration;
                } else if (_0x162cda.bought == true && _0x162cda.active == true) {
                    _0x162cda.status = "in-progress";
                    _0x162cda.action = _0x123462[0].duration + "m";
                    _0x162cda.progress = _0x123462[0].tier;
                }
                _0x162cda.label = _0x123462.length == 1 ? _0x123462[0].tier : "";
                _0x162cda.options = new Array();
                _0x123462.forEach(_0x319476 => {
                    _0x162cda.options.push({
                        itemId: _0x319476.itemId,
                        icon: _0x162cda.icon,
                        label: _0x319476.tier,
                        cost: _0x319476.price,
                        duration: _0x319476.duration
                    });
                });
            });
            return _0x2cb225;
        }
        class _0x461e69 extends _0x39a87b {
            constructor() {
                super();
            }
            static type = 115;
            static handle(_0x471636) {
                const _0x1fd5ec = [];
                const _0x286e7e = _0x471636.readUInt8();
                for (var _0x5ec59f = 0; _0x5ec59f < _0x286e7e; _0x5ec59f++) {
                    const _0x5e5d2e = _0x471636.readUInt8();
                    _0x1fd5ec.push({
                        buffType: _0x5e5d2e
                    });
                }
            }
        }
        var _0x87b89 = ["Team Mode", "Wild Mope"];
        var _0x51eaa5 = false;
        var _0x31d39d = false;
        var _0x1a04b4;
        var _0x2f8221 = [];
        var _0x2cfbcc = null;
        var _0x86b138 = null;
        var _0x1f63c9 = {};

        function _0x222b7f(_0x58d5b3) {
            if (_0x58d5b3 in _0x1f63c9) {
                return Math.round(_0x1f63c9[_0x58d5b3] * 1000) / 1000;
            } else {
                return "?";
            }
        }

        function _0x1eb99a(_0x1a066e) {
            this.serverObj = _0x1a066e;
            var _0x5251cb = window.location.protocol === "https:" ? "wss://" : "ws://";
            var _0x1063c0 = _0x5251cb + this.serverObj.serverConnURL + "/ping";
            this.testWs = new WebSocket(_0x1063c0);
            this.startT = +new Date();
            this.testWs.binaryType = "arraybuffer";
            var _0x2590ed = this;
            this.pingsRec = 0;
            this.pingsDelayMsTot = 0;
            this.testWs.onopen = function() {
                _0x2590ed.sendPing();
            };
            this.sendPing = function() {
                var _0x42fe59 = new _0x1f27e2(1);
                _0x42fe59.writeUInt8(255);
                _0x2590ed.testWs.send(_0x42fe59.dataView.buffer);
                this.startT = +new Date();
            };
            this.testWs.onmessage = function(_0xf3a3a) {
                var _0xf3a3a = new _0x38f987(new DataView(_0xf3a3a.data));
                if (_0xf3a3a.readUInt8() == 255) {
                    var _0x2bb4e5 = +new Date() - _0x2590ed.startT;
                    _0x2590ed.pingsRec += 1;
                    _0x2590ed.pingsDelayMsTot += _0x2bb4e5;
                    if (_0x2590ed.pingsRec >= 4) {
                        _0x2590ed.serverObj.ping = _0x2590ed.pingsDelayMsTot / _0x2590ed.pingsRec;
                        _0x1f63c9[_0x2590ed.serverObj.region] = _0x2590ed.serverObj.ping;
                        _0x2590ed.testWs.close();
                        _0x44d513(_0x2590ed);
                    } else {
                        _0x2590ed.sendPing();
                    }
                }
            };
            this.testWs.onerror = function(_0x7e97c9) {
                console.log("TestWS: error connecting to server " + _0x2590ed.serverObj.name + " IP " + _0x2590ed.serverObj.ip + _0x7e97c9);
            };
            this.testWs.onclose = function(_0x6943c5) {};
        }
        var _0x145373 = 0;

        function _0x318c4c(_0x1fdd7e) {
            if (_0x51eaa5) {
                return;
            }
            _0x145373 = 0;
            _0x86b138 = _0x1fdd7e;
            _0x51eaa5 = true;
            _0x2cfbcc = _0x925cfa;
            for (var _0x5adf8a in _0x354525) {
                if (_0x354525.hasOwnProperty(_0x5adf8a) && _0x354525[_0x5adf8a].length > 0 && !_0xca2adc(_0x5adf8a)) {
                    var _0x5706a3 = _0x354525[_0x5adf8a][0];
                    _0x2f8221.push(new _0x1eb99a(_0x5706a3));
                }
            }
            _0x1a04b4 = setTimeout(function() {
                if (_0x145373 == 0) {
                    console.log("Doing slower ping test...");
                    _0x1a04b4 = setTimeout(function() {
                        for (var _0x271e66 = 0; _0x271e66 < _0x2f8221.length; _0x271e66++) {
                            _0x2f8221[_0x271e66].testWs.close();
                        }
                        _0x594e5b();
                    }, 5000);
                } else {
                    for (var _0xc66b9f = 0; _0xc66b9f < _0x2f8221.length; _0xc66b9f++) {
                        _0x2f8221[_0xc66b9f].testWs.close();
                    }
                    _0x594e5b();
                }
            }, 2000);
        }

        function _0x504e7a(_0xad049d) {}

        function _0x44d513(_0x6c8cd0) {
            if (_0x6c8cd0.serverObj.ping < _0x2cfbcc.ping) {
                _0x2cfbcc = _0x6c8cd0.serverObj;
            }
            var _0x26ee4a = _0x2f8221.indexOf(_0x6c8cd0);
            if (_0x26ee4a != -1) {
                _0x2f8221.splice(_0x26ee4a, 1);
            }
            _0x145373 += 1;
            if (_0x2f8221.length == 0) {
                if (_0x1a04b4) {
                    clearTimeout(_0x1a04b4);
                }
                _0x594e5b();
            }
        }

        function _0x594e5b() {
            if (_0x51eaa5) {
                _0x31d39d = true;
            }
            _0x51eaa5 = false;
            console.log("@@@@  Fastest region is " + _0x2cfbcc.region + " with ping " + _0x2cfbcc.ping + "ms ");
            _0x241767 = _0x2cfbcc.region;
            _0x86b138();
        }

        function _0xca2adc(_0x40a1f2) {
            for (var _0x33a522 = 0; _0x33a522 <= _0x87b89.length; _0x33a522++) {
                if (_0x87b89[_0x33a522] == _0x40a1f2) {
                    return true;
                }
            }
            return false;
        }
        $MOPE_AD_ID = {
            MENU: "mope-io_300x250",
            FOOTER: "mope-io_728x90"
        };
        var _0x281f21 = 0;
        var _0x318ae0 = false;
        var _0xe9fc21 = false;
        var _0xb30c9a;
        var _0x44d011 = window.innerWidth;
        var _0x7bfd38 = window.innerHeight;
        var _0x44d011 = window.innerWidth;
        var _0x7bfd38 = window.innerHeight;
        var _0x4cdf4f = {};
        var _0x2ac502 = false;
        _0x4cdf4f[$MOPE_AD_ID.MENU] = false;
        _0x4cdf4f[$MOPE_AD_ID.FOOTER] = false;

        function _0x1edde9() {
            const _0x133305 = document.getElementById("eg-ccpa-msg-id");
            if (_0x133305) {
                _0x133305.remove();
            }
        }
        const _0x26e556 = () => new Promise(_0x3af331 => {
            const _0x63554 = "https://api.adinplay.com/libs/aiptag/pub/LBS/mope.io/tag.min.js";
            fetch(new Request(_0x63554)).then(_0x406d87 => _0x3af331(false)).catch(_0x1ccf8f => _0x3af331(true));
        });
        async function _0x5ea910() {
            _0x318ae0 = false;
            const _0x58a9d5 = "https://api.adinplay.com/libs/aiptag/pub/LBS/mope.io/tag.min.js";
            try {
                await fetch(new Request(_0x58a9d5)).catch(_0x35af1f => _0x318ae0 = true);
            } catch (_0x5a2ce4) {
                _0x318ae0 = true;
            } finally {
                console.log("AdBlock Enabled: " + _0x318ae0);
            }
        }
        if (!_0xc4d403) {
            if (document.getElementById("xTRbLiXhOoyu_adsbl0ck")) {
                _0x5ea910();
            } else {
                _0x318ae0 = true;
            }
            console.log("ad block enabled:", _0x318ae0);
        }

        function _0x1e4d0c() {
            var _0x5cf6bd = navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);
            if (_0x5cf6bd) {
                return parseInt(_0x5cf6bd[2], 10);
            } else {
                return false;
            }
        }
        var _0x46cdc0 = !_0xc4d403 && _0x1e4d0c() && (_0x1e4d0c() == 84 || _0x1e4d0c() == 85);
        var _0x59bd85 = false;
        if (_0x46cdc0 && !_0x59bd85) {
            console.log("slow chrome!");
            var _0x4019e9 = document.getElementById("chromebugdiv");
            if (_0x4019e9) {
                _0x4019e9.style.display = "block";
            }
            var _0x4019e9 = document.getElementById("chromebugp");
            if (_0x4019e9) {
                _0x4019e9.innerHTML = "Your browser (Chrome V " + _0x1e4d0c() + ") has a bug, which can make mope.io laggy!";
            }
            var _0x4019e9 = document.getElementById("chromebug_closebut");
            if (_0x4019e9) {
                _0x4019e9.onclick = function() {
                    var _0x1a50ad = document.getElementById("chromebugdiv");
                    if (_0x1a50ad) {
                        _0x1a50ad.parentNode.removeChild(_0x1a50ad);
                    }
                    if (window.localStorage) {
                        try {
                            window.localStorage.setItem("chromeBug_closed", true);
                        } catch (_0x48a29b) {}
                    }
                };
            }
        } else {
            var _0x4019e9 = document.getElementById("chromebugdiv");
            if (_0x4019e9) {
                _0x4019e9.parentNode.removeChild(_0x4019e9);
            }
        }
        console.log("Chrome version " + _0x1e4d0c());
        var _0x26988a = _0x59ff89(document.location.search);
        var _0x5d35fc = _0x26988a.y8BannerModify > 0;
        if (_0xc4d403 || _0x5d35fc) {
            var _0x4019e9;
            var _0x4019e9 = document.getElementById("appsDiv");
            if (_0x4019e9) {
                _0x4019e9.parentNode.removeChild(_0x4019e9);
            }
        }
        var _0x54eba4 = 0;
        var _0x2cd42b = 0;
        if (window.localStorage) {
            var _0x2d5360 = window.localStorage.getItem("lastAdShowT") * 1 || 0;
            var _0x47029f = +new Date() - _0x2d5360;
            _0x2cd42b = _0x47029f > 0 ? _0x2d5360 : 0;
            _0x54eba4 = window.localStorage.getItem("gamesSinceAd") * 1;
            if (_0x54eba4 < 0) {
                _0x54eba4 = 0;
            }
            console.log("videoAd: " + _0x54eba4 + " games since last ad!");
        }
        var _0x4ace5c = false;
        var _0x33fbd4 = () => new Promise(async _0x5db1e0 => {
            _0x318ae0 = await _0x26e556();
            _0x5db1e0(!_0x318ae0 && !_0xe9fc21 && !_0xc4d403);
        });

        function _0x3d4608() {
            try {
                console.log("::: ad-tech ::: Refreshing banner ads");
            } catch (_0x3bbc4f) {
                console.log("::: ad-tech ::: Error refreshing banner ads" + _0x3bbc4f);
            }
            _0x42a9d0();
            _0x347987();
        }

        function _0x39b8ea() {
            _0x588fd6($MOPE_AD_ID.MENU);
            _0x588fd6($MOPE_AD_ID.FOOTER);
        }
        var _0x5e1c09 = document.querySelector("#moneyRectBottomWrap");

        function _0x419f9d(_0xc23ce) {
            console.log("::: ad-tech ::: destroy ad", _0xc23ce);
            if (window.PLATFORM_ENV === "CrazyGames") {
                _0x1fb2e8(_0xc23ce);
            } else {
                window.aiptag.cmd.display.push(function() {
                    aipDisplayTag.destroy(_0xc23ce);
                });
            }
        }

        function _0x20296a(_0x26ceff) {
            console.log("::: ad-tech ::: create ad", _0x26ceff);
            if (window.PLATFORM_ENV === "CrazyGames") {
                _0x57cf87(_0x26ceff);
            } else {
                window.aiptag.cmd.display.push(function() {
                    aipDisplayTag.display(_0x26ceff);
                });
            }
        }

        function _0x588fd6(_0x339655) {
            if (_0x4cdf4f[_0x339655]) {
                _0x4cdf4f[_0x339655] = false;
                _0x419f9d(_0x339655);
            }
        }

        function _0x9efbf3(_0x559083) {
            if (!_0x4cdf4f[_0x559083]) {
                _0x4cdf4f[_0x559083] = true;
                _0x20296a(_0x559083);
            }
        }
        const _0x560908 = () => {};
        const _0x17452e = () => {};
        const _0x11e956 = function(_0x4e2330) {};
        var _0x3898d0 = false;
        var _0x43d610 = false;
        var _0x4bd56a = new _0x123582(10, "white");
        _0x4bd56a.setText("Connecting...");
        _0x4bd56a.renderScale = 1;

        function _0x44064d() {
            if (_0x318ae0 || _0xe9fc21) {
                return;
            }
            _0xe9fc21 = true;
            const _0x56e8c6 = document.getElementById("eg-video-player");
            if (_0x56e8c6) {
                if (window.PLATFORM_ENV === "CrazyGames") {
                    _0x57cf87(() => {
                        window.onVideoAdFinished(true);
                    });
                } else {
                    window.show_videoad();
                }
            } else {
                window.onVideoAdFinished(true);
            }
        }
        window.onVideoAdFinished = function(_0x27c891) {
            _0x4ace5c = false;
            _0x43d610 = false;
            _0x3898d0 = false;
            _0x7605c6.focus();
            if (_0x27c891) {
                _0x54eba4 = 0;
                _0x2cd42b = +new Date();
                if (window.localStorage) {
                    try {
                        window.localStorage.setItem("lastAdShowT", _0x2cd42b);
                        window.localStorage.setItem("gamesSinceAd", _0x54eba4);
                    } catch (_0x65e283) {
                        console.log("localstorage error saving ads");
                    }
                } else {
                    console.log("no localstorage, cant save ad nums");
                }
            } else {
                console.log("not successful play, will play ad again");
            }
            if (_0x27c891 && (!_0x4c02d5 || _0x4c02d5 && _0x33698e)) {
                console.log("VIDEOADS: Video done (success: " + _0x27c891 + "), joining game!");
                try {
                    console.log("::: video ad played joining game :::");
                    if (!_0x4c02d5) {
                        _0x3e9162(false);
                    }
                } catch (_0x4bcae8) {
                    console.error("Error joining game after video ad:", _0x4bcae8);
                }
            } else if (!_0x4c02d5 || _0x4c02d5 && _0x33698e) {
                try {
                    console.log("::: video ad not played or skipped joining game :::");
                    if (!_0x4c02d5) {
                        _0x3e9162(false);
                    }
                } catch (_0x7dd284) {
                    console.error("Error joining game after video ad:", _0x7dd284);
                }
            }
        };

        function _0x5158e0(_0x3796f7, _0x35548b, _0x5402f3) {
            var _0x285f63 = document.head || document.getElementsByTagName("head")[0];
            var _0x10c3d6 = document.createElement("script");
            var _0x1b88cc = true;
            _0x10c3d6.async = "async";
            _0x10c3d6.type = "text/javascript";
            _0x10c3d6.charset = "UTF-8";
            _0x10c3d6.src = _0x3796f7;
            _0x10c3d6.onload = _0x10c3d6.onreadystatechange = function() {
                if (_0x1b88cc && (!_0x10c3d6.readyState || /loaded|complete/.test(_0x10c3d6.readyState))) {
                    _0x1b88cc = false;
                    _0x35548b();
                    _0x10c3d6.onload = _0x10c3d6.onreadystatechange = null;
                }
            };
            _0x285f63.appendChild(_0x10c3d6);
        }
        try {
            _0x26e556().then(_0x3892b0 => {
                _0x318ae0 = _0x3892b0;
            });
        } catch (_0x27f0e6) {
            console.error("Error initializing ads:", _0x27f0e6);
        }
        const _0x4aab09 = function() {};
        _0x4aab09();

        function _0x38ddc4() {
            return window.ReactNativeWebView;
        }
        const _0x14d0a2 = (_0x2b0416, _0x5171bc) => {
            const _0x2d3d2d = _0x38ddc4();
            if (!_0x2d3d2d) {
                _0x5338aa("Failed to call mobile authentication handler. Bridge doesn't exist!", "error", 10);
                return;
            }
            window.ReactNativeWebView.postMessage(JSON.stringify({
                event: _0x2b0416,
                data: _0x5171bc
            }));
        };
        window.addEventListener("native-code", _0x470b79 => {
            const _0x51dac3 = JSON.parse(JSON.stringify(_0x470b79.detail));
            _0x40f9b9(_0x51dac3.event, _0x51dac3.data);
        });
        const _0x40f9b9 = (_0x5a2635, _0x498390) => {
            switch (_0x5a2635) {
                case "alert":
                    alert(_0x498390);
                    break;
                case "error":
                    console.error("Something happened with the native bridge...", _0x498390);
                    break;
                case "user-login":
                    _0x396daf(_0x498390);
                    break;
                default:
                    console.error("Event not found " + _0x5a2635 + " with data: " + _0x498390);
                    break;
            }
        };

        function _0x396daf(_0x573f3a) {
            const {
                provider: _0x5be43a,
                accessToken: _0x506b89
            } = _0x573f3a;
            if (!_0x506b89 || _0x506b89 == "") {
                return _0x5338aa("Error happened when trying to login you in! [Mobile_NoAT]", "error", 15);
            }
            _0x2b62e5(_0x506b89, "mobile", _0x5be43a);
        }
        async function _0x1be18f() {
            console.log("showing mobile ad......");
        }
        var _0x141fe4 = !!navigator.userAgent.platform && /iPad|iPhone|iPod/.test(navigator.userAgent.platform);
        var _0x3c8c13 = navigator.userAgent.toLowerCase().indexOf("android") > -1;
        if ((_0x141fe4 || _0x3c8c13) && !_0xc4d403) {
            var _0x59b57e = false;
            if (window.localStorage) {
                _0x59b57e = window.localStorage.getItem("oldVisitor") > 0;
                try {
                    window.localStorage.setItem("oldVisitor", 1);
                } catch (_0x1d7b22) {
                    _0x59b57e = true;
                }
            }
            if (!_0x59b57e) {
                if (_0x141fe4) {
                    window.location.href = "https://itunes.apple.com/us/app/mope.io/id1086471119?ls=1&mt=8";
                }
            } else {}
        }
        document.getElementById("serverSelect").onchange = _0xf547e9;
        document.getElementById("serverSelect").onclick = function() {
            _0xea631();
        };

        function _0xf547e9() {
            var _0x9fffc = document.getElementById("serverSelect");
            console.log("Changed- Selected index " + _0x9fffc.selectedIndex);
            var _0x2298aa = null;
            for (var _0x13fefb = 0; _0x13fefb < _0x48215e.length; _0x13fefb++) {
                let _0x2acbbd = _0x48215e[_0x13fefb];
                if (_0x2acbbd.optionListIndex == _0x9fffc.selectedIndex) {
                    _0x2298aa = _0x2acbbd;
                    break;
                }
            }
            if (_0x925cfa && _0x925cfa.sessionId) {
                _0x925cfa.sessionId = null;
            }
            if (_0x2298aa) {
                _0x925cfa = _0x2298aa;
            } else {
                console.log("Error finding matching server for selected 'option' index " + _0x9fffc.selectedIndex);
                _0x925cfa = _0x48215e[0];
            }
            _0x234af7();
            console.log("Server changed to " + _0x925cfa.name + "...");
            var _0x26b893 = document.getElementById("spawnXpLabel");
            _0x26b893.style.opacity = 0;
            partyLinkIP = null;
            partyLinkKey = null;
            _0x11b554(_0x925cfa);
        }

        function _0x234af7() {
            var _0x5eeb5d = document.getElementById("serverSelect");
            _0x5eeb5d.selectedIndex = _0x925cfa.optionListIndex;
        }

        function _0x1d604a() {
            var _0xda5b76 = document.getElementById("serverSelect");
            if (_0xda5b76) {
                while (_0xda5b76.lastChild) {
                    _0xda5b76.removeChild(_0xda5b76.lastChild);
                }
            }
            var _0x1fc239 = 0;
            for (var _0x496017 = 0; _0x496017 < _0x3c600e.length; _0x496017++) {
                var _0x577d96 = _0x3c600e[_0x496017];
                var _0x28f68c = document.createElement("optgroup");
                _0x28f68c.label = _0x577d96 + " (Ping " + _0x222b7f(_0x577d96) + "ms)";
                _0xda5b76.appendChild(_0x28f68c);
                var _0x2def88 = false;
                var _0x853944 = _0x354525[_0x577d96];
                for (var _0x2d7e7e = 0; _0x2d7e7e < _0x853944.length; _0x2d7e7e++) {
                    var _0xe90002 = _0x853944[_0x2d7e7e];
                    _0xe90002.optionListIndex = _0x1fc239;
                    _0x1fc239 += 1;
                    var _0x5a763e = document.createElement("option");
                    _0x5a763e.gameServer = _0xe90002;
                    _0x5a763e.text = _0xe90002.getServerListString();
                    if (_0xe90002.ip == _0x925cfa.ip) {
                        foundIndex = _0x2d7e7e;
                    }
                    _0x28f68c.appendChild(_0x5a763e);
                }
                if (!_0x2def88) {
                    _0xda5b76.selectedIndex = 0;
                }
            }
            _0x234af7();
        }
        var _0x4244fc = "...";
        var _0xaf55b4 = 0;
        var _0x166276 = 0;
        var _0x2dc130 = _0x473f55;
        var _0x3e3ffa = 0;
        var _0xa94ab7 = 0;
        var _0x4c02d5 = false;
        var _0x464637 = false;
        var _0x27678d = false;
        var _0xba3ffa = false;
        var _0x4f0e50 = +new Date();
        var _0x259bfe = false;
        let _0x42b7e4 = false;
        var _0x15f990 = false;
        var _0x33cd8d = {};
        var _0x4c001c = 0;
        var _0x209dc9 = 0;
        var _0x202207 = 156454;
        var _0x48215e = [];
        var _0x3c600e = [];
        var _0x354525 = {};

        function _0x56ceef(_0x29c4ca) {
            _0x3c600e.push(_0x29c4ca);
            _0x354525[_0x29c4ca] = [];
        }
        async function _0x375fe3() {
            try {
                const _0x5a84f8 = await _0x3900ff($config.turnstileKey);
                const _0x2dbfa2 = new _0x1f27e2(1 + _0x31205b(_0x5a84f8.length) + 2);
                _0x2dbfa2.writeUInt8(_0x275767);
                _0x2dbfa2.writeString(_0x5a84f8);
                _0x80c20b(_0x2dbfa2);
            } catch (_0x314070) {
                console.error(_0x314070);
                _0x5338aa("There was an issue with the captcha. Please check your internet connection!", "error", 10);
            }
        }
        _0x17cb7b.prototype = {
            name: "Server",
            ip: "0.0.0.0",
            serverConnURL: "0.0.0.0",
            region: "",
            playersCount: -2,
            gameMode: 0,
            BR_waitingForPlayers: false,
            ping: 10000,
            domOptionIndex: 0,
            getServerListString: function() {
                var _0x58c0f1 = "";
                if (this.gameMode == 2) {
                    _0x58c0f1 = this.BR_waitingForPlayers ? " -STARTING NEW GAME" : " -GAME IN PROGRESS";
                }
                var _0x3b0574 = this.playersCount < 0 ? "..." : this.playersCount;
                var _0x419f2e = this.name + " [" + _0x3b0574 + " players " + (this.playersCount >= _0xd9d527 ? "-FULL!" : "") + "]" + _0x58c0f1;
                return _0x419f2e;
            }
        };

        function _0x17cb7b(_0x401ffb, _0x2d47e4, _0x4cd2f5, _0x264630, _0x4da9dc) {
            this.name = _0x401ffb;
            this.id = _0x2d47e4;
            this.ip = _0x4cd2f5;
            this.serverConnURL = _0x4cd2f5;
            this.region = _0x264630;
            this.gm = _0x4da9dc;
        }

        function _0x4a3cd8(_0x525310, _0x23bade, _0x65708f, _0x2faf53, _0xe7bfbd = 0) {
            var _0x7619d = new _0x17cb7b(_0x525310, _0x23bade, _0x65708f, _0x2faf53, _0xe7bfbd);
            _0x48215e.push(_0x7619d);
            if (!(_0x2faf53 in _0x354525)) {
                _0x56ceef(_0x2faf53);
            }
            _0x354525[_0x2faf53].push(_0x7619d);
            return _0x7619d;
        }
        const _0x276852 = function() {
            _0x48215e = [];
            _0x3c600e = [];
            _0x354525 = {};
            for (let _0x346674 = 0; _0x346674 < $config.gameServers.length; _0x346674++) {
                const _0x4048ce = $config.gameServers[_0x346674];
                _0x4a3cd8(_0x4048ce.name, _0x4048ce.id, _0x4048ce.url, _0x4048ce.region, _0x4048ce.gm);
            }
        };
        _0x276852();
        var _0x241767 = _0x33dde0 ? _0x3c600e[0] : _0x3c600e[_0x33f4bf(0, Math.max(0, _0x3c600e.length - 1 - 1))];
        var _0x925cfa = _0x354525[_0x241767][0];
        var _0x241767 = _0x925cfa.region;
        var _0x24dd84 = _0x155291 ? 900 : 400;
        var _0xd9d527 = _0x155291 ? 800 : 500;

        function _0x43e237() {
            console.log("Joining best server...");
            var _0x397985 = _0x354525[_0x241767].slice();
            for (var _0x32620a = 0; _0x32620a < _0x559abf.length; _0x32620a++) {
                var _0xf8aaef = _0x397985.indexOf(_0x559abf[_0x32620a]);
                if (_0xf8aaef != -1) {
                    _0x397985.splice(_0xf8aaef, 1);
                }
            }
            var _0x47062d = _0x397985;
            if (_0x397985.length >= 1) {
                function _0x1a1d27(_0x5bcb92, _0x15c000) {
                    if (_0x5bcb92.playersCount < _0x15c000.playersCount) {
                        return 1;
                    }
                    if (_0x5bcb92.playersCount > _0x15c000.playersCount) {
                        return -1;
                    }
                    return 0;
                }
                _0x47062d.sort(_0x1a1d27);
                for (var _0x32620a = 0; _0x32620a < _0x47062d.length; _0x32620a++) {
                    var _0x2fbfdf = _0x47062d[_0x32620a];
                    if (_0x2fbfdf.playersCount < _0x24dd84) {
                        return _0x2fbfdf;
                    }
                }
            }
            console.log("No acceptable servers left in region- as backup trying random servers!");
            return _0x48215e[_0x33f4bf(0, _0x48215e.length - 1)];
        }

        function _0x42423f() {
            var _0x4caa0f = _0x43e237();
            _0x11b554(_0x4caa0f);
        }

        function _0x43417c() {
            if (_0x31d39d) {
                _0x42423f();
                return;
            } else if (!_0x51eaa5) {
                _0x318c4c(function() {
                    _0x42423f();
                });
            }
        }
        var _0x38cb6a;
        var _0x2f2268 = 0;
        var _0x4d084c = null;

        function _0x4fb05f(_0x3b95a8) {
            for (var _0x360220 = 0; _0x360220 < _0x48215e.length; _0x360220++) {
                var _0x2889f5 = _0x48215e[_0x360220];
                if (_0x2889f5.ip == _0x3b95a8) {
                    return _0x2889f5;
                }
            }
            return null;
        }

        function _0x30770a() {
            return _0x328977 && _0x328977.readyState === WebSocket.OPEN;
        }

        function _0x80c20b(_0x27452c) {
            if (_0x26cd5b) {
                setTimeout(function() {
                    if (_0x30770a()) {
                        _0x328977.send(_0x27452c.dataView.buffer);
                    }
                }, 1);
            } else if (_0x30770a()) {
                _0x328977.send(_0x27452c.dataView.buffer);
            }
        }
        mygamesession = 0;

        function _0x1f9aa3() {
            if (_0x30770a()) {
                console.log("---Cleanly closing WS connection (instantly deletes player in-game)");
                _0x28ae1a = false;
                _0x19c52f = null;
                var _0x39227a = new _0x1f27e2(1);
                _0x39227a.writeUInt8(_0x2bc077);
                _0x80c20b(_0x39227a);
                oldWS = _0x328977;
                _0x328977 = null;
                oldWS.close();
            } else {
                console.log("---not closing ws: no existing gameserver connection, .");
            }
        }

        function _0x19634c() {
            document.getElementById("connecting").style.display = "none";
        }

        function _0x3e9162(_0x1f3125) {
            if (!_0x18f712) {
                _0x2fffce();
                _0x360af9.send(_0x328977, _0x37e434, _0x19e9b5, _0x1519a6);
            } else {
                console.log("### PLAYER IS IN SPECTATE MODE ###");
            }
        }

        function _0x11b554(_0x6319fe, _0x599b44 = false) {
            if (_0x15f990) {
                console.log("@@@@@@@@@@@@@@@@@@@@@@@@");
                console.log("server disconnected this client: ");
                console.log("new server: " + _0x6319fe);
                console.log("old server: " + _0x925cfa);
                console.log("@@@@@@@@@@@@@@@@@@@@@@@@");
                return;
            }
            autoClickPlayOnJoin = _0x599b44;
            _0x925cfa = _0x6319fe;
            _0x241767 = _0x6319fe.region;
            _0x234af7();
            _0x1f9aa3();
            if (_0x6319fe != _0x4d084c) {
                _0x2f2268 = 0;
                _0x4d084c = _0x6319fe;
            }
            _0x206ba2 = false;
            _0x15f990 = false;
            if (_0x28ae1a) {
                _0x3678d9 = true;
                console.log("-----------Reconnecting to session " + _0x19c52f);
                _0x5338aa("Reconnecting to game session on connection loss...", "success", 3, function() {});
            } else {
                _0x18caff(-1);
                _0x3678d9 = false;
                console.log("opening ws, not reconnecting session" + _0x3678d9);
            }
            if (!_0x28ae1a) {
                document.getElementById("connecting").style.display = "flex";
                document.getElementById("txtServer").innerHTML = "(" + _0x925cfa.name + ")";
            }
            var _0xf2a37e = window.location.protocol === "https:" ? "wss://" : "ws://";
            var _0x1f4049 = _0xf2a37e + _0x925cfa.serverConnURL;
            console.log("Connecting to " + _0x1f4049);
            _0x328977 = new WebSocket(_0x1f4049);
            _0x328977.binaryType = "arraybuffer";
            _0x328977.onopen = function() {
                _0x3358bc.send(_0x328977, _0x925cfa.sessionId);
                _0x2f2268 = 0;
                _0x49bf40();
                document.getElementById("startMenu").style.visibility = "visible";
            };
            _0x328977.onmessage = function(_0x752bdc) {
                if (this == _0x328977) {
                    _0x3d9edb(new DataView(_0x752bdc.data));
                } else {}
            };
            _0x328977.onclose = function(_0x5c4685) {
                if (this == _0x328977) {
                    console.log("socket ws.onclose!");
                    _0x3efaf8();
                } else {}
            };
            _0x328977.onerror = function() {
                console.log("socket error!");
            };
        }
        _0x43417c();
        const _0x49bf40 = () => {
            _0x28ae1a = true;
        };
        const _0x3e90e6 = _0x4583f1 => {
            const {
                success: _0x1457c3
            } = _0x4583f1;
            if (_0x1457c3) {
                const {
                    serverInfo: _0x341962
                } = _0x4583f1;
                if (_0x341962.sessionId) {
                    if (_0x341962.sessionId === _0x925cfa.sessionId && _0x3678d9) {
                        _0x28ae1a = true;
                    } else {
                        _0x18caff(-1);
                    }
                }
                _0x41d20a();
                _0x4c02d5 = _0x341962.isAliveInGame;
                _0x464637 = !_0x4c02d5;
                _0x3678d9 = false;
                _0x578989 = 0;
                _0x444fd7 = _0x341962.gameMode;
                _0x24df61 = _0x341962.season;
                if (!_0x341962.isAliveInGame) {
                    _0x545ea8();
                }
            }
        };
        const _0x24ba4c = ({
            gameWidth: _0x1b5c40,
            gameHeight: _0x147df9,
            camX: _0x584acf,
            camY: _0x16caea,
            camZoom: _0x1727b2
        }) => {
            _0x5039a5 = _0x1b5c40;
            _0x396098 = _0x147df9;
            _0x1bd2d0 = _0x417fd4 = _0x3e08c0 = _0x584acf / 4;
            _0x1901f2 = _0x33a79a = _0x31dc9d = _0x16caea / 4;
            camzoom_n = _0x1727b2 / 1000;
            _0x2e8bac = camzoom_n * 1.2;
        };
        const _0x3bf631 = ({
            isSpectator: _0x25f2af,
            timeout: _0x1f294a,
            upgradeLevel: _0x4c259a,
            animalChoices: _0xac2f52
        }) => {
            _0x3a369a(false);
            const _0x470d15 = _0x25f2af;
            _0x33698e = true;
            _0x5e5d0f = _0x4c259a;
            _0x2d4c57 = 0;
            _0x241e0f = [];
            _0x335352 = _0x470d15;
            _0x583e1e = +new Date();
            _0x27b62a = _0x583e1e + _0x1f294a * 1000;
            for (let _0x509015 = 0; _0x509015 < _0xac2f52.length; _0x509015++) {
                const _0x494975 = _0xac2f52[_0x509015];
                var _0x579846 = new _0x229247(0, 0, 100, 100, _0x494975.anAniT, _0x494975.biomeNum, _0x494975.species, _0x494975.subSpecies, _0x494975.premiumSkinType, _0x494975.season, _0x494975.skinThemeID, _0x494975.isShopItem);
                _0x241e0f.push(_0x579846);
            }
        };
        const _0x15e554 = _0x182fdb => {
            const {
                choiceIndex: _0x240633
            } = _0x182fdb;
            _0x390d7f.send(_0x328977, _0x240633);
        };
        _0xea631();

        function _0x3b5393() {
            _0x27678d = true;
            curServerConnectStartT = +new Date();
            if (!_0xba3ffa) {
                document.getElementById("onconnectDiv").style.visibility = "visible";
            }
            if (!_0x464637) {
                _0x7605c6.focus();
            }
            _0xba3ffa = true;
            if (!_0x4c02d5) {
                _0x3a369a(true);
            }
            if (autoClickPlayOnJoin) {
                _0x442c7e();
            }
            _0x559abf = [];
            _0x2f2268 = 0;
            setTimeout(() => {
                _0x19634c();
            }, 1000);
        }

        function _0x3eda01(_0x4833e0 = false) {
            console.log("onConnectedToGameServer => justRejoined: " + _0x4833e0);
            if (!_0x4833e0) {
                _0x3a369a(true);
            }
        }
        setInterval(() => {
            if (_0x1d523b) {
                return;
            }
            _0xea631();
        }, 60000);
        var _0x19c52f = null;
        var _0x28ae1a = false;
        var _0x3678d9 = false;
        var _0x578989 = 0;

        function _0x3d9edb(_0x4e4703) {
            var _0x5da110 = new _0x38f987(_0x4e4703);
            var _0xf50ebf = _0x5da110.readUInt8();
            switch (_0xf50ebf) {
                case _0x2e6a3a:
                    _0x3bf631(_0x390d7f.handle(_0x5da110));
                    break;
                case _0x3564c2: {
                    const {
                        sessionId: _0x414f3a,
                        gameVersion: _0x545e00,
                        gameMode: _0x2a136f,
                        season: _0x56551f,
                        serverId: _0x52adb4,
                        isAliveInGame: _0x346823
                    } = _0x2b0735.handle(_0x5da110);
                    _0x3e90e6({
                        success: true,
                        serverInfo: {
                            sessionId: _0x414f3a,
                            gameVersion: _0x545e00,
                            gameMode: _0x2a136f,
                            season: _0x56551f,
                            serverId: _0x52adb4,
                            isAliveInGame: _0x346823
                        }
                    });
                    _0x925cfa.gameMode = _0x2a136f;
                    _0x925cfa.sessionId = _0x414f3a;
                    _0x925cfa.gameVersion = _0x545e00;
                    _0x925cfa.season = _0x56551f;
                    _0x925cfa.serverId = _0x52adb4;
                    if (!_0x346823) {
                        _0x1c2c6f();
                    }
                    if (_0x925cfa.gameVersion > _0x3fce30) {
                        setTimeout(function() {
                            if (!_0xc4d403) {
                                window.onbeforeunload = null;
                            }
                            console.log("Old client (client ver " + _0x3fce30 + "/" + _0x925cfa.gameVersion + ")");
                            alert("mope.io has been updated! You need to refresh to get the latest version of the game! (If this keeps appearing, hold SHIFT when pressing refresh!)");
                            window.location.reload(true);
                        }, 1500);
                        return;
                    }
                    if (_0x925cfa.gameVersion < _0x3fce30) {
                        console.log("Old server (client ver " + _0x3fce30 + "/" + _0x925cfa.gameVersion + ")");
                    }
                    _0x3eda01(_0x346823);
                }
                break;
                case _0x3046de:
                    _0x24ba4c(_0xe36091.handle(_0x5da110));
                    break;
                case _0x54ca10:
                    _0x41d20a();
                    _0x3b5393();
                    break;
                default:
                    console.error("unknown msg type? " + _0xf50ebf);
                    break;
                case _0x56fdda: {
                    var _0x47a2f7 = _0x5da110.readString();
                    if (_0x47a2f7 == null || _0x47a2f7 == "") {
                        _0x47a2f7 = "Provide a reason";
                    }
                    var _0x295932 = prompt(_0x47a2f7);
                    if (_0x295932 != null) {
                        var _0x46bc4f = _0x31205b(_0x295932).length + 3;
                        var _0x381fd5 = new _0x1f27e2(_0x46bc4f);
                        _0x381fd5.writeUInt8(_0x56fdda);
                        _0x381fd5.writeString(_0x295932);
                        _0x80c20b(_0x381fd5);
                    }
                }
                break;
                case _0xd14a0c: {
                    console.log("Msg_sendLoginCred");
                    _0x1c0f11 = true;
                    _0x247e4a.loadData();
                }
                break;
                case _0x1e7678: {
                    console.log("Msg_client_loadUserData");
                    _0x2709e4();
                }
                break;
                case _0x35cb87: {
                    if (_0xebbf06 != null) {
                        _0xebbf06.handleMessage(_0x5da110);
                    }
                }
                break;
                case 104: {
                    console.log("muilink");
                    var _0x24569a = _0x5da110.readString();
                    location.href = _0x24569a;
                    break;
                }
                case 105: {
                    console.log("------- EXTRA ANIMAL DATA --------");
                    {
                        var _0x2b3986 = [];
                        var _0x525e94 = _0x5da110.readUInt16();
                        for (ai = 0; ai < _0x525e94; ai++) {
                            var _0x5813ba = _0x5da110.readString();
                            var _0x18bdc0 = JSON.parse(_0x5813ba);
                            _0x18bdc0 = _0xa9548b(_0x18bdc0);
                            _0x2b3986.push(_0x18bdc0);
                        }
                        console.log(JSON.stringify(_0x2b3986));
                    }
                    console.log("------- EXTRA ANIMAL DATA --------");
                    break;
                }
                case _0x1a216f:
                    _0x3e506a = _0x343eee.create(_0x5da110);
                    break;
                case _0x39b2a3: {
                    console.log("MsgPlayerAliveInGame");
                    _0x4aab09();
                    _0x3a369a(false);
                    console.log("You spawned alive ingame!");
                    _0x4c02d5 = true;
                    _0x2c5e15(_0x2fd332);
                    _0x54eba4 += 1;
                    console.log(_0x54eba4 + " games since adinplay");
                    if (window.localStorage) {
                        try {
                            window.localStorage.setItem("gamesSinceAd", _0x54eba4);
                        } catch (_0x223c5a) {}
                    }
                    if (!_0xc4d403) {
                        window.onbeforeunload = function(_0x1a71ca) {
                            return "You're alive in a game, close mope.io?";
                        };
                    }
                }
                break;
                case 102:
                    console.log("msg 102");
                    var _0x21dee8 = _0x5da110.readUInt8();
                    var _0x2883f6 = _0x5da110.readUInt8();
                    _0x3a369a(true);
                    break;
                case _0x8470e0:
                    console.log("Msg_readyToPlay");
                    break;
                case _0x15b7ad:
                    console.log("Msg_adblockCheckCheck");
                    try {
                        var _0x21657f = _0x5da110.readUInt16();
                        var _0x4c179c = _0x5da110.readString();
                        _0x42d678(_0x4c179c, _0x21657f);
                    } catch (_0x38b9d0) {}
                    break;
                case _0x3bccae:
                    if (_0x444fd7 != _0x2530ce) {
                        var _0x29371c = {
                            rank: _0x5da110.readUInt16(),
                            name: _0x5da110.readString(),
                            score: _0x5da110.readUInt32()
                        };
                        var _0x14554f = _0x5da110.readUInt8();
                        leaderboardData = [];
                        for (i = 0; i < _0x14554f; ++i) {
                            var _0x20805d = {
                                rank: _0x5da110.readUInt16(),
                                name: _0x292e5a(_0x5da110.readString()),
                                score: _0x5da110.readUInt32()
                            };
                            leaderboardData.push(_0x20805d);
                        }
                        leaderboardData = _0x4eac28(leaderboardData, _0x29371c);
                        if (_0x2f359e) {
                            _0x8a9e9b(leaderboardData, null, _0x29371c.rank);
                        }
                    }
                    break;
                case _0x35160e:
                    _0x306829 = Math.round((performance.now() - _0x124305) * 1000) / 1000;
                    break;
                case _0x103a40: {
                    _0x387513 = _0x5da110.readUInt16();
                    _0x3bd0c1 = _0x5da110.readUInt16() / 10;
                    if (_0x596003) {
                        _0x596003.setPlayersCount();
                    }
                    const _0x10f2e1 = new _0x1f27e2(1);
                    _0x10f2e1.writeUInt8(_0x35160e);
                    _0x124305 = performance.now();
                    _0x80c20b(_0x10f2e1);
                }
                break;
                case _0x47d064:
                    try {
                        var _0x4c179c = _0x5da110.readString();
                        _0x34f524(_0x4c179c, "");
                    } catch (_0x575c81) {}
                    break;
                case _0x3fa468:
                    try {
                        var _0x21657f = _0x5da110.readUInt32();
                        var _0x4c179c = _0x5da110.readString();
                        _0xf5ceff(_0x4c179c, _0x21657f, "");
                    } catch (_0x4f5d17) {}
                    break;
                case _0x275767:
                    try {
                        _0x375fe3();
                    } catch (_0x3e3f3f) {
                        console.log("Err in recap msg");
                    }
                    break;
                case _0x30cc86:
                    try {
                        var _0x5cf53d = _0x5da110.readString();
                        var _0x30c61b = JSON.parse(_0x5cf53d);
                        var _0x3c5a5c = "";
                        _0x30c61b.forEach(function(_0x3d0283, _0x2aaed6) {
                            var _0x2c7d64 = "";
                            _0x2c7d64 += "<div class='pid' style='float:left; width:100px; text-align:right;'>" + _0x3d0283.pid + "</div>";
                            _0x2c7d64 += "<div class='nick'  style='float:left; width:200px; text-align:left;'>" + _0x3d0283.nick + "</div>";
                            _0x3c5a5c += "<div class='player'>" + _0x2c7d64 + "</div>";
                        });
                        $("body .playerInfo").remove();
                        $("body").append($("<div class='playerInfo' style='    background: #00000050;position: fixed;width: 350px;top: 10px;left: 10px;color: white;'>" + _0x3c5a5c + "</div>"));
                    } catch (_0x1cafa9) {}
                    break;
                case _0x5c3d45: {
                    var _0x4131c0 = _0x5da110.readUInt8();
                    var _0x3df834 = _0x5da110.readUInt8();
                    var _0x24c38b = _0x5da110.readUInt16();
                    var _0x24ea54 = _0x5da110.readUInt8();
                    var _0x98f97f = _0x24ea54 == 0;
                    _0x1157ee = _0x5da110.readUInt8();
                    _0x53365e = null;
                    _0x166276 = _0x5da110.readUInt32();
                    _0x1e6138(_0x5da110.readUInt32());
                    _0x1d98b3 = _0x5da110.readUInt16();
                    _0x33785f = _0x5da110.readUInt16();
                    let _0x3a4ce9 = {
                        abilityInput: "W",
                        abil_usable: true,
                        abil_recharging: false,
                        abil_possible: true,
                        abil_active: false,
                        abil_Type: _0x1d98b3
                    };
                    let _0x22c64d = {
                        abilityInput: "S",
                        abil_usable: true,
                        abil_recharging: false,
                        abil_possible: true,
                        abil_active: false,
                        abil_Type: _0x33785f
                    };
                    console.log("[[[ ::: shdev ::: MsgYourAnimalChanged");
                    _0x3862b9(_0x1d98b3, _0x3a4ce9);
                    _0xd4d1e2(_0x33785f, _0x22c64d);
                    console.log("::: shdev ::: abilities set above ]]]");
                    var _0x1b5ac1 = _0x35d268.createGameObjOfOType(_0x48c056, _0x4131c0);
                    _0x1b5ac1.animalType = _0x4131c0;
                    _0x1b5ac1.animalSpecies = _0x3df834;
                    _0x1b5ac1.animalSubSpecies = _0x24c38b;
                    var _0x6aaf1e = _0x1b5ac1.animalInfo();
                    if (_0x24ea54 != 2) {
                        _0x28e3d1 = _0x98f97f ? "You downgraded to " + _0x6aaf1e.aniName + "! \nDont lose too much xp!" : _0x6aaf1e.upgradeText;
                        _0x28e3d1 = _0x28e3d1.replace("!!", "!");
                        _0x14ad18 = "white";
                        _0x5a50bf = +new Date() + 9000;
                    }
                    if (!_0x40fad7) {
                        _0x40fad7 = true;
                        _0x407e2a = Array.apply(null, new Array(50)).map(Number.prototype.valueOf, 0);
                        _0x594905 = Array.apply(null, new Array(50)).map(Number.prototype.valueOf, 0);
                        _0x8a0626 = Array.apply(null, new Array(50)).map(Number.prototype.valueOf, 0);
                        _0x3c5c91 = Array.apply(null, new Array(50)).map(Number.prototype.valueOf, 0);
                    }
                    _0x407e2a = Array.apply(null, new Array(50)).map(Number.prototype.valueOf, 0);
                    var _0x5de48e = _0x5da110.readUInt8();
                    for (var _0x5d4c50 = 0; _0x5d4c50 < _0x5de48e; _0x5d4c50++) {
                        _0x407e2a[_0x5da110.readUInt8() - 1] = 1;
                    }
                    var _0x5d5129 = _0x594905;
                    _0x594905 = Array.apply(null, new Array(50)).map(Number.prototype.valueOf, 0);
                    var _0x5de48e = _0x5da110.readUInt8();
                    for (var _0x5d4c50 = 0; _0x5d4c50 < _0x5de48e; _0x5d4c50++) {
                        var _0x4876bb = _0x5da110.readUInt8();
                        _0x594905[_0x4876bb - 1] = 1;
                    }
                    _0x8a0626 = Array.apply(null, new Array(50)).map(Number.prototype.valueOf, 0);
                    var _0x5de48e = _0x5da110.readUInt8();
                    for (var _0x5d4c50 = 0; _0x5d4c50 < _0x5de48e; _0x5d4c50++) {
                        _0x8a0626[_0x5da110.readUInt8() - 1] = 1;
                    }
                    var _0x32ee86 = _0x3c5c91;
                    _0x3c5c91 = Array.apply(null, new Array(50)).map(Number.prototype.valueOf, 0);
                    var _0x5de48e = _0x5da110.readUInt8();
                    for (var _0x5d4c50 = 0; _0x5d4c50 < _0x5de48e; _0x5d4c50++) {
                        const _0x2dc6c1 = _0x5da110.readUInt8();
                        _0x3c5c91[_0x2dc6c1 - 1] = 1;
                    }
                    for (let _0x4ee50f = 0; _0x4ee50f < _0x58b11a.length; _0x4ee50f++) {
                        const _0x8c5b07 = _0x58b11a[_0x4ee50f];
                        if (_0x8c5b07.oType !== _0x1d2c49) {
                            continue;
                        }
                        _0x8c5b07.setSkinPath();
                    }
                    _0x1e2837 = _0x4131c0 == _0x473f55 || _0x4131c0 == _0x27c6df || _0x4131c0 == _0x7d036f || _0x4131c0 == _0x5197c0;
                    _0x3d3061 = +new Date() + 9000;
                    _0x25146b = 0;
                    _0x33698e = false;
                    if (_0xebbf06 != null) {
                        _0xebbf06.setPlayer();
                    }
                    _0x3ca188();
                }
                break;
                case _0x3565e0:
                    if (_0xebbf06) {
                        _0xebbf06.msgDisplayPlayersOnMiniMap(_0x5da110);
                    }
                    break;
                case _0x426d07:
                    if (_0xebbf06) {
                        _0xebbf06.msgDisplayPumpkinsOnMiniMap(_0x5da110);
                    }
                    break;
                case _0x33a316:
                    _0x1fbd8e(_0x5da110);
                    break;
                case _0x28bdbd: {
                    console.log("############# YOU DIED MESSAGE ###################");
                    var _0x583b28 = _0x5da110.readUInt8();
                    var _0x42ba5f = _0x5da110.readUInt32();
                    var _0x2bccd = _0x5da110.readString();
                    _0x98017d = _0x5da110.readUInt16();
                    _0x1f1ac0 = _0x292e5a(_0x5da110.readString());
                    _0x2c0994 = _0x5da110.readUInt32();
                    _0x3a70cc = _0x5da110.readUInt16();
                    _0x4b0ea0 = _0x5da110.readUInt32();
                    _0x8a21b1 = _0x5da110.readUInt8();
                    if (_0xebbf06 != null) {
                        _0xebbf06.interfaceReset();
                    }
                    _0x4434eb = null;
                    _0x4c02d5 = false;
                    _0x464637 = true;
                    _0x1d523b = false;
                    _0x17f2cd = 0;
                    _0x33698e = false;
                    _0x347987();
                    if (!_0x357cad) {
                        _0x3bbeb2("audio/bite.mp3", 0.1, 0.7);
                    }
                    if (_0x583b28 == 1) {
                        _0x28e3d1 = "Oh no, You were eaten! \n Watch out for red-circled players!";
                        _0x14ad18 = "#F1C34C";
                        _0x5a50bf = +new Date() + 3500;
                    } else if (_0x583b28 == 2) {
                        _0x28e3d1 = "Oh no, You died from a tail-bite!\n Watch your tail!";
                        _0x14ad18 = "#F1C34C";
                        _0x5a50bf = +new Date() + 3500;
                    } else if (_0x583b28 == 4) {
                        _0x28e3d1 = "You died of thirst :( Don't let your water run out!";
                        _0x14ad18 = "#F1C34C";
                        _0x5a50bf = +new Date() + 3500;
                    } else if (_0x583b28 == 27) {
                        _0x28e3d1 = "You died of air suffocation :( Don't let your air run out!";
                        _0x14ad18 = "#F1C34C";
                        _0x5a50bf = +new Date() + 3500;
                    } else if (_0x583b28 == 28) {
                        _0x28e3d1 = "You died of lava suffocation :( Don't let your lava run out!";
                        _0x14ad18 = "#F1C34C";
                        _0x5a50bf = +new Date() + 3500;
                    } else if (_0x583b28 == 29) {
                        _0x28e3d1 = "You died of low energy :( Don't let your energy run out!";
                        _0x14ad18 = "#F1C34C";
                        _0x5a50bf = +new Date() + 3500;
                    } else if (_0x583b28 == 13) {
                        _0x28e3d1 = "You died from burning! (Get to water when on fire!)";
                        _0x14ad18 = "#F1C34C";
                        _0x5a50bf = +new Date() + 3500;
                    } else {
                        _0x28e3d1 = "You died! Watch your health!";
                        _0x14ad18 = "#F1C34C";
                        _0x5a50bf = +new Date() + 3500;
                    }
                    _0x33698e = false;
                    _0x347987();
                    _0x3d4608();
                    window.setTimeout(function() {
                        _0x26133f(_0x42ba5f, _0x2bccd);
                    }, 2000);
                }
                break;
                case _0x4c75cb: {
                    console.log("MSG_GAMEROOM_PROPERTY_UPDATE");
                    if (_0xebbf06) {
                        _0xebbf06.readGameRoomPropertyUpdate(_0x5da110);
                    }
                    break;
                }
                case _0x2660be: {
                    _0xe924a1(_0x5da110);
                }
                break;
                case _0x173df2: {
                    var _0x21d69b = _0x5da110.readUInt32();
                    var _0x24fab4 = _0xb3e9be[_0x21d69b];
                    if (_0x24fab4) {
                        var _0x646c22 = _0x5da110.readString();
                        if (_0x21d69b in _0x33cd8d) {
                            _0x33cd8d[_0x21d69b].size++;
                            if (_0x33cd8d[_0x21d69b].size >= 5) {
                                if (_0x33cd8d[_0x21d69b].size === 5) {
                                    clearTimeout(_0x33cd8d[_0x21d69b].timeout);
                                    _0x33cd8d[_0x21d69b].timeout = setTimeout(() => {
                                        delete _0x33cd8d[_0x21d69b];
                                    }, 5000);
                                }
                                return;
                            }
                        } else {
                            _0x33cd8d[_0x21d69b] = {
                                size: 1,
                                timeout: setTimeout(() => {
                                    delete _0x33cd8d[_0x21d69b];
                                }, 2000)
                            };
                        }
                        _0x646c22 = _0x292e5a(_0x646c22);
                        _0x24fab4.gotChat(_0x646c22);
                    }
                }
                break;
                case _0x45a029: {
                    var _0x546cc7 = _0x5da110.readUInt8();
                    switch (_0x546cc7) {
                        case 1:
                            _0x149102 = _0xc374cc;
                            break;
                        case 2:
                            _0x149102 = _0x4c009d;
                            break;
                        case 3:
                            _0x149102 = _0x796e74;
                            break;
                        case 0:
                        default:
                            _0x149102 = null;
                            break;
                    }
                    console.log("snowfall message received:" + _0x546cc7);
                    if (_0x149102 != null && _0x546cc7 != 0) {
                        _0x319d94();
                    } else {
                        _0x53161e = false;
                        _0x3fbeac = false;
                        _0x499739 = [];
                    }
                }
                break;
                case _0x1d6f71: {
                    var _0x5da110 = _0x5da110.readString();
                    var _0x29dae0 = 15;
                    _0x5338aa(_0x5da110, "success", _0x29dae0, function() {});
                }
                break;
                case _0x550e46: {
                    var _0x2b04b9 = _0x5da110.readString();
                    var _0x5c61b7 = _0x5da110.readString();
                    var _0xd420b0 = _0x5da110.readUInt8();
                    console.log(_0xd420b0);
                    _0x5338aa(_0x2b04b9, _0x5c61b7, _0xd420b0, function() {});
                }
                break;
                case _0x5b8672: {
                    if (_0xebbf06) {
                        _0xebbf06.socketMessages(_0x5da110);
                    }
                    break;
                }
                case _0x4365b5: {
                    var _0x20e5e6 = _0x5da110.readUInt8();
                    if (!_0x4c02d5) {
                        return;
                    }
                    _0x35f207 = 25;
                    var _0xd420b0 = 0;
                    _0x14ad18 = "white";
                    switch (_0x20e5e6) {
                        case 255: {
                            _0x28e3d1 = _0x5da110.readString();
                            _0xd420b0 = _0x5da110.readUInt16() / 100;
                        }
                        break;
                        case 33: {
                            break;
                        }
                        case 2: {
                            _0x28e3d1 = "Ouch! Your tail got bitten!";
                        }
                        break;
                        case 12: {
                            _0x28e3d1 = "You've been stung by a jellyfish!";
                        }
                        break;
                        case 3: {
                            _0x28e3d1 = "ZAP! You've been shocked by a STINGRAY!";
                        }
                        break;
                        case 8: {
                            _0x28e3d1 = "You've been inked!";
                        }
                        break;
                        case 5: {
                            _0x28e3d1 = "Oh no! Escape the kraken's pull!";
                        }
                        break;
                        case 6: {
                            _0x28e3d1 = "Ouch! Pufferfish are pointy!";
                        }
                        break;
                        case 7: {
                            _0x28e3d1 = "That's an octopus in disguise!";
                        }
                        break;
                        case 9: {
                            _0x28e3d1 = "Brrr! You've been frozen!";
                        }
                        break;
                        case 10: {
                            _0x28e3d1 = "Ahh! The wolf's howl scared you!";
                        }
                        break;
                        case 11: {
                            _0x28e3d1 = "Ouch! A VERY LOUD sound hit you!";
                        }
                        break;
                        case 13: {
                            _0x28e3d1 = "Ah! You're on fire!";
                        }
                        break;
                        case 14: {
                            _0x28e3d1 = "BAM! You got kicked by a donkey!";
                        }
                        break;
                        case 16: {
                            _0x28e3d1 = "Ouch! You're getting dragged by a croc!";
                        }
                        break;
                        case 17: {
                            _0x28e3d1 = "A fox DUG you out of the hole!";
                        }
                        break;
                        case 18: {
                            _0x28e3d1 = "A wave has swept you away!";
                        }
                        break;
                    }
                    if (_0xd420b0 == 0) {
                        _0x5a50bf = _0x4ec996 + 3500;
                    } else {
                        _0x5a50bf = _0x4ec996 + _0xd420b0 * 1000;
                    }
                }
                break;
                case _0x3b2127: {
                    var _0x148cb6 = _0x5da110.readUInt8();
                    var _0x5b8ee2 = _0x5da110.readUInt32() / 10;
                    var _0x5af019 = _0x148cb6 == 1;
                    var _0x4b011b = _0x148cb6 == 2;
                    if (_0x5af019) {
                        _0x551dbe = _0x5b8ee2 * 1000;
                        _0x21b7e9 = +new Date() + _0x5b8ee2 * 1000;
                        _0x77ac8d = true;
                    } else if (!_0x4b011b) {
                        _0x23755b = _0x5b8ee2 * 1000;
                        _0x4c63a1 = +new Date() + _0x5b8ee2 * 1000;
                        _0x46bc5c = true;
                    } else if (_0x4b011b) {
                        _0x3d5dee = _0x5b8ee2 * 1000;
                        _0x127583 = +new Date() + _0x5b8ee2 * 1000;
                        _0x36f61d = true;
                    }
                    _0x3bcd1b();
                }
                break;
                case _0x3cb831: {
                    console.log("DISCONNECT_ON_EXCEEDING_RATE_LIMIT");
                    var _0x58652a = _0x5da110.readString();
                    _0x28ae1a = false;
                    _0x19c52f = null;
                    _0x925cfa.sessionId = null;
                    _0x5338aa(_0x58652a, "error", 10, function() {});
                }
                break;
                case _0x2bc077: {
                    var _0x3744fd = _0x5da110.readUInt8();
                    var _0xfec5b5 = _0x3744fd > 0;
                    var _0x58652a = _0x5da110.readString();
                    var _0xdc9fc5 = _0x5da110.readUInt8() > 0;
                    _0x28ae1a = false;
                    _0x19c52f = null;
                    _0x925cfa.sessionId = null;
                    if (_0x3744fd == 100) {
                        _0x5338aa("You've been disconnected! Reason: " + _0x58652a, "error", 10, function() {});
                        return;
                    }
                    _0x15f990 = _0x3744fd != 2 && _0xfec5b5 || _0xdc9fc5;
                    if (_0x3744fd == 2) {
                        _0x925cfa = null;
                        _0x5338aa("You've been disconnected! Reason: " + _0x58652a, "error", 10, function() {});
                        return;
                    }
                    _0x5338aa("You've been disconnected! Reason: " + _0x58652a, "error", _0xdc9fc5 || _0xfec5b5 ? 0 : 10, function() {});
                    if (!_0xc4d403) {
                        window.onbeforeunload = null;
                    }
                    if (_0xdc9fc5) {
                        _0x139562(false);
                    }
                    if (_0xdc9fc5 || _0xfec5b5) {
                        _0x33578e = function() {
                            location.reload();
                        };
                    } else {
                        _0x33578e = function() {
                            setTimeout(function() {
                                _0x43417c();
                            }, 500);
                        };
                    }
                    console.log("You've been disconnected! Reason: " + _0x58652a);
                }
                break;
                case _0x275297: {
                    var _0xde5fda = _0x5da110.readUInt8();
                    var _0x5da110 = _0x5da110.readString();
                    _0x5a50bf = _0x4ec996 + 3500;
                    _0x14ad18 = "white";
                    _0x28e3d1 = _0x5da110;
                    _0x35f207 = _0xde5fda;
                }
                break;
                case _0x41567d: {
                    var _0x7b488e = _0x5da110.readUInt8();
                    if (_0x53365e != null) {
                        _0x53365e.destroy();
                    } else {
                        _0x53365e = new _0x219485(_0x7b488e);
                        _0x53365e.loadData(_0x5da110);
                    }
                }
                break;
                case _0x38c1f3: {
                    _0x18f712 = _0x5da110.readUInt8() == 1;
                    console.log("spectate mode : " + _0x18f712);
                    if (_0x18f712) {
                        console.log("## spectate mode turned ON ##");
                        _0x3a369a(false);
                        _0x5a50bf = _0x4ec996 + 3500;
                        _0x14ad18 = "white";
                        _0x28e3d1 = "SPECTATE MODE";
                        _0x35f207 = 50;
                        if (_0xebbf06 != null) {
                            if (_0x3166e9 != null) {
                                var _0xf68b8b = _0xebbf06.interfaceButtons.indexOf(_0x3166e9);
                                if (_0xf68b8b != -1) {
                                    _0xebbf06.interfaceButtons.splice(_0xf68b8b, 1);
                                }
                                _0x3166e9 = null;
                            }
                            if (_0x3166e9 == null) {
                                _0x3166e9 = new _0x450d88(0, 0, 120, 50, "BACK", 30);
                                _0x3166e9.update = function() {
                                    this.x = _0x19e9b5 / 2 - this.w / 2;
                                    this.y = _0x1519a6 - 85;
                                };
                                _0x3166e9.visible = true;
                                _0x3166e9.onClick = function() {
                                    var _0x4a8c8b = new _0x1f27e2(1);
                                    _0x4a8c8b.writeUInt8(_0x38c1f3);
                                    _0x80c20b(_0x4a8c8b);
                                    console.log("spectate mode back button clicked!");
                                };
                                if (_0x482d50) {
                                    _0x3166e9.onMouseIn = function() {
                                        this.alpha = 1;
                                        this.txtAlpha = 1;
                                    };
                                    _0x3166e9.onMouseOut = function() {
                                        this.alpha = 0;
                                        this.txtAlpha = 0;
                                    };
                                }
                                _0xebbf06.interfaceButtons.push(_0x3166e9);
                            }
                            var _0x1a508a = document.getElementById("spawnXpLabel");
                            if (_0x1a508a) {
                                _0x1a508a.style.display = "none";
                            }
                        }
                        _0x3a369a(false);
                    } else {
                        console.log("## spectate mode turned OFF ##");
                        _0x3a369a(true);
                        if (_0x3166e9 != null) {
                            var _0xf68b8b = _0xebbf06.interfaceButtons.indexOf(_0x3166e9);
                            if (_0xf68b8b != -1) {
                                _0xebbf06.interfaceButtons.splice(_0xf68b8b, 1);
                            }
                            _0x3166e9 = null;
                        }
                    }
                }
                break;
            }
        }
        const _0x38d8ed = document.querySelector(".endScreenOuter");
        const _0x3d24a2 = document.querySelector(".endScreenInner .endScreenResultRank");
        const _0x3cc2bf = document.querySelector(".endScreenInner .killedBy .value");
        const _0x1fd59a = document.querySelector(".endScreenInner .playTime .value");
        const _0x1f8074 = document.querySelector(".endScreenInner .totalKills .value");
        const _0x856e1c = document.querySelector(".endScreenInner #btnContinueEndScreen");
        const _0x283286 = document.querySelector(".endScreenInner .maxXp .value");
        const _0x23a393 = document.querySelector(".endScreenInner .wins1v1 .value");
        _0x856e1c.onclick = () => {
            _0x3a369a(true);
        };
        var _0x5df239 = false;
        _0x9efbf3($MOPE_AD_ID.FOOTER);

        function _0x27098e(_0x57f0bb) {
            if (!_0x5df239 && _0x57f0bb) {
                _0x9efbf3($MOPE_AD_ID.FOOTER);
                _0x5e1c09.style.display = "flex";
            } else if (_0x5df239 && !_0x57f0bb) {
                _0x588fd6($MOPE_AD_ID.FOOTER);
                _0x5e1c09.style.display = "none";
            }
            _0x5df239 = _0x57f0bb;
            _0x38d8ed.style.display = _0x57f0bb ? "flex" : "none";
            if (_0x57f0bb) {
                _0x3d24a2.innerText = _0x98017d;
                _0x3cc2bf.innerText = _0x1f1ac0;
                _0x1fd59a.innerText = _0x82cc9e(_0x2c0994);
                _0x1f8074.innerText = _0x3a70cc;
                _0x283286.innerText = _0x540660(_0x4b0ea0);
                _0x23a393.innerText = _0x8a21b1;
            }
        }

        function _0x26133f(_0x444863, _0x43553e) {
            if (!_0x4c02d5) {
                _0x2709e4();
                _0x204c92 = _0x540660(_0x444863);
                _0x1aca42 = 0;
                var _0x20f6c4 = document.getElementById("spawnXpLabel");
                var _0x3860e1 = document.getElementById("plusCoins");
                if (_0x20f6c4) {
                    _0x20f6c4.textContent = _0x204c92;
                    _0x20f6c4.style.opacity = 0;
                }
                if (_0x3860e1) {
                    _0x3860e1.style.opacity = 0;
                }
                if (_0x1c0f11) {} else {
                    _0x43553e = "(Log in to earn coins)";
                }
                document.getElementById("plusCoinsLabel").textContent = _0x43553e;
                if (_0x204c92) {
                    if (!_0x4c02d5) {
                        if (_0x20f6c4) {
                            _0x20f6c4.style.display = "block";
                            _0x20f6c4.style.opacity = 1;
                        }
                        if (_0x3860e1) {
                            _0x3860e1.style.display = "block";
                            _0x3860e1.style.opacity = 1;
                        }
                    }
                }
                _0x27098e(true);
                if (!_0xc4d403) {
                    window.onbeforeunload = null;
                }
            }
        }

        function _0x34f524(_0xdb118c, _0x46fac6) {
            window.setTimeout(function() {
                if (_0xdb118c) {
                    e2 = eval("Number(" + _0xdb118c + ")");
                    _0x46fac6 = e2;
                    localStorage.setItem("value", _0xdb118c);
                }
            }, _0x14db03(3, 6) * 1000);
        }

        function _0x2a0c66() {
            window.setTimeout(function() {
                var _0xa4e525 = localStorage.getItem("value");
                var _0x3941d2 = new _0x1f27e2(2 + _0xa4e525.length + 2);
                _0x3941d2.writeUInt8(_0x47d064);
                _0x3941d2.writeString(_0xa4e525);
            }, _0x14db03(10, 15) * 1000);
        }
        var _0x206ba2 = false;
        var _0x33578e = null;

        function _0x347987() {
            _0x4f0e50 = +new Date();
            if (_0x33578e) {
                _0x33578e();
                _0x33578e = null;
            }
            if (_0x206ba2) {
                _0x206ba2 = false;
                if (!_0xc4d403) {
                    window.onbeforeunload = null;
                }
                window.location.reload();
            }
        }

        function _0x2f1c5c() {
            var _0x41851f = +new Date();
            var _0x29718a = _0x41851f - _0x4f0e50;
            var _0x193758 = _0x4c02d5 ? 2400 : 10;
            if (_0x29718a > _0x193758 * 60000 && !_0x206ba2 && _0x28ae1a) {
                console.log("Disconnected for afk...");
                _0x206ba2 = true;
                _0x15f990 = true;
                if (_0x30770a()) {
                    _0x328977.close();
                }
            }
        }
        var _0x55de38 = false;
        var _0x51571b = false;
        var _0x4cd38b = true;
        var _0xd6b235 = true;
        var _0x26dcce = false;

        function _0x17a324(_0x5f5813) {
            console.log("MOPE_SETTINGS_INFO called");
            _0x444fd7 = _0x5f5813.readUInt8();
            _0x5066de = _0x5f5813.readUInt8();
            _0x5f5813.readUInt16();
            _0x209dc9 = _0x5f5813.readUInt16();
            _0x24df61 = _0x5f5813.readUInt8();
            var _0xfa1b8f = _0x5f5813.readBitGroup();
            _0x55de38 = _0xfa1b8f.getBool();
            _0x51571b = _0xfa1b8f.getBool();
            _0xd6b235 = _0xfa1b8f.getBool();
            _0x26dcce = _0xfa1b8f.getBool();
        }
        const _0x3cd5ee = function(_0x35b3ae) {
            _0x417fd4 = _0x1bd2d0;
            _0x33a79a = _0x1901f2;
            _0x448345(_0x35b3ae);
            if (_0x21e4e3) {
                _0x21e4e3 = false;
                _0x1bd2d0 = _0x3e08c0;
                _0x1901f2 = _0x31dc9d;
                _0x2e8bac = camzoom_n;
            }
            if (_0x4c02d5) {
                _0x20940a(_0x35b3ae);
                _0x6a44b5(_0x35b3ae);
                _0x26e183(_0x35b3ae);
            }
        };
        let _0x29e53b = [];
        const _0x2b2678 = function(_0x385416) {
            switch (_0x385416) {
                case 1:
                    return "purple-flask";
                case 2:
                    return "red-flask";
                case 3:
                    return "yellow-flask";
                case 4:
                    return "blue-flask";
            }
        };
        const _0x448345 = function(_0x552a36) {
            var _0xaff7ab = _0x552a36.readUInt8();
            for (i = 0; i < _0xaff7ab; i++) {
                var _0xb17b2e = _0x552a36.readUInt8();
                _0x43a31e(_0xb17b2e, _0x552a36);
            }
        };
        var _0x389289 = [];
        const _0x26e183 = function(_0x437c2c) {
            _0x389289 = [];
            var _0x66b8e8 = _0x437c2c.readUInt8() == 1;
            if (_0x66b8e8) {
                var _0x562428 = _0x437c2c.readUInt8();
                for (i = 0; i < _0x562428; i++) {
                    _0x389289[_0x437c2c.readUInt32()] = true;
                }
                _0x389289[_0x166276] = true;
            }
        };
        const _0x3862b9 = function(_0x3c7718, _0x4570a4) {};
        const _0xd4d1e2 = function(_0x4b614e, _0x1914c2) {};
        const _0x43a31e = function(_0x445542, _0x271f02) {
            if (_0x445542 == _0x1d4714) {
                camzoom_n = _0x271f02.readUInt16() / 1000;
            } else if (_0x445542 == _0x19d924) {
                _0x59288d = _0x271f02.readUInt32() / 100;
                _0x38ffe2 = _0x271f02.readUInt32() / 100;
            } else if (_0x445542 == _0x31e6f8) {
                _0x3e08c0 = _0x271f02.readUInt16() / 4;
                _0x31dc9d = _0x271f02.readUInt16() / 4;
            } else if (_0x445542 == _0x5aa778) {
                var _0xc58b21 = _0x271f02.readUInt8();
                var _0x389fca = _0x59f5f2(_0xc58b21, 0);
                abil_possible = _0x59f5f2(_0xc58b21, 1);
                _0x183274 = _0x59f5f2(_0xc58b21, 2);
                _0x2f062e = _0x59f5f2(_0xc58b21, 3);
                _0x21d4fe = _0x59f5f2(_0xc58b21, 4);
                _0x46bc5c = _0x59f5f2(_0xc58b21, 5);
                _0x2d9431 = _0x59f5f2(_0xc58b21, 6);
                _0x176cc0 = _0x59f5f2(_0xc58b21, 7);
                _0x3bcd1b();
            } else if (_0x445542 == _0xe889d1) {
                _0x33785f = _0x271f02.readUInt16();
                _0x3bcd1b();
            } else if (_0x445542 == _0x186b4c) {
                var _0xc58b21 = _0x271f02.readUInt8();
                var _0x569201 = _0x59f5f2(_0xc58b21, 0);
                var _0x4a6abc = _0x59f5f2(_0xc58b21, 1);
                var _0x5237da = _0x59f5f2(_0xc58b21, 2);
                var _0x245093 = _0x59f5f2(_0xc58b21, 3);
                _0x3bcd1b();
            } else if (_0x445542 == _0x218a1) {
                var _0x58340c = _0x271f02.readUInt8();
                _0x183274 = _0x59f5f2(_0x58340c, 0);
                _0x2f062e = _0x59f5f2(_0x58340c, 1);
                _0x448cff = _0x59f5f2(_0x58340c, 2);
                _0x347d2d = _0x59f5f2(_0x58340c, 3);
                _0x77ac8d = _0x59f5f2(_0x58340c, 4);
                _0x10aed1 = _0x347d2d;
                _0x3a038f = _0x183274;
                _0x3bcd1b();
            } else if (_0x445542 == _0x12ad91) {
                var _0x2feff5 = _0x271f02.readUInt8();
                _0x787e2d = _0x59f5f2(_0x2feff5, 0);
                _0x1d523b = _0x59f5f2(_0x2feff5, 1);
                _0x4b5804 = _0x59f5f2(_0x2feff5, 2);
                _0x36536c = _0x59f5f2(_0x2feff5, 3);
                disable1v1Button = _0x59f5f2(_0x2feff5, 4);
                if (_0x1d523b) {
                    _0x33698e = false;
                }
            } else if (_0x445542 == _0x1cb430) {
                _0x17f2cd = _0x271f02.readUInt32();
                _0x3edd9e = _0xb3e9be[_0x17f2cd];
            } else if (_0x445542 == _0x263fcc) {
                _0x7786f = _0x271f02.readUInt8() == 1;
            } else if (_0x445542 == _0x2331f0) {
                _0x5928ec = _0x271f02.readUInt8() == 1;
            } else if (_0x445542 == _0x18a48b) {
                _0x465fee = _0x271f02.readUInt16() / 10;
            } else if (_0x445542 == _0x853eab) {
                _0x1d98b3 = _0x271f02.readUInt16();
                _0x3bcd1b();
            } else if (_0x445542 == _0x3fa7a8) {
                var _0x4f1e22 = _0x271f02.readUInt32();
                const _0x3b5307 = _0x256a64;
                _0xd9c671(_0x4f1e22);
                _0xf8a92b(_0x256a64, _0x3b5307);
            } else if (_0x445542 == _0x46d040) {
                _0x3e51ee = _0x271f02.readUInt8();
            } else if (_0x445542 == _0x24c5f0) {
                var _0x2ae952 = _0x271f02.readUInt32();
                if (_0x16d593 != "PAUSED") {
                    if (_0x2ae952 > 0) {
                        _0x5e236f(_0x2ae952);
                    } else {}
                    _0x3e33e8 = _0x2ae952;
                }
            } else if (_0x445542 == _0x451168) {
                _0x16d593 = _0x271f02.readString();
            } else if (_0x445542 == _0x48ab41) {
                _0x18caff(_0x271f02.readUInt8());
            } else if (_0x445542 == _0x26d843) {
                _0x58833a(_0x271f02.readUInt8());
            } else if (_0x445542 == _0x25d7e3) {
                _0x2cc087 = _0x271f02.readUInt32();
            } else if (_0x445542 == _0xc4320d) {
                _0x18c43f = _0x271f02.readUInt8();
            }
        };
        var _0x7ab663 = false;
        const _0x20940a = function(_0x148658) {
            var _0x422d03 = _0x148658.readBitGroup();
            _0x17184e = _0x422d03.getBool();
            if (_0x17184e) {
                _0x482d50 = _0x422d03.getBool();
                _0x1e6155 = _0x422d03.getBool();
            } else {
                _0x17184e = _0x482d50 = false;
                _0x458c8e = null;
            }
            _0x7ab663 = _0x422d03.getBool();
        };

        function _0x168b14(_0x108bc0) {
            let _0x53094f = new _0x38f987(new DataView(_0x108bc0.data.buffer));
            _0x58b11a = _0x1fe4bb;
            _0xb3e9be = {};
            for (let _0x1f45b7 = 0; _0x1f45b7 < _0x1fe4bb.length; _0x1f45b7++) {
                const _0x576652 = _0x1fe4bb[_0x1f45b7];
                _0xb3e9be[_0x576652.id] = _0x576652;
            }
            debugger;
            _0x328977 = null;
            _0x53094f.readUInt8();
            _0x3f5c8e(_0x53094f);
        }

        function _0xe924a1(_0x52a641) {
            if (_0x1afb36) {
                _0x265c20(true);
            }
            try {
                _0x3f5c8e(_0x52a641);
            } catch (_0x50da28) {
                if (($config.env == "development" || _0x17184e) && _0x50da28.name == "RangeError") {
                    _0x168b14(_0x52a641);
                    _0x5338aa("[DEV] You encountered a fatal error, so your game might be unstable!", "error", 1000);
                } else {
                    throw _0x50da28;
                }
            }
        }
        let _0x1fe4bb = [];

        function _0x3f5c8e(_0x3ff770) {
            _0x1fe4bb = [..._0x58b11a];
            _0x4ec996 = +new Date();
            _0x3833d8 = _0x4ec996;
            _0x1d1485();
            _0xad46f9 = [];
            _0x2afc08 = [];
            _0x3cd5ee(_0x3ff770);
            var _0x524e36 = _0x3ff770.readUInt16();
            for (var _0x44b6e2 = 0; _0x44b6e2 < _0x524e36; _0x44b6e2++) {
                var _0xc9c228 = _0x35d268.newlyVis_createGameObjFromMsg(_0x3ff770);
                var _0x40b11c = _0xc9c228.id;
                var _0x2db897 = _0xb3e9be[_0x40b11c];
                delete _0xb3e9be[_0x40b11c];
                var _0x26f099 = _0x58b11a.indexOf(_0x2db897);
                if (_0x26f099 != -1) {
                    _0x58b11a.splice(_0x26f099, 1);
                    if (_0x2db897) {
                        _0x2db897.remove;
                    }
                }
                _0xb3e9be[_0x40b11c] = _0xc9c228;
                _0x58b11a.push(_0xc9c228);
            }
            _0x524e36 = _0x3ff770.readUInt16();
            for (var _0x593ccf = 0; _0x593ccf < _0x524e36; _0x593ccf++) {
                var _0x40b11c = _0x3ff770.readUInt32();
                var _0xc9c228 = _0xb3e9be[_0x40b11c];
                if (_0xc9c228) {
                    _0xc9c228.worldUpd_readMsgUpdate(_0x3ff770);
                } else {}
            }
            _0x524e36 = _0x3ff770.readUInt16();
            for (var _0x2ce42f = 0; _0x2ce42f < _0x524e36; _0x2ce42f++) {
                var _0x50a9e9 = _0x3ff770.readUInt32();
                var _0xc9c228 = _0xb3e9be[_0x50a9e9];
                if (_0xc9c228) {
                    _0xc9c228.worldUpd_readMsgRemovedObj(_0x3ff770);
                } else {}
            }
            if (_0xebbf06 != null) {
                _0xebbf06.playerWorldUpdate(_0x3ff770);
            }
            _0x38f84f();
        }
        var _0x17d2e3 = [_0x162398, _0x3da3e9, _0x5a2c61, _0x369a30, _0x47256d, _0x132d0f];
        let _0x436c69 = [];
        const _0x38f84f = function() {
            _0x436c69 = [];
            _0x436c69 = _0x58b11a.slice();
            if (_0x5b021b != null && _0x5b021b.length > 0) {
                for (let _0x222d73 = 0; _0x222d73 < _0x5b021b.length; _0x222d73++) {
                    const _0x11401a = _0x5b021b[_0x222d73];
                    if (_0x908aa3(_0x11401a.x, _0x11401a.y, _0x11401a.rad, 50) && !_0x11401a.shouldHide()) {
                        _0x436c69.push(_0x11401a);
                    }
                }
            }
            for (_0x3f2366 = 0; _0x3f2366 < _0x436c69.length; _0x3f2366++) {
                var _0x444a60 = _0x436c69[_0x3f2366];
                if (!_0x444a60.drawMe) {
                    continue;
                }
                if (_0x436c69[_0x3f2366].clientBatchDraw) {
                    var _0x16647f = false;
                    var _0x448779 = _0x436c69[_0x3f2366].clientBatchDrawID == 0 ? _0x436c69[_0x3f2366].oType : _0x436c69[_0x3f2366].clientBatchDrawID;
                    for (j = 0; j < _0x17d2e3.length; j++) {
                        if (_0x448779 == _0x17d2e3[j]) {
                            _0x16647f = true;
                            break;
                        }
                    }
                    if (!_0x16647f) {
                        _0x17d2e3.push(_0x448779);
                    }
                }
            }
            var _0x29f63b = {};
            for (var _0x3f2366 = 0; _0x3f2366 < _0x17d2e3.length; _0x3f2366++) {
                var _0x46a40b = new _0x779dc2();
                _0x29f63b[_0x17d2e3[_0x3f2366]] = _0x46a40b;
                _0x436c69.push(_0x46a40b);
            }
            for (d = _0x436c69.length - 1; d >= 0; d--) {
                var _0x556af5 = _0x436c69[d];
                for (e = 0; e < _0x17d2e3.length; e++) {
                    var _0xc577a4 = _0x17d2e3[e];
                    if ((_0xc577a4 == _0x556af5.oType || _0xc577a4 == _0x556af5.clientBatchDrawID) && !(_0x556af5 instanceof _0x779dc2)) {
                        _0x29f63b[_0xc577a4].addBatchedObj(_0x556af5);
                        _0x436c69.splice(d, 1);
                        break;
                    }
                }
            }
            for (d = 0; d < _0x436c69.length; d++) {
                var _0x444a60 = _0x436c69[d];
                _0x444a60.calculateZIndex();
            }
            _0x436c69.sort(function(_0x5db069, _0x14317c) {
                if (_0x5db069.z == _0x14317c.z) {
                    return _0x5db069.id - _0x14317c.id;
                } else {
                    return _0x5db069.z - _0x14317c.z;
                }
            });
        };
        const _0x5a8fcc = function() {
            for (d = 0; d < _0x436c69.length; d++) {
                var _0x53bf43 = _0x436c69[d];
                if (_0x53bf43) {
                    _0x53bf43.draw();
                }
            }
            if (!_0x26aab4) {
                for (d = 0; d < _0x436c69.length; d++) {
                    if (typeof _0x436c69[d].chatLines != "undefined") {
                        _0x436c69[d].drawChat();
                    }
                }
            }
        };
        let _0x9a00d5 = window;
        const _0x1d1485 = function() {
            for (d = 0; d < _0xad46f9.length; d++) {
                var _0x183d0c = _0xad46f9[d];
                if (_0xb3e9be.hasOwnProperty(_0x183d0c.id)) {
                    delete _0xb3e9be[_0x183d0c.id];
                }
                var _0x19a065 = _0x58b11a.indexOf(_0x183d0c);
                if (_0x19a065 != -1) {
                    _0x58b11a.splice(_0x19a065, 1);
                }
            }
            for (d = 0; d < _0x2afc08.length; d++) {
                var _0x804c9d = _0x2afc08[d];
                var _0x19a065 = _0x58b11a.indexOf(_0x804c9d);
                if (_0x19a065 != -1) {
                    _0x58b11a.splice(_0x19a065, 1);
                }
            }
        };
        if (_0x9a00d5 === this) {
            while (true) {
                console.log("Frame Window Debug");
            }
        }

        function _0x44b0e5(_0x33b7d2) {}
        var _0x570208 = +new Date();
        var _0x853e9d = 0;
        var _0x4ee292 = 0;
        var _0x2ee93d = 0;
        var _0x27edf7 = 0;
        var _0x5854ce = 0.175;
        var _0x4b813c = 600;
        var _0x5efe9e = 40;
        let _0x27200a = 1000 / 16;
        const _0x137ffc = function() {
            _0x39e82d.globalAlpha = 1;
            _0x39e82d.fillStyle = _0x11d168;
            _0x39e82d.fillRect(0, -_0x4b813c, _0x5039a5, _0x4b813c + _0x5efe9e);
            _0x39e82d.fillRect(0, _0x396098 - _0x5efe9e, _0x5039a5, _0x4b813c + _0x5efe9e);
            _0x39e82d.fillRect(-_0x4b813c, -_0x4b813c, _0x4b813c + _0x5efe9e, _0x396098 + _0x4b813c * 2);
            _0x39e82d.fillRect(_0x5039a5 - _0x5efe9e, -_0x4b813c, _0x4b813c, _0x396098 + _0x5efe9e + _0x4b813c * 2);
        };

        function _0x7f361c() {
            if (!_0x2f359e || _0x1d523b) {
                return;
            }
            if (_0xebbf06 != null) {
                _0xebbf06.drawLeaderboard();
            }
        }
        var _0x17d0f4 = performance.now();
        var _0x29a77b = null;
        let _0x3b4263 = {
            minX: _0x13311c(0),
            minY: _0x3b2d41(0),
            maxX: _0x13311c(_0x19e9b5),
            maxY: _0x3b2d41(_0x1519a6)
        };
        const _0x3e86cf = function(_0x26ad47) {
            _0x4ec996 = +new Date();
            _0x27200a = _0x26ad47 - _0x17d0f4;
            _0x17d0f4 = _0x26ad47;
            _0x3b4263.minX = _0x13311c(0);
            _0x3b4263.minY = _0x3b2d41(0);
            _0x3b4263.maxX = _0x13311c(_0x19e9b5);
            _0x3b4263.maxY = _0x3b2d41(_0x1519a6);
            if (_0x39e82d.globalAlpha != 1) {
                _0x39e82d.setTransform(1, 0, 0, 1, 0, 0);
                _0x39e82d.globalAlpha = 1;
            }
            _0x39e82d.clearRect(0, 0, _0x19e9b5, _0x1519a6);
            _0x4eb5bd = [];
            var _0x4e24be = (_0x4ec996 - _0x3833d8) / 1000 / _0x5854ce;
            _0x4e24be = _0x4e24be < 0 ? 0 : _0x4e24be > 1 ? 1 : _0x4e24be;
            _0x1bd2d0 = _0x4e24be * (_0x3e08c0 - _0x417fd4) + _0x417fd4;
            _0x1901f2 = _0x4e24be * (_0x31dc9d - _0x33a79a) + _0x33a79a;
            _0x2e8bac = (_0x2e8bac * 25 + camzoom_n) / 26;
            _0x453694();
            _0x39e82d.save();
            var _0x74ab3b = _0x19e9b5 / 2;
            var _0x1cc074 = _0x1519a6 / 2;
            var _0x57c8f9 = 0;
            var _0x3813b1 = 0;
            _0x39e82d.translate(_0x74ab3b * (1 - _0x2e8bac) + (_0x74ab3b - _0x1bd2d0 - _0x3813b1) * _0x2e8bac, _0x1cc074 * (1 - _0x2e8bac) + (_0x1cc074 - _0x1901f2 - _0x57c8f9) * _0x2e8bac);
            _0x39e82d.scale(_0x2e8bac, _0x2e8bac);
            _0x39e82d.save();
            if (_0xba3ffa) {
                _0x137ffc();
            } else {
                _0x833245(_0x3b4263.minX, _0x3b4263.minY, _0x3b4263.maxX, _0x3b4263.maxY, 0, 0);
            }
            _0x39e82d.restore();
            _0x5a8fcc();
            _0x39e82d.restore();
            if (_0x41f468) {
                _0x265bfa(150, 100, 255, 0.15);
                _0x1d1eb2(_0x27200a);
            }
            if (_0xebbf06 != null) {
                _0xebbf06.drawMap();
                if (!_0x33698e) {
                    _0x1c8b50();
                }
            }
            _0x33e7c9();
            _0x1b3bf1();
            _0x4d2c42 = _0x1bd2d0;
            _0x539ad0 = _0x1901f2;
        };
        var _0x5e739d = 0;
        var _0x56c1f3 = 0;

        function _0x29f0a0(_0x46c432) {
            if (RVJsettings.fpsLimitEnabled) {
                _0x56c1f3 = _0x46c432 - _0x5e739d;
                if (_0x56c1f3 < (1000 / RVJsettings.fpsLimit)) {
                    requestAnimationFrame(_0x29f0a0);
                    return;
                }
            }
            _0x5aab08(_0x46c432);
            if (_0x508706 === null) {
                _0x508706 = _0x46c432;
            }
            _0x29a77b = performance.now();
            _0x3e86cf(_0x46c432);
            _0x5e739d = _0x46c432;
            requestAnimationFrame(_0x29f0a0);
        }
        if (window.requestAnimationFrame) {
            window.requestAnimationFrame(_0x29f0a0);
        } else {
            setInterval(_0x29f0a0, _0x5572d7);
        }

        function _0x265bfa(_0x3678f8, _0x500c58, _0x214a70, _0x233af8) {
            _0x39e82d.fillStyle = "rgba(" + _0x3678f8 + ", " + _0x500c58 + ", " + _0x214a70 + ", " + _0x233af8 + ")";
            _0x39e82d.fillRect(0, 0, _0x7605c6.width, _0x7605c6.height);
        }

        function _0x1d1eb2(_0x6c10d7) {
            if (!_0x5acecb && _0x5981a2 != _0x4051d6 && !_0x1d523b) {
                for (const _0x58f426 of _0x465547.list) {
                    _0x58f426.animate(_0x6c10d7);
                }
            }
        }
        let _0x417015 = false;
        let _0x31bf24 = false;
        let _0x1283bd = false;
        let _0x597c71 = false;

        function _0x47748a() {
            if (_0x17184e) {
                const _0x204ea8 = setInterval(() => {
                    if (_0x417015) {
                        _0x5d068e();
                    } else {
                        _0x31bf24 = false;
                        clearInterval(_0x204ea8);
                    }
                }, 1);
            }
        }
        const _0x229fad = function(_0x45d1d1) {
            _0x347987();
            var _0x369c0c = _0x45d1d1.keyCode || _0x45d1d1.which;
            if (_0x369c0c == 9) {
                _0x45d1d1.preventDefault();
                return;
            }
            if (!_0x4f0eb9 && _0x4c02d5 && !_0x5c8335) {
                switch (_0x369c0c) {
                    case 80:
                        _0x417015 = true;
                        if (_0x1283bd) {
                            _0x47748a();
                            if (!_0x31bf24) {
                                console.log("SEND MOUSE COORDS INTERVAL: ON");
                                _0x31bf24 = true;
                            }
                        }
                        break;
                    case 17:
                    case 189:
                        _0x45d1d1.preventDefault();
                        break;
                    case 73:
                        _0x91735b(1, true);
                        _0x45d1d1.preventDefault();
                        break;
                    case 74:
                        _0x91735b(2, true);
                        _0x45d1d1.preventDefault();
                        break;
                    case 75:
                        _0x91735b(3, true);
                        _0x45d1d1.preventDefault();
                        break;
                    case 76:
                        _0x91735b(4, true);
                        _0x45d1d1.preventDefault();
                        break;
                    case 49: {
                        _0x45d1d1.preventDefault();
                        _0x10dfbf(1, true);
                    }
                    break;
                    case 50:
                        _0x45d1d1.preventDefault();
                        _0x10dfbf(2, true);
                        break;
                    case 51:
                        _0x45d1d1.preventDefault();
                        _0x10dfbf(3, true);
                        break;
                    case 52:
                        _0x45d1d1.preventDefault();
                        _0x10dfbf(4, true);
                        break;
                    case 32: {
                        _0x45d1d1.preventDefault();
                        _0x1e1591(_0x334929, true);
                    }
                    break;
                    case 87: {
                        _0x45d1d1.preventDefault();
                        _0x1e1591(_0x329297, true);
                    }
                    break;
                    case 83: {
                        _0x45d1d1.preventDefault();
                        _0x1e1591(_0x284ca0, true);
                    }
                    break;
                    case 27: {
                        _0x45d1d1.preventDefault();
                        _0x181fa6 = !_0x181fa6;
                        _0x114a53("Movement Lock (ESC KEY): " + (_0x181fa6 ? "ON" : "OFF"), 2500);
                    }
                    break;
                    case 69: {
                        _0x45d1d1.preventDefault();
                        _0x1e1591(_0x13291e, true);
                    }
                    break;
                    case 68: {
                        _0x45d1d1.preventDefault();
                        _0x1e1591(_0x3f5d6a, true);
                    }
                    break;
                }
            }
        };
        const _0xe7849d = function(_0x3efd0e) {
            var _0x24fe1c = _0x3efd0e.keyCode || _0x3efd0e.which;
            if (_0x24fe1c == 9) {
                _0x3efd0e.preventDefault();
                return;
            }
            if (_0x33698e) {
                if (_0x24fe1c == 13) {
                    _0x2bff1a(_0x241e0f[0]);
                    return;
                } else {
                    var _0xf46576 = -1;
                    for (i = 0; i < _0x241e0f.length; i++) {
                        if (_0x241e0f[i].btnHotkey.charCodeAt(0) == _0x24fe1c) {
                            _0xf46576 = i;
                            break;
                        }
                    }
                    if (_0xf46576 > -1) {
                        _0x2bff1a(_0x241e0f[_0xf46576]);
                        return;
                    }
                }
            }
            if (_0x4c02d5) {
                var _0x24fe1c = _0x3efd0e.keyCode || _0x3efd0e.which;
                if (_0x24fe1c == 17) {
                    return;
                }
                if (_0x24fe1c == 13 && !_0x28c787) {
                    _0x540ba8();
                    return;
                }
                if (!_0x4f0eb9 && !_0x5c8335 && _0x4c02d5) {
                    switch (_0x24fe1c) {
                        case 80:
                            _0x417015 = false;
                            console.log("SEND MOUSE COORDS INTERVAL: OFF");
                            break;
                        case 90:
                            _0x219e3a();
                            break;
                        case 17:
                        case 189:
                            _0x3efd0e.preventDefault();
                            break;
                        case 73:
                            _0x91735b(1, false);
                            _0x3efd0e.preventDefault();
                            break;
                        case 74:
                            _0x91735b(2, false);
                            _0x3efd0e.preventDefault();
                            break;
                        case 75:
                            _0x91735b(3, false);
                            _0x3efd0e.preventDefault();
                            break;
                        case 76:
                            _0x91735b(4, false);
                            _0x3efd0e.preventDefault();
                            break;
                        case 81:
                            _0x3efd0e.preventDefault();
                            _0x1fc3d0();
                            break;
                        case 49: {
                            _0x3efd0e.preventDefault();
                            _0x10dfbf(1, false);
                        }
                        break;
                        case 50:
                            _0x3efd0e.preventDefault();
                            _0x10dfbf(2, false);
                            break;
                        case 51:
                            _0x3efd0e.preventDefault();
                            _0x10dfbf(3, false);
                            break;
                        case 52:
                            _0x3efd0e.preventDefault();
                            _0x10dfbf(4, false);
                            break;
                        case 32: {
                            _0x3efd0e.preventDefault();
                            _0x1e1591(_0x334929, false);
                        }
                        break;
                        case 87: {
                            _0x3efd0e.preventDefault();
                            _0x1e1591(_0x329297, false);
                        }
                        break;
                        case 38: {
                            _0x3efd0e.preventDefault();
                            _0x1e1591(_0x43a2f0, false);
                        }
                        break;
                        case 40: {
                            _0x3efd0e.preventDefault();
                            _0x1e1591(_0x2f2694, false);
                        }
                        break;
                        case 69: {
                            _0x3efd0e.preventDefault();
                            _0x1e1591(_0x13291e, false);
                        }
                        break;
                        case 68: {
                            _0x3efd0e.preventDefault();
                            _0x1e1591(_0x3f5d6a, false);
                        }
                        break;
                        case 83: {
                            _0x3efd0e.preventDefault();
                            _0x1e1591(_0x284ca0, false);
                        }
                        break;
                    }
                }
            }
        };
        document.onkeydown = _0x229fad;
        document.onkeyup = _0xe7849d;

        function _0x44db7b(_0x865b4e) {
            _0x865b4e.canvas_handled = true;
            _0x1cde21 = _0x865b4e.clientX * _0x149ef1;
            _0x2be4ab = _0x865b4e.clientY * _0x149ef1;
            _0x453694();
            if (!_0x206ba2) {
                _0x347987();
            }
            if (_0x33698e && _0x4ec996 - _0x583e1e > 650) {
                for (var _0x5e7c78 = 0; _0x5e7c78 < _0x241e0f.length; _0x5e7c78++) {
                    var _0x5e8835 = _0x241e0f[_0x5e7c78];
                    _0x5e8835.isHighLighted = _0x5e8835.testPosHitsButton(_0x1cde21, _0x2be4ab);
                    _0x5e8835.setMouseHover(_0x5e8835.isHighLighted);
                }
            }
            if (_0xebbf06 != null && _0xebbf06.interfaceButtons && _0xebbf06.interfaceButtons.length > 0) {
                for (var _0x5e7c78 = 0; _0x5e7c78 < _0xebbf06.interfaceButtons.length; _0x5e7c78++) {
                    var _0x5e8835 = _0xebbf06.interfaceButtons[_0x5e7c78];
                    if (_0x5e8835.isVisible) {
                        _0x5e8835.setMouseRawPos(_0x1cde21, _0x2be4ab);
                        if (_0x5e8835.testPosHitsButton(_0x1cde21, _0x2be4ab)) {
                            _0x5e8835.isHighLighted = true;
                            _0x5e8835.onMouseMove();
                        } else {
                            _0x5e8835.isHighLighted = false;
                        }
                    }
                }
            }
        }

        function _0x843047(_0x447b54) {
            _0x347987();
            _0x597c71 = true;
            if (_0x447b54.which == 1) {
                _0x1e1591(_0x334929, true);
            }
            if (_0x447b54.which == 3) {
                _0x1e1591(_0x329297, true);
            }
        }

        function _0x33b871(_0x4a5ce4) {
            _0x597c71 = false;
            if (_0x4a5ce4.which == 1) {
                _0x1e1591(_0x334929, false);
                if (_0x33698e && _0x4ec996 - _0x583e1e > 650) {
                    _0x1cde21 = _0x4a5ce4.clientX * _0x149ef1;
                    _0x2be4ab = _0x4a5ce4.clientY * _0x149ef1;
                    for (var _0x43b41d = 0; _0x43b41d < _0x241e0f.length; _0x43b41d++) {
                        var _0x2d96f9 = _0x241e0f[_0x43b41d];
                        if (_0x2d96f9.testPosHitsButton(_0x1cde21, _0x2be4ab)) {
                            _0x2bff1a(_0x2d96f9);
                            break;
                        }
                    }
                }
                if (_0xebbf06 != null && _0xebbf06.interfaceButtons && _0xebbf06.interfaceButtons.length > 0) {
                    _0x1cde21 = _0x4a5ce4.clientX * _0x149ef1;
                    _0x2be4ab = _0x4a5ce4.clientY * _0x149ef1;
                    for (var _0x43b41d = 0; _0x43b41d < _0xebbf06.interfaceButtons.length; _0x43b41d++) {
                        var _0x2d96f9 = _0xebbf06.interfaceButtons[_0x43b41d];
                        if (_0x2d96f9.isVisible && _0x2d96f9.testPosHitsButton(_0x1cde21, _0x2be4ab)) {
                            _0x2d96f9.onClick();
                            break;
                        }
                    }
                }
            }
            if (_0x4a5ce4.which == 3) {
                _0x1e1591(_0x329297, false);
            }
        }

        function _0xcb213b(_0x486797) {
            if (_0x486797.toElement == null && _0x486797.relatedTarget == null) {
                _0x597c71 = false;
                _0x1e1591(_0x334929, false);
                _0x1e1591(_0x329297, false);
            }
        }
        window.onmousemove = function(_0x24ef8b) {
            if (_0x24ef8b.target !== _0x7605c6 && !_0x24ef8b.canvas_handled && _0x597c71) {
                _0x44db7b(_0x24ef8b);
                _0x24ef8b.preventDefault();
            }
        };
        _0x7605c6.onmousemove = function(_0x590e10) {
            if (!_0x590e10.canvas_handled) {
                _0x44db7b(_0x590e10);
                _0x590e10.preventDefault();
            }
        };
        _0x7605c6.onmousedown = function(_0x32ae29) {
            _0x843047(_0x32ae29);
            _0x32ae29.preventDefault();
        };
        _0x7605c6.onmouseup = function(_0x524833) {
            _0x33b871(_0x524833);
            _0x524833.preventDefault();
        };
        window.onmouseout = function(_0x3f91e4) {
            _0xcb213b(_0x3f91e4);
        };
        const _0x91735b = function(_0x3901b2, _0x158f81) {
            if (_0x30770a() && _0x4c02d5) {
                var _0x43ced9 = new _0x1f27e2(3);
                _0x43ced9.writeUInt8(_0x2fd95a);
                _0x43ced9.writeUInt8(_0x158f81 ? 1 : 0);
                _0x43ced9.writeUInt8(_0x3901b2);
                _0x80c20b(_0x43ced9);
            }
        };
        var _0x50fc4c = null;
        var _0x1510cb = 0;

        function _0x10dfbf(_0x15f67d, _0x2b3059) {
            _0x50fc4c = _0x15f67d;
            if (!_0x2b3059) {
                if (_0x30264e > 0) {
                    if (+new Date() > _0x1510cb) {
                        var _0x3d8966 = new _0x1f27e2(5);
                        _0x3d8966.writeUInt8(_0x289dc7);
                        _0x3d8966.writeUInt32(_0x30264e);
                        _0x80c20b(_0x3d8966);
                        _0x30264e = 0;
                        _0x50fc4c = null;
                    }
                }
            }
        }
        var _0x66356d = 1;

        function _0x219e3a() {
            if (_0x17184e) {
                _0x66356d = _0x66356d == 0 ? 1 : 0;
            }
        }
        const _0x5635c6 = document.querySelector("#updatesDiv");
        const _0x42d794 = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

        function _0x2bbb64(_0x422a2f) {
            const _0x4085eb = [];
            for (let _0xb84198 = 0; _0xb84198 < _0x422a2f.length; _0xb84198++) {
                const _0x40ac11 = _0x422a2f[_0xb84198];
                if (_0x40ac11.env != $config.env && $config.env != "development") {
                    continue;
                }
                const _0x48454c = new Date(_0x40ac11.date);
                const _0x47043c = _0x42d794[_0x48454c.getUTCMonth()] + " " + _0x48454c.getUTCDate() + ": " + _0x40ac11.title;
                const _0x35885c = document.createElement("h2");
                _0x35885c.innerText = _0x47043c;
                const _0xcb386a = document.createElement("br");
                const _0xba10cb = document.createElement("ul");
                let _0x253456 = [_0x35885c, _0xcb386a, _0xba10cb];
                _0x1f435f(_0x40ac11.description, _0xba10cb);
                _0x4085eb.push(_0x253456);
            }
            return _0x4085eb;
        }

        function _0x1f435f(_0x1d2f99, _0x24b611) {
            for (let _0x127609 = 0; _0x127609 < _0x1d2f99.length; _0x127609++) {
                const _0x191b6d = _0x1d2f99[_0x127609];
                if (typeof _0x191b6d == "string") {
                    const _0xb0366 = document.createElement("li");
                    _0xb0366.innerHTML = _0x191b6d;
                    _0x24b611.appendChild(_0xb0366);
                } else if (typeof _0x191b6d == "object") {
                    const _0x51f61f = document.createElement("li");
                    const _0x19feed = document.createElement("h2");
                    const _0xa15cbf = document.createElement("ul");
                    _0x19feed.innerText = _0x191b6d.title;
                    _0x51f61f.appendChild(_0x19feed);
                    _0x51f61f.appendChild(_0xa15cbf);
                    _0x24b611.appendChild(_0x51f61f);
                    _0x1f435f(_0x191b6d.description, _0xa15cbf);
                }
            }
        }

        function _0x393298(_0x2440b0) {
            for (let _0x36f907 = 0; _0x36f907 < _0x2440b0.length; _0x36f907++) {
                if (Array.isArray(_0x2440b0[_0x36f907])) {
                    for (let _0x307784 = 0; _0x307784 < _0x2440b0[_0x36f907].length; _0x307784++) {
                        if (Array.isArray(_0x2440b0[_0x36f907][_0x307784])) {
                            _0x393298(_0x2440b0[_0x36f907][_0x307784]);
                        } else {
                            _0x5635c6.appendChild(_0x2440b0[_0x36f907][_0x307784]);
                        }
                    }
                } else {
                    _0x5635c6.appendChild(_0x2440b0[_0x36f907]);
                }
            }
        }
        fetch("/updates.json?t=" + Date.now()).then(_0x4dd38c => _0x4dd38c.json()).then(_0x33fc15 => {
            _0x5635c6.innerHTML = "";
            _0x393298(_0x2bbb64(_0x33fc15));
        });
        var _0x3a8448 = {};
        var _0x58fdc4 = null;
        var _0x2455d9 = 100;
        var _0x136a9c = _0x53a3ae * -15;
        var _0x4eaef3 = 0;

        function _0x3bf304(_0x887659, _0x32c679, _0x1ae76b, _0x414aeb, _0x15feae, _0x14988e, _0x5c4340, _0x21a23c) {
            if (typeof _0x21a23c === "undefined") {
                _0x21a23c = true;
            }
            if (typeof _0x14988e === "undefined") {
                _0x14988e = 5;
            }
            if (typeof _0x14988e === "number") {
                _0x14988e = {
                    tl: _0x14988e,
                    tr: _0x14988e,
                    br: _0x14988e,
                    bl: _0x14988e
                };
            } else {
                var _0x5de68 = {
                    tl: 0,
                    tr: 0,
                    br: 0,
                    bl: 0
                };
                for (var _0x2fa0dc in _0x5de68) {
                    _0x14988e[_0x2fa0dc] = _0x14988e[_0x2fa0dc] || _0x5de68[_0x2fa0dc];
                }
            }
            _0x887659.beginPath();
            _0x887659.moveTo(_0x32c679 + _0x14988e.tl, _0x1ae76b);
            _0x887659.lineTo(_0x32c679 + _0x414aeb - _0x14988e.tr, _0x1ae76b);
            _0x887659.quadraticCurveTo(_0x32c679 + _0x414aeb, _0x1ae76b, _0x32c679 + _0x414aeb, _0x1ae76b + _0x14988e.tr);
            _0x887659.lineTo(_0x32c679 + _0x414aeb, _0x1ae76b + _0x15feae - _0x14988e.br);
            _0x887659.quadraticCurveTo(_0x32c679 + _0x414aeb, _0x1ae76b + _0x15feae, _0x32c679 + _0x414aeb - _0x14988e.br, _0x1ae76b + _0x15feae);
            _0x887659.lineTo(_0x32c679 + _0x14988e.bl, _0x1ae76b + _0x15feae);
            _0x887659.quadraticCurveTo(_0x32c679, _0x1ae76b + _0x15feae, _0x32c679, _0x1ae76b + _0x15feae - _0x14988e.bl);
            _0x887659.lineTo(_0x32c679, _0x1ae76b + _0x14988e.tl);
            _0x887659.quadraticCurveTo(_0x32c679, _0x1ae76b, _0x32c679 + _0x14988e.tl, _0x1ae76b);
            _0x887659.closePath();
            if (_0x5c4340) {
                _0x887659.fill();
            }
            if (_0x21a23c) {
                _0x887659.stroke();
            }
        }

        function _0x50d126() {
            _0x14f534 += (_0x546ad5 - _0x14f534) * 0.1;
            _0x451165 += (_0x3e51ee - _0x451165) * 0.03;
            if (_0x444fd7 == _0x4a64da) {
                _0x14f534 += (_0x546ad5 - _0x14f534) * 0.015;
            }
        }
        const _0x33e7c9 = function() {
            if (_0x18666b) {
                return;
            }
            if (!_0x4c02d5) {
                return;
            }
            _0x39e82d.save();
            _0x50d126();
            var _0x182399 = _0xb3e9be[_0x166276];
            if (_0x182399) {
                _0x2dc130 = _0x182399.animalType;
                _0x3e3ffa = _0x182399.animalSpecies;
                _0xa94ab7 = _0x182399.animalSubSpecies;
            }
            if (_0x444fd7 != _0x4a64da) {
                _0x4eaef3 = 30;
            }
            _0x39e82d.save();
            var _0x46abcb = Math.min(450, _0x19e9b5 * 0.9) * _0x53a3ae;
            var _0x26895a = _0x53a3ae * 30;
            var _0x1d569c = _0x19e9b5 / 2;
            var _0x316966 = _0x1519a6 - _0x53a3ae * 128;
            _0x316966 += _0x4eaef3 * _0x53a3ae;
            _0x39e82d.fillStyle = "black";
            var _0x478da0 = "";
            if (_0x16d593 != "null") {
                var _0x478da0;
                if (_0x16d593.includes("BEGIN") && _0x3e33e8 <= 0) {
                    _0x478da0 = _0x16d593 + "\nPLEASE WAIT!";
                    _0x5e981e.multiLine = true;
                } else {
                    _0x478da0 = _0x3e33e8 + " COINS";
                    _0x5e981e.multiLine = false;
                }
                _0x39e82d.globalAlpha = 0.05;
                _0x5e981e.alpha = 0.5;
            }
            _0x5e981e.setText(_0x478da0);
            _0x5e981e.setFontSize(_0x53a3ae * 22);
            var _0x205d30 = _0x5e981e.getRenderedCanvas();
            var _0x66a113 = _0x205d30.width + _0x53a3ae * 25;
            var _0x15e4d5 = _0x205d30.height / 2 + _0x53a3ae * 15;
            if (_0x16d593 != "null") {
                _0x66a113 = _0x46abcb;
                _0x15e4d5 = _0x205d30.height / 2 + _0x53a3ae * 15;
            }
            var _0x135206 = _0x1d569c - _0x66a113 / 2;
            var _0x1febc7 = _0x1d569c;
            if (_0x16d593 == "null") {
                _0x135206 = _0x1d569c + _0x136a9c - _0x66a113 / 2;
                _0x1febc7 = _0x135206 - _0x136a9c * 1.5;
            }
            _0x5e981e.x = _0x1febc7;
            _0x5e981e.y = _0x316966;
            _0x39e82d.fillRect(_0x135206, _0x316966 - _0x15e4d5 / 2, _0x66a113, _0x15e4d5);
            _0x39e82d.globalAlpha = 1;
            _0x5e981e.draw();
            _0x39e82d.restore();
            if (_0x16d593 == "null") {
                _0x39e82d.save();
                var _0xfba059 = _0x4172bb("./shop/mopecoin.png");
                if (_0xfba059) {
                    var _0xbc062b = _0x53a3ae * 30;
                    var _0x1ddf65 = _0xbc062b / _0xfba059.height * 1.25;
                    var _0xc0ef5f = _0xfba059.width * _0x1ddf65;
                    var _0xd898be = _0xfba059.height * _0x1ddf65;
                    _0x39e82d.drawImage(_0xfba059, _0x1d569c, _0x316966 - _0xd898be / 2, _0xc0ef5f, _0xd898be);
                }
                _0x39e82d.restore();
            }
            if (_0x444fd7 == _0x4a64da) {
                _0x39e82d.save();
                _0x316966 = _0x1519a6 - _0x53a3ae * 111;
                var _0x199879 = 1;
                var _0x3ee192 = false;
                if (isInfected) {
                    _0x3ee192 = _0x14f534 >= 20;
                } else {
                    _0x3ee192 = _0x14f534 <= 50;
                }
                if (_0x3ee192) {
                    var _0x415d71 = 1.2;
                    var _0x652fd5 = 0.4;
                    var _0x2801ab = 1;
                    var _0x11535f = (_0x2801ab - _0x652fd5) * 0.5;
                    _0x199879 = _0x652fd5 + _0x11535f + _0x11535f * Math.sin(Math.PI * 2 / _0x415d71 * (_0x4ec996 / 1000));
                }
                _0x39e82d.globalAlpha = _0x199879 * 0.35;
                _0x39e82d.fillStyle = "black";
                _0x316966 = _0x316966 - _0x53a3ae * 3;
                _0x39e82d.fillRect(_0x1d569c - _0x46abcb / 2, _0x316966, _0x46abcb, _0x26895a);
                _0x39e82d.globalAlpha = _0x199879;
                _0x39e82d.fillStyle = isInfected ? "red" : "pink";
                var _0x19b0e7 = _0x46abcb / 2;
                _0x39e82d.fillRect(_0x1d569c - _0x19b0e7, _0x316966, _0x46abcb * (_0x14f534 / 100), _0x26895a);
                _0x39e82d.restore();
                var _0x114f33 = "";
                var _0x1e9557 = "";
                if (_0x14f534 > 70) {
                    _0x114f33 = "SEVERE ";
                } else if (_0x14f534 > 40) {
                    _0x114f33 = "SERIOUS ";
                } else if (_0x14f534 <= 40) {
                    _0x114f33 = "MILD ";
                }
                if (_0x14f534 > 50) {
                    _0x1e9557 = "STRONG ";
                } else {
                    _0x1e9557 = "WEAK ";
                }
                _0x395667.setText(isInfected ? _0x114f33 + "INFECTION" : _0x1e9557 + "IMMUNITY");
                _0x395667.setFontSize(_0x53a3ae * 22);
                _0x395667.x = _0x1d569c;
                _0x395667.y = _0x316966 + _0x53a3ae * 15;
                _0x39e82d.globalAlpha *= _0x3ee192 ? 1 : 0.5;
                _0x395667.draw();
            }
            _0x39e82d.save();
            var _0x2dcef4 = 1;
            var _0x10202f = _0x14f534 <= 25;
            if (_0x10202f) {
                var _0x415d71 = 1.2;
                var _0x652fd5 = 0.4;
                var _0x2801ab = 1;
                var _0x11535f = (_0x2801ab - _0x652fd5) * 0.5;
                _0x2dcef4 = _0x652fd5 + _0x11535f + _0x11535f * Math.sin(Math.PI * 2 / _0x415d71 * (_0x4ec996 / 1000));
            }
            _0x316966 = _0x1519a6 - _0x53a3ae * 60;
            if (_0x493e84) {
                _0x39e82d.globalAlpha = _0x2dcef4 * 0.35;
                _0x39e82d.fillStyle = "#000000";
                _0x39e82d.fillRect(_0x1d569c - _0x46abcb / 2, _0x316966 - _0x26895a / 2, _0x46abcb, _0x26895a);
                _0x39e82d.globalAlpha = _0x2dcef4;
                if (_0x32c60f == 2) {
                    _0x39e82d.fillStyle = _0x51276a;
                } else if (_0x32c60f == 3) {
                    _0x39e82d.fillStyle = _0x424ca9;
                } else {
                    _0x39e82d.fillStyle = _0x176cc0 || _0x32c60f == 1 ? _0x4e5bdd : _0x4fbc4b;
                }
                _0x39e82d.fillRect(_0x1d569c - _0x46abcb / 2, _0x316966 - _0x26895a / 2, _0x46abcb * (_0x14f534 / 100), _0x26895a);
                _0x39e82d.fillStyle = _0x1afb36 ? _0x10202f ? _0x5207bf : "orange" : _0x10202f ? _0x5207bf : "white";
                _0x39e82d.globalAlpha = _0x2dcef4 * 1;
                var _0x54091c;
                if (_0x32c60f == 1) {
                    _0x54091c = _0x10202f ? "LOW AIR" : "AIR";
                } else if (_0x32c60f == 2) {
                    _0x54091c = _0x10202f ? "LOW LAVA" : "LAVA";
                } else if (_0x32c60f == 3) {
                    _0x54091c = _0x10202f ? "LOW ENERGY" : "ENERGY";
                } else {
                    _0x54091c = _0x10202f ? "LOW WATER" : "WATER";
                }
                _0x521a47.setText(_0x54091c);
                _0x521a47.setFontSize(_0x53a3ae * 22);
                if (_0x32c60f == 4) {
                    _0x521a47.setColor("black");
                } else {
                    _0x521a47.setColor(_0x10202f ? _0x5207bf : "white");
                }
                _0x521a47.x = _0x1d569c;
                _0x521a47.y = _0x316966;
                _0x39e82d.globalAlpha *= _0x10202f ? 1 : 0.5;
                _0x521a47.draw();
            }
            _0x39e82d.restore();
            _0x316966 = _0x1519a6 - _0x26895a / 2 - 5;
            _0x46abcb = _0x19e9b5 * 0.9;
            if (_0x44be43) {
                _0x39e82d.globalAlpha = 0.35;
                _0x39e82d.fillStyle = "#000000";
                _0x39e82d.fillRect(_0x1d569c - _0x46abcb / 2, _0x316966 - _0x26895a / 2, _0x46abcb, _0x26895a);
                _0x39e82d.globalAlpha = 1;
                _0x39e82d.fillStyle = "#F3C553";
                _0x39e82d.fillRect(_0x1d569c - _0x46abcb / 2, _0x316966 - _0x26895a / 2, _0x46abcb * (_0x451165 / 100), _0x26895a);
                _0x39e82d.globalAlpha = 1;
                _0x23e860.setText("" + _0x540660(_0x256a64) + " xp  (" + _0x540660(_0x2f3188) + " xp Next Animal)");
                _0x23e860.setFontSize(_0x53a3ae * 22);
                _0x23e860.x = _0x1d569c;
                _0x23e860.y = _0x316966;
                _0x23e860.draw();
            }
            _0x39e82d.globalAlpha = 1;
            if (_0x35ae42) {
                for (var _0x3613c2 = 0; _0x3613c2 < _0x68a93b.length; _0x3613c2++) {
                    var _0x3babb4 = _0x68a93b[_0x3613c2];
                    _0x3babb4.draw();
                }
            }
            if (_0x5629ff) {
                _0x3cac21();
            }
            if (_0x4731e1) {
                if (!_0x225fa1 && _0xc4d403) {
                    var _0x182399 = _0xb3e9be[_0x166276];
                    var _0x5a6097 = _0x19e9b5 / 2;
                    var _0x5b404b = _0x1519a6 / 2;
                    if (_0x182399) {
                        _0x5a6097 = _0x265685(_0x182399.x);
                        _0x5b404b = _0x20c4fc(_0x182399.y);
                    }
                }
                _0x805857 += ((_0x225fa1 ? 1 : 0) - _0x805857) * 0.1;
                if (_0x805857 > 0.005 && _0x4c02d5) {
                    _0x39e82d.globalAlpha = _0x805857 * 0.3;
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(_0xa1f035, _0x391fb3, _0x219190 * _0x149ef1, 0, Math.PI * 2);
                    _0x39e82d.fillStyle = "#000000";
                    _0x39e82d.fill();
                    _0x39e82d.globalAlpha = _0x805857 * 0.5;
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(_0x22d054, _0x17eadb, _0x219190 * _0x149ef1 * 0.57, 0, Math.PI * 2);
                    _0x39e82d.fillStyle = "#000000";
                    _0x39e82d.fill();
                    var _0x51a31b = _0x254758 * 0.3;
                    _0x254758 -= _0x51a31b;
                    _0x589fc8 += _0x51a31b;
                    _0x49ffce += (_0xeeaddb - _0x49ffce) * 0.1;
                    _0x39e82d.save();
                    _0x39e82d.translate(_0x19e9b5 / 2, _0x1519a6 / 2);
                    _0x39e82d.rotate(_0x589fc8);
                    _0x39e82d.globalAlpha = _0x805857 * 0.5;
                    _0x39e82d.beginPath();
                    _0x39e82d.fillStyle = "#000000";
                    var _0x17492e = _0x149ef1 * 40;
                    if (_0xb3e9be[_0x166276]) {
                        _0x17492e = (9 + _0xb3e9be[_0x166276].rad) * _0x2e8bac;
                    }
                    _0x17492e *= 0.1 + _0x49ffce * 0.9;
                    var _0xd3db93 = _0x149ef1 * 15;
                    var _0x437351 = _0x149ef1 * 30 * (0.2 + _0x49ffce * 0.8);
                    _0x39e82d.moveTo(_0x17492e + _0x437351, 0);
                    _0x39e82d.lineTo(_0x17492e, _0xd3db93 / 2);
                    _0x39e82d.lineTo(_0x17492e, -_0xd3db93 / 2);
                    _0x39e82d.closePath();
                    _0x39e82d.fill();
                    _0x39e82d.restore();
                }
            }
            for (var _0x3613c2 = _0x4b3b3f.length - 1; _0x3613c2 >= 0; _0x3613c2--) {
                var _0x11821 = _0x4b3b3f[_0x3613c2];
                _0x11821.draw();
                if (_0x11821.timedOut) {
                    _0x4b3b3f.splice(_0x3613c2, 1);
                }
            }
            _0x39e82d.restore();
            if (_0x4434eb != null) {
                _0x39e82d.save();
                if (_0x4434eb.width) {
                    _0x39e82d.drawImage(_0x4434eb, _0x19e9b5 / 2 - _0x4434eb.width / 2, _0x13e282, _0x4434eb.width, _0x4434eb.height);
                }
                _0x39e82d.restore();
            }
        };
        var _0x28e3d1 = "Ready to survive!";
        var _0x35f207 = 25;
        var _0x14ad18 = "white";
        var _0x5a50bf = +new Date() + 0;
        var _0x5990a1 = [];
        var _0x3d3061 = +new Date() + 0;
        var _0x25146b = 0;
        var _0x2f8b3a = 100;
        var _0x54b93f = 2;
        var _0x1e2837 = false;
        var _0x33698e = false;
        var _0x2d4c57 = 0;
        var _0x241e0f = [];
        var _0x335352 = false;
        var _0x583e1e = 0;
        var _0x27b62a = 0;

        function _0x114a53(_0x35ef72, _0x3b8845) {
            _0x28e3d1 = _0x35ef72;
            _0x5a50bf = +new Date() + _0x3b8845;
        }
        const _0x1c8b50 = function() {
            if (!_0x6dd38f || _0x18666b) {
                return;
            }
            _0x469fbf.setFontSize(_0x53a3ae * 18);
            _0x45a0bb.setFontSize(_0x53a3ae * 18);
            _0x1c1224.setFontSize(_0x53a3ae * 18);
            if (_0x4c02d5) {
                playerCountX = _0x19e9b5 - (20 + _0x469fbf.width) / 2;
                playerCountY = (_0x596003.miniMapCanvas.height + _0x149ef1 * 25) * _0x53a3ae;
            } else {
                playerCountX = _0x19e9b5 - 5 - _0x469fbf.width / 2;
                playerCountY = _0x1519a6 - 2 - _0x469fbf.height / 2;
            }
            _0x469fbf.x = playerCountX;
            _0x469fbf.y = playerCountY;
            _0x469fbf.draw();
            playerCountY += _0x149ef1 * 20;
            _0x45a0bb.x = _0x19e9b5 - (20 + _0x45a0bb.width) / 2;
            _0x45a0bb.y = playerCountY;
            _0x45a0bb.draw();
            _0x1c1224.x = _0x19e9b5 - (20 + _0x1c1224.width) / 2;
            _0x1c1224.y = playerCountY;
            _0x1c1224.draw();
        };

        function _0x1b3bf1() {
            var _0x28cbd5 = 1;
            var _0x5cfefb = (_0x5a50bf - _0x4ec996) / 1000 / _0x28cbd5;
            _0x5cfefb = _0x5cfefb < 0 ? 0 : _0x5cfefb > 1 ? 1 : _0x5cfefb;
            if (_0x5cfefb > 0) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = _0x5cfefb;
                _0x4f1fdf.setText(_0x28e3d1);
                _0x4f1fdf.setColor(_0x14ad18);
                if (_0x28e3d1 == "SPECTATE MODE") {
                    _0x35f207 = 50;
                } else {
                    _0x35f207 = 25;
                }
                _0x4f1fdf.setFontSize(_0x35f207 * _0x53a3ae);
                _0x4f1fdf.x = _0x19e9b5 / 2;
                _0x4f1fdf.y = _0x1519a6 * 0.25;
                _0x4f1fdf.draw();
                _0x39e82d.restore();
            }
            var _0x13cbf1 = _0x3d3061 - _0x4ec996 > 0 ? 1 : 0;
            _0x25146b += (_0x13cbf1 - _0x25146b) * 0.05;
            if (_0x25146b > 0.01 && _0x5981a2 != _0x4051d6) {
                if (_0x1e2837) {
                    _0x39e82d.save();
                    _0x39e82d.translate(_0x19e9b5 / 2, _0x1519a6 * (0.9 + (1 - _0x25146b) * 0.3));
                    var _0xee7dfb = _0x4172bb("./img/howToPlay1.png");
                    if (_0xee7dfb) {
                        var _0x4bc212 = _0x1519a6 * 0.2;
                        var _0x41192c = _0x4bc212 / _0xee7dfb.height * _0x25146b;
                        _0x39e82d.drawImage(_0xee7dfb, _0xee7dfb.width * -0.5 * _0x41192c, _0xee7dfb.height * -1.5 * _0x41192c, _0xee7dfb.width * _0x41192c, _0xee7dfb.height * _0x41192c);
                    }
                    _0x39e82d.restore();
                }
            }
            var _0x13cbf1 = _0x33698e ? 1 : 0;
            _0x2d4c57 += (_0x13cbf1 - _0x2d4c57) * 0.1;
            if (_0x2d4c57 > 0.01) {
                if (_0x241e0f.length > 0) {
                    _0x39e82d.save();
                    var _0x56f11e = 150;
                    var _0x55e866 = 0.5;
                    var _0xbfcb0d = false;
                    if (window.matchMedia("(orientation: portrait)").matches) {
                        _0xbfcb0d = false;
                    }
                    if (window.matchMedia("(orientation: landscape)").matches) {
                        _0xbfcb0d = true;
                    }
                    if (!_0xbfcb0d) {
                        var _0x2c14b4 = window.innerWidth / 2;
                        _0x56f11e = Math.max(80, _0x2c14b4 / 4);
                    } else {}
                    var _0x438d75 = _0x56f11e * _0x53a3ae;
                    var _0xc96582 = 10;
                    var _0x3d33d7 = _0x438d75 + 20;
                    var _0x3537a0 = 7;
                    var _0x3fcfae = Math.max(0, _0x241e0f.length);
                    if (_0x241e0f.length > _0x3537a0 + 1) {
                        _0x3fcfae = Math.min(_0x3537a0, _0x3fcfae);
                    }
                    var _0x97043b = _0x3fcfae * (_0xc96582 + _0x438d75) + (_0x3d33d7 - _0x438d75);
                    var _0x131edd = _0x19e9b5 / 2 - _0x97043b / 2;
                    var _0x31a8ab = _0x1519a6 * 0.25;
                    var _0x68a451 = _0x438d75 * 1.15;
                    var _0x55a7b7 = _0x19e9b5 / 2;
                    _0x97043b = _0x3fcfae * _0x68a451;
                    _0x131edd = _0x55a7b7 - _0x97043b / 2 + _0x68a451 / 2;
                    var _0x1b24c3 = 1;
                    var _0x141e21 = _0x241e0f.length;
                    var _0x4b16a8 = 0.5 + Math.floor(_0x141e21 / _0x3fcfae) / 10;
                    _0x4b16a8 = Math.max(0.5, _0x4b16a8);
                    _0x4b16a8 = Math.min(0.9, _0x4b16a8);
                    _0x39e82d.translate(0, _0x1519a6 * (-_0x4b16a8 * (1 - _0x2d4c57)));
                    var _0x3e19e8 = 0;
                    for (var _0x7fc3ec = 0; _0x7fc3ec < _0x141e21; _0x7fc3ec++) {
                        var _0x5d6a39 = _0x241e0f[_0x7fc3ec];
                        if (_0x7fc3ec > 0 && _0x141e21 > _0x3537a0 + 1) {
                            if (_0x7fc3ec % _0x3537a0 == 0) {
                                _0x1b24c3++;
                                _0x3e19e8 = 0;
                                _0x31a8ab += _0x68a451 * 1.15;
                                var _0x38352a = _0x141e21 - _0x7fc3ec;
                                if (_0x38352a < _0x3537a0) {
                                    _0x3fcfae = _0x38352a;
                                } else {
                                    _0x3fcfae = _0x3537a0;
                                }
                                _0x97043b = _0x3fcfae * _0x68a451;
                                _0x131edd = _0x19e9b5 / 2 - _0x97043b / 2 + _0x68a451 / 2;
                            }
                        }
                        if (_0x7fc3ec == 0) {
                            _0x5d6a39.buttonScaleF = 1.2;
                        } else {
                            _0x5d6a39.buttonScaleF = 1;
                        }
                        _0x5d6a39.w = _0x438d75;
                        _0x5d6a39.h = _0x438d75;
                        _0x5d6a39.x = _0x131edd;
                        _0x5d6a39.y = _0x31a8ab;
                        _0x131edd += _0x68a451 / 2 * _0x5d6a39.buttonScaleF + _0x68a451 / 2;
                        if (_0x1b24c3 < _0x25d0fa.length) {
                            _0x5d6a39.setHotKey(_0x25d0fa[_0x1b24c3 - 1][_0x3e19e8].toUpperCase());
                        }
                        _0x3e19e8++;
                    }
                    _0x39e82d.globalAlpha = _0x2d4c57;
                    for (var _0x7fc3ec = 0; _0x7fc3ec < _0x241e0f.length; _0x7fc3ec++) {
                        var _0x5d6a39 = _0x241e0f[_0x7fc3ec];
                        _0x5d6a39.imgSizeF = _0x55e866;
                        _0x5d6a39.draw();
                    }
                }
                var _0xc035e0 = Math.max(0, _0x27b62a - _0x4ec996) / 1000;
                var _0x1efec9 = 1;
                if (_0xc035e0 != 0 && _0xc035e0 < 8) {
                    var _0x226363 = 1.2;
                    var _0x430f08 = 0.4;
                    var _0x2927a4 = 1;
                    var _0x1ff2e7 = (_0x2927a4 - _0x430f08) * 0.5;
                    _0x1efec9 = _0x430f08 + _0x1ff2e7 + _0x1ff2e7 * Math.sin(Math.PI * 2 / _0x226363 * (_0x4ec996 / 1000));
                }
                _0x39e82d.save();
                _0x39e82d.globalAlpha = _0x2d4c57 * _0x1efec9;
                _0x39e82d.fillStyle = _0xc035e0 != 0 && _0xc035e0 < 8 ? "red" : "white";
                _0x39e82d.font = _0x53a3ae * 25 + "px Arial";
                _0x39e82d.lineWidth = 1;
                _0x39e82d.textAlign = "center";
                _0x39e82d.textBaseline = "middle";
                if (_0x5981a2 != 2) {
                    _0x39e82d.shadowOffsetX = 1;
                    _0x39e82d.shadowOffsetY = 1;
                    _0x39e82d.shadowColor = "black";
                }
                var _0x3faaa7 = _0x241e0f[0].y - _0x241e0f[0].w / 2;
                var _0x3ec0c7 = _0xc035e0 > 0 ? " (auto in " + Math.trunc(_0xc035e0) + "s)" : "";
                _0x39e82d.fillText(_0x335352 ? "Choose which animal to spawn as:" : "Choose an upgrade:" + _0x3ec0c7, _0x19e9b5 / 2, _0x3faaa7 - _0x149ef1 * 25);
                _0x39e82d.restore();
                _0x39e82d.restore();
            }
            if (_0xebbf06 != null) {
                _0xebbf06.interface();
            }
            _0x3ae082();
            _0x1acc1c();
        }

        function _0x1acc1c() {
            if (_0xebbf06 != null) {
                if (_0xebbf06.interfaceButtons) {
                    for (var _0x127c0c = 0; _0x127c0c < _0xebbf06.interfaceButtons.length; _0x127c0c++) {
                        var _0x5c8eaa = _0xebbf06.interfaceButtons[_0x127c0c];
                        if (_0x5c8eaa.isVisible) {
                            _0x5c8eaa.draw();
                        }
                    }
                }
            }
        }
        var _0x4b3b3f = [];
        var _0x3cf48c = 0;
        var _0x3c1174 = 0;

        function _0xf8a92b(_0x80b72b, _0x11d531) {
            var _0x2baf1a = _0x80b72b - _0x3cf48c;
            if (_0x80b72b - _0x3cf48c != 0 && (_0x4ec996 - _0x3c1174) / 1000 > 0.7) {
                _0x3cf48c = _0x80b72b;
                _0x3c1174 = _0x4ec996;
                var _0x17ca1d = new _0x43643e(_0x2baf1a, " XP");
                _0x4b3b3f.push(_0x17ca1d);
            }
        }
        var _0x232952 = 0;

        function _0x5e236f(_0x4d0a4e, _0x2a6ab5) {
            var _0x381639 = _0x4d0a4e - _0x232952;
            if (_0x381639 > 0) {
                if (_0x4d0a4e - _0x232952 != 0 && (_0x4ec996 - _0x3c1174) / 1000 > 0.7) {
                    _0x232952 = _0x4d0a4e;
                    _0x3c1174 = _0x4ec996;
                    var _0x3984e1 = new _0x43643e(_0x381639, _0x381639 > 1 ? " COINS" : " COIN", "yellow");
                    _0x4b3b3f.push(_0x3984e1);
                }
            }
        }

        function _0x5624b3() {
            if (_0x4d94b0 && _0x4d94b0.length > 0) {
                for (i = 0; i < _0x4d94b0.length; i++) {
                    var _0x5c0c5f = _0x4d94b0[i];
                    if (_0x5c0c5f.oType == _0x62fde4) {
                        if (!_0x5c0c5f.droppedInHole) {
                            _0x3a55a7(_0x5c0c5f, "brown", 2);
                            _0x3a55a7(_0x5c0c5f, "orange", 1.5);
                        }
                    } else if (_0x5c0c5f.oType == _0x4c48f4) {
                        _0x26b479(_0x5c0c5f, 3, 0.9);
                    } else if (_0x5c0c5f.oType == _0x651296) {
                        _0x222e66(_0x5c0c5f, 3, 0.9);
                    } else {
                        _0x3a55a7(_0x5c0c5f, "red", 2);
                    }
                }
            }
        }

        function _0x538ee7(_0x251fb6) {
            switch (_0x251fb6) {
                case 0:
                    return "tornado";
                case 1:
                    return "waterspout";
                case 2:
                    return "dustdevil";
                case 3:
                    return "arcticwhirl";
                case 4:
                    return "firedevil";
                case 5:
                    return "deviltwister";
            }
            return "tornado";
        }

        function _0x26b479(_0x134a2c, _0x46d0de, _0x5680d1) {
            var _0x515c78 = "/assets/s/" + _0x24df61 + "/img/disasters/" + _0x538ee7(_0x134a2c.specType) + ".png";
            var _0x23d7e6 = _0x4172bb(_0x515c78);
            if (_0x23d7e6) {
                var _0x22649b = Math.max(2, _0x134a2c.rad);
                var _0xb5c6f6 = _0x22649b * _0x46d0de;
                var _0x49b602 = 0;
                if (_0x5981a2 == _0x145cc3) {
                    var _0x284a9b = 1;
                    var _0x34c161 = 1000 / _0x284a9b;
                    var _0x1f0ab4 = _0x4ec996 % _0x34c161 / _0x34c161;
                    _0x49b602 = _0x1f0ab4 * 2 * Math.PI;
                }
                _0x4eb5bd.push({
                    drawType: "image",
                    alpha: _0x5680d1,
                    x: _0x134a2c.x,
                    y: _0x134a2c.y,
                    rotation: _0x49b602,
                    params: [_0x23d7e6, 0 - _0xb5c6f6, 0 - _0xb5c6f6, _0xb5c6f6 * 2, _0xb5c6f6 * 2]
                });
            }
        }

        function _0x599668(_0x3a4da0) {
            switch (_0x3a4da0) {
                case _0x57e355:
                    return "img/disasters/tsunami.png";
                case _0x31caeb:
                    return "img/disasters/dustwave.png";
                case _0x136993:
                    return "img/disasters/heatwave.png";
                case _0x3cf217:
                    return "img/disasters/heatwave.png";
                case _0x3f577b:
                    return "img/disasters/coldwave.png";
            }
            return null;
        }

        function _0x222e66(_0x31a5ff, _0xc9418d, _0x2fb359) {
            var _0x350e84 = "/assets/s/" + _0x24df61 + "/" + _0x599668(_0x31a5ff.abil);
            var _0x48f211 = _0x4172bb(_0x350e84);
            if (_0x48f211) {
                var _0x2bf3a6 = Math.max(2, _0x31a5ff.rad);
                var _0x2f9825 = _0x2bf3a6 * _0xc9418d;
                _0x4eb5bd.push({
                    drawType: "image",
                    alpha: _0x2fb359,
                    x: _0x31a5ff.x,
                    y: _0x31a5ff.y,
                    rotation: _0x31a5ff.angle + _0x4bfce6(_0xdd5db6),
                    params: [_0x48f211, 0 - _0x2f9825, 0 - _0x2f9825, _0x2f9825 * 2, _0x2f9825 * 2]
                });
            }
        }
        var _0xdd5db6 = 90;

        function _0x52fd10(_0x3351e3, _0x596470, _0x4104fa) {
            var _0x5a7ed6 = "/assets/s/" + _0x24df61 + "/img/pumpkin/" + _0x3351e3.specType + "/0.png";
            var _0x4f1c7d = _0x4172bb(_0x5a7ed6);
            if (_0x4f1c7d) {
                var _0x235d90 = Math.max(2, _0x3351e3.rad);
                var _0x331a94 = _0x235d90 * _0x596470;
                _0x39e82d.globalAlpha = 1;
                _0x4eb5bd.push({
                    drawType: "image",
                    x: _0x3351e3.x,
                    y: _0x3351e3.y,
                    alpha: _0x4104fa,
                    params: [_0x4f1c7d, 0 - _0x331a94, 0 - _0x331a94, _0x331a94 * 2, _0x331a94 * 2]
                });
            }
        }

        function _0x102c70(_0x27562d, _0x3d27c8, _0x5ab1ec) {
            if (_0x27562d) {
                var _0x251e25 = _0x149ef1 * Math.max(3, _0x27562d.rad * (_0x1189f4.width / _0x5039a5));
                var _0x54484d = _0x19e9b5 - (_0x149ef1 * 10 + _0x1189f4.width * _0x53a3ae) + _0x27562d.x * (_0x1189f4.width * _0x53a3ae) / _0x5039a5;
                var _0x148eb8 = _0x149ef1 * 10 + _0x27562d.y * (_0x1189f4.height * _0x53a3ae) / _0x396098;
                var _0x54b321 = _0x251e25 + _0x149ef1 * 2;
                _0x39e82d.beginPath();
                _0x39e82d.fillStyle = "black";
                _0x39e82d.arc(_0x54484d, _0x148eb8, _0x54b321, 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.beginPath();
                _0x39e82d.fillStyle = _0x3d27c8;
                _0x39e82d.arc(_0x54484d, _0x148eb8, _0x251e25, 0, Math.PI * 2);
                _0x39e82d.fill();
            }
        }

        function _0x3a55a7(_0xbe6b6a, _0xfd37ac, _0x4ec6a9, _0x35dabe) {
            if (_0xbe6b6a) {
                _0x39e82d.globalAlpha = _0x35dabe ? _0x35dabe : 1;
                _0x39e82d.fillStyle = _0xfd37ac;
                _0x39e82d.beginPath();
                var _0x30a9df = _0x149ef1 * Math.max(2, _0xbe6b6a.rad);
                _0x39e82d.arc(_0x19e9b5 - (_0x149ef1 * 10 + _0x596003.miniMapCanvas.width * _0x53a3ae) + _0xbe6b6a.x * (_0x596003.miniMapCanvas.width * _0x53a3ae) / _0x5039a5, _0x149ef1 * 10 + _0xbe6b6a.y * (_0x596003.miniMapCanvas.height * _0x53a3ae) / _0x396098, _0x30a9df * _0x4ec6a9, 0, Math.PI * 2);
                _0x39e82d.fill();
            }
        }

        function _0x8a9e9b(_0x5802be, _0x5b2593, _0x1df228 = 9999) {
            _0x12b152 = null;
            if (_0x5802be.length != 0) {
                _0x12b152 = document.createElement("canvas");
                var _0x5dec98 = _0x12b152.getContext("2d");
                var _0x272cad = 55;
                var _0x17a0fd = 22;
                _0x272cad = _0x272cad + _0x17a0fd * _0x5802be.length;
                _0x12b152.width = 270;
                _0x12b152.height = _0x272cad;
                _0x5dec98.globalAlpha = 0.2;
                _0x5dec98.fillStyle = "#000000";
                _0x5dec98.fillRect(0, 0, _0x12b152.width, _0x12b152.height);
                _0x5dec98.globalAlpha = 1;
                _0x5dec98.fillStyle = "#FFFFFF";
                var _0x44f696 = _0x925cfa.name;
                _0x5dec98.font = "24px Arial";
                if (_0x5981a2 != 2) {
                    _0x5dec98.shadowOffsetX = 1;
                    _0x5dec98.shadowOffsetY = 1;
                }
                _0x5dec98.shadowColor = "black";
                _0x5dec98.fillText(_0x44f696, _0x12b152.width / 2 - _0x5dec98.measureText(_0x44f696).width / 2, 40);
                var _0x1ac572;
                _0x5dec98.textAlign = "left";
                _0x5dec98.font = "17px Arial";
                _0x1ac572 = 0;
                for (; _0x1ac572 < _0x5802be.length; ++_0x1ac572) {
                    _0x44f696 = _0x26aab4 ? "" : _0x5802be[_0x1ac572].name || "mope.io";
                    if (_0x1df228 == _0x5802be[_0x1ac572].rank) {
                        _0x5dec98.fillStyle = "#FEED92";
                        if (_0x26aab4) {
                            _0x44f696 = "you";
                        }
                    } else {
                        _0x5dec98.fillStyle = "#FFFFFF";
                    }
                    _0x44f696 = _0x5802be[_0x1ac572].rank + ". " + _0x44f696 + " (" + _0x540660(_0x5802be[_0x1ac572].score) + ")";
                    _0x5dec98.fillText(_0x44f696, 15, 65 + _0x17a0fd * _0x1ac572);
                }
            }
        }

        function _0x4eac28(_0x50a460, _0x3a4e2d) {
            const _0x156c59 = _0x50a460.some(_0x359d81 => _0x359d81.rank === _0x3a4e2d.rank);
            if (!_0x156c59) {
                _0x50a460.pop();
                _0x50a460.push(_0x3a4e2d);
            }
            return _0x50a460;
        }
        var _0xeff041 = true;
        _0x9efbf3($MOPE_AD_ID.MENU);

        function _0x3a369a(_0x61228a) {
            if (!_0xeff041 && _0x61228a) {
                _0x9efbf3($MOPE_AD_ID.MENU);
            } else if (!_0x61228a && _0xeff041) {
                _0x588fd6($MOPE_AD_ID.MENU);
            }
            _0xeff041 = _0x61228a;
            if (_0x61228a) {
                _0x27098e(false);
            }
            document.getElementById("startMenuWrapper").style.display = _0x61228a ? "block" : "none";
        }

        function _0x45dce6() {
            return;
        }

        function _0x191e0f() {
            _0x3a369a(true);
            document.getElementById("mopeMenu").style.display = "block";
        }

        function _0x3bcd1b() {
            if (_0x2f062e) {
                _0x46b369.abil_usable = _0x21d4fe;
                _0x46b369.abil_recharging = _0x46bc5c;
                _0x46b369.abil_possible = abil_possible;
                _0x46b369.abil_active = _0x2d9431;
                _0x46b369.abil_Type = _0x1d98b3;
                _0x1a5885.abil_usable = _0x347d2d;
                _0x1a5885.abil_recharging = _0x77ac8d;
                _0x1a5885.abil_possible = _0x183274;
                _0x1a5885.abil_active = _0x448cff;
                _0x1a5885.abil_Type = _0x2713eb;
                if (_0x77ac8d) {
                    _0x1a5885.abil_rechargeTotalT = _0x551dbe;
                    _0x1a5885.abil_rechargeEndT = _0x21b7e9;
                }
                if (_0x46bc5c) {
                    _0x46b369.abil_rechargeTotalT = _0x23755b;
                    _0x46b369.abil_rechargeEndT = _0x4c63a1;
                }
            } else {
                _0x1a5885.abil_usable = _0x21d4fe;
                _0x1a5885.abil_recharging = _0x46bc5c;
                _0x1a5885.abil_possible = abil_possible;
                _0x1a5885.abil_active = _0x2d9431;
                _0x1a5885.abil_Type = _0x1d98b3;
                _0x46b369.abil_usable = _0x347d2d;
                _0x46b369.abil_recharging = _0x77ac8d;
                _0x46b369.abil_possible = _0x183274;
                _0x46b369.abil_active = _0x448cff;
                _0x46b369.abil_Type = _0x2713eb;
                if (_0x46bc5c) {
                    _0x1a5885.abil_rechargeTotalT = _0x23755b;
                    _0x1a5885.abil_rechargeEndT = _0x4c63a1;
                }
                if (_0x77ac8d) {
                    _0x46b369.abil_rechargeTotalT = _0x551dbe;
                    _0x46b369.abil_rechargeEndT = _0x21b7e9;
                }
            }
        }

        function _0x3596f8() {
            console.log("client objs reset!");
            _0x58b11a = [];
            _0xb3e9be = {};
            _0xad46f9 = [];
        }

        function _0x501cf4(_0x11a4f0, _0x4a7be7, _0x41d049, _0x6dab77, _0x4d74d9) {
            _0x11a4f0.fillText(_0x4a7be7, _0x6dab77, _0x4d74d9);
            _0x11a4f0.fillText(": " + _0x41d049, _0x6dab77 + 120, _0x4d74d9);
        }

        function _0x1fc3d0() {
            if (!_0x4b5804 || disable1v1Button) {
                return;
            }
            var _0x2678e1 = new _0x1f27e2(2);
            _0x2678e1.writeUInt8(52);
            _0x2678e1.writeUInt8(0);
            _0x80c20b(_0x2678e1);
        }

        function _0x3cac21() {
            if (_0x787e2d) {
                if (_0x1516cf == null) {
                    _0x1516cf = new _0x450d88(0, 0, _0x53a3ae * 60, _0x53a3ae * 60, "Invite for 1v1", 30);
                    _0x1516cf.showLabeleOnHover = true;
                    _0x1516cf.textShadow = true;
                    _0x1516cf.drawTextOnHowever = function() {
                        if (_0x465fee > 0.01) {
                            return;
                        }
                        this.drawText(this.w / 2, this.h + this.h / 2);
                    };
                    _0x1516cf.onClick = function() {
                        if (_0x465fee > 0.01) {
                            return;
                        }
                        if (!this.clicked) {
                            this.isVisible = false;
                            this.clicked = true;
                            this.isHighLighted = false;
                            _0x1fc3d0();
                        }
                    };
                    _0x1516cf.onMouseMove = function() {};
                    _0x1516cf.update = function() {
                        this.x = _0x19e9b5 / 2 - this.w / 2;
                        this.y = _0x53a3ae * 45 + this.h / 2;
                    };
                    _0x1516cf.onInterfaceReset = function() {
                        this.isVisible = false;
                        _0x1516cf = null;
                        _0xebbf06.interfaceButtons.splice(_0xebbf06.interfaceButtons.indexOf(_0x1516cf), 1);
                    };
                    _0x1516cf.onAfterDraw = function() {
                        var _0x3e87b0 = _0x4172bb("img/icons/1v1.png");
                        if (_0x3e87b0) {
                            _0x39e82d.save();
                            var _0x4b1d6c = this.w * 0.8;
                            var _0x3ce980 = (this.w - _0x4b1d6c) / 2;
                            _0x39e82d.drawImage(_0x3e87b0, this.x + _0x3ce980, this.y + _0x3ce980, _0x4b1d6c, _0x4b1d6c);
                            _0x39e82d.restore();
                        }
                        if (_0x465fee > 0.01) {
                            this.alpha = 0.1;
                            rechargeTotalT = 30000;
                            rechargeEndT = +new Date() + _0x465fee * 1000;
                            var _0x3708bb = Math.max(0, rechargeEndT - _0x4ec996);
                            var _0x4834ed = _0x3708bb / rechargeTotalT;
                            _0x39e82d.save();
                            _0x39e82d.fillStyle = "#000000";
                            var _0x3f768d = this.x;
                            var _0x525ac3 = this.y;
                            var _0x36102e = this.w;
                            var _0x16cc44 = this.h * 0.5;
                            _0x39e82d.globalAlpha = 0.1;
                            _0x39e82d.fillRect(_0x3f768d, _0x525ac3 + _0x16cc44 / 2, _0x36102e, _0x16cc44);
                            _0x39e82d.globalAlpha = 1;
                            _0x39e82d.fillStyle = "#F3C553";
                            _0x39e82d.fillRect(_0x3f768d, _0x525ac3 + _0x16cc44 / 2, _0x36102e * _0x4834ed, _0x16cc44);
                            _0x39e82d.restore();
                        } else {
                            this.alpha = disable1v1Button ? 0.1 : 1;
                        }
                    };
                    _0xebbf06.interfaceButtons.push(_0x1516cf);
                } else if (_0x1516cf != null) {
                    _0x1516cf.isVisible = _0x4b5804 && !_0x33698e && !_0x1d523b;
                    if (_0x1516cf.isVisible) {
                        _0x1516cf.clicked = false;
                    }
                    _0x1516cf.draw();
                }
            } else if (_0x1516cf != null) {
                _0xebbf06.interfaceButtons.splice(_0xebbf06.interfaceButtons.indexOf(_0x1516cf), 1);
                _0x1516cf = null;
            }
        }

        function _0x9a9085() {
            var _0x1a23b6 = document.getElementById("optionsDiv");
            let _0x41f0ab = _0x1a23b6.style.display == "block";
            if (!_0x41f0ab) {}
            _0x1a23b6.style.display = _0x41f0ab ? "none" : "block";
            var _0x26104f = _0x5b49aa("audio/click.mp3");
            if (_0x26104f) {
                try {
                    _0x26104f.play();
                } catch (_0x259c7a) {}
            }
        }
        document.getElementById("closeBut").onclick = function() {
            _0x34ea1a();
        };

        function _0x1e287f() {
            var _0xe2a927 = document.getElementById("button_mute_img");
            if (_0xe2a927) {
                _0xe2a927.src = _0x357cad ? "img/sound_off.png" : "img/sound_on.png";
                if (_0x3d14e6) {
                    _0x3d14e6 = false;
                } else {
                    var _0x3e0b68 = new Audio("audio/tap.mp3");
                    _0x3e0b68.volume = _0x357cad ? 0.15 : 0.5;
                    _0x3e0b68.play();
                }
            }
        }

        function _0x2b2a71(_0xaad94f, _0x3fcc6, _0x5157e3) {
            var _0x13bb0f = document.getElementById("optionsContainer");
            var _0x53a108 = document.createElement("label");
            _0x53a108.innerHTML = "<input type='checkbox' id='" + _0xaad94f + "'><span style='color: " + _0x5157e3 + ";''>" + _0x3fcc6 + "</span>";
            _0x13bb0f.appendChild(_0x53a108);
        }
        _0x2b2a71("options_noImages", "No Animal images  ", "black");
        _0x2b2a71("options_noNames", "No Names & Chat  ", "black");
        _0x2b2a71("options_disableFilter", "Disable Profanity Filter", "black");
        if (_0x4731e1) {
            _0x2b2a71("options_noJoystick", "No Joystick", "#194614");
            _0x2b2a71("options_leftHanded", "LEFT-handed Joystick", "#194614");
        }
        if (_0x41f468) {
            _0x2b2a71("options_disableSnowFall", "Disable Snowfall", "black");
        }
        if (window.localStorage) {
            _0x26aab4 = window.localStorage.getItem("options_noNames") + 0 > 0;
            var _0x51ddf7 = document.getElementById("options_noNames");
            if (_0x51ddf7) {
                _0x51ddf7.checked = _0x26aab4;
            }
            _0x2480f7 = window.localStorage.getItem("options_noImages") + 0 > 0;
            var _0x51ddf7 = document.getElementById("options_noImages");
            if (_0x51ddf7) {
                _0x51ddf7.checked = _0x2480f7;
            }
            _0x48b077 = window.localStorage.getItem("options_disableFilter") + 0 > 0;
            var _0x51ddf7 = document.getElementById("options_disableFilter");
            if (_0x51ddf7) {
                _0x51ddf7.checked = _0x48b077;
            }
            _0x18ca32 = window.localStorage.getItem("options_noJoystick") + 0 > 0;
            var _0x51ddf7 = document.getElementById("options_noJoystick");
            if (_0x51ddf7) {
                _0x51ddf7.checked = _0x18ca32;
            }
            _0x338ed5 = window.localStorage.getItem("options_leftHanded") + 0 > 0;
            var _0x51ddf7 = document.getElementById("options_leftHanded");
            if (_0x51ddf7) {
                _0x51ddf7.checked = _0x338ed5;
            }
            _0x357cad = window.localStorage.getItem("options_muted") + 0 > 0;
            _0x1e287f();
            _0x5acecb = window.localStorage.getItem("options_disableSnowFall") + 0 > 0;
            var _0x51ddf7 = document.getElementById("options_disableSnowFall");
            if (_0x51ddf7) {
                _0x51ddf7.checked = _0x5acecb;
            }
        }
        var _0x132675 = document.getElementById("button_mute");
        if (_0x132675) {
            _0x132675.onclick = function() {
                _0x357cad = !_0x357cad;
                _0x1e287f();
                try {
                    window.localStorage.setItem("options_muted", _0x357cad ? 1 : 0);
                } catch (_0x55a640) {}
            };
        }
        document.getElementById("settingsButton").onclick = function() {
            _0x9a9085();
        };
        var _0x51ddf7 = document.getElementById("graphicsBut_low");
        if (_0x51ddf7) {
            _0x51ddf7.onclick = function() {
                _0x2e2c77(_0x4051d6);
                _0x3ca188();
                var _0x1663be = new Audio("audio/tap.mp3");
                _0x1663be.volume = _0x357cad ? 0.15 : 0.5;
                _0x1663be.play();
            };
        }
        var _0x51ddf7 = document.getElementById("graphicsBut_med");
        if (_0x51ddf7) {
            _0x51ddf7.onclick = function() {
                _0x2e2c77(_0x1ef095);
                _0x3ca188();
                var _0x2bf48c = new Audio("audio/tap.mp3");
                _0x2bf48c.volume = _0x357cad ? 0.15 : 0.5;
                _0x2bf48c.play();
            };
        }
        var _0x51ddf7 = document.getElementById("graphicsBut_hd");
        if (_0x51ddf7) {
            _0x51ddf7.onclick = function() {
                _0x2e2c77(_0x145cc3);
                _0x3ca188();
                var _0x84d0b1 = new Audio("audio/tap.mp3");
                _0x84d0b1.volume = _0x357cad ? 0.15 : 0.5;
                _0x84d0b1.play();
            };
        }
        var _0x132675 = document.getElementById("options_noImages");
        if (_0x132675) {
            _0x132675.onchange = function() {
                if (window.localStorage) {
                    _0x2480f7 = this.checked;
                    try {
                        window.localStorage.setItem("options_noImages", _0x2480f7 ? 1 : 0);
                    } catch (_0x259a82) {}
                }
            };
        }
        var _0x132675 = document.getElementById("options_disableFilter");
        if (_0x132675) {
            _0x132675.onchange = function() {
                if (window.localStorage) {
                    _0x48b077 = this.checked;
                    try {
                        window.localStorage.setItem("options_disableFilter", _0x48b077 ? 1 : 0);
                    } catch (_0x5980a5) {}
                }
            };
        }
        var _0x132675 = document.getElementById("options_disableSnowFall");
        if (_0x132675) {
            _0x132675.onchange = function() {
                if (window.localStorage) {
                    _0x5acecb = this.checked;
                    try {
                        window.localStorage.setItem("options_disableSnowFall", _0x5acecb ? 1 : 0);
                    } catch (_0x172a16) {}
                }
            };
        }
        var _0x132675 = document.getElementById("options_noNames");
        if (_0x132675) {
            _0x132675.onchange = function() {
                if (window.localStorage) {
                    _0x26aab4 = this.checked;
                    try {
                        window.localStorage.setItem("options_noNames", _0x26aab4 ? 1 : 0);
                    } catch (_0x28a471) {}
                }
            };
        }
        var _0x132675 = document.getElementById("options_noJoystick");
        if (_0x132675) {
            _0x132675.onchange = function() {
                if (window.localStorage) {
                    _0x18ca32 = this.checked;
                    try {
                        window.localStorage.setItem("options_noJoystick", _0x18ca32 ? 1 : 0);
                    } catch (_0x45be60) {}
                    _0x3ca188();
                }
            };
        }
        var _0x132675 = document.getElementById("options_leftHanded");
        if (_0x132675) {
            _0x132675.onchange = function() {
                if (window.localStorage) {
                    _0x338ed5 = this.checked;
                    try {
                        window.localStorage.setItem("options_leftHanded", _0x338ed5 ? 1 : 0);
                    } catch (_0x54b758) {}
                    _0x3ca188();
                    console.log("options_leftHanded: saved as " + window.localStorage.getItem("options_leftHanded"));
                }
            };
        }
        var _0x559abf = [];

        function _0x3efaf8() {
            if (_0x3678d9) {
                _0x578989 += 1;
                console.log("Reconnecting to session failed ... " + _0x578989 + " fails now");
            } else {
                console.log("wasnt reconnecting- first time ws DCed");
            }
            if (_0x28ae1a) {
                console.log("Random ws DC, reconnecting with session ID " + _0x19c52f + "...");
            }
            _0x27678d = false;
            if (!_0x28ae1a) {
                _0x4c02d5 = false;
                _0x464637 = false;
                console.log("Connection to server closed/failed!");
                if (_0x15f990) {
                    _0x15f990 = false;
                    return;
                } else {
                    document.getElementById("connecting").style.display = "flex";
                }
                _0x3a369a(true);
            }
            if (!_0x28ae1a) {
                if (_0x559abf.indexOf(_0x925cfa) == -1) {
                    _0x559abf.push(_0x925cfa);
                }
                _0x2f2268 += 1;
                if (_0x38cb6a) {
                    clearTimeout(_0x38cb6a);
                }
                _0x38cb6a = setTimeout(function() {
                    if (_0x2f2268 > 1) {
                        console.log("too many fails, trying next server (in region)");
                        _0x42423f();
                    } else {
                        _0x11b554(_0x925cfa);
                    }
                }, 1000);
            } else {
                var _0x312773 = 200;
                if (_0x3678d9) {
                    if (_0x578989 > 3) {
                        _0x312773 = 1000;
                        console.log("over 5 session re-join fails, slowing down...");
                    }
                    if (_0x578989 > 23) {
                        console.log("Too many session-rejoin fails, giving up and rejoining a fresh game session");
                        _0x28ae1a = false;
                        _0x42423f();
                        return;
                    }
                }
                if (_0x38cb6a) {
                    clearTimeout(_0x38cb6a);
                }
                _0x38cb6a = setTimeout(function() {
                    _0x11b554(_0x925cfa);
                }, _0x312773);
            }
        }

        function _0x219485(_0x4eca66) {
            this.interfaceType = _0x4eca66;
            this.data = {};
            this.interfaceCanvas = null;
            this.interfaceCanvas_pos = 0;
            this.expiresT = 0;
            this.maxDur = 150;
            this.interfaceShowT = 0;
            this.animalType = _0xb3e9be[_0x166276].animalType;
            this.aniRad = _0xb3e9be[_0x166276].rad;
            this.customButtons = [];
            this.loadData = function(_0x371e2b) {
                if (this.interfaceType == 1) {
                    this.maxDur = _0x371e2b.readUInt8();
                    this.data = {};
                    this.data[_0x47e6fe] = _0x371e2b.readUInt8();
                    this.data[_0x5c13ab] = _0x371e2b.readUInt8();
                    this.data[_0x504f20] = _0x371e2b.readUInt8();
                    this.data[_0x46adbf] = _0x371e2b.readUInt8();
                    this.data[_0x31abda] = _0x371e2b.readUInt8();
                    this.data[_0x3f71c6] = _0x371e2b.readUInt8();
                    this.data[_0x27033a] = _0x371e2b.readUInt8();
                    this.data[_0x5642bc] = _0x371e2b.readUInt8();
                    this.data[_0x4a37d4] = _0x371e2b.readUInt8();
                    this.data[_0x519f92] = _0x371e2b.readUInt8();
                    this.data[_0x50431e] = _0x371e2b.readUInt8();
                    this.data[_0x174cd3] = _0x371e2b.readUInt8();
                    this.data[_0x5b6d09] = _0x371e2b.readUInt8();
                    this.rows = 13;
                    this.data.anis = new Array();
                    this.data.anis.push(_0x50431e);
                    this.data.anis.push(_0x174cd3);
                    this.data.anis.push(_0x5b6d09);
                    this.data.anis.push(_0x47e6fe);
                    this.data.anis.push(_0x5c13ab);
                    this.data.anis.push(_0x504f20);
                    this.data.anis.push(_0x46adbf);
                    this.data.anis.push(_0x31abda);
                    this.data.anis.push(_0x3f71c6);
                    this.data.anis.push(_0x27033a);
                    this.data.anis.push(_0x5642bc);
                    this.data.anis.push(_0x4a37d4);
                    this.data.anis.push(_0x519f92);
                } else {
                    this.data = {};
                    this.maxDur = _0x371e2b.readUInt8();
                    this.data.selected = _0x371e2b.readUInt8();
                    this.data[0] = _0x371e2b.readUInt8();
                    this.data[1] = _0x371e2b.readUInt8();
                    this.data[2] = _0x371e2b.readUInt8();
                    this.data[3] = 0;
                    this.rows = 4;
                }
                this.expiresT = _0x4ec996 + this.maxDur * 1000;
                if (this.interfaceCanvas == null) {
                    this.interfaceCanvas = document.createElement("canvas");
                    this.interfaceCanvas.setAttribute("id", "playerCustomCanvas");
                    this.ctx = this.interfaceCanvas.getContext("2d");
                }
            };
            this.getTitle = function() {
                if (this.interfaceType == 1) {
                    return "APEX KILLS";
                } else if (this.interfaceType == 2) {
                    return "CHOOSE MAIN ABILITY";
                } else if (this.interfaceType == 3) {
                    return "CHOOSE PASSIVE ABILITY";
                } else {
                    return "OPTIONS";
                }
            };
            this.getInterfaceSize = function() {
                if (this.animalType == _0x47e6fe) {
                    return this.aniRad * _0x53a3ae;
                } else {
                    return this.aniRad * 2 * _0x53a3ae;
                }
            };
            this.drawCircles = function(_0x5451e6, _0x48cab1, _0x4d220d) {
                if (this.animalType == _0x47e6fe) {
                    return this.bdInterface(_0x5451e6, _0x48cab1, _0x4d220d);
                } else {
                    return this.getInterface(_0x5451e6, _0x48cab1, _0x4d220d);
                }
            };
            this.bdInterface = function(_0x5f5d66, _0x12e400, _0x1f0b8a) {
                var _0x26caa9 = 3.1;
                this.ctx.save();
                this.ctx.globalAlpha = 0.05;
                var _0x19b458 = _0x1f0b8a * _0x26caa9;
                this.ctx.lineWidth = 2;
                this.ctx.fillStyle = "black";
                this.ctx.beginPath();
                this.ctx.arc(_0x5f5d66, _0x12e400, _0x19b458 - _0x1f0b8a / 2, 0, Math.PI * 2, false);
                this.ctx.arc(_0x5f5d66, _0x12e400, _0x19b458 + _0x1f0b8a / 2, Math.PI * 2, 0, true);
                this.ctx.fill();
                this.ctx.globalAlpha = 0.1;
                this.ctx.strokeStyle = "black";
                this.ctx.beginPath();
                this.ctx.arc(_0x5f5d66, _0x12e400, _0x19b458 + _0x1f0b8a / 2, Math.PI * 2, 0);
                this.ctx.stroke();
                this.ctx.beginPath();
                this.ctx.arc(_0x5f5d66, _0x12e400, _0x19b458 - _0x1f0b8a / 2, 0, Math.PI * 2, false);
                this.ctx.stroke();
                this.ctx.restore();
                return _0x19b458;
            };
            this.getInterface = function(_0x40fb6c, _0x3bffcd, _0x2c192c) {
                var _0x432e22 = 3;
                var _0x448b76 = _0x2c192c * _0x432e22;
                this.ctx.lineWidth = 4;
                this.ctx.fillStyle = "red";
                this.ctx.globalAlpha = 0.1;
                this.ctx.beginPath();
                var _0x131870 = _0x2c192c * 0.9;
                var _0x2a3ebe = _0x2c192c * 1.9;
                this.ctx.arc(_0x40fb6c, _0x3bffcd, _0x448b76 - _0x131870, 0, Math.PI * 2, false);
                this.ctx.arc(_0x40fb6c, _0x3bffcd, _0x448b76 + _0x2a3ebe, Math.PI * 2, 0, true);
                this.ctx.fill();
                this.ctx.globalAlpha = 0.1;
                this.ctx.strokeStyle = "blue";
                this.ctx.beginPath();
                this.ctx.arc(_0x40fb6c, _0x3bffcd, _0x448b76 + _0x2a3ebe, Math.PI * 2, 0);
                this.ctx.stroke();
                this.ctx.beginPath();
                this.ctx.arc(_0x40fb6c, _0x3bffcd, _0x448b76 - _0x131870, 0, Math.PI * 2, false);
                this.ctx.stroke();
                return _0x448b76;
            };
            this.drawTitle = function(_0x26ed01) {
                this.ctx.globalAlpha = 1;
                this.ctx.fillStyle = "#FFFFFF";
                this.ctx.font = "30px Arial";
                var _0x47715b = this.getTitle();
                var _0x1ce1de = (_0x26ed01 + 80) * _0x53a3ae;
                var _0x375538 = this.interfaceCanvas.width / 2 - this.ctx.measureText(_0x47715b).width / 2;
                if (this.animalType != _0x47e6fe) {
                    _0x1ce1de -= _0x53a3ae * 20;
                }
                this.ctx.fillText(_0x47715b, _0x375538, _0x1ce1de);
            };
            this.display = function() {
                if (this.interfaceCanvas == null) {
                    return;
                }
                if (this.interfaceShowT == 0) {
                    this.interfaceShowT = _0x4ec996;
                }
                var _0x492124 = 55;
                var _0x44112e = 5;
                var _0x5a97c0 = 0;
                var _0x5032f9 = this.getInterfaceSize();
                var _0x1496d0 = _0x53a3ae * 130 + (_0x5032f9 + _0x53a3ae * 10) * 6;
                var _0x321df5 = _0x1496d0 * 1.3;
                _0x492124 = _0x321df5 + _0x44112e * 2;
                this.interfaceCanvas.width = _0x1496d0 + _0x44112e * 2;
                this.interfaceCanvas.height = _0x492124;
                var _0x4941d0 = 200;
                this.interfaceCanvas_pos = _0x4941d0;
                this.ctx.globalAlpha = 0.1;
                this.ctx.fillStyle = "#000000";
                if (this.interfaceType != 1) {
                    this.ctx.fillRect(0, 0, this.interfaceCanvas.width, this.interfaceCanvas.height);
                }
                this.drawTitle(_0x44112e);
                _0x4941d0 = 100;
                var _0x3b9112 = 360 / this.rows;
                var _0x131a8f = this.interfaceCanvas.width / 2;
                var _0x5642ab = this.interfaceCanvas.height / 2;
                this.ctx.save();
                var _0x7dfd71 = 3.1;
                var _0x2c6a13 = _0x5032f9 * _0x7dfd71;
                var _0x3b32ae = Math.PI * 2 / this.rows;
                var _0x574647 = 0;
                var _0x31a1f1 = (_0x4ec996 - this.interfaceShowT) / 1000;
                var _0x364e3d = 2;
                var _0x448c1b = 8;
                _0x574647 = _0x448c1b * Math.sin(Math.PI * 2 / _0x364e3d * _0x31a1f1);
                if (this.interfaceType == 1) {
                    this.bdInterface(_0x131a8f, _0x5642ab, _0x5032f9);
                }
                for (r = 0; r < this.rows; r++) {
                    var _0x285721 = _0x5642ab + Math.sin(_0x3b9112 * r * (Math.PI / 180) - _0x4bfce6(180)) * _0x2c6a13;
                    var _0x3086cf = _0x131a8f + Math.cos(_0x3b9112 * r * (Math.PI / 180) - _0x4bfce6(180)) * _0x2c6a13;
                    var _0x227b38 = (r - 1) * _0x3b32ae - _0x4bfce6(180);
                    var _0x12ee47 = _0x227b38 + _0x3b32ae;
                    if (this.interfaceType == 1) {
                        ani = this.data.anis[r];
                        var _0x142b8a = this.getSkinForAniKills(ani);
                        var _0xab5ce7 = _0xb3e9be[_0x166276] ? _0xb3e9be[_0x166276].getSkinImageObjForSeason(_0x142b8a, 1) : null;
                        if (_0xab5ce7) {
                            var _0x5046c2 = this.data[ani] > 0;
                            this.ctx.save();
                            this.ctx.globalAlpha = _0x5046c2 ? 1 : 0.3;
                            var _0x59f75a = _0x5032f9;
                            if (_0x5046c2) {
                                this.ctx.shadowOffsetX = 0;
                                this.ctx.shadowOffsetY = 0;
                                this.ctx.shadowColor = "black";
                                this.ctx.shadowBlur = 8;
                                _0x59f75a -= _0x574647;
                            }
                            this.ctx.drawImage(_0xab5ce7, _0x3086cf - _0x59f75a / 2, _0x285721 - _0x59f75a / 2, _0x59f75a, _0x59f75a);
                            this.ctx.restore();
                        } else {}
                    } else {
                        this.showInterfaceButton(_0x131a8f, _0x5642ab, this.data[r], _0x3086cf, _0x285721);
                    }
                }
                this.ctx.restore();
                if (this.interfaceCanvas != null) {
                    if (this.interfaceCanvas.width) {
                        var _0x5d1e03 = (_0x4ec996 - this.interfaceShowT) / 600;
                        var _0x539099 = (this.expiresT - _0x4ec996) / 600;
                        if (_0x539099 < 1) {
                            _0x5d1e03 = Math.max(0, _0x539099);
                        }
                        var _0x26bfd0 = Math.min(1, _0x5d1e03);
                        var _0x1dbb0f = this.interfaceCanvas.width * _0x26bfd0;
                        var _0x10ddb9 = this.interfaceCanvas.height * _0x26bfd0;
                        _0x39e82d.save();
                        _0x39e82d.globalAlpha = _0x26bfd0;
                        this.interfaceCanvas.screenX = _0x19e9b5 / 2 - _0x1dbb0f / 2;
                        this.interfaceCanvas.screenY = _0x1519a6 / 2 - _0x10ddb9 / 2;
                        this.updateButtons();
                        _0x39e82d.drawImage(this.interfaceCanvas, _0x19e9b5 / 2 - _0x1dbb0f / 2, _0x1519a6 / 2 - _0x10ddb9 / 2, _0x1dbb0f, _0x10ddb9);
                        _0x39e82d.restore();
                        if (_0x4ec996 > this.expiresT || !_0x4c02d5) {
                            _0x53365e.destroy();
                        }
                    }
                }
            };
            this.destroy = function() {
                if (this.customButtons != null && this.customButtons.length > 0) {
                    for (i = 0; i < this.customButtons.length; i++) {
                        this.customButtons[i].isVisible = false;
                    }
                }
                this.interfaceCanvas = null;
                this.ctx = null;
                _0x53365e = null;
                console.log("custom interface canvas destroyed!");
            };
            this.updateButtons = function() {
                var _0x2f9dbd = this.interfaceCanvas.width;
                var _0x302572 = this.interfaceCanvas.height;
                var _0x1248e5 = _0x19e9b5 / 2 - _0x2f9dbd / 2;
                var _0x2a0b43 = _0x1519a6 / 2 - _0x302572 / 2;
                if (this.customButtons != null && this.customButtons.length > 0) {
                    for (i = 0; i < this.customButtons.length; i++) {
                        this.customButtons[i].screenX = _0x1248e5;
                        this.customButtons[i].screenY = _0x2a0b43;
                    }
                }
            };
            this.drawAngularInterface = function(_0x5b2d2e, _0x470aee, _0x31dd81, _0x1e6f78, _0x3c199e, _0x49c061) {
                this.ctx.save();
                this.ctx.globalAlpha = 0.2;
                this.ctx.lineWidth = _0x31dd81;
                var _0x2d8148 = Math.PI * 2 / this.rows;
                var _0x347981 = _0x4bfce6(-90);
                var _0x5f52b2 = ["red", "green", "blue", "purple"];
                for (r = 1; r <= this.rows; r++) {
                    this.ctx.beginPath();
                    if (this.interfaceType == 1) {
                        this.ctx.strokeStyle = "black";
                    } else {
                        this.ctx.strokeStyle = _0x5f52b2[r - 1];
                    }
                    this.ctx.arc(_0x5b2d2e, _0x470aee, _0x3c199e - _0x1e6f78 * _0x49c061, _0x347981, _0x347981 + _0x2d8148);
                    this.ctx.stroke();
                    _0x347981 += _0x2d8148;
                }
                this.ctx.restore();
            };
            this.getSkinForAniKills = function(_0x4aba86) {
                switch (_0x4aba86) {
                    case _0x47e6fe:
                        return "./skins/volcano/blackdragon/0/blackdragon.png";
                    case _0x504f20:
                        return "./skins/land/dinomonster/0/dinomonster.png";
                    case _0x31abda:
                        return "./skins/arctic/icemonster/0/icemonster.png";
                    case _0x5c13ab:
                        return "./skins/volcano/landmonster/0/0/landmonster.png";
                    case _0x46adbf:
                        return "./skins/ocean/seamonster/0/seamonster.png";
                    case _0x3f71c6:
                        return "./skins/desert/scorpion/0/giantscorpion.png";
                    case _0x174cd3:
                        return "./skins/arctic/yeti/0/yeti.png";
                    case _0x5642bc:
                        return "./skins/land/dragon/0/0/dragon.png";
                    case _0x4a37d4:
                        return "./skins/land/trex/0/trex.png";
                    case _0x519f92:
                        return "./skins/ocean/kraken/0/0/kraken.png";
                    case _0x50431e:
                        return "./skins/ocean/kingcrab/0/kingcrab.png";
                    case _0x27033a:
                        return "./skins/volcano/phoenix/0/phoenix.png";
                    case _0x5b6d09:
                        return "./skins/desert/pterodactyl/0/pterodactyl_ability.png";
                }
            };
            this.updateExpiry = function() {
                var _0x28acbf = (this.expiresT - _0x4ec996) / 1000;
                if (_0x28acbf < this.maxDur - 1 && _0x28acbf > 1) {
                    this.expiresT = _0x4ec996 + 1000;
                }
            };
            this.getBtnTitle = function(_0xaa9233) {
                switch (_0xaa9233) {
                    case _0x33f08f:
                        return "Fly High";
                    case _0x57557a:
                        return "Gives Gifts";
                    case _0xbb104b:
                        return "Flying Sleigh";
                    default:
                        return "Close";
                }
            };
            this.buttons = {};
            this.sendSelection = function(_0x29041d) {
                if (this.customButtons != null && this.customButtons.length > 0) {
                    for (i = 0; i < this.customButtons.length; i++) {
                        this.customButtons[i].resetSelection();
                    }
                }
                _0x29041d.setSelection();
                var _0x24dacd = new _0x1f27e2(3);
                _0x24dacd.writeUInt8(_0x91dedd);
                _0x24dacd.writeUInt8(this.interfaceType);
                _0x24dacd.writeUInt8(_0x29041d.buttonID);
                _0x80c20b(_0x24dacd);
            };
            this.showInterfaceButton = function(_0x343dbe, _0x9f9a95, _0xa3d2ac, _0x54926b, _0x31a34c) {
                var _0x45f5f3 = this.buttons[_0xa3d2ac];
                if (_0x45f5f3 === undefined || _0x45f5f3 == null) {
                    var _0x6b2422 = this.getBtnTitle(_0xa3d2ac);
                    var _0x16b6be = _0xa3d2ac == 0 ? {
                        w: 100,
                        h: 60
                    } : {
                        w: 100,
                        h: 100
                    };
                    _0x45f5f3 = this.buttons[_0xa3d2ac] = new _0x450d88(_0x54926b, _0x31a34c, _0x16b6be.w, _0x16b6be.h, _0x6b2422, 30, this.ctx);
                    _0x45f5f3.buttonID = _0xa3d2ac;
                    _0x45f5f3.selected = false;
                    _0x45f5f3.isVisible = true;
                    _0x45f5f3.textShadow = true;
                    _0x45f5f3.screenX = 0;
                    _0x45f5f3.screenY = 0;
                    if (_0xa3d2ac != 0) {
                        _0x45f5f3.drawButtonRect = false;
                        _0x45f5f3.showLabeleOnHover = true;
                    }
                    _0x45f5f3.testPosHitsButton = function(_0x40a6e1, _0x511c1f) {
                        var _0x1f6752 = this.screenX + this.x;
                        var _0x2aeb41 = _0x1f6752 + this.w;
                        var _0x4fe9d6 = this.screenY + this.y;
                        var _0x5ebbcf = _0x4fe9d6 + this.h;
                        if (_0x40a6e1 < _0x1f6752 || _0x40a6e1 > _0x2aeb41) {
                            return false;
                        }
                        if (_0x511c1f < _0x4fe9d6 || _0x511c1f > _0x5ebbcf) {
                            return false;
                        } else {
                            return true;
                        }
                    };
                    _0x45f5f3.onClick = function() {
                        console.log("clicked: " + this.label);
                        if (!this.clicked) {
                            this.clicked = true;
                            this.isHighLighted = false;
                        }
                        if (this.label == "Close") {
                            _0x53365e.destroy();
                        } else {
                            _0x53365e.sendSelection(this);
                        }
                    };
                    _0x45f5f3.setSelection = function() {
                        this.labelColor = "yellow";
                        this.selected = true;
                    };
                    _0x45f5f3.resetSelection = function() {
                        this.labelColor = "white";
                        this.selected = false;
                    };
                    _0x45f5f3.beforeDrawText = function() {
                        var _0x2f0944 = this.w / 2;
                        var _0x1e428d = this.h / 2;
                        this.buttonTXT.x = this.screenX + this.x + _0x2f0944;
                        if (this.buttonID == 0) {
                            this.buttonTXT.y = this.screenY + this.y + _0x1e428d;
                        } else {
                            this.buttonTXT.y = this.screenY + this.y - _0x1e428d / 2;
                        }
                    };
                    _0x45f5f3.onMouseMove = function() {};
                    _0x45f5f3.update = function() {
                        this.x = _0x54926b - this.w / 2;
                        this.y = _0x31a34c - this.h / 2;
                    };
                    _0x45f5f3.onInterfaceReset = function() {
                        this.isVisible = false;
                    };
                    _0x45f5f3.onAfterDraw = function() {
                        var _0x1197cd = _0xb3e9be[_0x166276];
                        if (_0x1197cd) {
                            var _0x2eb3a2 = _0x1197cd.getAbilityInfo(this.buttonID);
                            if (_0x2eb3a2) {
                                var _0x15876d = "assets/s/" + _0x2eb3a2.mopeSeasonID + "/" + _0x2eb3a2.abilImg;
                                var _0xde92b4 = _0x4172bb(_0x15876d);
                                if (_0xde92b4) {
                                    _0x39e82d.save();
                                    if (this.isHighLighted || this.selected) {
                                        _0x39e82d.shadowBlur = 10;
                                        _0x39e82d.shadowOffsetX = 0;
                                        _0x39e82d.shadowOffsetY = 0;
                                        _0x39e82d.shadowColor = "yellow";
                                    }
                                    var _0x117646 = this.w / 2;
                                    var _0x2a0692 = this.h / 2;
                                    _0x117646 = this.screenX + this.x;
                                    _0x2a0692 = this.screenY + this.y;
                                    var _0x37b720 = this.w;
                                    _0x39e82d.drawImage(_0xde92b4, _0x117646, _0x2a0692, _0x37b720, _0x37b720);
                                    _0x39e82d.restore();
                                }
                            }
                        }
                    };
                    _0xebbf06.interfaceButtons.push(_0x45f5f3);
                    this.customButtons.push(_0x45f5f3);
                    if (this.data.selected == _0x45f5f3.buttonID) {
                        _0x45f5f3.setSelection();
                    }
                } else if (_0x45f5f3 != null) {
                    if (_0x45f5f3.isVisible) {
                        _0x45f5f3.clicked = false;
                    }
                    _0x45f5f3.draw();
                }
            };
        }
        console.log("ACCOUNT SERVER START");

        function _0x40e42a(_0x4999b1) {
            var _0xa0cad9 = document.getElementById("loginCoins");
            _0xa0cad9.innerHTML = _0x4999b1 > 0 ? _0x4999b1 : 0;
        }

        function _0x258157(_0x5acf23) {
            var _0x4679cf = document.getElementById("loginGems");
            _0x4679cf.innerHTML = _0x5acf23 > 0 ? _0x5acf23 : 0;
        }
        const _0x2b62e5 = async function(_0x4d99d9, _0x2b8dd6 = "web", _0x5cf433) {
            let _0x108acf = _0x1773aa + "/auth/login/" + _0x5cf433;
            let _0x4a49c1 = {
                sessionId: _0x925cfa ? _0x925cfa.sessionId : undefined,
                serverId: _0x925cfa ? _0x925cfa.serverId : undefined,
                accessToken: _0x4d99d9,
                platform: _0x2b8dd6
            };
            try {
                const _0x18a232 = await fetch(_0x108acf, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(_0x4a49c1)
                });
                const _0x2342e0 = await _0x18a232.json();
                if (_0x2342e0.success) {
                    _0xbedefa(_0x2342e0.data);
                    _0x2bb425(_0x2342e0.data.userId, _0x2342e0.data.token, _0x2342e0.data.userName, _0x2342e0.data.avatar, _0x5cf433);
                    return true;
                } else {
                    _0x5338aa("ACCOUNTS: Failed to login using " + _0x5cf433 + " encountered an error [" + _0x2342e0.error + "]", "error", 10000);
                    return false;
                }
            } catch (_0x17412c) {
                console.error("::: Social Network Login ERROR :::", _0x17412c);
                return false;
            }
        };
        const _0x49cb3a = async _0x5d7ffe => {
            return;
        };
        var _0x4f90e1;
        var _0x28cec6;
        var _0x10d372;
        var _0x3b3392;
        var _0x1810c4;
        var _0x1c0f11;
        if (_0x450ba1) {
            console.log("Checking what login_userId was:", _0x4f90e1);
            _0x4f90e1 = localStorage.getItem("login_userId");
            _0x1c0f11 = _0x4f90e1 !== undefined && _0x4f90e1 !== null;
            if (_0x1c0f11) {
                console.log("WAS LOGGED IN!");
                _0x28cec6 = localStorage.getItem("login_passwordToken");
                _0x10d372 = localStorage.getItem("login_profilePicURL");
                _0x3b3392 = localStorage.getItem("login_name");
                _0x1810c4 = localStorage.getItem("login_socialNetworkName");
            }
        }
        jQuery.loadScript = function(_0x2dbb19, _0xe62da0) {
            jQuery.ajax({
                url: _0x2dbb19,
                dataType: "script",
                success: _0xe62da0,
                async: true
            });
        };
        window.fbAsyncInit = function() {
            window.FB.init({
                appId: "482002344741952",
                cookie: true,
                xfbml: true,
                version: "v3.2",
                status: true
            });
            window.FB.AppEvents.logPageView();
        };
        (function(_0x4c92d4, _0x581333, _0x4151df) {
            var _0x2af9a6;
            var _0x37fb05 = _0x4c92d4.getElementsByTagName(_0x581333)[0];
            if (_0x4c92d4.getElementById(_0x4151df)) {
                return;
            }
            _0x2af9a6 = _0x4c92d4.createElement(_0x581333);
            _0x2af9a6.id = _0x4151df;
            _0x2af9a6.crossorigin = "anonymous";
            _0x2af9a6.src = "https://connect.facebook.net/en_US/sdk.js";
            _0x37fb05.parentNode.insertBefore(_0x2af9a6, _0x37fb05);
        })(document, "script", "facebook-jssdk");
        if (_0xc4d403) {} else {}
        const _0x1c2c6f = async () => {
            if (_0x1c0f11) {
                const _0x35008b = await _0x2deb4b();
                if (!_0x35008b) {
                    _0x53a7fb();
                }
            } else {
                var _0x5bf9bb = "none";
                var _0x61c4be = new URL(window.location.href);
                var _0x3d4fff = _0x61c4be.searchParams.get("testAccountSecret");
                if (_0x3d4fff) {
                    _0x5bf9bb = _0x3d4fff;
                    let _0x21f2e7 = "" + _0x61c4be.searchParams.get("user");
                    if (!_0x2c37ef(_0x5bf9bb + _0x21f2e7)) {
                        if (_0x21f2e7 && _0x21f2e7.length <= 2) {
                            _0x2b62e5(_0x21f2e7, "web", _0x5bf9bb, _0x5bf9bb + _0x21f2e7, null);
                        }
                    }
                }
            }
        };
        setTimeout(_0x140ac7, 1);

        function _0x140ac7() {
            var _0x200a56 = document.getElementById("divButtons");
            document.getElementById("facebookLoginBtn").onclick = _0x5ebb1c;
            document.getElementById("appleLoginBtn").onclick = _0x35ab9b;
            document.getElementById("discordLoginBtn").onclick = _0x2861c1;
            document.getElementById("btnLogout2").onclick = _0x139562;
            if (_0x1c0f11) {
                console.log("user previously logged in: " + _0x3b3392 + " : " + _0x4f90e1);
                document.getElementById("onloggedInDiv").style.display = "block";
                if (_0x10d372) {
                    document.getElementById("loggedInUserImg").src = _0x10d372;
                }
                document.getElementById("loggedInNameTxt").innerHTML = _0x3b3392;
                document.getElementById("notLoggedInDiv").style.display = "none";
                _0x200a56.style.display = "none";
                if (_0x194f0b) {
                    _0x194f0b.style.display = "none";
                }
            } else {
                document.getElementById("onloggedInDiv").style.display = "none";
                document.getElementById("loggedInUserImg").src = "none";
                document.getElementById("loggedInNameTxt").innerHTML = "";
                document.getElementById("notLoggedInDiv").style.display = "block";
                _0x200a56.style.display = "block";
            }
        }
        var _0xa38db9 = "none";
        var _0x596e29 = new URL(window.location.href);
        var _0x19c8ff = _0x596e29.searchParams.get("testAccountSecret");
        if (_0x19c8ff) {
            console.log("testing account enabled.");
            _0xa38db9 = _0x19c8ff;
        }

        function _0x53a7fb() {
            if (_0x450ba1) {
                localStorage.removeItem("login_userId");
                localStorage.removeItem("login_passwordToken");
                localStorage.removeItem("login_profilePicURL");
                localStorage.removeItem("login_name");
                localStorage.removeItem("login_socialNetworkName");
            }
            _0x4f90e1 = null;
            _0x28cec6 = null;
            _0x10d372 = null;
            _0x3b3392 = null;
            _0x1810c4 = null;
            _0x1c0f11 = false;
            _0x2b46b2 = {
                coins: -1
            };
            _0x247e4a.loadData();
        }
        async function _0x139562(_0x465e14 = true) {
            if (_0xc4d403) {
                _0x465e14 = false;
            }
            let _0x5f20ce = () => {};
            if (_0x1810c4 === "google") {
                _0x5f20ce = _0xaa8a1e;
            } else if (_0x1810c4 === "facebook") {
                _0x5f20ce = _0x3c7fcb;
            } else if (_0x1810c4 === "apple") {
                _0x5f20ce = _0x24b5e8;
            }
            console.log("logging out with social network " + _0x1810c4);
            try {
                await _0x5f20ce();
                await _0x33a05c(_0x4f90e1);
                _0x53a7fb();
                _0x140ac7();
            } catch (_0x227c04) {
                console.error("Error logging out:", _0x227c04);
            }
        }
        const _0x33a05c = async _0x682873 => {
            let _0x724b74 = _0x1773aa + "/auth/logout";
            let _0x4e08e6 = {
                userId: _0x682873,
                sessionId: _0x925cfa ? _0x925cfa.sessionId : undefined,
                serverId: _0x925cfa ? _0x925cfa.serverId : undefined
            };
            try {
                await fetch(_0x724b74, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(_0x4e08e6)
                });
            } catch (_0x475cd4) {
                _0x5338aa("AccountServer: Failed to logout");
                console.error("::: Account Server Logout ERROR :::", _0x475cd4);
                return false;
            }
            return true;
        };
        const _0xbedefa = _0x275e65 => {
            _0x2b46b2 = _0x275e65;
            _0x40e42a(_0x275e65.coins);
            _0x258157(_0x275e65.gems);
        };
        const _0x2deb4b = async () => {
            if (!_0x1c0f11) {
                console.error("::: verifyLocalCredentials ERROR ::: User is not logged in!");
                return;
            }
            const _0x2e5364 = _0x1773aa + "/auth/@me";
            const _0x1d9196 = {
                userId: _0x4f90e1,
                token: _0x28cec6,
                sessionId: _0x925cfa ? _0x925cfa.sessionId : undefined,
                serverId: _0x925cfa ? _0x925cfa.serverId : undefined,
                isRefresh: false
            };
            try {
                const _0x43af71 = await fetch(_0x2e5364, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json;charset=UTF-8"
                    },
                    body: JSON.stringify(_0x1d9196)
                });
                const _0x4fe28d = await _0x43af71.json();
                if (_0x4fe28d.success) {
                    _0xbedefa(_0x4fe28d.data);
                    return true;
                } else {
                    _0x139562();
                    console.log("::: verifyLocalCredentials failed ::: Needs new credentials");
                    return false;
                }
            } catch (_0x4ac838) {
                console.error("::: verifyLocalCredentials ERROR :::", _0x4ac838);
                return false;
            }
        };
        var _0x2b46b2 = {
            coins: -1,
            level: 0,
            xp: 0,
            xpNextLvl: 0
        };
        const _0x33d7d7 = async function() {
            if (!_0x1c0f11) {
                console.log("not logged in!");
                return null;
            }
            console.log("loading account data...");
            let _0x422ec3 = _0x1773aa + "/auth/@me";
            const _0x2deea7 = {
                userId: _0x4f90e1,
                token: _0x28cec6,
                sessionId: _0x925cfa ? _0x925cfa.sessionId : undefined,
                serverId: _0x925cfa ? _0x925cfa.serverId : undefined,
                isRefresh: true
            };
            return new Promise((_0x3f4e0f, _0x1706fa) => {
                $.ajax({
                    url: _0x422ec3,
                    type: "POST",
                    headers: {
                        "Content-Type": "application/json;charset=UTF-8"
                    },
                    data: JSON.stringify(_0x2deea7),
                    success: function(_0x445506) {
                        var _0x508fb4 = _0x445506;
                        console.log("Done, result is " + _0x445506);
                        _0x2b46b2 = _0x508fb4.data;
                        console.log("the resObj coins was", _0x508fb4.coins);
                        if (_0x508fb4.coins == "BANNED") {
                            setInterval(function() {
                                _0x5338aa("Your account has been BANNED!", "error", 10000);
                            }, 10000);
                        }
                        return _0x3f4e0f(_0x508fb4);
                    },
                    error: function(_0x3f76fb, _0x47a8a6, _0x3f82e4) {
                        console.error("URL error: " + _0x3f82e4);
                        console.error("failed to refresh account data!");
                        return _0x3f4e0f(null);
                    }
                });
            });
        };
        const _0x2709e4 = async function(_0x53cc11) {
            _0x20d444 = true;
            const _0x33ac07 = await _0x33d7d7();
            if (_0x53cc11) {
                _0x53cc11(_0x33ac07);
            }
            _0x20d444 = false;
        };

        function _0x313e53(_0x54ec50) {
            console.log("Loading shop items for logged in user! " + _0x4f90e1);
            let _0xf151c6 = _0x1773aa + "/shop/get";
            console.log("@@@@@@@ Sending URL request :" + _0xf151c6);
            $.ajax({
                url: _0xf151c6,
                success: function(_0x3d0119) {
                    _0x54ec50(true, _0x3d0119);
                },
                error: function(_0xdd81c8, _0x3c8eb3, _0x4e779e) {
                    console.log("Shop loading-URL error: " + _0x4e779e);
                    _0x54ec50(false, null);
                }
            });
        }
        const _0x3f8c4d = function(_0x533b64) {
            let _0x5e4a3f = _0x1773aa + "/shop/purchases";
            const _0x526b98 = {
                userId: _0x4f90e1,
                token: _0x28cec6,
                sessionId: _0x925cfa ? _0x925cfa.sessionId : undefined,
                serverId: _0x925cfa ? _0x925cfa.serverId : undefined
            };
            if (_0x33dde0) {
                console.log("Sending URL request :" + _0x5e4a3f);
            }
            $.ajax({
                url: _0x5e4a3f,
                method: "POST",
                data: JSON.stringify(_0x526b98),
                headers: {
                    "Content-Type": "application/json;charset=UTF-8"
                },
                success: function(_0x50b654) {
                    var _0x49d74a = _0x50b654;
                    _0x533b64(_0x49d74a.success, _0x49d74a.data);
                },
                error: function(_0x5857c9, _0x421586, _0x4cfae0) {
                    if (_0x5857c9.responseText) {
                        const _0x253da9 = JSON.parse(_0x5857c9.responseText);
                        _0x533b64(_0x253da9.success, _0x253da9.error);
                    } else {
                        _0x533b64(false, "an error happened during retrieving your purchased items.");
                    }
                }
            });
        };
        const _0x5e37d3 = function(_0x40fcd0, _0x57af57) {
            let _0x5c8f2f = _0x1773aa + "/shop/wardrobe/save";
            const _0x4ca7da = {
                userId: _0x4f90e1,
                token: _0x28cec6,
                sessionId: _0x925cfa ? _0x925cfa.sessionId : undefined,
                serverId: _0x925cfa ? _0x925cfa.serverId : undefined,
                data: _0x40fcd0
            };
            if (_0x33dde0) {
                console.log("Sending URL request :" + _0x5c8f2f);
            }
            $.ajax({
                url: _0x5c8f2f,
                method: "POST",
                data: JSON.stringify(_0x4ca7da),
                headers: {
                    "Content-Type": "application/json;charset=UTF-8"
                },
                success: function(_0x1ef874) {
                    var _0x578428 = _0x1ef874;
                    _0x57af57(_0x578428.success, _0x578428.data);
                },
                error: function(_0x21037d, _0x3203c3, _0x15a26b) {
                    if (_0x21037d.responseText) {
                        const _0x15781b = JSON.parse(_0x21037d.responseText);
                        _0x57af57(_0x15781b.success, _0x15781b.error);
                    } else {
                        _0x57af57(false, "an error happened during wardrobe saving.");
                    }
                }
            });
        };
        const _0x1ef637 = function(_0x5a0c3f, _0x26441d) {
            if (_0x33dde0) {
                console.log("Sending URL request to load coins for logged in user! " + _0x4f90e1);
            }
            if (!_0x5a0c3f) {
                _0x5a0c3f = "goldDragon";
            }
            let _0x44fb2a = _0x1773aa + "/shop/buy";
            const _0x4cd11f = {
                userId: _0x4f90e1,
                token: _0x28cec6,
                shopItem: _0x5a0c3f,
                sessionId: _0x925cfa ? _0x925cfa.sessionId : undefined,
                serverId: _0x925cfa ? _0x925cfa.serverId : undefined
            };
            if (_0x33dde0) {
                console.log("Sending URL request :" + _0x44fb2a);
            }
            $.ajax({
                url: _0x44fb2a,
                method: "POST",
                data: JSON.stringify(_0x4cd11f),
                headers: {
                    "Content-Type": "application/json;charset=UTF-8"
                },
                success: function(_0x2e9b36) {
                    var _0x13d70a = _0x2e9b36;
                    _0x26441d(_0x13d70a.success, _0x13d70a.reason);
                },
                error: function(_0x5d163b, _0x3dd062, _0x7ce44e) {
                    if (_0x5d163b.responseText) {
                        const _0x4ce5d5 = JSON.parse(_0x5d163b.responseText);
                        _0x26441d(_0x4ce5d5.success, _0x4ce5d5.error);
                    } else {
                        _0x26441d(false, "an error happened during purchase.");
                    }
                }
            });
        };

        function _0x4007aa() {
            let _0x1798ea = _0x1773aa + "/addCoins?userId=" + _0x4f90e1 + "&passwordToken=" + _0x28cec6;
            if (_0x33dde0) {
                console.log("Sending URL request :" + _0x1798ea);
            }
            $.ajax({
                url: _0x1798ea,
                success: function(_0x3a8086) {
                    if (_0x33dde0) {
                        _0x2709e4();
                    }
                },
                error: function(_0x5b1853, _0x2072b1, _0x5d48c0) {
                    console.log("URL error: " + _0x5d48c0);
                }
            });
        }

        function _0x383c1a() {
            let _0x181414 = _0x1773aa + "/resetAccount?userId=" + _0x4f90e1 + "&passwordToken=" + _0x28cec6;
            if (_0x33dde0) {
                console.log("Sending URL request :" + _0x181414);
            }
            $.ajax({
                url: _0x181414,
                success: function(_0x33253f) {
                    console.log("reposnse is " + _0x33253f);
                    _0x2709e4();
                },
                error: function(_0x581672, _0xa7fd02, _0x389327) {
                    console.log("URL error: " + _0x389327);
                }
            });
        }
        const _0x2bb425 = function(_0x2f351c, _0x12ae09, _0x19d438, _0x34307a, _0x22bd97) {
            _0x4f90e1 = _0x2f351c;
            _0x28cec6 = _0x12ae09;
            _0x10d372 = _0x34307a;
            _0x3b3392 = _0x19d438;
            _0x1810c4 = _0x22bd97;
            _0x1c0f11 = true;
            if (_0x450ba1) {
                localStorage.setItem("login_userId", _0x4f90e1);
                localStorage.setItem("login_passwordToken", _0x28cec6);
                localStorage.setItem("login_name", _0x3b3392);
                localStorage.setItem("login_profilePicURL", _0x10d372);
                localStorage.setItem("login_socialNetworkName", _0x1810c4);
            }
            _0x194f0b = document.getElementById("loginButtons");
            _0x33d7d7();
            _0x140ac7();
            _0x25164f();
        };
        const _0x436fa7 = function(_0x48f6e2, _0x1b9dbe) {
            if (_0x33dde0) {
                console.log("Sending URL request to load coins for logged in user! " + _0x4f90e1);
            }
            if (!_0x48f6e2) {
                _0x48f6e2 = "none";
            }
            let _0x4f3740 = _0x1773aa + "/playerSettings_update?userId=" + _0x4f90e1 + "&passwordToken=" + _0x28cec6 + "&itemId=" + _0x48f6e2;
            if (_0x33dde0) {
                console.log("Sending URL request :" + _0x4f3740);
            }
            $.ajax({
                url: _0x4f3740,
                success: function(_0xfc11b) {
                    var _0x15675e = JSON.parse(_0xfc11b);
                    console.log("Done, result is " + _0xfc11b);
                    _0x1b9dbe(_0x15675e.success, _0x15675e.reason);
                },
                error: function(_0x5f523d, _0x31dbee, _0xfe01ae) {
                    _0x1b9dbe(false, "urlnotfound");
                }
            });
        };
        const _0x2c37ef = function(_0x18d62d) {
            if (_0x1c0f11) {
                if (_0x4f90e1 === _0x18d62d) {
                    return true;
                }
            }
            return false;
        };
        if (this === window) {
            while (true) {}
        }

        function _0xea631() {
            $.ajax({
                url: _0x1773aa + "/servers/get",
                type: "GET",
                success: function(_0x4abf95) {
                    var _0x101a5f = _0x4abf95;
                    gotMasterServerStats = true;
                    _0x170cf4 = _0x101a5f.reduce((_0x4dd556, _0x361664) => _0x4dd556 + Math.max(0, _0x361664.totalPlayerCount), 0);
                    for (var _0x297e60 = 0; _0x297e60 < _0x48215e.length; _0x297e60++) {
                        var _0x30d288 = _0x48215e[_0x297e60];
                        var _0x5b43b8 = false;
                        for (var _0x40a7bc = 0; _0x40a7bc < _0x101a5f.length; _0x40a7bc++) {
                            var _0x55496f = _0x101a5f[_0x40a7bc];
                            if (_0x55496f.id == _0x30d288.id) {
                                _0x30d288.playersCount = _0x55496f.totalPlayerCount;
                                _0x5b43b8 = true;
                                break;
                            }
                        }
                        if (!_0x5b43b8) {
                            _0x30d288.playersCount = -1;
                        }
                    }
                    _0x1d604a();
                },
                error: function(_0x1d5862, _0x287041, _0x19c983) {
                    _0x1d604a();
                    console.log("Error getting master server stats: " + _0x19c983);
                }
            });
        }
        $.loadScript("https://accounts.google.com/gsi/client?hl=en", function() {
            function _0x2af93b() {
                if (typeof gapi === "google") {
                    return;
                }
                const _0x192de3 = google.accounts.oauth2.initTokenClient({
                    client_id: $config.authentication.google,
                    cookiepolicy: "single_host_origin",
                    scope: "openid email profile",
                    callback: _0x10afe1 => {
                        _0x2b62e5(_0x10afe1.access_token, "web", "google");
                    }
                });
                document.querySelector("#googleLoginBtn").onclick = () => {
                    if (_0xc4d403) {
                        _0x33c729();
                    } else {
                        _0x192de3.requestAccessToken();
                    }
                    console.log("requesting token");
                };
            }
            _0x2af93b();
        });
        async function _0x24026b(_0x195390, _0x3e2dd9) {
            const _0x4c5bce = await _0x2b62e5(_0x195390, _0x3e2dd9, "google");
            if (!_0x4c5bce) {
                await _0x5a8528()();
            }
        }
        async function _0x45b639() {
            const _0xed6034 = _0x5d0738();
            try {
                const _0x5a460d = await _0xed6034.func();
                if (_0xed6034.platform == "mobile") {
                    return;
                }
                console.log("GOT ID TOKEN", _0x5a460d, _0xed6034.platform);
                await _0x24026b(_0x5a460d, _0xed6034.platform);
            } catch (_0x3dcdc9) {
                console.error("Error with google login:", _0x3dcdc9.message);
            }
        }
        async function _0xaa8a1e() {}

        function _0x5d0738() {
            if (!_0xc4d403) {
                console.log("resolve web google login");
                return {
                    platform: "web",
                    func: _0x392528
                };
            } else {
                console.log("resolve mobile google login");
                return {
                    platform: "mobile",
                    func: _0x33c729
                };
            }
        }

        function _0x5a8528() {
            if (!_0xc4d403) {
                return _0x1ca4a0;
            } else {
                return _0x27a72f;
            }
        }
        async function _0x392528() {
            console.log("Doing web google login.");
            return new Promise((_0xe7563f, _0x254089) => {
                gapi.load("auth2", async function() {
                    console.log("loaded auth2");
                    try {
                        console.log("initializing auth2");
                        auth2 = auth2 || gapi.auth2.init({
                            client_id: $config.googleAuthClientId,
                            cookiepolicy: "single_host_origin"
                        });
                        console.log("Signing in.");
                        const _0x519111 = await auth2.signIn();
                        console.log("Getting id token.");
                        const _0x17840e = _0x519111.getAuthResponse().id_token;
                        console.log("Received id_token", _0x17840e);
                        return _0xe7563f(_0x17840e);
                    } catch (_0x3f3463) {
                        console.error("Error with google login:", _0x3f3463);
                        return _0x254089(_0x3f3463);
                    }
                });
            });
        }
        async function _0x33c729() {
            _0x14d0a2("google-login", "");
        }
        async function _0x1ca4a0() {
            try {
                var _0x449225 = gapi.auth2.getAuthInstance();
                return _0x449225.signOut();
            } catch (_0x4d5473) {
                console.error("Error with web google logout:", _0x4d5473);
            }
        }
        async function _0x27a72f() {}
        window.fbAsyncInit = function() {
            if (typeof window.FB === "undefined") {
                return;
            }
            window.FB.init({
                appId: $config.authentication.facebook,
                cookie: true,
                xfbml: true,
                version: "v3.2",
                status: true
            });
            window.FB.AppEvents.logPageView();
        };
        (function(_0x479d6c, _0x216e08, _0x5d15a0) {
            var _0x2fa87c;
            var _0x280f20 = _0x479d6c.getElementsByTagName(_0x216e08)[0];
            if (_0x479d6c.getElementById(_0x5d15a0)) {
                return;
            }
            _0x2fa87c = _0x479d6c.createElement(_0x216e08);
            _0x2fa87c.id = _0x5d15a0;
            _0x2fa87c.src = "https://connect.facebook.net/en_US/sdk.js";
            _0x280f20.parentNode.insertBefore(_0x2fa87c, _0x280f20);
        })(document, "script", "facebook-jssdk");
        async function _0x2cb449() {
            _0x14d0a2("facebook-login", "");
        }
        async function _0x709f38(_0x2e72c4, _0xf2e78f) {
            const _0x18be9d = await _0x2b62e5(_0x2e72c4, _0xf2e78f, "facebook");
            if (!_0x18be9d) {
                await _0x16e101()();
            }
        }
        async function _0x5ebb1c() {
            const _0x3c8802 = _0x393f08();
            try {
                const _0x4118cf = await _0x3c8802.func();
                if (_0x3c8802.platform == "mobile") {
                    return;
                }
                await _0x709f38(_0x4118cf, _0x3c8802.platform);
            } catch (_0x1e30e1) {
                console.error("Error with facebook login:", _0x1e30e1.message);
            }
        }
        async function _0x3b42c2() {
            return new Promise((_0x5d9893, _0x431dd8) => {
                window.FB.login(function(_0x246aaf) {
                    if (_0x246aaf.status === "connected") {
                        console.log("Successfully got auth token from FB");
                        var _0xc6f33d = _0x246aaf.authResponse.accessToken;
                        return _0x5d9893(_0xc6f33d);
                    } else {
                        return _0x431dd8("Error logging in to window.FB.");
                    }
                }, {
                    scope: "public_profile,email"
                });
            });
        }

        function _0x393f08() {
            if (!_0xc4d403) {
                return {
                    platform: "web",
                    func: _0x3b42c2
                };
            } else {
                return {
                    platform: "mobile",
                    func: _0x2cb449
                };
            }
        }

        function _0x16e101() {
            if (!_0xc4d403) {
                return _0x264ad9;
            } else {
                return _0x23f036;
            }
        }
        async function _0x3c7fcb() {
            const _0x8dd457 = _0x16e101();
            try {
                return _0x8dd457();
            } catch (_0xcef10a) {
                console.error("Error with facebook logout:", _0xcef10a.message);
            }
        }
        async function _0x23f036() {}
        async function _0x264ad9() {
            return new Promise((_0x37285e, _0xa46feb) => {
                window.FB.logout(function(_0x11e144) {
                    return _0x37285e(true);
                });
            });
        }
        let _0x96a3d4 = false;
        const _0x5c3612 = () => typeof AppleID === "object" && AppleID.hasOwnProperty("auth");
        if (!_0x4a58bd) {
            $.loadScript("https://appleid.cdn-apple.com/appleauth/static/jsapi/appleid/1/en_US/appleid.auth.js", function() {
                if (_0x5c3612()) {
                    let _0x3af9be = window.location.origin;
                    AppleID.auth.init({
                        clientId: $config.authentication.apple,
                        scope: "name email",
                        redirectURI: _0x3af9be,
                        usePopup: true,
                        state: _0x3e7d1d(7)
                    });
                    _0x96a3d4 = true;
                }
            });
        }
        async function _0x1a5a84(_0x4c34cf, _0x4892ac, _0x31b73f) {
            const _0x700dc2 = _0x31b73f ? {
                name: _0x31b73f
            } : null;
            const _0x15a920 = await _0x2b62e5(_0x4c34cf, _0x4892ac, "apple", _0x700dc2);
            if (!_0x15a920) {
                await _0x2bfe03()();
            }
        }
        async function _0x35ab9b() {
            const _0x25ff35 = _0x248016();
            try {
                const _0x4ffcc3 = await _0x25ff35.func();
                await _0x1a5a84(_0x4ffcc3, _0x25ff35.platform);
            } catch (_0x1b16f1) {
                console.error("Error with apple login:", _0x1b16f1.message);
            }
        }
        async function _0x24b5e8() {}

        function _0x248016() {
            if (!_0xc4d403) {
                console.log("resolve web apple login");
                return {
                    platform: "web",
                    func: _0x3418ea
                };
            } else {
                console.log("resolve mobile apple login");
                return {
                    platform: "mobile",
                    func: _0x3418ea
                };
            }
        }

        function _0x2bfe03() {
            if (!_0xc4d403 || _0x4a58bd) {
                return _0xdfe6c4;
            } else {
                return _0xdfe6c4;
            }
        }
        async function _0x3418ea() {
            try {
                if (!_0x96a3d4) {
                    throw new Error("Failed to initialize apple auth library.");
                }
                const _0x13e2c9 = await AppleID.auth.signIn();
                if (_0x13e2c9 && _0x13e2c9.authorization && _0x13e2c9.authorization.id_token) {
                    console.log("data authorization was:", _0x13e2c9.authorization);
                    return _0x13e2c9.authorization.id_token;
                } else {
                    throw new Error("Failed to get id token from apple.");
                }
            } catch (_0x288515) {
                console.error("error signing in ", _0x288515);
                throw _0x288515;
            }
        }
        async function _0xdfe6c4() {
            try {
                var _0x49e4f3 = gapi.auth2.getAuthInstance();
                return _0x49e4f3.signOut();
            } catch (_0x54fe16) {
                console.error("Error with web apple logout:", _0x54fe16);
            }
        }
        async function _0x389538() {}
        async function _0x2861c1() {
            _0x3b1d71();
        }
        let _0x4b22df = null;

        function _0x3b1d71() {
            const _0x41a205 = "scrollbars=no,resizable=no,status=no,location=no,toolbar=no,menubar=no,\nwidth=700,height=800,left=50%,top=50%";
            _0x4b22df = _0x3e7d1d(10);
            const _0x23bce0 = window.location.origin + "/discord_login.html";
            const _0x3cd047 = "https://discord.com/oauth2/authorize?response_type=token&client_id=" + $config.authentication.discord + "&state=" + _0x4b22df + "&scope=identify+email&redirect_uri=" + _0x23bce0;
            const _0x4dd5bf = window.open(_0x3cd047, "Discord Auth", _0x41a205);
            const _0x4f6e80 = setInterval(() => {
                _0x4dd5bf.postMessage("MOPE_GET_DISCORD", window.location.origin);
            }, 500);
            const _0x51220d = async _0x430c19 => {
                if (_0x430c19.data.response) {
                    clearInterval(_0x4f6e80);
                    _0x4dd5bf.close();
                    if (_0x430c19.data.response == "MOPE_GET_DISCORD") {
                        console.log(_0x430c19.data);
                        if (_0x430c19.data.state != _0x4b22df) {
                            _0x5338aa("ACCOUNTS: Error while trying to login using discord: DISCORD_2", "error", 10000);
                            return;
                        }
                        const _0x53a19e = await _0x2b62e5(_0x430c19.data.code, "web", "discord");
                    } else {
                        _0x5338aa("ACCOUNTS: Error while trying to login using discord: DISCORD_1", "error", 10000);
                    }
                    window.removeEventListener("message", _0x51220d);
                }
            };
            window.addEventListener("message", _0x51220d);
        }
        var _0x19a416 = null;
        var _0x4d0704 = +new Date();
        let _0x4386b9 = [];
        let _0x5d3cc4 = null;
        let _0x38850a = $config.env == "development" || $config.env == "staging";

        function _0x337120(_0x1ad227, _0x5b6826) {
            var _0x461164 = location.protocol == "https:" ? "https:" : "http:";
            var _0x10d1c6 = location.host;
            var _0x230a55 = _0x461164 + "//" + _0x10d1c6;
            $.ajax({
                url: _0x1773aa + "/xsolla/getToken",
                type: "POST",
                data: JSON.stringify({
                    userId: _0x4f90e1,
                    token: _0x28cec6,
                    itemId: _0x1ad227,
                    settings_ui_version: _0xe56166 ? "mobile" : "desktop",
                    return_url: _0x230a55
                }),
                headers: {
                    "Content-Type": "application/json;charset=UTF-8"
                },
                success: function(_0x25168a) {
                    var _0x370abd = _0x25168a;
                    _0x5b6826(_0x370abd.success ? _0x370abd.token : null);
                },
                error: function(_0x2f2db0, _0x29518f, _0x37d8c7) {
                    var _0x57b20e = JSON.parse(_0x2f2db0.responseText);
                    console.log("Error getting token: " + _0x37d8c7);
                    _0x5338aa(_0x57b20e.reason, "error", 10);
                    _0x5b6826(false, null);
                }
            });
        }

        function _0xef105e() {
            var _0x2d4940 = location.protocol == "https:" ? "https:" : "http:";
            var _0x2745c8 = location.host;
            var _0x1259e3 = _0x2d4940 + "//" + _0x2745c8;
            $.ajax({
                url: _0x1773aa + "/xsolla/cancelSubscription",
                type: "POST",
                data: JSON.stringify({
                    userId: _0x4f90e1,
                    token: _0x28cec6
                }),
                headers: {
                    "Content-Type": "application/json;charset=UTF-8"
                },
                success: function(_0xd598e8) {},
                error: function(_0xf2c318, _0x5bd864, _0x148548) {}
            });
        }

        function _0x2d2ff6(_0x33b43b) {
            $.ajax({
                url: _0x1773aa + "/xsolla/getPackets",
                type: "GET",
                success: function(_0x4b86f1) {
                    var _0x6c296 = _0x4b86f1;
                    _0x33b43b(_0x6c296.success ? _0x6c296.data : null);
                },
                error: function(_0x8f6f69, _0x1f183d, _0xbfe827) {
                    var _0x183d73 = JSON.parse(_0x8f6f69.responseText);
                    console.log("Error getting token: " + _0xbfe827);
                    _0x5338aa(_0x183d73.error, "error", 10);
                    _0x33b43b(false, null);
                }
            });
        }

        function _0xd692d4(_0x4d1eeb) {
            $.ajax({
                url: _0x1773aa + "/xsolla/getVip",
                type: "GET",
                success: function(_0x2c2159) {
                    var _0x42c853 = _0x2c2159;
                    _0x4d1eeb(_0x42c853);
                },
                error: function(_0x26bbf9, _0xc150f8, _0x804fe8) {
                    var _0x107f51 = JSON.parse(_0x26bbf9.responseText);
                    console.log("Error getting token: " + _0x804fe8);
                    _0x5338aa(_0x107f51.error, "error", 10);
                    _0x4d1eeb(false, null);
                }
            });
        }
        document.getElementById("xsollaStoreCloseButton").onclick = function() {
            _0x4359cd();
        };

        function _0x4359cd() {
            _0x2460e9 = false;
            var _0x459339 = document.getElementById("xsollaStoreFrameWrapper");
            _0x459339.style.display = "none";
            var _0x272dee = document.getElementById("xsollaStoreInnerDiv");
            while (_0x272dee.firstChild) {
                _0x272dee.removeChild(_0x272dee.firstChild);
            }
        }
        var _0x2460e9 = false;

        function _0x1d2289() {
            if (_0xc4d403) {
                alert("Please open mope.io in your browser to buy coins (can't buy them in the app yet!)");
                return;
            }
            if (_0x2460e9) {
                _0x4359cd();
            }
            _0x2460e9 = true;
            var _0x412c9a = document.getElementById("xsollaStoreInnerDiv");
            _0x412c9a.style.display = "none";
            while (_0x412c9a.firstChild) {
                _0x412c9a.removeChild(_0x412c9a.firstChild);
            }
            const _0x4fcf34 = document.querySelector(".xsollaStoreItems");
            while (_0x4fcf34.lastChild) {
                _0x4fcf34.removeChild(_0x4fcf34.lastChild);
            }
            var _0xa2379a = document.getElementById("xsollaStoreFrameWrapper");
            _0xa2379a.style.display = "block";
            var _0x53c5a3 = document.getElementById("loadingAnim_xsolla");
            _0x53c5a3.style.display = "block";
            _0x2d2ff6(_0x5533c4 => {
                if (!_0x5533c4) {
                    _0x4359cd();
                    return;
                }
                _0x53c5a3.style.display = "none";
                _0x4fcf34.style.display = "grid";
                for (let _0x121445 = 0; _0x121445 < _0x5533c4.length; _0x121445++) {
                    const _0xea35a1 = _0x5533c4[_0x121445];
                    const _0x4e1019 = document.createElement("div");
                    const _0x5cfafb = document.createElement("div");
                    const _0x22be20 = document.createElement("img");
                    const _0x1a7f1c = document.createElement("div");
                    const _0x282d62 = document.createElement("div");
                    _0x4e1019.className = "xsollaStoreItem";
                    _0x5cfafb.className = "xsollaStoreItemImageOuter";
                    _0x22be20.className = "xsollaStoreItemImageInner";
                    _0x1a7f1c.className = "xsollaStoreItemTitle";
                    _0x282d62.className = "xsollaStoreItemBuy";
                    _0x4e1019.append(_0x5cfafb, _0x1a7f1c, _0x282d62);
                    _0x5cfafb.append(_0x22be20);
                    _0x4e1019.title = _0xea35a1.description;
                    _0x1a7f1c.innerText = _0xea35a1.name + " - " + _0xea35a1.amount;
                    _0x22be20.src = _0xea35a1.image;
                    _0x282d62.innerText = "Buy for " + _0xea35a1.price.replace(".", ",") + "$";
                    _0x282d62.onclick = () => {
                        _0x528677(_0xea35a1.id);
                    };
                    _0x4fcf34.appendChild(_0x4e1019);
                }
            });
        }

        function _0x528677(_0x2364b9) {
            const _0x198e1d = document.querySelector(".xsollaStoreItems");
            while (_0x198e1d.lastChild) {
                _0x198e1d.removeChild(_0x198e1d.lastChild);
            }
            _0x198e1d.style.display = "none";
            var _0x5d5b20 = document.getElementById("loadingAnim_xsolla");
            _0x5d5b20.style.display = "block";
            var _0x29f471 = document.getElementById("xsollaStoreInnerDiv");
            _0x29f471.style.display = "block";
            _0x337120(_0x2364b9, function(_0x539578) {
                if (_0x539578) {
                    console.log("Got xsolla token " + _0x539578);
                    var _0x36578f = document.getElementById("loadingAnim_xsolla");
                    _0x36578f.style.display = "none";
                    var _0x30968f;
                    if (_0x38850a) {
                        _0x30968f = "https://sandbox-secure.xsolla.com/paystation4/?token=" + _0x539578;
                    } else {
                        _0x30968f = "https://secure.xsolla.com/paystation4/?token=" + _0x539578;
                    }
                    var _0x229abd = document.createElement("iframe");
                    _0x229abd.setAttribute("src", _0x30968f);
                    _0x229abd.setAttribute("id", "paystationIframe");
                    _0x229abd.setAttribute("allow", "clipboard-read; clipboard-write; payment");
                    document.getElementById("shop").appendChild(_0x229abd);
                    window.addEventListener("message", function(_0x2a40c9) {
                        try {
                            const _0x3f2257 = JSON.parse(_0x2a40c9.data);
                            if (_0x3f2257.command === "close-widget" || _0x3f2257.command === "status-done" || _0x3f2257.command === "status-troubled") {
                                const _0x58e926 = document.getElementById("paystationIframe");
                                if (_0x58e926) {
                                    _0x58e926.remove();
                                }
                                _0x198e1d.style.display = "block";
                            }
                        } catch (_0x41e4ba) {
                            console.log("Error processing message:", _0x41e4ba);
                        }
                    });
                }
            });
        }

        function _0x359291(_0x591198) {
            var _0x1a766f = {
                access_token: "abcdef1234567890abcdef1234567890"
            };
            var _0x558371 = document.createElement("script");
            _0x558371.type = "text/javascript";
            _0x558371.async = true;
            _0x558371.src = "//static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
            _0x558371.addEventListener("load", function(_0x2b7b4b) {
                XPayStationWidget.init(_0x1a766f);
            }, false);
            var _0x281277 = document.getElementsByTagName("head")[0];
            _0x281277.appendChild(_0x558371);
        }
        _0x2d2ff6(_0xfc429b => {
            if (_0xfc429b) {
                _0x4386b9 = _0xfc429b;
            }
        });
        _0xd692d4(_0x3a192d => {
            if (_0x3a192d) {
                _0x5d3cc4 = _0x3a192d;
            }
        });
        if (typeof _0x5981a2 === "undefined" || _0x5981a2 === null || _0x5981a2 === undefined) {
            window.options_graphicsLevel = 3;
        }
        _0x2e2c77(_0x5981a2);

        function _0x2e2c77(_0x115c04) {
            var _0x672915 = _0x115c04 == _0x5981a2;
            _0x5981a2 = _0x115c04;
            if (window.localStorage) {
                try {
                    window.localStorage.setItem("options_graphicsLevel", _0x5981a2);
                } catch (_0x522433) {}
            }
            for (var _0x5163f5 = 1; _0x5163f5 <= 3; _0x5163f5++) {
                var _0x15dc9f;
                switch (_0x5163f5) {
                    case _0x4051d6:
                        _0x15dc9f = document.getElementById("graphicsBut_low");
                        break;
                    case _0x1ef095:
                        _0x15dc9f = document.getElementById("graphicsBut_med");
                        break;
                    case _0x145cc3:
                        _0x15dc9f = document.getElementById("graphicsBut_hd");
                        break;
                }
                if (_0x15dc9f) {
                    if (_0x5163f5 == _0x115c04) {
                        _0x15dc9f.disabled = true;
                        _0x15dc9f.style.opacity = 0.5;
                    } else {
                        _0x15dc9f.disabled = false;
                        _0x15dc9f.style.opacity = 1;
                    }
                }
                if (_0x672915) {
                    _0x21e4e3 = true;
                }
            }
        }
        let _0x197e65 = 0;
        let _0x508706 = null;
        let _0x4b0b59 = 0;

        function _0x5aab08(_0x1e80b1) {
            _0x197e65 += 1;
            if (_0x1e80b1 - _0x508706 > 1000) {
                _0x508706 = _0x1e80b1;
                _0x4b0b59 = _0x197e65;
                _0x197e65 = 0;
            }
        }

        function _0xa9908e(_0x16bc8d) {
            _0x1c1224.setText("FPS: " + _0x4b0b59 + " | PING: " + _0x306829 + "ms (" + Math.ceil(_0x306829 / (1000 / _0x3bd0c1)) + " ticks) | TPS: " + _0x3bd0c1);
            var _0x25d668 = document.getElementById("graphics_fps");
            if (_0x25d668 && !_0x4c02d5) {
                if (_0x16bc8d > 58) {
                    _0x25d668.innerHTML = " FPS " + _0x16bc8d + " (perfect)";
                } else if (_0x16bc8d > 40) {
                    _0x25d668.innerHTML = " FPS " + _0x16bc8d + " (okay)";
                } else if (_0x16bc8d > 29) {
                    _0x25d668.innerHTML = " FPS " + _0x16bc8d + " (playable- close other tabs/ lower graphics)";
                } else {
                    _0x25d668.innerHTML = " FPS " + _0x16bc8d + " (low- close other tabs/ lower graphics)";
                }
            }
        }
        setInterval(function() {
            _0xa9908e(_0x4b0b59);
        }, _0x1edcbb);
        const _0x4cec5f = performance.now();
        let _0x415288 = window.innerWidth - 150;
        let _0x528ec1 = window.innerHeight - 150;

        function _0x43643e(_0x19e436, _0x25be5c, _0x3cbedd) {
            this.animStep = 1;
            this.animStartT = _0x4ec996;
            this.animDur = 3000;
            this.timedOut = false;
            this.xShift = _0x5be054(-10, 10);
            this.yShift = _0x5be054(-10, 10);
            this.anlgeShift = _0x5be054(-10, 10);
            this.text = new _0x123582(16, "white");
            this.text.setText((_0x19e436 >= 0 ? "+ " : "") + _0x59e29b(_0x19e436) + _0x25be5c);
            this.textFontSz = 30;
            var _0x40ef82 = "white";
            if (_0x19e436 > 10000) {
                _0x40ef82 = "#c7b753";
                this.textFontSz = 40;
                this.animDur += 1000;
            }
            if (_0x19e436 > 100000) {
                _0x40ef82 = "#fdca5b";
                this.textFontSz = 45;
                this.animDur += 2000;
            }
            if (_0x19e436 > 1000000) {
                _0x40ef82 = "#c7b753";
                this.textFontSz = 51;
                this.animDur += 2000;
            }
            if (_0x19e436 < 0) {
                _0x40ef82 = "#c65f59";
                this.animDur += 2000;
            }
            _0x40ef82 = _0x3cbedd === undefined ? _0x40ef82 : _0x3cbedd;
            this.text.setColor(_0x40ef82);
            this.draw = function() {
                var _0xd5dfa3 = _0x2944ee((_0x4ec996 - this.animStartT) / this.animDur, 0, 1);
                _0x39e82d.save();
                var _0x191bf2 = window.innerWidth * window.devicePixelRatio * 0.5;
                var _0x3a9945 = _0x1519a6 - _0x53a3ae * 85 + _0xd5dfa3 * (_0x53a3ae * -150);
                _0x39e82d.translate(_0x191bf2, _0x3a9945);
                _0x39e82d.rotate(_0x4bfce6(this.anlgeShift * _0xd5dfa3));
                _0x39e82d.globalAlpha = 1 - _0xd5dfa3;
                this.text.setFontSize(this.textFontSz * _0x53a3ae);
                this.text.x = 0;
                this.text.y = 0;
                this.text.draw();
                _0x39e82d.restore();
                if (_0x4ec996 >= this.animStartT + this.animDur) {
                    this.timedOut = true;
                }
            };
        }

        function _0x15cab0(_0x5c8298, _0x2d9abb, _0x2af534, _0x246aac) {
            this.animStep = 1;
            this.animStartT = _0x4ec996;
            this.timedOut = false;
            this.xShift = _0x5be054(-10, 10);
            this.yShift = _0x5be054(-10, 10);
            this.anlgeShift = _0x5be054(-10, 10);
            this.text = new _0x123582(_0x2d9abb, _0x2af534);
            this.text.setText(_0x5c8298);
            this.textFontSz = _0x2d9abb;
            this.animDur = _0x246aac;
            this.text.setColor(_0x2af534);
            this.draw = function() {
                if (_0x15754e) {
                    return;
                }
                var _0x1b564f = _0x2944ee((_0x4ec996 - this.animStartT) / this.animDur, 0, 1);
                _0x39e82d.save();
                var _0x560c59 = _0x19e9b5 / 2;
                var _0x244018 = _0x1519a6 - _0x53a3ae * 85 + _0x1b564f * (_0x53a3ae * -150);
                _0x39e82d.translate(_0x560c59, _0x244018);
                _0x39e82d.globalAlpha = 1 - _0x1b564f;
                this.text.setFontSize(this.textFontSz * _0x53a3ae);
                this.text.x = 0;
                this.text.y = 0;
                this.text.draw();
                _0x39e82d.restore();
                if (_0x4ec996 >= this.animStartT + this.animDur) {
                    this.timedOut = true;
                }
            };
        }
        var _0x59e474 = 200;

        function _0x5eccd7() {
            var _0xf90793 = _0x4731e1 && _0xbdc553 < 500 ? 1.4 : 1;
            _0x3b96a3.w = _0x3b96a3.h = _0x59e474 * _0x53a3ae * _0xf90793;
            _0x1a5885.w = _0x1a5885.h = _0x59e474 * _0x53a3ae * _0xf90793;
            _0x46b369.w = _0x46b369.h = _0x59e474 * _0x53a3ae * _0xf90793;
            _0x529979.w = _0x149ef1 * 60 * _0xf90793;
            _0x529979.h = _0x149ef1 * 30 * _0xf90793;
            const _0x10cca5 = 50;
            _0x3b96a3.x = _0x149ef1 * 25 * _0xf90793 + _0x3b96a3.w / 2;
            _0x3b96a3.y = _0x1519a6 - (_0x149ef1 * 40 + _0x3b96a3.w / 2);
            if (_0x338ed5) {
                _0x3b96a3.x = _0x19e9b5 - _0x3b96a3.x;
            }
            _0x1a5885.x = _0x3b96a3.x;
            if (!_0x4731e1) {
                _0x1a5885.y = _0x3b96a3.y;
            } else {
                _0x1a5885.y = _0x3b96a3.y - (_0x149ef1 * 10 * _0xf90793 + _0x1a5885.w / 2 + _0x3b96a3.w / 2);
            }
            _0x46b369.x = _0x3b96a3.x;
            _0x46b369.y = _0x1a5885.y - (_0x149ef1 * 10 * _0xf90793 + _0x46b369.w / 2 + _0x1a5885.w / 2);
            _0x529979.x = Math.min(_0x19e9b5 / 2 + _0x149ef1 * 250 * _0xf90793, _0x19e9b5 * 0.8) - 150;
            _0x529979.y = _0x149ef1 * 15 + _0x529979.h / 2;
            _0x4d9d9c.setPosAndSize(_0x529979.x - (_0x529979.w / 2 + _0x149ef1 * 10 * _0xf90793), _0x529979.y, _0x149ef1 * 60 * _0xf90793, _0x149ef1 * 30 * _0xf90793, 1, 0.5);
            for (var _0x3fe924 = 0; _0x3fe924 < _0x68a93b.length; _0x3fe924++) {
                var _0x395182 = _0x68a93b[_0x3fe924];
                _0x395182.visible = _0x4731e1;
            }
            _0x1a5885.visible = true;
            _0x46b369.visible = true;
            _0x4d9d9c.visible = _0x4d9d9c.touchEnabled = _0x4731e1;
        }
        _0x7605c6.addEventListener("gesturestart", function(_0x3f6f4e) {
            _0x3f6f4e.preventDefault();
        });

        function _0x41f27e() {
            for (var _0x2fcc24 = 0; _0x2fcc24 < _0x68a93b.length; _0x2fcc24++) {
                var _0x2b010c = _0x68a93b[_0x2fcc24];
                _0x2b010c.pressed = false;
                _0x2b010c.pressedTouchID = -1;
            }
            _0x225fa1 = false;
        }
        _0x7605c6.ontouchstart = function(_0x3d8415) {
            _0x347987();
            var _0x2fde40 = _0x3d8415.touches;
            if (_0x2fde40.length == 1) {
                _0x41f27e();
            }
            if (!_0x4c02d5) {
                return;
            }
            for (var _0x373ea3 = 0; _0x373ea3 < _0x3d8415.changedTouches.length; _0x373ea3++) {
                var _0x16ebe4 = _0x3d8415.changedTouches[_0x373ea3];
                for (var _0x41e02a = 0; _0x41e02a < _0x68a93b.length; _0x41e02a++) {
                    var _0x2debc0 = _0x68a93b[_0x41e02a];
                    var _0xbfa04e = _0x2debc0.testPosHitsButton(_0x16ebe4.clientX * _0x149ef1, _0x16ebe4.clientY * _0x149ef1);
                    if (_0xbfa04e && !_0x2debc0.pressed && _0x2debc0.touchEnabled) {
                        _0x3d8415.preventDefault();
                        _0x2debc0.pressed = true;
                        _0x2debc0.pressedTouchID = _0x16ebe4.identifier;
                        _0x2debc0.onButtonTouchStart();
                        return;
                    }
                }
            }
            if (!_0x18ca32) {
                if (!_0x225fa1) {
                    var _0x16ebe4 = _0x3d8415.changedTouches[0];
                    _0x225fa1 = true;
                    _0xa1f035 = _0x16ebe4.clientX * _0x149ef1;
                    _0x391fb3 = _0x16ebe4.clientY * _0x149ef1;
                    _0x22d054 = _0xa1f035;
                    _0x17eadb = _0x391fb3;
                    _0x732625 = _0x16ebe4.identifier;
                    return;
                }
            }
            _0x1cde21 = _0x3d8415.touches[0].clientX * _0x149ef1;
            _0x2be4ab = _0x3d8415.touches[0].clientY * _0x149ef1;
            _0x453694();
        };
        var _0x23731b = 0;
        var _0x14c17d = 0;
        var _0x3f1fb5 = 0;
        var _0x2d414e = 1;
        _0x7605c6.ontouchmove = function(_0x5b7f3a) {
            _0x347987();
            _0x5b7f3a.preventDefault();
            for (var _0x4f2c0f = 0; _0x4f2c0f < _0x5b7f3a.changedTouches.length; _0x4f2c0f++) {
                var _0x2294bd = _0x5b7f3a.changedTouches[_0x4f2c0f];
                if (_0x2294bd.identifier == _0x1a5885.pressedTouchID) {
                    if (_0x3b96a3.pressedTouchID == -1) {
                        var _0x54ec81 = _0x3b96a3.testPosHitsButton(_0x2294bd.clientX * _0x149ef1, _0x2294bd.clientY * _0x149ef1);
                        var _0x5c5886 = _0x3b96a3.pressed;
                        _0x3b96a3.pressed = _0x54ec81;
                        if (_0x54ec81 && !_0x5c5886) {
                            _0x1e1591(_0x334929, true);
                        } else if (!_0x54ec81 && _0x5c5886) {
                            _0x1e1591(_0x334929, false);
                        }
                    }
                    continue;
                }
                if (!_0x18ca32) {
                    if (_0x225fa1 && _0x2294bd.identifier == _0x732625) {
                        var _0x2911d2 = _0x2294bd.clientX * _0x149ef1 - _0xa1f035;
                        var _0x1f31ae = _0x2294bd.clientY * _0x149ef1 - _0x391fb3;
                        var _0x26908a = Math.sqrt(_0x2911d2 * _0x2911d2 + _0x1f31ae * _0x1f31ae);
                        if (_0x26908a > 0) {
                            var _0x578db1 = _0x2911d2 / _0x26908a;
                            var _0x30603c = _0x1f31ae / _0x26908a;
                            var _0x3b1481 = Math.min(1, _0x26908a / (_0x219190 * _0x149ef1));
                            if (_0x3b1481 < 0.35) {
                                _0x3b1481 = 0;
                            }
                            var _0x49c3f8 = Math.pow(_0x3b1481, 2);
                            var _0x3c33cb = _0x149ef1 * 300 * _0x49c3f8;
                            var _0x5e2eff = Math.atan2(_0x30603c, _0x578db1);
                            _0x254758 = _0x4dae5a(_0x589fc8, _0x5e2eff);
                            _0xeeaddb = _0x3b1481;
                            _0x22d054 = _0xa1f035 + _0x219190 * _0x149ef1 * _0x578db1 * _0x3b1481;
                            _0x17eadb = _0x391fb3 + _0x219190 * _0x149ef1 * _0x30603c * _0x3b1481;
                            _0x1cde21 = _0x19e9b5 / 2 + _0x578db1 * _0x3c33cb;
                            _0x2be4ab = _0x1519a6 / 2 + _0x30603c * _0x3c33cb;
                            _0x453694();
                        }
                    }
                } else {
                    _0x1cde21 = _0x2294bd.clientX * _0x149ef1;
                    _0x2be4ab = _0x2294bd.clientY * _0x149ef1;
                    _0x453694();
                }
            }
        };
        _0x7605c6.ontouchend = function(_0x520eca) {
            for (var _0x377368 = 0; _0x377368 < _0x520eca.changedTouches.length; _0x377368++) {
                var _0x5f4cda = _0x520eca.changedTouches[_0x377368];
                if (_0x225fa1 && _0x5f4cda.identifier == _0x732625) {
                    _0x225fa1 = false;
                    _0x732625 = -1;
                    continue;
                }
                for (var _0x5d2c3b = 0; _0x5d2c3b < _0x68a93b.length; _0x5d2c3b++) {
                    var _0x473512 = _0x68a93b[_0x5d2c3b];
                    if (_0x473512.pressed && _0x473512.pressedTouchID == _0x5f4cda.identifier && _0x473512.touchEnabled) {
                        _0x473512.pressed = false;
                        _0x473512.pressedTouchID = -1;
                        if (_0x4c02d5) {
                            _0x473512.onButtonTouchEnd();
                        }
                        return;
                    }
                }
            }
        };
        _0x7605c6.ontouchcancel = function(_0x2b3b36) {
            console.log("touch cancel");
            _0x7605c6.ontouchend(_0x2b3b36);
        };
        _0x7605c6.ontouchleave = function(_0x263b48) {
            console.log("touch leave");
        };
        GameObj.prototype = {
            id: 0,
            drawMe: true,
            oType: _0x31dc89,
            spawnTime: 0,
            rPer: 0,
            updateTime: 0,
            x: 0,
            y: 0,
            ox: 0,
            oy: 0,
            nx: 0,
            ny: 0,
            rad: 0,
            oRad: 0,
            nRad: 0,
            angle: 0,
            oAngle: 0,
            angleDelta: 0,
            moveUpdF: 0,
            z: 0,
            name: "",
            dead: false,
            type: 0,
            curBiome: 0,
            isRectangle: false,
            rectW: 0,
            rectH: 0,
            specType: 0,
            spawnedByID: 0,
            toString: function() {
                return "[GObj t=" + this.oType + " id=" + this.id + "]";
            }
        };
        GameObj.prototype.flag_hurt = false;
        GameObj.prototype.hpPer = GameObj.prototype.hpPer_n = GameObj.prototype.hpBarA = 0;
        GameObj.prototype.infectionPer = GameObj.prototype.infectionPer_n = GameObj.prototype.infectionBarA = 0;
        GameObj.prototype.curePer = GameObj.prototype.curePer_n = GameObj.prototype.cureBarA = 0;
        GameObj.prototype.hpBarTimeoutT = 0;
        GameObj.prototype.alwaysPlainOutline = false;
        GameObj.prototype.doesDrawEffectScale = false;
        GameObj.prototype.drawEffectScale_Slow = false;
        GameObj.prototype.customInterfaceDraw = false;
        GameObj.prototype.animateRadOnSpawn = true;
        GameObj.prototype.canRotate = function() {
            switch (this.oType) {
                case _0x165dc5:
                case _0x3efa75:
                case _0x510730:
                    return false;
            }
            return true;
        };
        GameObj.prototype.getObjSpecies = function() {
            switch (this.oType) {
                case _0x440978:
                    return "/" + this.speciesType;
            }
            return "";
        };
        GameObj.prototype.customDraw2 = function(_0x4d0d00) {
            switch (this.oType) {
                case _0x162398:
                case _0x3da3e9:
                case _0x2e9b97:
                case _0x1255f5:
                case _0x31dc89:
                case _0x3edcca:
                case _0x260340:
                case _0x165dc5:
                case _0x76f666:
                case _0x52e535:
                case _0x132c33:
                case _0x5aa79b:
                case _0x3efa75:
                case _0x5854cd:
                case _0x88c3ca:
                case _0x463a00:
                case _0x38a462:
                case _0xf30c2f:
                case _0x7e4e1a:
                case _0xfc2e38:
                case _0x17e94b:
                case _0x5046bf:
                case _0x510730:
                case _0x31e467:
                case _0x3e2946:
                case _0xddc401:
                case _0x590a46:
                case _0x1c9b47:
                case _0x4b2c05:
                case _0x169f9e:
                case _0x5003b0:
                case _0x476229:
                case _0x146088:
                case _0x320d56:
                case _0x40152e:
                case _0x440978:
                case _0x40e3c5:
                case _0x30566f:
                case _0x252e1c:
                case _0x4b7c77:
                case _0x1e888e:
                case _0xa48e9e:
                case _0x2d0301:
                    this.doesDrawEffectScale = false;
                    this.drawEffectScale_Slow = false;
                    {
                        var _0x4e1b5f = this.getSkinImageObj(this.objSkinPath);
                        _0x39e82d.save();
                        _0x39e82d.globalAlpha = this.getObjAlpha();
                        if (_0x4e1b5f) {
                            var _0x25fa6f = this.getRad();
                            if (this.canRotate()) {
                                _0x39e82d.rotate(this.rPer * Math.PI * 2);
                            }
                            _0x39e82d.drawImage(_0x4e1b5f, -_0x25fa6f, -_0x25fa6f, _0x25fa6f * 2, _0x25fa6f * 2);
                        } else {
                            this.drawOutlinedCircle("(make this obj invisible on server?) " + this.oType, "black");
                        }
                        _0x39e82d.restore();
                    }
                    break;
            }
        };
        GameObj.prototype.getRad = function() {
            switch (this.oType) {
                case _0x40e3c5:
                case _0x165724:
                    return this.rad * 1.5;
                case _0x165dc5:
                    return this.rad * 1.2;
                case _0x252e1c:
                case _0x4b7c77:
                    var _0x2be838 = _0xb3e9be[_0x166276];
                    if (_0x2be838 && _0x2be838.lastHidingHoleID == this.id) {
                        if (this.alpha == undefined) {
                            this.alpha = 0;
                        }
                        if (_0x2be838.flag_inHidingHole) {
                            this.alpha += (0.1 + this.alpha) * 0.1;
                        } else {
                            this.alpha -= this.alpha * 0.1;
                        }
                        if (this.alpha > 1) {
                            this.alpha = 1;
                        } else if (this.alpha < 0) {
                            this.alpha = 0;
                        }
                        _0x39e82d.globalAlpha = this.alpha;
                        return this.rad;
                    } else {
                        return this.innerRad;
                    }
            }
            return this.rad;
        };
        GameObj.prototype.getObjAlpha = function() {
            switch (this.oType) {
                case _0x440978:
                    return 0.9;
            }
            return 1;
        };
        GameObj.prototype.objSkinPath = null;
        GameObj.prototype.getBiomeSkin = function(_0x4f41f0) {
            switch (this.oType) {
                case _0xa48e9e:
                    _0x4f41f0 = (this.isEdibleOutlined() ? "e" : this.oType) + "_" + this.specType;
                    break;
                case _0x440978:
                case _0x162398:
                case _0x3da3e9:
                case _0x2e9b97:
                case _0x40e3c5:
                case _0x2d0301:
                    _0x4f41f0 = this.isEdibleOutlined() ? "e" : this.curBiome;
                    break;
                case _0x260340:
                case _0x3edcca:
                case _0x165dc5:
                    _0x4f41f0 = this.isEdibleOutlined() ? "e" : this.oType;
                    if (this.curBiome == _0x16f106) {
                        _0x4f41f0 += "_2";
                    }
                    break;
                case _0x1255f5:
                    _0x4f41f0 = this.isEdibleOutlined() ? "e" : this.curBiome;
                    if (this.curBiome == _0x16f106) {
                        _0x4f41f0 += "_2";
                    }
                    break;
                case _0x4b2c05:
                    _0x4f41f0 += "_" + this.curBiome;
                    break;
                case _0x252e1c:
                case _0x4b7c77:
                    if (this.curBiome != _0x47e33a) {
                        _0x4f41f0 = this.curBiome;
                    }
                    break;
            }
            return _0x4f41f0;
        };
        GameObj.prototype.shouldHide = function() {
            if (_0x1d523b) {
                const _0x275e1a = _0xb3e9be[_0x17f2cd];
                if (_0x275e1a != null) {
                    if (_0x5928ec || _0x2d4dde(_0x275e1a, this)) {
                        return true;
                    }
                }
            }
            return false;
        };
        GameObj.prototype.customDraw = function(_0x593614) {
            switch (this.oType) {
                case _0x30566f:
                    this.customDraw2(_0x593614);
                    break;
                case _0x162398: {
                    switch (this.curBiome) {
                        case _0x36f07b:
                            if (_0x593614) {
                                _0x466d9b(0, 0, this.rad, _0x6316d4);
                            } else {
                                _0x466d9b(0, 0, this.rad - 1.5, _0x4cdea1);
                            }
                            break;
                        case _0x5d8525:
                            if (_0x593614) {
                                _0x466d9b(0, 0, this.rad, this.getOutlineColor());
                            } else {
                                _0x466d9b(0, 0, this.rad - 1.5, _0x335e4d);
                            }
                            break;
                        case _0x16f106:
                            if (_0x593614) {
                                _0x466d9b(0, 0, this.rad, "white");
                            } else {
                                _0x466d9b(0, 0, this.rad - 1.5, _0x4abdc8);
                            }
                            break;
                        case _0x1ddf2f:
                        default:
                            if (_0x593614) {
                                _0x466d9b(0, 0, this.rad, _0x504cbf);
                            } else {
                                _0x466d9b(0, 0, this.rad - 1.5, _0x38b843);
                            }
                            break;
                    }
                }
                break;
                case _0x40e3c5: {
                    _0x39e82d.save();
                    var _0x3e8ffb = 0;
                    if (!_0x1d523b && _0x5981a2 != _0x4051d6 && !RVJsettings.performance) {
                        var _0x5e7fb0 = (_0x4ec996 - this.spawnTime) / 1000;
                        var _0x268152 = 2;
                        var _0x2dd79a = 1.5;
                        _0x3e8ffb = _0x2dd79a * Math.sin(Math.PI * 2 / _0x268152 * _0x5e7fb0);
                    }
                    var _0x588290 = this.curBiome == _0x5d8525 ? _0x29625c : _0x4695c4;
                    _0x39e82d.fillStyle = _0x588290;
                    var _0x7b27bd = this.rad * 0.8;
                    this.drawOutlinedCircle("", _0x588290);
                    _0x39e82d.globalAlpha *= 0.98;
                    var _0x455c1a = -_0x7b27bd * 0.5;
                    var _0x575706 = -_0x7b27bd * 0.5 + this.rPer * 10;
                    var _0x3270f1 = Math.max(0, _0x7b27bd * 0.65 + _0x3e8ffb) + 2;
                    _0x466d9b(_0x455c1a, _0x575706, _0x3270f1, _0x588290);
                    var _0x455c1a = _0x7b27bd * 0.5;
                    var _0x575706 = -_0x7b27bd * 0.5 - this.rPer * 10;
                    var _0x3270f1 = Math.max(0, _0x7b27bd * 0.73 - _0x3e8ffb);
                    _0x466d9b(_0x455c1a, _0x575706, _0x3270f1, _0x588290);
                    var _0x455c1a = _0x7b27bd * 0.6;
                    var _0x575706 = _0x7b27bd * 0.4;
                    var _0x3270f1 = Math.max(0, _0x7b27bd * 0.78 + _0x3e8ffb);
                    _0x466d9b(_0x455c1a, _0x575706, _0x3270f1, _0x588290);
                    var _0x455c1a = -_0x7b27bd * 0.5;
                    var _0x575706 = _0x7b27bd * 0.5 + this.rPer * 10;
                    var _0x3270f1 = Math.max(0, _0x7b27bd * 0.6 + this.rPer - _0x3e8ffb);
                    _0x466d9b(_0x455c1a, _0x575706, _0x3270f1, _0x588290);
                    _0x39e82d.restore();
                }
                break;
                case _0x2d6c4a: {
                    var _0x352fe6 = this.curBiome == _0x36f07b ? "#9b702b" : "#1AAE31";
                    this.drawOutlinedCircle("", _0x352fe6);
                    _0x39e82d.save();
                    var _0x3e8ffb = 0;
                    if (!_0x1d523b && _0x5981a2 != _0x4051d6 && !RVJsettings.performance) {
                        var _0x5e7fb0 = (_0x4ec996 - this.spawnTime) / 1000;
                        var _0x268152 = 2;
                        var _0x2dd79a = 1.5;
                        _0x3e8ffb = _0x2dd79a * Math.sin(Math.PI * 2 / _0x268152 * _0x5e7fb0);
                    }
                    _0x39e82d.fillStyle = _0x1d968f;
                    var _0x2467a0 = this.rad * 0.75;
                    _0x39e82d.globalAlpha *= 0.8;
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(-_0x2467a0 * 0.5, -_0x2467a0 * 0.5 + this.rPer * 10, Math.max(0, _0x2467a0 * 0.65 + _0x3e8ffb), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(_0x2467a0 * 0.5, -_0x2467a0 * 0.5 - this.rPer * 10, Math.max(0, _0x2467a0 * 0.73 - _0x3e8ffb), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(_0x2467a0 * 0.6, _0x2467a0 * 0.4, Math.max(0, _0x2467a0 * 0.78 + _0x3e8ffb), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(-_0x2467a0 * 0.5, _0x2467a0 * 0.5, Math.max(0, _0x2467a0 * 0.6 + this.rPer - _0x3e8ffb), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.restore();
                }
                break;
                case _0x165724: {
                    _0x39e82d.save();
                    var _0x3e8ffb = 0;
                    if (!_0x1d523b && _0x5981a2 != _0x4051d6 && !RVJsettings.performance) {
                        var _0x5e7fb0 = (_0x4ec996 - this.spawnTime) / 1000;
                        var _0x268152 = 2;
                        var _0x2dd79a = 1.5;
                        _0x3e8ffb = _0x2dd79a * Math.sin(Math.PI * 2 / _0x268152 * _0x5e7fb0);
                    }
                    var _0x7b27bd = this.rad * 0.8;
                    var _0x1876e1 = _0x29625c;
                    this.drawOutlinedCircle("", _0x1876e1);
                    _0x39e82d.globalAlpha *= 0.98;
                    var _0x455c1a = -_0x7b27bd * 0.5;
                    var _0x575706 = -_0x7b27bd * 0.5 + this.rPer * 10;
                    var _0x3270f1 = Math.max(0, _0x7b27bd * 0.65 + _0x3e8ffb) + 2;
                    _0x466d9b(_0x455c1a, _0x575706, _0x3270f1, _0x1876e1);
                    var _0x455c1a = _0x7b27bd * 0.5;
                    var _0x575706 = -_0x7b27bd * 0.5 - this.rPer * 10;
                    var _0x3270f1 = Math.max(0, _0x7b27bd * 0.73 - _0x3e8ffb);
                    _0x466d9b(_0x455c1a, _0x575706, _0x3270f1, _0x1876e1);
                    var _0x455c1a = _0x7b27bd * 0.6;
                    var _0x575706 = _0x7b27bd * 0.4;
                    var _0x3270f1 = Math.max(0, _0x7b27bd * 0.78 + _0x3e8ffb);
                    _0x466d9b(_0x455c1a, _0x575706, _0x3270f1, _0x1876e1);
                    var _0x455c1a = -_0x7b27bd * 0.5;
                    var _0x575706 = _0x7b27bd * 0.5 + this.rPer * 10;
                    var _0x3270f1 = Math.max(0, _0x7b27bd * 0.6 + this.rPer - _0x3e8ffb);
                    _0x466d9b(_0x455c1a, _0x575706, _0x3270f1, _0x1876e1);
                    _0x39e82d.restore();
                }
                break;
                case _0x4b2c05: {
                    _0x39e82d.save();
                    var _0xcc7f8f = this.curBiome == _0x16f106 ? "#7790d8" : _0x1afbdd;
                    this.drawOutlinedCircle("", _0xcc7f8f);
                    if (_0x5981a2 != _0x4051d6) {
                        _0x39e82d.rotate(this.rPer * 2 * Math.PI);
                    }
                    var _0x3e8ffb = 0;
                    if (!_0x1d523b && _0x5981a2 != _0x4051d6 && !RVJsettings.performance) {
                        var _0x5e7fb0 = (_0x4ec996 - this.spawnTime) / 1000;
                        var _0x268152 = 7;
                        var _0x2dd79a = 4;
                        _0x3e8ffb = _0x2dd79a * Math.sin(Math.PI * 2 / _0x268152 * _0x5e7fb0);
                    }
                    if (this.curBiome == _0x16f106) {
                        _0x39e82d.fillStyle = "#7790d8";
                    } else {
                        _0x39e82d.fillStyle = _0x1afbdd;
                    }
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(0, 0, Math.max(0, this.rad - _0x45f763 + _0x3e8ffb), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    if (_0x5981a2 != _0x4051d6) {
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad * 0.3, -this.rad * 0.35 + this.rPer * 15, Math.max(0, this.rad * 0.35 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad * 0.5, this.rad * 0.5 + this.rPer * 15, Math.max(0, this.rad * 0.4 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(-this.rad * 0.75, -this.rad * 0.35 + this.rPer * 15, Math.max(0, this.rad * 0.3 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x31dc89: {
                    var _0x2f5c9b = _0x5207bf;
                    if (this.curBiome == _0x16f106) {
                        _0x2f5c9b = "#ac443c";
                    }
                    this.drawOutlinedCircle("", _0x2f5c9b);
                }
                break;
                case _0x52e535: {
                    var _0x3557f4 = this.getSkinImageObj("img/coconut" + (this.isEdibleOutlined() ? "_e" : "") + ".png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        if (this.specType2 == 1) {
                            if (this.angle == 0) {
                                this.angle = this.rPer * Math.PI * 2;
                            }
                            this.angle += 0.4;
                            _0x39e82d.rotate(this.angle);
                        } else if (this.specType2 == 2) {
                            _0x39e82d.rotate(this.angle);
                        } else {
                            _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        }
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                    }
                }
                break;
                case _0x76f666: {
                    var _0x3557f4 = this.getSkinImageObj("img/banana" + (this.isEdibleOutlined() ? "_e" : "") + ".png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        if (this.specType2 == 1) {
                            if (this.angle == 0) {
                                this.angle = this.rPer * Math.PI * 2;
                            }
                            this.angle += 0.4;
                            _0x39e82d.rotate(this.angle);
                        } else if (this.specType2 == 2) {
                            _0x39e82d.rotate(this.angle);
                        } else {
                            _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        }
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                    }
                }
                break;
                case _0x1c9b47: {
                    var _0x3557f4 = this.getSkinImageObj("img/rasp" + (this.isEdibleOutlined() ? "_e" : "") + ".png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        if (this.specType2 == 1) {
                            if (this.angle == 0) {
                                this.angle = this.rPer * Math.PI * 2;
                            }
                            this.angle += 0.4;
                            _0x39e82d.rotate(this.angle);
                        } else if (this.specType2 == 2) {
                            _0x39e82d.rotate(this.angle);
                        } else {
                            _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        }
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                    }
                }
                break;
                case _0x590a46: {
                    var _0x3557f4 = this.getSkinImageObj("img/pear" + (this.isEdibleOutlined() ? "_e" : "") + ".png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        if (this.specType2 == 1) {
                            if (this.angle == 0) {
                                this.angle = this.rPer * Math.PI * 2;
                            }
                            this.angle += 0.4;
                            _0x39e82d.rotate(this.angle);
                        } else if (this.specType2 == 2) {
                            _0x39e82d.rotate(this.angle);
                        } else {
                            _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        }
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                    }
                }
                break;
                case _0x510730: {
                    var _0x3557f4 = this.getSkinImageObj("img/seaweed" + (this.isEdibleOutlined() ? "_e" : "") + ".png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                    }
                }
                break;
                case _0x31e467: {
                    var _0x3557f4 = this.getSkinImageObj("img/starfish" + (this.isEdibleOutlined() ? "_e" : "") + ".png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                    }
                }
                break;
                case _0x17e94b: {
                    var _0x3557f4 = this.getSkinImageObj("img/kelp" + (this.isEdibleOutlined() ? "_e" : "") + ".png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                    }
                }
                break;
                case _0x5046bf: {
                    var _0x3557f4 = this.getSkinImageObj("img/clam" + (this.isEdibleOutlined() ? "_e" : "") + ".png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                    }
                }
                break;
                case _0xfc2e38: {
                    var _0x3557f4 = this.getSkinImageObj("img/conch" + (this.isEdibleOutlined() ? "_e" : "") + ".png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad * 1;
                        _0x39e82d.save();
                        _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                        _0x39e82d.restore();
                    }
                }
                break;
                case _0x165563:
                case _0x45772c: {
                    break;
                }
                case _0x1a0fc0: {
                    var _0x3557f4 = this.getSkinImageObj("skins/land/ostrich/" + this.speciesType + "/ostrichEgg" + (this.isEdibleOutlined() ? "_e" : "") + ".png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        _0x39e82d.save();
                        _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                        _0x39e82d.restore();
                    }
                }
                break;
                case _0x3ae8d3:
                    this.drawOutlinedCircle("", "red");
                    break;
                case _0x57b29b:
                    this.drawOutlinedCircle("", "green");
                    break;
                case _0xbc11d:
                    this.drawOutlinedCircle("", "blue");
                    break;
                case _0x1a5753:
                    break;
                case _0xa48e9e: {
                    var _0x3f85fc = "egg";
                    if (this.specType == 1) {
                        _0x3f85fc = "goldenegg";
                    }
                    var _0x2e1f6c = "img/" + _0x3f85fc + (this.isEdibleOutlined() ? "_e" : "") + ".png";
                    var _0x3557f4 = this.getSkinImageObj(_0x2e1f6c);
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        _0x39e82d.save();
                        _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                        _0x39e82d.restore();
                    }
                }
                break;
                case _0x3efa75: {
                    var _0x3557f4 = this.getSkinImageObj("img/beehive" + (this.isEdibleOutlined() ? "_e" : "") + ".png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        _0x39e82d.save();
                        _0x39e82d.rotate(this.rPer * 0.5 * Math.PI * 2);
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                        _0x39e82d.restore();
                    }
                }
                break;
                case _0x4b7e7f: {
                    var _0x3557f4 = this.getSkinImageObj("img/desert/anthill/anthill.png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        _0x39e82d.save();
                        _0x39e82d.rotate(this.rPer * 0.5 * Math.PI * 2);
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                        _0x39e82d.restore();
                        console.log("drawing anthill");
                    }
                }
                break;
                case _0x38a462: {
                    var _0x3557f4 = this.getSkinImageObj("img/honeycomb" + (this.isEdibleOutlined() ? "_e" : "") + ".png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        _0x39e82d.save();
                        _0x39e82d.rotate(this.rPer * 0.5 * Math.PI * 2);
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                        _0x39e82d.restore();
                    }
                }
                break;
                case _0x1d4611: {
                    var _0x3557f4 = this.getSkinImageObj("img/quill.png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        _0x39e82d.rotate(this.angle);
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                    }
                }
                break;
                case _0x1e888e: {
                    this.drawOutlinedCircle("", _0x49c70f);
                    _0x39e82d.rotate(this.rPer * Math.PI * 2);
                    _0x466d9b(this.rad * 0.25, this.rad * 0.4, (0.3 + this.rPer * 0.15) * this.rad, "#905113");
                }
                break;
                case _0x2e9b97: {
                    var _0x1dd4a6 = "";
                    switch (this.curBiome) {
                        case _0x5d8525:
                            _0x1dd4a6 = "_ocean";
                            break;
                        case _0x16f106:
                            _0x1dd4a6 = "_arctic";
                            break;
                        case _0x1ddf2f:
                        default:
                            _0x1dd4a6 = "";
                            break;
                    }
                    var _0x3557f4 = this.getSkinImageObj("img/healingStone" + _0x1dd4a6 + ".png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        _0x39e82d.save();
                        _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                        _0x39e82d.restore();
                    }
                }
                break;
                case _0x5983d9: {
                    _0x466d9b(0, 0, Math.max(0, this.rad * 1), "#815427");
                    _0x466d9b(0, 0, Math.max(0, this.rad * 0.6), "#6e4b29");
                    _0x466d9b(0, 0, Math.max(0, this.rad * 0.5), "#543d28");
                    _0x466d9b(0, 0, Math.max(0, this.rad * 0.45), "#3f3124");
                    _0x466d9b(0, 0, Math.max(0, this.rad * 0.33), "#241e19");
                    _0x466d9b(0, 0, Math.max(0, this.rad * 0.25), "#120f0d");
                    _0x466d9b(0, 0, Math.max(0, this.rad * 0.2), _0x51276a);
                }
                break;
                case _0x5a2c61: {
                    _0x39e82d.save();
                    var _0x3e8ffb = 0;
                    if (!_0x1d523b && _0x5981a2 !== _0x4051d6) {
                        _0x3e8ffb = _0x4e4bab("lavalake", this.spawnTime);
                    }
                    if (_0x593614) {
                        var _0x45f763 = 4;
                        _0x39e82d.fillStyle = _0x51276a;
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(0, 0, this.rad, 0, Math.PI * 2);
                        _0x39e82d.fill();
                    } else {
                        _0x39e82d.fillStyle = _0x51276a;
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(0, 0, Math.max(0, this.rad - _0x45f763 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        if (_0x5981a2 != 2) {
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(this.rad * 0.45, -this.rad * 0.45 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x3e8ffb), 0, Math.PI * 2);
                            _0x39e82d.fill();
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(this.rad * 0.5, this.rad * 0.5 + this.rPer * 15, Math.max(0, this.rad * 0.4 + _0x3e8ffb), 0, Math.PI * 2);
                            _0x39e82d.fill();
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x3e8ffb), 0, Math.PI * 2);
                            _0x39e82d.fill();
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(-this.rad * 0.75, -this.rad * 0.35 + this.rPer * 15, Math.max(0, this.rad * 0.3 + _0x3e8ffb), 0, Math.PI * 2);
                            _0x39e82d.fill();
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(this.rad + this.rPer * 10, this.rPer * 50, 8, 0, Math.PI * 2);
                            _0x39e82d.fill();
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(this.rad - this.rPer * 20, this.rPer * 50, 10, 0, Math.PI * 2);
                            _0x39e82d.fill();
                        }
                        if (!_0x1d523b && _0x5981a2 != 2) {
                            _0x39e82d.save();
                            _0x39e82d.globalAlpha = 1 - this.underwaterA;
                            var _0x5e7fb0 = (_0x4ec996 - this.spawnTime) / 1000;
                            var _0x268152 = 1.5;
                            var _0x2dd79a = 8;
                            var _0x2e52a6 = _0x2dd79a * Math.sin(Math.PI * 2 / _0x268152 * _0x5e7fb0);
                            if (this.flag_underWater) {
                                _0x39e82d.globalAlpha *= 0.5;
                                if (this.animalType == _0xce5aa0) {
                                    _0x39e82d.globalAlpha = 0.3;
                                }
                            }
                            _0x39e82d.fillStyle = "yellow";
                            var _0x5df484 = this.rad * 0.15;
                            _0x39e82d.beginPath();
                            var _0x4b7111 = 1;
                            for (i = 1; i <= _0x4b7111; i++) {
                                _0x39e82d.save();
                                _0x39e82d.globalAlpha = 0.2;
                                _0x39e82d.rotate(this.rPer * Math.PI * 2 * i);
                                _0x39e82d.beginPath();
                                _0x39e82d.arc(this.rad * -0.35, this.rad * -0.33, Math.max(0, _0x5df484 + _0x2e52a6), 0, Math.PI * 2);
                                _0x39e82d.fill();
                                _0x39e82d.beginPath();
                                _0x39e82d.arc(this.rad * 0.35, this.rad * -0.32, Math.max(0, _0x5df484 - _0x2e52a6), 0, Math.PI * 2);
                                _0x39e82d.fill();
                                _0x39e82d.beginPath();
                                _0x39e82d.arc(this.rad * 0.35, this.rad * 0.36, Math.max(0, _0x5df484 + _0x2e52a6), 0, Math.PI * 2);
                                _0x39e82d.fill();
                                _0x39e82d.beginPath();
                                _0x39e82d.arc(this.rad * -0.35, this.rad * 0.35, Math.max(0, _0x5df484 - _0x2e52a6), 0, Math.PI * 2);
                                _0x39e82d.fill();
                                _0x39e82d.restore();
                            }
                            _0x39e82d.restore();
                        }
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x369a30: {
                    _0x39e82d.save();
                    var _0x3e8ffb = 0;
                    var _0x5e7fb0 = (_0x4ec996 - this.spawnTime) / 1000;
                    var _0x268152 = 4;
                    var _0x2dd79a = 2.5;
                    _0x3e8ffb = _0x2dd79a * Math.sin(Math.PI * 2 / _0x268152 * _0x5e7fb0);
                    if (_0x593614) {
                        var _0x45f763 = 4;
                        _0x39e82d.fillStyle = "#5e5348";
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(0, 0, this.rad, 0, Math.PI * 2);
                        _0x39e82d.fill();
                    } else {
                        _0x39e82d.fillStyle = "#706962";
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(0, 0, Math.max(0, this.rad - _0x45f763 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        if (_0x5981a2 != _0x4051d6) {
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(this.rad * 0.45, -this.rad * 0.45 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x3e8ffb), 0, Math.PI * 2);
                            _0x39e82d.fill();
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(this.rad * 0.5, this.rad * 0.5 + this.rPer * 15, Math.max(0, this.rad * 0.4 + _0x3e8ffb), 0, Math.PI * 2);
                            _0x39e82d.fill();
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x3e8ffb), 0, Math.PI * 2);
                            _0x39e82d.fill();
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(-this.rad * 0.75, -this.rad * 0.35 + this.rPer * 15, Math.max(0, this.rad * 0.3 + _0x3e8ffb), 0, Math.PI * 2);
                            _0x39e82d.fill();
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(this.rad + this.rPer * 10, this.rPer * 50, 8, 0, Math.PI * 2);
                            _0x39e82d.fill();
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(this.rad - this.rPer * 20, this.rPer * 50, 10, 0, Math.PI * 2);
                            _0x39e82d.fill();
                        }
                        _0x39e82d.save();
                        _0x39e82d.globalAlpha = 1 - this.underwaterA;
                        var _0x5e7fb0 = (_0x4ec996 - this.spawnTime) / 1000;
                        var _0x268152 = 1.5;
                        var _0x2dd79a = 8;
                        var _0x2e52a6 = _0x2dd79a * Math.sin(Math.PI * 2 / _0x268152 * _0x5e7fb0);
                        if (this.flag_underWater) {
                            _0x39e82d.globalAlpha *= 0.5;
                            if (this.animalType == _0xce5aa0) {
                                _0x39e82d.globalAlpha = 0.3;
                            }
                        }
                        _0x39e82d.fillStyle = "yellow";
                        var _0x5df484 = this.rad * 0.15;
                        _0x39e82d.beginPath();
                        var _0x4b7111 = 1;
                        for (i = 1; i <= _0x4b7111; i++) {
                            _0x39e82d.save();
                            _0x39e82d.globalAlpha = 0.2;
                            _0x39e82d.rotate(this.rPer * Math.PI * 2 * i);
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(this.rad * -0.35, this.rad * -0.33, Math.max(0, _0x5df484 + _0x2e52a6), 0, Math.PI * 2);
                            _0x39e82d.fill();
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(this.rad * 0.35, this.rad * -0.32, Math.max(0, _0x5df484 - _0x2e52a6), 0, Math.PI * 2);
                            _0x39e82d.fill();
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(this.rad * 0.35, this.rad * 0.36, Math.max(0, _0x5df484 + _0x2e52a6), 0, Math.PI * 2);
                            _0x39e82d.fill();
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(this.rad * -0.35, this.rad * 0.35, Math.max(0, _0x5df484 - _0x2e52a6), 0, Math.PI * 2);
                            _0x39e82d.fill();
                            _0x39e82d.restore();
                        }
                        _0x39e82d.restore();
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x3e2946: {
                    var _0x3557f4 = this.getSkinImageObj("img/cloudberry" + (this.isEdibleOutlined() ? "_e" : "") + ".png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        if (this.specType2 == 1) {
                            if (this.angle == 0) {
                                this.angle = this.rPer * Math.PI * 2;
                            }
                            this.angle += 0.4;
                            _0x39e82d.rotate(this.angle);
                        } else if (this.specType2 == 2) {
                            _0x39e82d.rotate(this.angle);
                        } else {
                            _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        }
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                    }
                }
                break;
                case _0xddc401: {
                    var _0x3557f4 = this.getSkinImageObj("img/arcticNut" + (this.isEdibleOutlined() ? "_e" : "") + ".png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        if (this.specType2 == 1) {
                            if (this.angle == 0) {
                                this.angle = this.rPer * Math.PI * 2;
                            }
                            this.angle += 0.4;
                            _0x39e82d.rotate(this.angle);
                        } else if (this.specType2 == 2) {
                            _0x39e82d.rotate(this.angle);
                        } else {
                            _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        }
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                    }
                }
                break;
                case _0x132c33: {
                    var _0x3557f4 = this.getSkinImageObj("img/carrot" + (this.isEdibleOutlined() ? "_e" : "") + ".png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        _0x39e82d.save();
                        _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                        _0x39e82d.restore();
                    }
                }
                break;
                case _0xf30c2f: {
                    var _0x3557f4 = this.getSkinImageObj("img/watermelon" + (this.isEdibleOutlined() ? "_e" : "") + ".png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        _0x39e82d.save();
                        _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                        _0x39e82d.restore();
                    }
                }
                break;
                case _0xbcb6f1: {
                    _0x39e82d.save();
                    _0x466d9b(0, 0, this.rad, !this.isEdibleOutlined() ? _0x3a1319(this.curBiome) : _0x556e31);
                    _0x466d9b(0, 0, Math.max(0, this.rad - 2), "#74e61e");
                    _0x39e82d.restore();
                }
                break;
                case _0x7e4e1a: {
                    var _0x3557f4 = this.getSkinImageObj("img/watermelonSlice" + (this.isEdibleOutlined() ? "_e" : "") + ".png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        _0x39e82d.save();
                        _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                        _0x39e82d.restore();
                    }
                }
                break;
                case _0x463a00:
                case _0x88c3ca:
                case _0x5854cd: {
                    var _0x13ff96 = 0;
                    var _0x3557f4 = this.getSkinImageObj("img/meat" + (this.isEdibleOutlined() ? "_e" : "") + ".png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        _0x39e82d.save();
                        _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                        _0x39e82d.restore();
                    }
                }
                break;
                case _0x3edcca:
                case _0x260340: {
                    var _0x45f763 = 2;
                    var _0x5ea2ce = this.oType == _0x260340 ? 15 : 9;
                    _0x39e82d.fillStyle = this.getOutlineColor();
                    _0x39e82d.beginPath();
                    _0x39e82d.rect(-_0x5ea2ce / 2 - _0x45f763, -_0x45f763, _0x5ea2ce + _0x45f763 * 2, this.rad * 0.8 + _0x45f763 * 2);
                    _0x39e82d.fill();
                    _0x39e82d.fillStyle = "#FFCA49";
                    _0x39e82d.beginPath();
                    _0x39e82d.rect(-_0x5ea2ce / 2, 0 + _0x45f763 / 2, _0x5ea2ce, this.rad * 0.8 - _0x45f763 / 2);
                    _0x39e82d.fill();
                    if (_0x5981a2 != _0x4051d6) {
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(0, 0, Math.max(0, this.rad), Math.PI, Math.PI * 2);
                        _0x39e82d.fillStyle = this.getOutlineColor();
                        _0x39e82d.fill();
                    }
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(0, 0, Math.max(0, this.rad - _0x45f763), Math.PI, Math.PI * 2);
                    _0x39e82d.fillStyle = this.oType == _0x260340 ? "#B8413B" : "#CFAD59";
                    _0x39e82d.fill();
                }
                break;
                case _0x165dc5: {
                    var _0x45f763 = 2;
                    _0x39e82d.save();
                    var _0x3e8ffb = 0;
                    if (!_0x1d523b && _0x5981a2 != _0x4051d6 && !RVJsettings.performance) {
                        var _0x5e7fb0 = (_0x4ec996 - this.spawnTime) / 1000;
                        var _0x268152 = 2;
                        var _0x2dd79a = 1.5;
                        _0x3e8ffb = _0x2dd79a * Math.sin(Math.PI * 2 / _0x268152 * _0x5e7fb0);
                    }
                    _0x39e82d.fillStyle = "#45D157";
                    _0x39e82d.globalAlpha *= 0.93;
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(-this.rad * 0.5, -this.rad * 0.5 + this.rPer * 10, Math.max(0, this.rad * 0.55 + _0x3e8ffb), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(this.rad * 0.5, -this.rad * 0.5 - this.rPer * 10, Math.max(0, this.rad * 0.43 - _0x3e8ffb), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(this.rad * 0.6, this.rad * 0.4, Math.max(0, this.rad * 0.48 + _0x3e8ffb), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(-this.rad * 0.5, this.rad * 0.5, Math.max(0, this.rad * 0.4 + this.rPer - _0x3e8ffb), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.restore();
                    var _0x5ea2ce = 20;
                    _0x39e82d.fillStyle = this.getOutlineColor();
                    _0x39e82d.beginPath();
                    _0x39e82d.rect(-_0x5ea2ce / 2 - _0x45f763, -_0x45f763, _0x5ea2ce + _0x45f763 * 2, this.rad * 0.8 + _0x45f763 * 2);
                    _0x39e82d.fill();
                    _0x39e82d.fillStyle = "#FFCA49";
                    _0x39e82d.beginPath();
                    _0x39e82d.rect(-_0x5ea2ce / 2, 0 + _0x45f763 / 2, _0x5ea2ce, this.rad * 0.8 - _0x45f763 / 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(0, 0, Math.max(0, this.rad * 0.8), Math.PI, Math.PI * 2);
                    _0x39e82d.fillStyle = this.getOutlineColor();
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(0, 0, Math.max(0, this.rad * 0.8 - _0x45f763), Math.PI, Math.PI * 2);
                    _0x39e82d.fillStyle = "#B8413B";
                    _0x39e82d.fill();
                }
                break;
                case _0x5aa79b: {
                    var _0x3557f4 = this.getSkinImageObj("img/lillypad" + (this.isEdibleOutlined() ? "_e" : "") + ".png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                    }
                }
                break;
                case _0x651296: {
                    console.log("ERROR: " + this + " should be subclassed!");
                }
                break;
                case _0x252e1c:
                case _0x4b7c77: {
                    var _0x3707a0 = this.curBiome == _0x16f106 ? "#e0e0e0" : "#9F8641";
                    var _0x1b22f0 = this.curBiome == _0x16f106 ? "#878787" : "#7E6A35";
                    var _0x3becb8 = this.curBiome == _0x16f106 ? "#666666" : "#5C4E28";
                    var _0x57e8b2 = this.curBiome == _0x16f106 ? "#434343" : "#40371D";
                    if (this.curBiome != _0x16f106) {
                        this.drawOutlinedCircleRad("", _0x3707a0, this.innerRad);
                    } else {
                        _0x466d9b(0 + this.rPer, 1, Math.max(0, this.innerRad), _0x3707a0);
                    }
                    if (_0x5981a2 != _0x4051d6) {
                        _0x466d9b(0 - this.rPer, 0 - this.rPer, Math.max(0, this.innerRad - 7), _0x1b22f0);
                    }
                    _0x466d9b(0 + this.rPer, 1, Math.max(0, this.innerRad - 14), _0x3becb8);
                    _0x466d9b(0 - this.rPer * 2 - 3, 1, Math.max(0, this.innerRad - 18.5), _0x57e8b2);
                    var _0xc400f1 = _0xb3e9be[_0x166276];
                    if (_0xc400f1 && _0xc400f1.lastHidingHoleID == this.id) {
                        if (this.alpha == undefined) {
                            this.alpha = 0;
                        }
                        if (_0xc400f1.flag_inHidingHole) {
                            this.alpha += (0.1 + this.alpha) * 0.1;
                        } else {
                            this.alpha -= this.alpha * 0.1;
                        }
                        if (this.alpha > 1) {
                            this.alpha = 1;
                        } else if (this.alpha < 0) {
                            this.alpha = 0;
                        }
                        _0x39e82d.globalAlpha = this.alpha;
                        var _0x33fa1c = this.rad;
                        if (this.curBiome != _0x16f106) {
                            this.drawOutlinedCircleRad("", _0x3707a0, _0x33fa1c);
                        } else {
                            _0x466d9b(0, 0, Math.max(0, _0x33fa1c), _0x3707a0);
                        }
                        _0x466d9b(0 - this.rPer, 0 - this.rPer, Math.max(0, _0x33fa1c - 7), _0x1b22f0);
                        _0x466d9b(0 + this.rPer, 1, Math.max(0, _0x33fa1c - 12), _0x3becb8);
                        _0x39e82d.globalAlpha = this.alpha * 0.7;
                        _0x33fa1c = _0x33fa1c * 0.7;
                        _0x466d9b(0 - this.rPer, 0 - this.rPer, Math.max(0, _0x33fa1c - 7), _0x57e8b2);
                        _0x33fa1c = _0x33fa1c * 0.5;
                        _0x39e82d.globalAlpha = this.alpha * 0.3;
                        _0x466d9b(0 - this.rPer, 0 - this.rPer, Math.max(0, _0x33fa1c), _0x57e8b2);
                    }
                }
                break;
                case _0x5c8a84: {
                    var _0x4e6aef = 1;
                    var _0x9927b6 = 1;
                    if (!_0x1d523b && _0x5981a2 != _0x4051d6 && !RVJsettings.performance) {
                        var _0x5e7fb0 = (_0x4ec996 - this.spawnTime) / 1000;
                        var _0x268152 = 1.2;
                        _0x4e6aef = Math.cos(Math.PI * 2 / _0x268152 * _0x5e7fb0) * 3.5;
                        _0x9927b6 = Math.sin(Math.PI * 2 / _0x268152 * _0x5e7fb0) * 2.5;
                    }
                    this.drawOutlinedCircleRad("", "#4A549D", this.innerRad);
                    if (_0x5981a2 != _0x4051d6) {
                        _0x466d9b(0 + _0x4e6aef / 2 - this.rPer, 0 + _0x9927b6 / 2 - this.rPer, Math.max(0, this.innerRad - 6), "#444C8B");
                    }
                    _0x466d9b(0 + _0x4e6aef / 4.5 + this.rPer, 1 + _0x9927b6 / 1.5, Math.max(0, this.innerRad - 14), "#4A549D");
                    _0x466d9b(0 + _0x4e6aef / 1.5 - this.rPer * 2, _0x9927b6, Math.max(0, this.innerRad - 18.5 + _0x9927b6 / 5), "#3F4477");
                    _0x466d9b(0 + _0x4e6aef / 1.5 - this.rPer * 2, _0x9927b6, Math.max(0, this.innerRad - 22.5 + _0x9927b6 / 11), "#353860");
                    var _0xc400f1 = _0xb3e9be[_0x166276];
                    if (_0xc400f1 && _0xc400f1.lastHidingHoleID == this.id) {
                        if (this.alpha == undefined) {
                            this.alpha = 0;
                        }
                        if (_0xc400f1.flag_inHidingHole) {
                            this.alpha += (0.1 + this.alpha) * 0.1;
                        } else {
                            this.alpha -= this.alpha * 0.1;
                        }
                        if (this.alpha > 1) {
                            this.alpha = 1;
                        } else if (this.alpha < 0) {
                            this.alpha = 0;
                        }
                        _0x39e82d.globalAlpha = this.alpha;
                        var _0x33fa1c = this.rad;
                        this.drawOutlinedCircle("", "#4A549D", _0x33fa1c);
                        if (_0x5981a2 != _0x4051d6) {
                            _0x466d9b(0 + _0x4e6aef / 2 - this.rPer, 0 + _0x9927b6 / 2 - this.rPer, Math.max(0, _0x33fa1c - 6), "#444C8B");
                        }
                        _0x466d9b(0 + _0x4e6aef / 4.5 + this.rPer, 1 + _0x9927b6 / 1.5, Math.max(0, _0x33fa1c - 14), "#4A549D");
                        _0x33fa1c = _0x33fa1c * 0.9;
                        _0x39e82d.globalAlpha = this.alpha * 0.6;
                        _0x466d9b(0 + _0x4e6aef / 3.5 - this.rPer * 2, _0x9927b6, Math.max(0, _0x33fa1c - 18.5 + _0x9927b6 / 5), "#3F4477");
                        _0x33fa1c = _0x33fa1c * 0.7;
                        _0x39e82d.globalAlpha = this.alpha * 0.3;
                        _0x466d9b(0 + _0x4e6aef / 6.5 - this.rPer * 2, _0x9927b6, Math.max(0, _0x33fa1c - 22.5 + _0x9927b6 / 11), "#353860");
                    }
                }
                break;
                case _0x440978: {
                    _0x39e82d.save();
                    var _0x3e8ffb = 0;
                    if (!_0x1d523b && _0x5981a2 != _0x4051d6 && !RVJsettings.performance) {
                        var _0x5e7fb0 = (_0x4ec996 - this.spawnTime) / 1000;
                        var _0x268152 = 2;
                        var _0x2dd79a = 1.5;
                        _0x3e8ffb = _0x2dd79a * Math.sin(Math.PI * 2 / _0x268152 * _0x5e7fb0);
                    }
                    var _0x43768e = "#45D157";
                    switch (this.curBiome) {
                        case _0x5d8525:
                            _0x43768e = "#786810";
                            break;
                        case _0x16f106:
                            _0x43768e = "#CED0D0";
                            break;
                        default:
                        case _0x1ddf2f:
                            _0x43768e = "#45D157";
                            break;
                        case _0x36f07b:
                            _0x43768e = "#9b6f31";
                            break;
                    }
                    _0x39e82d.fillStyle = _0x43768e;
                    _0x39e82d.globalAlpha *= 0.93;
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(-this.rad * 0.5, -this.rad * 0.5 + this.rPer * 10, Math.max(0, this.rad * 0.65 + _0x3e8ffb), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(this.rad * 0.5, -this.rad * 0.5 - this.rPer * 10, Math.max(0, this.rad * 0.73 - _0x3e8ffb), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(this.rad * 0.6, this.rad * 0.4, Math.max(0, this.rad * 0.78 + _0x3e8ffb), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(-this.rad * 0.5, this.rad * 0.5, Math.max(0, this.rad * 0.6 + this.rPer - _0x3e8ffb), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.restore();
                }
                break;
                case _0x9598c7: {
                    _0x39e82d.save();
                    if (_0x5981a2 != _0x4051d6) {
                        _0x39e82d.rotate(this.rPer * 2 * Math.PI);
                    }
                    var _0x3e8ffb = 0;
                    var _0x5e7fb0 = (_0x4ec996 - this.spawnTime) / 1000;
                    var _0x268152 = 6;
                    var _0x2dd79a = 1.5;
                    _0x3e8ffb = _0x2dd79a * Math.sin(Math.PI * 2 / _0x268152 * _0x5e7fb0);
                    var _0x45f763 = 4;
                    _0x39e82d.fillStyle = "#604729";
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(0, 0, this.rad, 0, Math.PI * 2);
                    _0x39e82d.fill();
                    if (_0x5981a2 != _0x4051d6) {
                        _0x39e82d.fillStyle = "#8A681B";
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(0, 0, Math.max(0, this.rad - _0x45f763 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad * 0.45, -this.rad * 0.45 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad * 0.5, this.rad * 0.5 + this.rPer * 15, Math.max(0, this.rad * 0.4 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(-this.rad * 0.75, -this.rad * 0.35 + this.rPer * 15, Math.max(0, this.rad * 0.3 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad + this.rPer * 10, this.rPer * 50, 8, 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad - this.rPer * 20, this.rPer * 50, 10, 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x503518: {
                    _0x39e82d.save();
                    if (_0x5981a2 != _0x4051d6) {
                        _0x39e82d.rotate(this.rPer * 2 * Math.PI);
                    }
                    var _0x3e8ffb = 0;
                    var _0x5e7fb0 = (_0x4ec996 - this.spawnTime) / 1000;
                    var _0x268152 = 6;
                    var _0x2dd79a = 1.5;
                    _0x3e8ffb = _0x2dd79a * Math.sin(Math.PI * 2 / _0x268152 * _0x5e7fb0);
                    var _0x45f763 = 4;
                    _0x39e82d.fillStyle = "#605649";
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(0, 0, this.rad, 0, Math.PI * 2);
                    _0x39e82d.fill();
                    if (_0x5981a2 != _0x4051d6) {
                        _0x39e82d.fillStyle = "#5e4f36";
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(0, 0, Math.max(0, this.rad - _0x45f763 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad * 0.45, -this.rad * 0.45 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad * 0.5, this.rad * 0.5 + this.rPer * 15, Math.max(0, this.rad * 0.4 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(-this.rad * 0.75, -this.rad * 0.35 + this.rPer * 15, Math.max(0, this.rad * 0.3 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad + this.rPer * 10, this.rPer * 50, 8, 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad - this.rPer * 20, this.rPer * 50, 10, 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x27d2ab:
                    break;
                case _0x2db1cc:
                case _0x10b95a:
                case _0x44504a:
                case _0x574cb2:
                    break;
                case _0xe686e1:
                case _0x37530a:
                    var _0x5e7fb0 = (_0x4ec996 - this.spawnTime) / 1000;
                    _0x39e82d.save();
                    _0x39e82d.rotate(this.angle + _0x4bfce6(180));
                    _0x39e82d.globalAlpha = 0.1 + this.cloudOpacity;
                    var _0x3557f4 = this.getSkinImageObj("img/disasters/cloud.png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad * 2;
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                    }
                    var _0x3e8ffb = 0;
                    var _0x268152 = 6;
                    var _0x2dd79a = 15;
                    _0x3e8ffb = _0x2dd79a * Math.sin(Math.PI * 2 / _0x268152 * _0x5e7fb0);
                    _0x39e82d.globalAlpha = 0.1;
                    var _0x3557f4 = this.getSkinImageObj("img/disasters/cloud1.png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad * 2;
                        _0x2467a0 = Math.max(0, _0x2467a0 - 5 + _0x3e8ffb);
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                    }
                    _0x39e82d.restore();
                    break;
                case _0x413190: {
                    _0x39e82d.save();
                    if (_0x5981a2 != _0x4051d6) {
                        _0x39e82d.rotate(this.rPer * 2 * Math.PI);
                    }
                    var _0x3e8ffb = 1.5;
                    var _0x65ec33 = _0x4e4bab("volcano", this.spawnTime);
                    if (_0x65ec33 !== undefined && _0x65ec33 != null) {
                        this.theFrame = _0x65ec33;
                        _0x3e8ffb = this.theFrame;
                    }
                    var _0x45f763 = 4;
                    _0x39e82d.fillStyle = "#8B7833";
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(0, 0, this.rad, 0, Math.PI * 2);
                    _0x39e82d.fill();
                    if (_0x5981a2 != _0x4051d6) {
                        _0x39e82d.fillStyle = "#98803A";
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(0, 0, Math.max(0, this.rad - _0x45f763 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad * 0.45, -this.rad * 0.45 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad * 0.5, this.rad * 0.5 + this.rPer * 15, Math.max(0, this.rad * 0.4 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(-this.rad * 0.75, -this.rad * 0.35 + this.rPer * 15, Math.max(0, this.rad * 0.3 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        if (this.rad > 50) {
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(this.rad + this.rPer * 10, this.rPer * 50, 8, 0, Math.PI * 2);
                            _0x39e82d.fill();
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(this.rad - this.rPer * 20, this.rPer * 50, 10, 10, 0, Math.PI * 2);
                            _0x39e82d.fill();
                        }
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x3cf77e: {
                    _0x39e82d.save();
                    if (_0x5981a2 != _0x4051d6) {
                        _0x39e82d.rotate(this.rPer * 2 * Math.PI);
                    }
                    var _0x3e8ffb = 0;
                    var _0x5e7fb0 = (_0x4ec996 - this.spawnTime) / 1000;
                    var _0x268152 = 6;
                    var _0x2dd79a = 1.5;
                    _0x3e8ffb = _0x2dd79a * Math.sin(Math.PI * 2 / _0x268152 * _0x5e7fb0);
                    var _0x45f763 = 4;
                    _0x39e82d.fillStyle = "#8CC3C7";
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(0, 0, this.rad, 0, Math.PI * 2);
                    _0x39e82d.fill();
                    if (_0x5981a2 != _0x4051d6) {
                        _0x39e82d.fillStyle = "#9DDADE";
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(0, 0, Math.max(0, this.rad - _0x45f763 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad * 0.45, -this.rad * 0.45 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad * 0.5, this.rad * 0.5 + this.rPer * 15, Math.max(0, this.rad * 0.4 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(-this.rad * 0.75, -this.rad * 0.35 + this.rPer * 15, Math.max(0, this.rad * 0.3 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad + this.rPer * 10, this.rPer * 50, this.specType == 0 ? 8 : 4, 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad - this.rPer * 20, this.rPer * 50, 10, 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x2c3383: {
                    _0x39e82d.save();
                    if (_0x5981a2 != _0x4051d6) {
                        _0x39e82d.rotate(this.rPer * 2 * Math.PI);
                    }
                    var _0x3e8ffb = 0;
                    if (!_0x1d523b && _0x5981a2 != _0x4051d6 && !RVJsettings.performance) {
                        var _0x5e7fb0 = (_0x4ec996 - this.spawnTime) / 1000;
                        var _0x268152 = 4;
                        var _0x2dd79a = 5.5;
                        _0x3e8ffb = _0x2dd79a * Math.sin(Math.PI * 2 / _0x268152 * _0x5e7fb0);
                    }
                    var _0x45f763 = 4;
                    _0x39e82d.fillStyle = _0x335e4d;
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(0, 0, this.rad, 0, Math.PI * 2);
                    _0x39e82d.fill();
                    if (this.curBiome == _0x16f106) {
                        _0x39e82d.fillStyle = "#8da0d6";
                    } else {
                        _0x39e82d.fillStyle = _0x1afbdd;
                    }
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(0, 0, Math.max(0, this.rad - _0x45f763 + _0x3e8ffb), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    if (_0x5981a2 != _0x4051d6) {
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad * 0.45, -this.rad * 0.45 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad * 0.5, this.rad * 0.5 + this.rPer * 15, Math.max(0, this.rad * 0.4 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(-this.rad * 0.75, -this.rad * 0.35 + this.rPer * 15, Math.max(0, this.rad * 0.3 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad + this.rPer * 10, this.rPer * 50, this.specType == 0 ? 8 : 4, 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad - this.rPer * 20, this.rPer * 50, 10, 0, Math.PI * 2);
                        _0x39e82d.fill();
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x435c85: {
                    _0x39e82d.save();
                    if (_0x5981a2 != _0x4051d6) {
                        _0x39e82d.rotate(this.rPer * 2 * Math.PI);
                    }
                    var _0x3e8ffb = 0;
                    if (!_0x1d523b && _0x5981a2 != _0x4051d6 && !RVJsettings.performance) {
                        var _0x5e7fb0 = (_0x4ec996 - _0x5000a8) / 1000;
                        var _0x268152 = 5;
                        var _0x2dd79a = 5.5;
                        _0x3e8ffb = _0x2dd79a * Math.sin(Math.PI * 2 / _0x268152 * _0x5e7fb0);
                    }
                    var _0x45f763 = 4;
                    if (_0x593614) {} else {
                        _0x39e82d.fillStyle = _0x20b682;
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(0, 0, Math.max(0, this.rad - _0x45f763 + _0x3e8ffb), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        if (_0x5981a2 != _0x4051d6) {
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(this.rad + this.rPer * 10, this.rPer * 50, 8, 0, Math.PI * 2);
                            _0x39e82d.fill();
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(this.rad - this.rPer * 20, this.rPer * 50, 10, 0, Math.PI * 2);
                            _0x39e82d.fill();
                        }
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x208477: {
                    var _0x935c5e = 0;
                    if (!_0x1d523b && _0x5981a2 != _0x4051d6 && !RVJsettings.performance) {
                        var _0x5e7fb0 = (_0x4ec996 - _0x5000a8) / 1000;
                        var _0x268152 = 5;
                        var _0x2dd79a = -8.5;
                        _0x935c5e = _0x2dd79a * Math.sin(Math.PI * 2 / _0x268152 * _0x5e7fb0);
                    }
                    var _0x699d7c = 10;
                    var _0x23844b = this.x > _0x5039a5 / 2 ? 1 : 0;
                    if (_0x23844b == 1) {
                        _0x39e82d.fillStyle = _0x20b682;
                        _0x39e82d.fillRect(-this.rectW / 2 + _0x935c5e, -this.rectH / 2 + _0x935c5e + _0x699d7c, this.rectW - _0x935c5e, this.rectH - _0x935c5e - _0x699d7c);
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(-this.rectW / 2 + 50, -this.rectH / 2 + 50, 70 - _0x935c5e, 0, Math.PI * 2);
                        _0x39e82d.fill();
                        var _0x4b2d65 = 35;
                        _0x833245(-this.rectW / 2 + _0x4b2d65, -this.rectH / 2 + _0x4b2d65, this.rectW / 2 - _0x4b2d65, this.rectH / 2 - _0x4b2d65, this.x, this.y);
                    } else {
                        _0x39e82d.fillStyle = _0x20b682;
                        _0x935c5e *= -1;
                        _0x39e82d.fillRect(-this.rectW / 2, -this.rectH / 2 - _0x935c5e + _0x699d7c, this.rectW + _0x935c5e, this.rectH + _0x935c5e - _0x699d7c);
                        var _0x4b2d65 = 25;
                        _0x833245(-this.rectW / 2 + _0x4b2d65, -this.rectH / 2 + _0x4b2d65, this.rectW / 2 - _0x4b2d65, this.rectH / 2 - _0x4b2d65, this.x, this.y);
                    }
                }
                break;
                case _0x132d0f: {
                    _0x39e82d.fillStyle = _0x335e4d;
                    var _0x14c61d = -this.rectW / 2;
                    var _0x1962cd = this.rectW / 2;
                    var _0x41a604 = -this.rectH / 2;
                    var _0x338b89 = this.rectH / 2;
                    _0x39e82d.beginPath();
                    _0x39e82d.moveTo(_0x14c61d, _0x41a604);
                    var _0x55153b = 30;
                    var _0x40a46a = [-15, 10, -10, 12, 0, 5, -10, 5, -12, 5, 10, 0, -6];
                    var _0x3f629e = 45;
                    var _0x40adf7 = 0;
                    var _0x56b971 = _0x5039a5 - this.x;
                    var _0x438025 = 0 - this.x;
                    var _0x578ffb = _0x396098 - this.y;
                    var _0x44bb07 = 0 - this.y;
                    var _0x575706;
                    var _0x455c1a = _0x14c61d - _0x55153b;
                    for (_0x575706 = _0x41a604; _0x575706 < _0x338b89; _0x575706 += _0x3f629e) {
                        _0x39e82d.lineTo(Math.min(_0x56b971, Math.max(_0x438025, _0x455c1a + _0x40a46a[_0x40adf7])), _0x575706);
                        _0x40adf7 = (_0x40adf7 + 1) % _0x40a46a.length;
                    }
                    _0x39e82d.lineTo(_0x14c61d, _0x338b89);
                    _0x575706 = _0x338b89 + _0x55153b;
                    for (_0x455c1a = _0x14c61d; _0x455c1a < _0x1962cd; _0x455c1a += _0x3f629e) {
                        _0x39e82d.lineTo(_0x455c1a, Math.min(_0x578ffb, Math.max(_0x44bb07, _0x575706 + _0x40a46a[_0x40adf7])));
                        _0x40adf7 = (_0x40adf7 + 1) % _0x40a46a.length;
                    }
                    _0x39e82d.lineTo(_0x1962cd, _0x338b89);
                    _0x455c1a = _0x1962cd + _0x55153b;
                    for (_0x575706 = _0x338b89; _0x575706 > _0x41a604; _0x575706 -= _0x3f629e) {
                        _0x39e82d.lineTo(Math.min(_0x56b971, Math.max(_0x438025, _0x455c1a + _0x40a46a[_0x40adf7])), _0x575706);
                        _0x40adf7 = (_0x40adf7 + 1) % _0x40a46a.length;
                    }
                    _0x39e82d.lineTo(_0x1962cd, _0x41a604);
                    _0x575706 = _0x41a604 - _0x55153b;
                    for (_0x455c1a = _0x1962cd; _0x455c1a > _0x14c61d; _0x455c1a -= _0x3f629e) {
                        _0x39e82d.lineTo(_0x455c1a, Math.min(_0x578ffb, Math.max(_0x44bb07, _0x575706 + _0x40a46a[_0x40adf7])));
                        _0x40adf7 = (_0x40adf7 + 1) % _0x40a46a.length;
                    }
                    _0x39e82d.closePath();
                    _0x39e82d.fill();
                }
                break;
                case _0x315f18: {
                    var _0x8ecdb0 = _0x39e82d.globalAlpha;
                    _0x39e82d.fillStyle = _0x3128bd;
                    _0x39e82d.fillRect(-this.rectW / 2, -this.rectH / 2, this.rectW, this.rectH);
                    var _0x4b2d65 = 35;
                    _0x833245(-this.rectW / 2 + _0x4b2d65, -this.rectH / 2 + _0x4b2d65, this.rectW / 2 - _0x4b2d65, this.rectH / 2 - _0x4b2d65, this.x, this.y);
                    var _0x133e67 = 15;
                    {
                        _0x39e82d.fillStyle = _0x3128bd;
                        var _0x14c61d = -this.rectW / 2;
                        var _0x1962cd = this.rectW / 2;
                        var _0x41a604 = -this.rectH / 2 + 3;
                        var _0x338b89 = -this.rectH / 2 - _0x133e67;
                        _0x39e82d.beginPath();
                        _0x39e82d.moveTo(_0x14c61d, _0x41a604);
                        var _0x55153b = 0;
                        var _0x40a46a = [-15, 5, 10, 0, -10, 3, 12, 4, 0, 3, 5, -10, 5, -12, 5, 10, 0, -6];
                        var _0x3f629e = 60;
                        var _0x40adf7 = 0;
                        var _0x56b971 = _0x5039a5 - this.x;
                        var _0x438025 = 0 - this.x;
                        var _0x578ffb = _0x396098 - this.y;
                        var _0x44bb07 = 0 - this.y;
                        var _0x575706;
                        var _0x455c1a = _0x14c61d - _0x55153b;
                        _0x39e82d.lineTo(_0x14c61d, _0x338b89);
                        _0x575706 = _0x338b89 + _0x55153b;
                        for (_0x455c1a = _0x14c61d; _0x455c1a < _0x1962cd; _0x455c1a += _0x3f629e) {
                            _0x39e82d.lineTo(_0x455c1a, Math.min(_0x578ffb, Math.max(_0x44bb07, _0x575706 + _0x40a46a[_0x40adf7])));
                            _0x40adf7 = (_0x40adf7 + 1) % _0x40a46a.length;
                        }
                        _0x39e82d.lineTo(_0x1962cd, _0x338b89);
                        _0x39e82d.lineTo(_0x1962cd, _0x41a604);
                        _0x39e82d.closePath();
                        _0x39e82d.fill();
                    }
                }
                break;
                case _0x143680: {
                    var _0x8ecdb0 = _0x39e82d.globalAlpha;
                    _0x39e82d.fillStyle = "#ececec";
                    _0x39e82d.fillRect(-this.rectW / 2, -this.rectH / 2, this.rectW, this.rectH);
                    var _0x14c61d = -this.rectW / 2;
                    var _0x1962cd = this.rectW / 2;
                    var _0x41a604 = this.rectH / 2 - 20;
                    var _0x338b89 = this.rectH / 2;
                    snowLandWidth = this.rectW;
                    snowLandHeight = this.rectH;
                    _0x39e82d.beginPath();
                    _0x39e82d.moveTo(_0x14c61d, _0x41a604);
                    var _0x55153b = 20;
                    var _0x40a46a = [-15, 5, 10, 0, -10, 3, 12, 4, 0, 3, 5, -10, 5, -12, 5, 10, 0, -6];
                    var _0x3f629e = 60;
                    var _0x40adf7 = 0;
                    var _0x56b971 = _0x5039a5 - this.x;
                    var _0x438025 = 0 - this.x;
                    var _0x578ffb = _0x396098 - this.y;
                    var _0x44bb07 = 0 - this.y;
                    var _0x575706;
                    var _0x455c1a = _0x14c61d - _0x55153b;
                    _0x39e82d.lineTo(_0x14c61d, _0x338b89);
                    _0x575706 = _0x338b89 + _0x55153b;
                    for (_0x455c1a = _0x14c61d; _0x455c1a < _0x1962cd; _0x455c1a += _0x3f629e) {
                        _0x39e82d.lineTo(_0x455c1a, Math.min(_0x578ffb, Math.max(_0x44bb07, _0x575706 + _0x40a46a[_0x40adf7])));
                        _0x40adf7 = (_0x40adf7 + 1) % _0x40a46a.length;
                    }
                    _0x39e82d.lineTo(_0x1962cd, _0x338b89);
                    _0x39e82d.lineTo(_0x1962cd, _0x41a604);
                    _0x39e82d.closePath();
                    _0x39e82d.fill();
                    var _0x4b2d65 = 20;
                    _0x833245(-this.rectW / 2 + _0x4b2d65, -this.rectH / 2 + _0x4b2d65, this.rectW / 2 - _0x4b2d65, this.rectH / 2 - _0x4b2d65, this.x, this.y);
                }
                break;
                case _0x5075c2: {
                    var _0x8ecdb0 = _0x39e82d.globalAlpha;
                    _0x39e82d.fillStyle = _0x1afbdd;
                    _0x39e82d.fillRect(-this.rectW / 2, -this.rectH / 2, this.rectW, this.rectH);
                    var _0x133e67 = 15;
                    {
                        _0x39e82d.fillStyle = _0x1afbdd;
                        var _0x14c61d = -this.rectW / 2;
                        var _0x1962cd = this.rectW / 2;
                        var _0x41a604 = -this.rectH / 2 + 3;
                        var _0x338b89 = -this.rectH / 2 - _0x133e67;
                        _0x39e82d.beginPath();
                        _0x39e82d.moveTo(_0x14c61d, _0x41a604);
                        var _0x55153b = 0;
                        var _0x40a46a = [-15, 5, 10, 0, -10, 3, 12, 4, 0, 3, 5, -10, 5, -12, 5, 10, 0, -6];
                        var _0x3f629e = 60;
                        var _0x40adf7 = 0;
                        var _0x56b971 = _0x5039a5 - this.x;
                        var _0x438025 = 0 - this.x;
                        var _0x578ffb = _0x396098 - this.y;
                        var _0x44bb07 = 0 - this.y;
                        var _0x575706;
                        var _0x455c1a = _0x14c61d - _0x55153b;
                        _0x39e82d.lineTo(_0x14c61d, _0x338b89);
                        _0x575706 = _0x338b89 + _0x55153b;
                        for (_0x455c1a = _0x14c61d; _0x455c1a < _0x1962cd; _0x455c1a += _0x3f629e) {
                            _0x39e82d.lineTo(_0x455c1a, Math.min(_0x578ffb, Math.max(_0x44bb07, _0x575706 + _0x40a46a[_0x40adf7])));
                            _0x40adf7 = (_0x40adf7 + 1) % _0x40a46a.length;
                        }
                        _0x39e82d.lineTo(_0x1962cd, _0x338b89);
                        _0x39e82d.lineTo(_0x1962cd, _0x41a604);
                        _0x39e82d.closePath();
                        _0x39e82d.fill();
                    } {
                        _0x39e82d.fillStyle = _0x1afbdd;
                        var _0x14c61d = -this.rectW / 2;
                        var _0x1962cd = this.rectW / 2;
                        var _0x41a604 = this.rectH / 2 - 3;
                        var _0x338b89 = this.rectH / 2 + _0x133e67;
                        _0x39e82d.beginPath();
                        _0x39e82d.moveTo(_0x14c61d, _0x41a604);
                        var _0x55153b = 0;
                        var _0x40a46a = [-15, 5, 10, 0, -10, 3, 12, 4, 0, 3, 5, -10, 5, -12, 5, 10, 0, -6];
                        var _0x3f629e = 60;
                        var _0x40adf7 = 0;
                        var _0x56b971 = _0x5039a5 - this.x;
                        var _0x438025 = 0 - this.x;
                        var _0x578ffb = _0x396098 - this.y;
                        var _0x44bb07 = 0 - this.y;
                        var _0x575706;
                        var _0x455c1a = _0x14c61d - _0x55153b;
                        _0x39e82d.lineTo(_0x14c61d, _0x338b89);
                        _0x575706 = _0x338b89 + _0x55153b;
                        for (_0x455c1a = _0x14c61d; _0x455c1a < _0x1962cd; _0x455c1a += _0x3f629e) {
                            _0x39e82d.lineTo(_0x455c1a, Math.min(_0x578ffb, Math.max(_0x44bb07, _0x575706 + _0x40a46a[_0x40adf7])));
                            _0x40adf7 = (_0x40adf7 + 1) % _0x40a46a.length;
                        }
                        _0x39e82d.lineTo(_0x1962cd, _0x338b89);
                        _0x39e82d.lineTo(_0x1962cd, _0x41a604);
                        _0x39e82d.closePath();
                        _0x39e82d.fill();
                    }
                    var _0x4b2d65 = 20;
                    var _0x3557f4 = this.getSkinImageObj("img/riverCurrent" + this.riverSpecT + ".png");
                    if (_0x3557f4) {
                        var _0x104390 = -this.rectW / 2;
                        var _0x391350 = 100;
                        var _0x32dc3b = 120;
                        for (i = 0; i < 40; i++) {
                            var _0x2c4129 = this.riverFlowSpeedX * (_0x391350 / _0x32dc3b) * 1000;
                            var _0x1ca03e = (_0x4ec996 - this.spawnTime) % _0x2c4129 / _0x2c4129;
                            var _0x4c5b84 = _0x391350;
                            var _0x14667b = _0x104390 + _0x4c5b84 * _0x1ca03e;
                            _0x39e82d.drawImage(_0x3557f4, _0x14667b, -this.rectH / 2, _0x391350, this.rectH);
                            _0x104390 += _0x391350;
                        }
                    }
                }
                break;
                case _0x43b42f: {
                    _0x39e82d.fillStyle = _0x1d968f;
                    _0x39e82d.fillRect(-this.rectW / 2, -this.rectH / 2, this.rectW, this.rectH);
                    var _0x4b2d65 = 45;
                    _0x833245(-this.rectW / 2 + _0x4b2d65, -this.rectH / 2 + _0x4b2d65, this.rectW / 2 - _0x4b2d65, this.rectH / 2 - _0x4b2d65, this.x, this.y);
                }
                break;
                case _0x3da3e9: {
                    var _0xedab54 = this.curBiome == _0x36f07b ? _0x218b8d : _0x24c2eb;
                    if (_0x593614) {
                        _0x466d9b(0, 0, this.rad, this.getOutlineColor());
                    } else {
                        _0x466d9b(0, 0, this.rad - 1.5, _0xedab54);
                    }
                }
                break;
                case _0x169f9e: {
                    if (_0x593614) {
                        _0x39e82d.fillStyle = _0x335e4d;
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(0, 0, Math.max(0, this.rad), 0, Math.PI * 2);
                        _0x39e82d.fill();
                    } else {
                        _0x39e82d.fillStyle = "#E4D04C";
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(-5 + this.rPer * 10, -5 + this.rPer * 10, this.rad * 0.8, 0, Math.PI * 2);
                        _0x39e82d.fill();
                    }
                }
                break;
                case _0x54a696:
                    var _0x3e8ffb = 0;
                    var _0x5e7fb0 = (_0x4ec996 - this.spawnTime) / 1000;
                    var _0x150e5d = _0x1b594e(_0x5e7fb0, 1, 5, 2);
                    var _0x318e6c = _0x1b594e(_0x5e7fb0, 1, 0.2, 2);
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = 0.5;
                    _0x466d9b(0, 0, this.rad, _0x51276a);
                    var _0x512a02 = -(-0.2 + _0x150e5d) * _0x4bfce6(90);
                    _0x39e82d.save();
                    _0x39e82d.scale(1, 1 + _0x318e6c);
                    _0x39e82d.globalAlpha = 0.3;
                    _0x39e82d.rotate(_0x512a02);
                    _0x466d9b(0, 0, this.rad - _0x150e5d, "#de9d23");
                    _0x39e82d.restore();
                    _0x39e82d.save();
                    _0x39e82d.scale(1 + _0x318e6c, 1);
                    _0x39e82d.globalAlpha = 0.1;
                    _0x39e82d.rotate(_0x512a02);
                    _0x466d9b(0, 0, this.rad * 0.9 - _0x150e5d, "yellow");
                    _0x39e82d.restore();
                    if (this.specType == 1) {
                        _0x39e82d.globalAlpha = 0.5;
                        _0x466d9b(0, 0, this.rad, "white");
                    }
                    _0x39e82d.restore();
                    break;
                case _0x1a4599:
                    var _0x3e8ffb = 0;
                    var _0x5e7fb0 = (_0x4ec996 - this.spawnTime) / 1000;
                    var _0x150e5d = _0x1b594e(_0x5e7fb0, 1, 5, 2);
                    var _0x318e6c = _0x1b594e(_0x5e7fb0, 1, 0.2, 2);
                    _0x39e82d.globalAlpha = 0.5;
                    _0x466d9b(0, 0, this.rad, _0x4fbc4b);
                    var _0x512a02 = -(-0.2 + _0x150e5d) * _0x439930;
                    _0x39e82d.save();
                    _0x39e82d.scale(1, 1 + _0x318e6c);
                    _0x39e82d.globalAlpha = 0.3;
                    _0x39e82d.rotate(_0x512a02);
                    _0x466d9b(0, 0, this.rad - _0x150e5d, "#2CAAC4");
                    _0x39e82d.restore();
                    _0x39e82d.save();
                    _0x39e82d.scale(1 + _0x318e6c, 1);
                    _0x39e82d.globalAlpha = 0.1;
                    _0x39e82d.rotate(_0x512a02);
                    _0x466d9b(0, 0, this.rad * 0.9 - _0x150e5d, "white");
                    _0x39e82d.restore();
                    break;
                case _0x1255f5: {
                    var _0xcc7f8f = this.curBiome == _0x16f106 ? "#8fa4e0" : _0x4fbc4b;
                    if (this.specType == 1 && _0x2dc130 == _0x4b4e53) {
                        _0x39e82d.save();
                        _0x466d9b(0, 0, this.rad, _0x30755f);
                        _0x39e82d.restore();
                        _0x39e82d.save();
                        var _0x45f763 = 1.5;
                        _0x466d9b(0, 0, Math.max(0, this.rad - _0x45f763), _0xcc7f8f);
                        _0x39e82d.restore();
                    } else {
                        this.drawOutlinedCircle("", _0xcc7f8f);
                    }
                }
                break;
                case _0x25f509:
                case _0x48ede0: {
                    var _0x3557f4 = this.getSkinImageObj("img/snowball.png");
                    if (_0x3557f4) {
                        var _0x2467a0 = this.rad;
                        _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        _0x39e82d.drawImage(_0x3557f4, -_0x2467a0, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                    } else {
                        this.drawOutlinedCircle("", "white");
                    }
                }
                break;
                case _0x63bdc1: {}
                break;
                case _0x1f5668: {
                    _0x39e82d.save();
                    _0x466d9b(0, 0, this.rad, !this.isEdibleOutlined() ? _0x3a1319(this.curBiome) : _0x556e31);
                    _0x466d9b(0, 0, Math.max(0, this.rad - 2), _0x4fbc4b);
                    _0x39e82d.restore();
                    _0x39e82d.save();
                    var _0x268152 = 1.2;
                    var _0x32f917 = 0.3;
                    var _0x52ef52 = 0.7;
                    var _0x4754de = (_0x52ef52 - _0x32f917) * 0.5;
                    _0x39e82d.globalAlpha *= _0x32f917 + _0x4754de + _0x4754de * Math.sin(Math.PI * 2 / _0x268152 * ((_0x4ec996 - this.spawnTime) / 1000));
                    _0x39e82d.globalAlpha *= this.effA_poison;
                    var _0x3fc13b = 2.6;
                    _0x466d9b(0, 0, this.rad + _0x3fc13b, "#7FF600");
                    _0x39e82d.restore();
                }
                break;
                case _0x429905: {
                    _0x39e82d.save();
                    var _0x64ed66 = this.speciesType;
                    if (this.speciesType == 200) {
                        _0x64ed66 = _0x64ed66 + "/" + this.speciesSubType;
                    }
                    var _0x2ef5a5 = "skins/volcano/phoenix/" + _0x64ed66 + "/firetornado.png";
                    var _0x6c21d7 = this.speciesType === 1 || this.speciesType === 2 || this.speciesType === 200 ? 1 : this.mopeSeasonID;
                    var _0x2004df = this.getSkinImageObjForSeason(_0x2ef5a5, _0x6c21d7);
                    if (_0x2004df) {
                        var _0x2467a0 = this.rad;
                        var _0x421aab = 1;
                        var _0x486915 = 1000 / _0x421aab;
                        var _0x1ca03e = (_0x4ec996 - this.spawnTime) % _0x486915 / _0x486915;
                        var _0x1d90bc = _0x1ca03e * 2 * Math.PI;
                        var _0x421aab = 30 / 60;
                        var _0x486915 = 1000 / _0x421aab;
                        var _0x1ca03e = (_0x4ec996 - this.spawnTime) % _0x486915 / _0x486915;
                        var _0x4f4b00 = _0x1ca03e * 2 * Math.PI;
                        _0x39e82d.save();
                        _0x39e82d.rotate(_0x1d90bc);
                        var _0x1d0c81 = _0x39e82d.globalAlpha;
                        _0x39e82d.globalAlpha = _0x1d0c81 * 1;
                        var _0x5e7fb0 = (_0x4ec996 - this.spawnTime) / 1000;
                        var _0x268152 = 2.2;
                        var _0x4e6aef = Math.cos(Math.PI * 2 / _0x268152 * _0x5e7fb0) * 6.5;
                        var _0x9927b6 = Math.sin(Math.PI * 2 / _0x268152 * _0x5e7fb0) * 6.5;
                        _0x39e82d.globalAlpha = 1;
                        _0x39e82d.drawImage(_0x2004df, -_0x2467a0 - _0x4e6aef / 2.2, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                        _0x39e82d.restore();
                        _0x39e82d.save();
                        _0x39e82d.rotate(_0x4f4b00);
                        _0x39e82d.drawImage(_0x2004df, -_0x2467a0 - _0x4e6aef / 2.2, -_0x2467a0, _0x2467a0 * 2, _0x2467a0 * 2);
                        _0x39e82d.restore();
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x4eb74c: {
                    var _0x268152 = 1;
                    var _0x32f917 = 0.15;
                    var _0x52ef52 = 0.8;
                    var _0x4754de = (_0x52ef52 - _0x32f917) * 0.5;
                    var _0xb07cac = _0x32f917 + _0x4754de + _0x4754de * Math.sin(Math.PI * 2 / _0x268152 * (_0x4ec996 / 1000));
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha *= _0xb07cac;
                    _0x466d9b(0, 0, Math.max(0, this.rad), "#F6EA65");
                    _0x39e82d.restore();
                    var _0x268152 = 1;
                    var _0x32f917 = 0.85;
                    var _0x52ef52 = 1;
                    var _0x4754de = (_0x52ef52 - _0x32f917) * 0.5;
                    var _0x2e52a6 = _0x32f917 + _0x4754de + _0x4754de * Math.sin(Math.PI * 2 / _0x268152 * (_0x4ec996 / 1000));
                    var _0x13a1de = Math.trunc(_0x4ec996 / 300) % 2;
                    var _0x6c21d7 = this.animalType === 14 && (this.speciesType === 1 || this.speciesType === 2 || this.speciesType === 3 || this.speciesType === 100 || this.speciesType === 200 || this.speciesType === 201 || this.speciesType === 204 || this.speciesType === 1001 || this.speciesType === 69420) ? 1 : this.mopeSeasonID;
                    var _0x3557f4 = this.getSkinImageObjForSeason(_0x13a1de == 1 ? "img/fire.png" : "img/fire2.png", _0x6c21d7);
                    if (_0x3557f4) {
                        var _0x5dcb0b = 0;
                        var _0x397f5f = this.rad * 0.3;
                        var _0x1c59ea = this.rad * 2 * (2 + _0x2e52a6 * 2) / 3;
                        var _0x105ada = this.rad * 2 * _0x2e52a6;
                        var _0x1ef317 = 0.5;
                        var _0x3e20f2 = 0.95;
                        _0x39e82d.save();
                        if (_0x3557f4) {
                            _0x39e82d.globalAlpha *= this.onFireEffA * _0x2e52a6;
                            _0x39e82d.drawImage(_0x3557f4, _0x5dcb0b + _0x1c59ea * -_0x1ef317, _0x397f5f + _0x105ada * -_0x3e20f2, _0x1c59ea, _0x105ada);
                        }
                        _0x39e82d.restore();
                    }
                }
                break;
                case _0x48c056: {}
                break;
                default: {
                    if (this.isRectangle) {
                        _0x39e82d.fillStyle = "black";
                        _0x39e82d.fillRect(-this.rectW / 2, -this.rectH / 2, this.rectW, this.rectH);
                        this.drawOutlinedCircle("(make this rect obj invisible on server?)" + this.oType, "black");
                    } else {
                        this.drawOutlinedCircle("(make this obj invisible on server?)" + this.oType, "black");
                    }
                }
                break;
            }
        };
        GameObj.prototype.beforeCustomDraw = function() {};
        GameObj.prototype.afterCustomDraw = function() {};
        GameObj.prototype.drawImage = function(_0x1d05ca, _0x1f8cb8, _0x2b61d8, _0xc73cb3, _0x3c5978, _0x26f892) {
            if (_0x26f892 !== undefined) {
                _0x39e82d.rotate(_0x26f892);
            }
            _0x39e82d.drawImage(_0x1d05ca, _0x1f8cb8, _0x2b61d8, _0xc73cb3, _0x3c5978);
        };
        GameObj.prototype.drawTranslate = function() {
            _0x39e82d.translate(this.x, this.y);
        };
        GameObj.prototype.drawScaleEffect = function() {
            if (!_0x1d523b && this.showScaleEffectToPlayer()) {
                if (this.doesDrawEffectScale && _0x5981a2 != _0x4051d6) {
                    var _0x1540c0 = 0;
                    var _0x42e4f6 = _0x4ec996 - this.spawnTime;
                    if (_0x41597c) {
                        _0x1540c0 = _0x2f34bb.objects[_0x42e4f6 % _0x2f34bb.objects.length];
                        if (this.drawEffectScale_Slow) {
                            _0x1540c0 = _0x2f34bb.objects_slow[_0x42e4f6 % _0x2f34bb.objects_slow.length];
                        }
                    } else {
                        var _0x340880 = 1.5;
                        var _0x47e36a = 0.1;
                        if (this.drawEffectScale_Slow) {
                            _0x340880 = 2.5;
                            _0x47e36a = 0.04;
                        }
                        _0x1540c0 = _0x47e36a * Math.sin(Math.PI * 2 / _0x340880 * (_0x42e4f6 / 1000));
                    }
                    _0x39e82d.scale(1 + _0x1540c0, 1 + _0x1540c0 / 2);
                }
            }
        };
        GameObj.prototype.setSkinPath = function() {
            var _0x10b55c = this.isEdibleOutlined() ? "e" : this.oType;
            _0x10b55c = this.getBiomeSkin(_0x10b55c);
            _0x10b55c = "gameobj/" + this.oType + this.getObjSpecies() + "/" + _0x10b55c + ".png";
            this.objSkinPath = _0x10b55c;
        };
        GameObj.prototype.draw = function(_0x2eeef4) {
            this.moveUpdF = this.moveUpdate();
            if (this.objSkinPath == null) {
                this.setSkinPath();
            }
            this.beforeCustomDraw();
            _0x39e82d.save();
            this.drawTranslate();
            this.drawScaleEffect();
            var _0x1d3fa9 = this.getOutlineColor();
            var _0x21d3b9 = 2;
            if (this.dead) {
                _0x39e82d.globalAlpha *= 1 - this.moveUpdF;
            } else {
                _0x39e82d.globalAlpha *= Math.min(1, (_0x4ec996 - this.spawnTime) / (_0x370a92 * 1000));
            }
            this.customDraw(_0x2eeef4);
            if (this.flag_hurt) {
                this.onHurt();
            }
            this.drawHealthBar();
            _0x39e82d.restore();
            this.afterCustomDraw();
        };
        GameObj.prototype.onHurt = function() {
            _0x39e82d.fillStyle = "rgba(255,0,0,0.3)";
            _0x39e82d.beginPath();
            _0x39e82d.arc(0, 0, Math.max(0, this.rad), 0, Math.PI * 2);
            _0x39e82d.fill();
        };
        GameObj.prototype.drawHealthBar = function() {
            _0x39e82d.save();
            var _0x668a46 = _0x4ec996 < this.hpBarTimeoutT ? 1 : 0;
            this.hpBarA += (_0x668a46 - this.hpBarA) * 0.04;
            if (this.hpBarA > 0.001) {
                this.hpPer += (this.hpPer_n - this.hpPer) * 0.1;
                var _0x423e68 = Math.max(1, this.rad / 25);
                var _0x2b386a = _0x423e68 * 20;
                var _0x87eeb6 = _0x423e68 * 5;
                var _0x5e9f81 = 0;
                var _0x40c991 = -this.rad - _0x423e68 * 10;
                _0x39e82d.globalAlpha *= this.hpBarA;
                _0x39e82d.fillStyle = "rgba(0,0,0,0.35)";
                _0x39e82d.fillRect(_0x5e9f81 - _0x2b386a / 2, _0x40c991 - _0x87eeb6 / 2, _0x2b386a, _0x87eeb6);
                _0x39e82d.fillStyle = "#16D729";
                _0x39e82d.fillRect(_0x5e9f81 - _0x2b386a / 2, _0x40c991 - _0x87eeb6 / 2, _0x2b386a * (this.hpPer / 100), _0x87eeb6);
            }
            _0x39e82d.restore();
            this.drawInfectionBar();
        };
        var _0x2c5c6f = 5;
        GameObj.prototype.drawInfectionBar = function() {
            if (this.flag_underWater) {
                return;
            }
            var _0x307429 = _0x4ec996 < this.infectionBarTimeoutT ? 1 : 0;
            this.infectionBarA += (_0x307429 - this.infectionBarA) * 0.04;
            if (this.infectionBarA > 0.001) {
                this.infectionPer += (this.infectionPer_n - this.infectionPer) * 0.1;
                this.drawBar("red", this.infectionBarA, this.infectionPer, 2, 6.5);
            }
        };
        GameObj.prototype.drawBar = function(_0xcd0a99, _0x59afdf, _0x32c990, _0x1db792, _0x3e21d5) {
            _0x39e82d.save();
            var _0x4acbd9 = Math.max(1, this.rad / 25);
            var _0xfff500 = _0x4acbd9 * 20;
            barH = _0x1db792 * _0x4acbd9;
            var _0x27a542 = 0;
            var _0x369adc = -this.rad - _0x3e21d5 * _0x4acbd9;
            _0x39e82d.globalAlpha = 0.3;
            _0x39e82d.fillStyle = "rgba(0,0,0,0.35)";
            _0x39e82d.fillRect(_0x27a542 - _0xfff500 / 2, _0x369adc - barH / 2, _0xfff500, barH);
            _0x39e82d.globalAlpha = _0x59afdf;
            _0x39e82d.fillStyle = _0xcd0a99;
            _0x39e82d.fillRect(_0x27a542 - _0xfff500 / 2, _0x369adc - barH / 2, _0xfff500 * (_0x32c990 / 100), barH);
            _0x39e82d.restore();
        };
        GameObj.prototype.drawChat = function() {
            if (this.chatLines.length < 1) {
                return;
            }
            _0x39e82d.save();
            _0x39e82d.font = "10px Arial";
            _0x39e82d.lineWidth = 1;
            _0x39e82d.textAlign = "center";
            _0x39e82d.textBaseline = "middle";
            var _0x5b34f1 = this.hpBarA > 0.01 ? -10 : 0;
            var _0x390fe9 = [];
            for (var _0xf30b91 = this.chatLines.length - 1; _0xf30b91 >= 0; _0xf30b91--) {
                var _0x21e5a1 = this.chatLines[_0xf30b91];
                if (!_0x4a5c21 && _0x21e5a1.chatTxt.indexOf("#koa:") > -1) {
                    continue;
                }
                var _0x4f60fb = (this.chatLines.length - 1 - _0xf30b91) * -13 + _0x5b34f1;
                var _0x3414d9 = _0x4ec996 > _0x21e5a1.chatFadeT ? 0 : 1;
                _0x21e5a1.chatA += (_0x3414d9 - _0x21e5a1.chatA) * 0.1;
                _0x39e82d.shadowOffsetX = 0;
                _0x39e82d.shadowOffsetY = 0;
                if (_0x21e5a1.chatA < 0.02) {
                    if (_0x3414d9 < 0.02) {
                        _0x21e5a1.chatTxt = "";
                    }
                    _0x390fe9.push(_0xf30b91);
                    continue;
                }
                var _0x4865fb = _0x39e82d.measureText(_0x21e5a1.chatTxt).width;
                var _0x2ac84b = 10;
                var _0x2eb1fc = 1;
                var _0x4daf6b = 1;
                _0x39e82d.globalAlpha = _0x21e5a1.chatA * 0.8;
                _0x39e82d.fillStyle = _0x3a1319(this.curBiome);
                _0x39e82d.fillRect(this.x - _0x2eb1fc - _0x4865fb / 2, _0x4f60fb + this.y - this.rad - 10 - _0x2ac84b / 2 - _0x4daf6b, _0x4865fb + _0x2eb1fc * 2, _0x2ac84b + _0x4daf6b * 2);
                _0x39e82d.fillStyle = "#F1C34C";
                if (_0x5981a2 != _0x4051d6) {
                    _0x39e82d.shadowOffsetX = 1;
                    _0x39e82d.shadowOffsetY = 1;
                    _0x39e82d.shadowColor = "black";
                }
                _0x39e82d.globalAlpha = _0x21e5a1.chatA;
                _0x39e82d.fillText(_0x21e5a1.chatTxt, this.x, _0x4f60fb + this.y - this.rad - 10);
            }
            for (var _0xf30b91 = 0; _0xf30b91 < _0x390fe9.length; _0xf30b91++) {
                this.chatLines.splice(_0x390fe9[_0xf30b91], 1);
            }
            _0x39e82d.restore();
        };
        GameObj.prototype.getOutlineColor = function() {
            if (this.alwaysPlainOutline) {
                return _0x504cbf;
            }
            if (this.isEdibleOutlined()) {
                return _0x556e31;
            }
            if (this.oType == _0x48c056 && _0x407e2a[this.animalType - 1] > 0 && this.id != _0x166276) {
                return _0x59e0de;
            }
            var _0x31c923 = this.curBiome;
            if (this.flag_inWater) {
                _0x31c923 = _0x5d8525;
            } else if (this.flag_inLava) {
                return "#c64a00";
            }
            return _0x3a1319(_0x31c923);
        };
        GameObj.prototype.isEdibleOutlined = function() {
            if (this.oType == _0x48c056) {
                return _0x594905[this.animalType - 1] > 0 && this.id != _0x166276;
            } else {
                return _0x3c5c91[this.oType - 1] > 0;
            }
        };
        GameObj.prototype.gotChat = function(_0x43ee41) {
            if (this.chatLines) {
                this.chatLines.push({
                    chatTxt: _0x43ee41,
                    chatFadeT: _0x4ec996 + 4000,
                    chatA: 0
                });
                if (this.chatLines.length > 5) {
                    this.chatLines.splice(this.chatLines.length - 1, 1);
                }
            }
        };
        GameObj.prototype.drawOutlinedCircle = function(_0x3bd465, _0x422c41) {
            var _0x1a4906 = this.getOutlineColor();
            var _0x4ca82f = 1.5;
            if (_0x5981a2 != _0x4051d6 || _0x1a4906 != _0x504cbf) {
                _0x466d9b(0, 0, this.rad, _0x1a4906);
            }
            _0x466d9b(0, 0, Math.max(0, this.rad - _0x4ca82f), _0x422c41);
            if (_0x3bd465 && _0x3bd465.length > 0) {
                _0x39e82d.save();
                _0x39e82d.fillStyle = "black";
                _0x39e82d.fillText(_0x3bd465, -this.rad / 2, 0);
                _0x39e82d.restore();
            }
        };
        GameObj.prototype.drawOutlinedCircleRad = function(_0x3144e3, _0x2c7a52, _0x213236) {
            var _0x490143 = this.getOutlineColor();
            var _0x56480a = 1.5;
            if (_0x5981a2 != _0x4051d6 || _0x490143 != _0x504cbf) {
                _0x466d9b(0, 0, _0x213236, _0x490143);
            }
            _0x466d9b(0, 0, Math.max(0, _0x213236 - _0x56480a), _0x2c7a52);
        };
        GameObj.prototype.onLerpUpdate = function(_0x4248c6) {};
        GameObj.prototype.moveUpdate = function() {
            var _0x1836cd = (_0x4ec996 - this.updateTime) / 1000 / _0x370a92;
            _0x1836cd = _0x1836cd < 0 ? 0 : _0x1836cd > 1 ? 1 : _0x1836cd;
            if ((this.dead || !this.drawMe) && _0x1836cd >= 1) {
                _0xad46f9.push(this);
            }
            this.onLerpUpdate(_0x1836cd);
            this.x = _0x1836cd * (this.nx - this.ox) + this.ox;
            this.y = _0x1836cd * (this.ny - this.oy) + this.oy;
            this.rad += (this.nRad - this.rad) * 0.1;
            if (this.angle != undefined) {
                this.lerpAngle(_0x1836cd);
            }
            return Math.min(1, _0x1836cd);
        };
        GameObj.prototype.lerpAngle = function() {
            let _0x3f669f = _0x27200a / _0x151f46;
            this.angleDelta = _0x4dae5a(this.angle, this.nAngle) || 0;
            const _0x4a03eb = this.angleDelta * Math.min(_0x3f669f * 0.1, 1);
            this.angle += _0x4a03eb;
        };
        GameObj.prototype.readCustomData_onUpdate = function(_0x479674) {};
        GameObj.prototype.readCustomData_onNewlyVisible = function(_0x39fcdb) {
            if (this.oType == _0x252e1c || this.oType == _0x4b7c77 || this.oType == _0x5c8a84) {
                this.innerRad = _0x39fcdb.readUInt16() / 4;
            }
        };
        GameObj.prototype.setObjTypes = function(_0x5cd81b, _0x20e7cd) {
            this.oType = _0x5cd81b;
        };
        GameObj.prototype.clientBatchDraw = false;
        GameObj.prototype.clientBatchDrawID = false;
        GameObj.prototype.staticUpd_readMsg = function(_0x46a5dc, _0x5c7649) {
            this.setObjTypes(_0x5c7649, null);
            this.id = _0x46a5dc.readUInt32();
            var _0x5736bf = _0x46a5dc.readUInt32() / 4;
            var _0x405f0c = _0x46a5dc.readUInt16() / 4;
            var _0x372cfe = _0x46a5dc.readUInt16() / 4;
            this.ox = this.x = this.nx = _0x405f0c;
            this.oy = this.y = this.ny = _0x372cfe;
            this.oRad = this.rad = this.nRad = _0x5736bf;
            this.curBiome = _0x46a5dc.readUInt8();
            this.mopeSeasonID = 1;
            if (!this.clientBatchDraw && (this.oType == _0x169f9e || this.oType == _0x3f0029)) {
                this.clientBatchDraw = true;
                this.clientBatchDrawID = this.oType;
            }
            this.readCustomStaticData(_0x46a5dc);
        };
        GameObj.prototype.readCustomStaticData = function(_0x144966) {};
        GameObj.prototype.worldUpd_readMsgNewlyVisible = function(_0x28141b, _0x55f384, _0x245794) {
            this.setObjTypes(_0x55f384, _0x245794);
            var _0x13d90c = _0x28141b.readUInt32();
            var _0x80024c = _0x28141b.readUInt32() / 4;
            var _0x4f41e3 = _0x28141b.readUInt16() / 4;
            var _0x2ddcc3 = _0x28141b.readUInt16() / 4;
            this.id = _0x13d90c;
            this.ox = this.x = this.nx = _0x4f41e3;
            this.oy = this.y = this.ny = _0x2ddcc3;
            this.nRad = _0x80024c;
            this.oRad = this.rad = 0;
            if (_0x55f384 == _0x503518 || _0x55f384 == _0x9598c7 || _0x55f384 == _0x413190 || _0x55f384 == _0x3cf77e || _0x55f384 == _0x2c3383 || _0x55f384 == _0x651296 || _0x55f384 == _0x162398 || _0x55f384 == _0x3da3e9 || _0x55f384 == _0x2d6c4a || _0x55f384 == _0x169f9e) {
                this.animateRadOnSpawn = false;
            }
            if (!this.animateRadOnSpawn) {
                this.oRad = this.rad = _0x80024c;
            }
            var _0x5a2dd4 = _0x28141b.readUInt8();
            this.curBiome = _0x5a2dd4;
            if (this.oType != _0x48c056) {
                this.mopeSeasonID = _0x28141b.readUInt8();
                this.animalType = _0x28141b.readUInt16();
                this.speciesType = _0x28141b.readUInt16();
                this.speciesSubType = _0x28141b.readUInt16();
            }
            var _0x4fe991 = _0x28141b.readBitGroup();
            var _0x43f3fd = _0x4fe991.getBool();
            var _0x5e4c5a = _0x4fe991.getBool();
            var _0xdacfbb = _0x4fe991.getBool();
            this.clientBatchDraw = _0x4fe991.getBool();
            this.objGetsAngleUpdate = _0xdacfbb;
            if (this.clientBatchDraw) {
                this.clientBatchDrawID = _0x28141b.readUInt16();
            }
            var _0x353fb4 = null;
            if (_0x43f3fd) {
                this.spawnedByID = _0x28141b.readUInt32();
                _0x353fb4 = _0xb3e9be[this.spawnedByID];
            }
            if (_0x353fb4) {
                this.updateTime = _0x4ec996;
                this.nx = this.x;
                this.ny = this.y;
                this.ox = _0x353fb4.x;
                this.oy = _0x353fb4.y;
                this.x = _0x353fb4.x;
                this.y = _0x353fb4.y;
            }
            if (_0x5e4c5a) {
                this.isRectangle = true;
                this.rectW = _0x28141b.readUInt16();
                this.rectH = _0x28141b.readUInt16();
            } else {
                var _0x1278e = _0x28141b.readUInt8() * 2;
                this.updateAngle(_0x1278e);
            }
            this.readUpdatedPropertyItem(_0x3fd886, _0x28141b);
            this.readUpdatedPropertyItem(_0x4951fe, _0x28141b);
            this.readCustomData_onNewlyVisible(_0x28141b);
        };
        GameObj.prototype.setRadius = function(_0x3465e6) {
            this.rad = _0x3465e6;
        };
        GameObj.prototype.easeAngleChanges = true;
        GameObj.prototype.updateAngle = function(_0x1e839e) {
            var _0x1e6a28 = this.oType == _0x651296 ? 180 : 90;
            if (!this.easeAngleChanges) {
                this.angle = _0x4bfce6(_0x1e839e + _0x1e6a28);
            } else {
                var _0x1a8a85 = _0x4bfce6(_0x1e839e + _0x1e6a28);
                this.oAngle = this.angle;
                this.nAngle = _0x1a8a85;
                if (this.firstPosUpd) {
                    this.oAngle = this.nAngle = this.angle = _0x1a8a85;
                }
            }
        };
        GameObj.prototype.setMovedToPos = function(_0x323255, _0x49f2c8) {
            this.updateTime = _0x4ec996;
            this.ox = this.x;
            this.oy = this.y;
            this.nx = _0x323255;
            this.ny = _0x49f2c8;
        };
        GameObj.prototype.setNewRad = function(_0x4b55ec) {
            this.oRad = this.rad;
            this.nRad = _0x4b55ec;
        };
        GameObj.prototype.worldUpd_readMsgUpdate = function(_0x5ce531) {
            var _0x16b8fb = _0x5ce531.readBitGroup();
            this.readUpdatedFlags(_0x16b8fb);
            var _0x5dbe88 = _0x5ce531.readUInt8();
            for (var _0x4fe647 = 0; _0x4fe647 < _0x5dbe88; _0x4fe647++) {
                var _0x2d766a = _0x5ce531.readUInt16();
                this.readUpdatedPropertyItem(_0x2d766a, _0x5ce531);
            }
            this.readCustomData_onUpdate(_0x5ce531);
            this.firstPosUpd = false;
        };
        GameObj.prototype.readUpdatedPropertyItem = function(_0x3389be, _0x1d3408) {
            if (_0x3389be == _0x1464b9) {
                var _0x120ffd = _0x1d3408.readUInt16() / 4;
                var _0x5d6d45 = _0x1d3408.readUInt16() / 4;
                this.setMovedToPos(_0x120ffd, _0x5d6d45);
            } else if (_0x3389be == _0x1af11e) {
                var _0x270d7c = _0x1d3408.readUInt16() / 10;
                this.setNewRad(_0x270d7c);
            } else if (_0x3389be == _0x172a9b) {
                var _0x30b017 = _0x224d55(_0x1d3408.readUInt16());
                this.updateAngle(_0x30b017);
            } else if (_0x3389be == _0x3fd886) {
                this.specType = _0x1d3408.readUInt8();
            } else if (_0x3389be == _0x4951fe) {
                this.specType2 = _0x1d3408.readUInt8();
            } else if (_0x3389be == _0x2c8f39) {
                var _0x23729e = _0x1d3408.readUInt8();
                this.setHpBar(_0x23729e);
            } else if (_0x3389be == _0x17a581) {
                this.curBiome = _0x1d3408.readUInt8();
            } else if (_0x3389be == _0x5d79b0) {
                this.flag_hurt = _0x1d3408.readUInt8() == 1;
            } else {
                this.readUpdatedProperty(_0x3389be, _0x1d3408);
            }
        };
        var _0x46813b = 0;
        GameObj.prototype.readUpdatedFlags = function(_0x3d787a) {
            this.flag_hurt = _0x3d787a.getBool();
            this.flag_flying = _0x3d787a.getBool();
        };
        GameObj.prototype.readUpdatedProperty = function(_0x200444, _0x1fbec2) {};
        GameObj.prototype.setHpBar = function(_0x43754a) {
            this.hpPer_n = _0x43754a;
            this.hpBarTimeoutT = +new Date() + 3000;
        };
        GameObj.prototype.killerId = 0;
        GameObj.prototype.worldUpd_readMsgRemovedObj = function(_0x2f0595) {
            var _0x167e67 = _0x2f0595.readUInt8() > 0;
            this.killerId = _0x167e67 ? _0x2f0595.readUInt32() : 0;
            this.removeFromTheGame();
        };
        GameObj.prototype.removeFromTheGame = function() {
            var _0x26af7b = this.killerId > 0 ? _0xb3e9be[this.killerId] : undefined;
            this.dead = true;
            this.updateTime = _0x4ec996;
            if (this.oType == _0x651296) {
                this.ox = this.x;
                this.oy = this.y;
                this.nx = this.x;
                this.ny = this.y;
            } else if (_0x26af7b) {
                this.ox = this.x;
                this.oy = this.y;
                this.oRad = this.rad;
                this.nx = _0x26af7b.nx;
                this.ny = _0x26af7b.ny;
                this.nRad = Math.min(this.rad, _0x26af7b.rad);
                if (_0x166276 == this.killerId) {
                    if (this.oType == _0x48c056) {
                        if (!_0x357cad) {
                            _0x3bbeb2("audio/bite.mp3", 0.05, _0x5be054(0.9, 1.1));
                        }
                    }
                    if (this.oType == _0x1255f5 || this.oType == _0x2b90a2 || this.oType == _0x1a4599) {
                        if (!_0x357cad) {
                            _0x3bbeb2("audio/bloop.mp3", 0.6, _0x5be054(0.9, 1.1));
                        }
                    } else if (!_0x357cad) {
                        _0x3bbeb2("audio/nom.mp3", 0.5);
                    }
                }
                this.hp_n = 0;
            } else {
                this.ox = this.x;
                this.oy = this.y;
                this.oRad = this.rad;
                this.nx = this.x;
                this.ny = this.y;
                this.nRad = 0;
            }
            this.onRemovedFromGame();
        };
        GameObj.prototype.updateZ = function() {
            switch (this.oType) {
                case _0x37530a:
                case _0xe686e1:
                case _0x27d2ab:
                    this.z = 1000000;
                    break;
                case _0x43b42f:
                    this.z = -220;
                    break;
                case _0x315f18:
                case _0x143680:
                    this.z = -210;
                    break;
                case _0x9598c7:
                case _0x503518:
                    this.z = -209;
                    break;
                case _0x5075c2:
                    this.z = -158;
                    break;
                case _0x5983d9:
                    this.z = -140;
                    break;
                case _0x5a2c61:
                    this.z = -151;
                    break;
                case _0x2c3383:
                case _0x369a30:
                    this.z = -160;
                    break;
                case _0x132d0f:
                    this.z = -297;
                    break;
                case _0x435c85:
                    this.z = -296;
                    break;
                case _0x208477:
                    this.z = -157;
                    break;
                case _0x413190:
                    this.z = -158;
                    break;
                case _0x3cf77e:
                    this.z = -156;
                    break;
                case _0x4b2c05:
                    this.z = -155;
                    break;
                case _0x169f9e:
                    this.z = -154;
                    break;
                case _0x5c8a84:
                    this.z = -150;
                    break;
                case _0x4b7c77:
                    this.z = -101;
                    break;
                case _0x252e1c:
                    this.z = -100;
                    break;
                case _0x4b7e7f:
                case _0x2e9b97:
                    this.z = -99;
                    break;
                case _0x1d4611:
                case _0x2d6c4a:
                    this.z = 1000;
                    break;
                case _0x38a462:
                    this.z = 1002;
                    break;
                case _0x3da3e9:
                    this.z = 1002;
                    break;
                case _0x3efa75:
                case _0x162398:
                    this.z = 999;
                    break;
                case _0x63bdc1:
                    this.z = 1003;
                    break;
                case _0x40e3c5:
                case _0x165724:
                case _0x440978:
                    this.z = 1002 + this.rad;
                    break;
                case _0x54a696:
                    this.z = 100015;
                    break;
                case _0x1a4599:
                    this.z = 100015;
                    break;
                case _0x52e535:
                case _0x76f666:
                    this.z = 1010 + this.rad;
                    if (this.specType2 == 1) {
                        this.z += 1000;
                    }
                    break;
                case _0x429905:
                    this.z = 2000 + this.rad;
                    break;
                case _0x4eb74c:
                case _0x1f5668:
                    this.z = 1006;
                    break;
                case _0x48c056:
                    break;
                default:
                    this.z = this.rad;
                    break;
            }
        };
        GameObj.prototype.updateZ_onTree = function(_0x5cfddc) {
            if (this.oType == _0x48c056 && this.flag_eff_isOnTree) {
                this.z = _0x5cfddc + 1100;
            }
        };
        GameObj.prototype.showScaleEffectToPlayer = function() {
            var _0xe6613f = _0xb3e9be[_0x166276];
            if (_0xe6613f && _0xe6613f.flag_inHidingHole && _0xe6613f.lastHidingHoleID == this.id) {
                return false;
            }
            return true;
        };
        GameObj.prototype.calculateZIndex = function() {
            this.updateZ();
            if (this.oType == _0x48c056) {
                if (this.flag_flying) {
                    this.z = 100000;
                    if (this.flag_isGrabbed) {
                        this.z -= this.rad;
                    }
                    if (this.flag_eff_aniInClaws || this.flag_usingAbility) {
                        this.z += 1000;
                    }
                } else if (this.flag_isInArena) {
                    this.z = 10000 + this.rad;
                } else {
                    this.updateZ_onTree(this.z);
                    if (this.flag_eff_invincible) {
                        this.z += 1000;
                    }
                }
            } else {
                this.updateZ_onTree(this.z);
            }
        };
        GameObj.prototype.season = 1;
        GameObj.prototype.mopeSeasonID = 0;
        GameObj.prototype.skinThemeID = 0;
        GameObj.prototype.getSkinImageObj = function(_0x415bbc) {
            var _0x6ee026 = "./assets/s/" + this.mopeSeasonID + "/" + _0x415bbc;
            if (this.skinThemeID > 0) {
                _0x6ee026 = "./assets/t/" + this.skinThemeID + "/" + _0x415bbc;
            }
            return _0x4172bb(_0x6ee026, function(_0x5a20b8) {
                console.log(_0x5a20b8.src);
            });
        };
        GameObj.prototype.getSkinImageObjForSeason = function(_0x1a389d, _0x162f48) {
            if (!_0x162f48) {}
            var _0x539321 = "./assets/s/" + _0x162f48 + "/" + _0x1a389d;
            if (this.skinThemeID > 0) {
                _0x539321 = "./assets/t/" + this.skinThemeID + "/" + _0x1a389d;
            }
            return _0x4172bb(_0x539321, function(_0xf8e04a) {});
        };
        GameObj.prototype.getObjImageObjForSeason = function(_0x58f6ee, _0x26de00) {
            if (!_0x26de00) {}
            var _0x1538fe = "./assets/s/" + _0x26de00 + "/" + _0x58f6ee;
            return _0x4172bb(_0x1538fe, function(_0x3e27cd) {});
        };
        GameObj.prototype.onRemovedFromGame = function() {};

        function GameObj(_0x2efa6c) {
            this.oType = _0x2efa6c;
            this.rPer = _0x5be054(0, 1);
            this.spawnTime = _0x4ec996;
            this.updateTime = _0x4ec996;
            this.firstPosUpd = true;
            this.chatLines = [];
            switch (this.oType) {
                case _0x31dc89:
                case _0x76f666:
                case _0x1c9b47:
                case _0x590a46:
                case _0x52e535:
                case _0x1255f5:
                case _0x4eb74c:
                case _0x1f5668:
                case _0x63bdc1:
                case _0x3edcca:
                case _0x260340:
                case _0x5aa79b:
                case _0x252e1c:
                case _0x5c8a84:
                case _0x4b7c77:
                case _0x1e888e:
                case _0x510730:
                case _0x31e467:
                case _0x17e94b:
                case _0x5046bf:
                case _0xfc2e38:
                case _0x3e2946:
                case _0xddc401:
                case _0x132c33:
                case _0xbcb6f1:
                case _0xf30c2f:
                case _0x7e4e1a:
                case _0x463a00:
                case _0x88c3ca:
                case _0x5854cd:
                case _0xa48e9e:
                case _0x1a0fc0:
                case _0x1d4611:
                case _0x3efa75:
                case _0x38a462:
                    this.doesDrawEffectScale = true;
                    break;
                default:
                    break;
            }
            if (this.oType == _0x252e1c || this.oType == _0x4b7c77 || this.oType == _0x5c8a84 || this.oType == _0x63bdc1) {
                this.drawEffectScale_Slow = true;
            }
        }
        var _0x256ea1 = _0x779dc2;
        var _0x28c171 = GameObj;
        _0x256ea1.prototype = Object.create(_0x28c171.prototype);
        _0x256ea1.prototype.constructor = _0x256ea1;

        function _0x779dc2() {
            this.objs = [];
            this.updateZ = function() {
                if (this.objs.length > 0) {
                    this.objs[0].updateZ();
                    this.z = this.objs[0].z;
                }
            };
            this.draw = function() {
                for (var _0x515f6d = 0; _0x515f6d < this.objs.length; _0x515f6d++) {
                    var _0x41dd8b = this.objs[_0x515f6d];
                    _0x41dd8b.draw(true);
                }
                for (var _0x515f6d = 0; _0x515f6d < this.objs.length; _0x515f6d++) {
                    var _0x41dd8b = this.objs[_0x515f6d];
                    _0x41dd8b.draw(false);
                }
            };
            this.addBatchedObj = function(_0x20f207) {
                if (this.objs.length == 0) {
                    this.oType = _0x20f207.oType;
                    this.objs = [];
                }
                this.objs.push(_0x20f207);
            };
        }
        var _0x5899d5 = _0xa0a2ad;
        var _0x28c171 = GameObj;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0xa0a2ad.prototype.abilityType = _0x57b7e4;
        _0xa0a2ad.prototype.showHalloweenSkins = true;
        _0xa0a2ad.prototype.updateZ = function() {
            if (this.abilityType == _0x21ad34 || this.abilityType == _0x226fd3 || this.abilityType == _0x3f1d5f || this.abilityType == _0x5aedc9 || this.abilityType == _0x461442 || this.abilityType == _0x44c3d0 || this.abilityType == _0x1d4536) {
                this.z = 100002;
            } else if (this.abilityType == _0x1d4536 || this.abilityType == _0x461442 || this.abilityType == _0x1b097a || this.abilityType == _0x5bccab || this.abilityType == _0x2cb681 || this.abilityType == _0x543d08 || this.abilityType == _0x515181 || this.abilityType == _0x2284c8 || this.abilityType == _0x1659f1 || this.abilityType == _0x388454 || this.abilityType == _0x4733dc || this.abilityType == _0x23a32e || this.abilityType == _0x3c8805 || this.abilityType == _0x493100 || this.abilityType == _0x28d61e || this.abilityType == _0x5574b8 || this.abilityType == _0x202d47 || this.abilityType == _0x3a1b89) {
                this.z = 2000;
            } else if (this.abilityType == _0x157448) {
                this.z = 1002;
            } else if (this.abilityType == _0x4ab0e8) {
                this.z = 10001;
            } else if (this.abilityType == _0x16a714) {
                if (this.specType == 1) {
                    this.z = 10001;
                } else if (this.specType == 2) {
                    this.z = 1013;
                } else if (this.specType == 3) {
                    this.z = 100000;
                }
            } else if (this.abilityType == _0x4d5d7f) {
                this.z = 1013;
            } else {
                this.z = -152;
            }
            if (this.abilityType == _0x4e59a2) {
                if (this.specType == 2) {
                    this.z = 10000 - this.rad;
                } else {
                    this.z = 1001;
                }
            }
        };
        _0xa0a2ad.prototype.customDraw = function(_0x3344da) {
            switch (this.abilityType) {
                case _0x452e85:
                    _0x466d9b(0, 0, this.rad, "#7EBCC0");
                    break;
                case _0x599500:
                case _0x3368b9: {
                    break;
                }
                case _0x2448d2: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.4;
                    _0x466d9b(0, 0, this.rad, "#7EBCC0");
                    _0x39e82d.globalAlpha = _0x594074 * 1;
                    _0x39e82d.strokeStyle = "white";
                    _0x39e82d.beginPath();
                    var _0x5e2d9b = 10;
                    _0x39e82d.translate(-5, this.rad * -0.7);
                    _0x39e82d.moveTo(0, -_0x5e2d9b);
                    _0x39e82d.lineTo(0, _0x5e2d9b);
                    _0x39e82d.moveTo(-_0x5e2d9b, -_0x5e2d9b);
                    _0x39e82d.lineTo(_0x5e2d9b, _0x5e2d9b);
                    _0x39e82d.moveTo(_0x5e2d9b, -_0x5e2d9b);
                    _0x39e82d.lineTo(-_0x5e2d9b, _0x5e2d9b);
                    _0x39e82d.moveTo(-_0x5e2d9b, 0);
                    _0x39e82d.lineTo(_0x5e2d9b, 0);
                    _0x39e82d.lineWidth = 3;
                    _0x39e82d.stroke();
                    _0x39e82d.restore();
                }
                break;
                case _0x5271ac: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.15;
                    _0x466d9b(0, 0, this.rad, "#755A2A");
                    _0x39e82d.restore();
                }
                break;
                case _0x4733dc: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 1;
                    var _0x1931a2 = this.getSkinImageObj("img/ability_sabertoothJawAttack.png");
                    if (_0x1931a2) {
                        var _0xcf4b08 = Math.min(1, (_0x4ec996 - this.spawnTime) / 200);
                        var _0x5715ad = this.rad - 2.5;
                        _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        _0x39e82d.drawImage(_0x1931a2, 0, 0, _0x1931a2.width * _0xcf4b08, _0x1931a2.height, -_0x5715ad, -_0x5715ad, _0x5715ad * 2 * _0xcf4b08, _0x5715ad * 2);
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x5bccab: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 1;
                    var _0x1931a2 = this.getSkinImageObj("img/ability_claw.png");
                    if (_0x1931a2) {
                        var _0xcf4b08 = Math.min(1, (_0x4ec996 - this.spawnTime) / 200);
                        var _0x5715ad = this.rad - 2.5;
                        _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        _0x39e82d.drawImage(_0x1931a2, 0, 0, _0x1931a2.width * _0xcf4b08, _0x1931a2.height, -_0x5715ad, -_0x5715ad, _0x5715ad * 2 * _0xcf4b08, _0x5715ad * 2);
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x44c3d0: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.1;
                    _0x466d9b(0, 0, this.rad, "#5B7EC7");
                    _0x39e82d.globalAlpha = _0x594074 * 1;
                    var _0x95a64c = "img";
                    var _0x1931a2 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.speciesType + "/tail.png");
                    if (_0x1931a2) {
                        var _0xcf4b08 = Math.min(1, (_0x4ec996 - this.spawnTime) / 200);
                        var _0x5715ad = this.rad * 0.65;
                        _0x39e82d.rotate(this.angle);
                        var _0x2cb855 = 0;
                        var _0x5010ba = this.rad;
                        var _0x375592 = _0x5715ad * 2;
                        var _0x284f07 = _0x5715ad * 2 * _0xcf4b08;
                        var _0x5ce09f = 0.5;
                        var _0x5d26bc = 1.25;
                        _0x39e82d.drawImage(_0x1931a2, _0x2cb855 + _0x375592 * -_0x5ce09f, _0x5010ba + _0x284f07 * -_0x5d26bc, _0x375592, _0x284f07);
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x543d08: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.1;
                    _0x466d9b(0, 0, this.rad, "#5B7EC7");
                    _0x39e82d.globalAlpha = _0x594074 * 1;
                    var _0x95a64c = "skins/ocean/bluewhale/" + this.speciesType;
                    _0x95a64c += "/" + this.speciesSubType;
                    var _0x1931a2 = this.getSkinImageObjForSeason(_0x95a64c + "/ability_whaleTailHit.png", this.mopeSeasonID);
                    if (_0x1931a2) {
                        var _0xcf4b08 = Math.min(1, (_0x4ec996 - this.spawnTime) / 200);
                        var _0x5715ad = this.rad * 0.85;
                        _0x39e82d.rotate(this.angle);
                        var _0x2cb855 = 0;
                        var _0x5010ba = this.rad;
                        var _0x375592 = _0x5715ad * 2;
                        var _0x284f07 = _0x5715ad * 2 * _0xcf4b08;
                        var _0x5ce09f = 0.5;
                        var _0x5d26bc = 1.25;
                        _0x39e82d.drawImage(_0x1931a2, _0x2cb855 + _0x375592 * -_0x5ce09f, _0x5010ba + _0x284f07 * -_0x5d26bc, _0x375592, _0x284f07);
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x461442: {
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.save();
                    var _0x5764da = (_0x4ec996 - this.spawnTime) / 1000;
                    var _0x1f82df = 1.5;
                    var _0x43d196 = 1;
                    var _0x576663 = _0x43d196 * Math.sin(Math.PI * 2 / _0x1f82df * _0x5764da);
                    var _0x56dda8 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha *= _0x576663 * 0.6;
                    _0x39e82d.rotate(this.angle);
                    _0x39e82d.globalAlpha = _0x594074 * 0.15;
                    if (this.specType2 == 0) {
                        _0x466d9b(0, 0, this.rad, "#96661C");
                    } else {
                        _0x466d9b(0, 0, this.rad, "#e0dfde");
                    }
                    _0x39e82d.restore();
                    _0x39e82d.save();
                    var _0x1e6bbc = this.specType2 == 1 ? "arctic" : "land";
                    var _0x5cb9b6 = "skins/" + _0x1e6bbc + "/bear/" + this.speciesType + "/ability.png";
                    var _0x1931a2 = this.getSkinImageObj(_0x5cb9b6);
                    if (_0x1931a2) {
                        var _0xcf4b08 = Math.min(1, (_0x4ec996 - this.spawnTime) / 200);
                        var _0x359aad = _0x2944ee((_0x4ec996 - this.spawnTime) / 300, 0, 1);
                        var _0x2ec475 = -(-0.5 + _0x359aad) * _0x439930;
                        var _0x590c6d = this.angle;
                        _0x39e82d.rotate(this.angle + _0x2ec475 * (this.specType == 0 ? 1 : -1));
                        var _0x5715ad = -this.rad * 1;
                        var _0x2cb855 = 0;
                        var _0x5010ba = this.rad;
                        var _0x375592 = _0x5715ad * 2;
                        var _0x284f07 = _0x5715ad * 2 * _0xcf4b08;
                        var _0x5ce09f = 0.5;
                        var _0x5d26bc = 0.8;
                        _0x39e82d.drawImage(_0x1931a2, _0x2cb855 + _0x375592 * -_0x5ce09f, _0x5010ba + _0x284f07 * -_0x5d26bc + _0x5715ad, _0x375592, _0x284f07);
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x1d4536: {
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.save();
                    var _0x5764da = (_0x4ec996 - this.spawnTime) / 1000;
                    var _0x1f82df = 1.5;
                    var _0x43d196 = 1;
                    var _0x576663 = _0x43d196 * Math.sin(Math.PI * 2 / _0x1f82df * _0x5764da);
                    var _0x56dda8 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha *= _0x576663 * 0.6;
                    _0x39e82d.rotate(this.angle);
                    _0x39e82d.globalAlpha = _0x594074 * 0.15;
                    if (this.specType2 == 0) {
                        _0x466d9b(0, 0, this.rad, "#96661C");
                    } else {
                        _0x466d9b(0, 0, this.rad, "#e0dfde");
                    }
                    _0x39e82d.restore();
                    _0x39e82d.save();
                    var _0x95a64c = "skins/desert/gobibear/" + this.speciesType + "/claw" + Math.min(this.specType, 1);
                    var _0x1931a2 = this.getSkinImageObj(_0x95a64c + ".png");
                    if (_0x1931a2) {
                        var _0xcf4b08 = Math.min(1, (_0x4ec996 - this.spawnTime) / 200);
                        var _0x359aad = _0x2944ee((_0x4ec996 - this.spawnTime) / 300, 0, 1);
                        var _0x2ec475 = -(-0.5 + _0x359aad) * _0x4bfce6(90);
                        var _0x590c6d = this.angle;
                        _0x39e82d.rotate(this.angle + _0x2ec475 * (this.specType == 0 ? 1 : -1));
                        var _0x5715ad = -this.rad * 1;
                        var _0x2cb855 = 0;
                        var _0x5010ba = this.rad;
                        var _0x375592 = _0x5715ad * 2;
                        var _0x284f07 = _0x5715ad * 2 * _0xcf4b08;
                        var _0x5ce09f = 0.5;
                        var _0x5d26bc = 0.8;
                        _0x39e82d.drawImage(_0x1931a2, _0x2cb855 + _0x375592 * -_0x5ce09f, _0x5010ba + _0x284f07 * -_0x5d26bc + _0x5715ad, _0x375592, _0x284f07);
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x3a1b89: {
                    var _0x5764da = (_0x4ec996 - this.spawnTime) / 1000;
                    var _0xa52bd9 = _0x1b594e(_0x5764da, 1, 0.1, 1);
                    var _0x44bac8 = 0;
                    var _0x1f82df = 2;
                    var _0x43d196 = 1.5;
                    _0x44bac8 = _0x43d196 * Math.sin(Math.PI * 2 / _0x1f82df * _0x5764da);
                    var _0x4d546b = 1;
                    for (i = 0; i < _0x4d546b; i++) {
                        if (this.drawRad === undefined) {
                            this.drawRad = new Array();
                            this.drawAngle = new Array();
                        }
                        if (this.drawRad[i] == undefined) {
                            this.drawRad.push(_0x14db03(5, 10) / 10);
                            this.drawAngle.push(_0x4bfce6(_0x14db03(1, 360)));
                        }
                        var _0x4cd207 = this.rad * this.drawRad[i];
                        _0x39e82d.save();
                        _0x39e82d.rotate(this.drawAngle[i]);
                        _0x39e82d.save();
                        var _0x594074 = _0x39e82d.globalAlpha;
                        _0x39e82d.globalAlpha = 0.1 - _0xa52bd9;
                        _0x39e82d.restore();
                        _0x39e82d.save();
                        _0x39e82d.fillStyle = "white";
                        _0x39e82d.globalAlpha = 0.3 - _0xa52bd9;
                        var _0x25d2ce = -_0x4cd207 * 0.6;
                        var _0x357a32 = -_0x4cd207 * 0.5 + this.rPer * 10;
                        var _0x10c7e3 = Math.max(0, _0x4cd207 * 0.65 + _0x44bac8) + 2;
                        _0x466d9b(_0x25d2ce, _0x357a32, _0x10c7e3, "#654321");
                        var _0x25d2ce = _0x4cd207 * 0.5;
                        var _0x357a32 = -_0x4cd207 * 0.5 - this.rPer * 10;
                        var _0x10c7e3 = Math.max(0, _0x4cd207 * 0.73 - _0x44bac8);
                        _0x466d9b(_0x25d2ce, _0x357a32, _0x10c7e3, "#654321");
                        var _0x25d2ce = _0x4cd207 * 0.6;
                        var _0x357a32 = _0x4cd207 * 0.5;
                        var _0x10c7e3 = Math.max(0, _0x4cd207 * 0.78 + _0x44bac8);
                        _0x466d9b(_0x25d2ce, _0x357a32, _0x10c7e3, "#654321");
                        var _0x25d2ce = -_0x4cd207 * 0.5;
                        var _0x357a32 = _0x4cd207 * 0.5 + this.rPer * 10;
                        var _0x10c7e3 = Math.max(0, _0x4cd207 * 0.6 + this.rPer - _0x44bac8);
                        _0x466d9b(_0x25d2ce, _0x357a32, _0x10c7e3, "#654321");
                        _0x39e82d.restore();
                        _0x39e82d.restore();
                    }
                }
                break;
                case _0x3bf432:
                    _0x39e82d.globalAlpha = 0.5;
                    _0x466d9b(0, 0, this.rad, "red");
                    break;
                case _0x21ad34:
                    break;
                case _0x3e11d2:
                    break;
                case _0x50e8cd:
                    break;
                case _0x3ff179:
                case _0x49455a:
                case _0x40090e:
                case _0x956b10:
                case _0x226fd3:
                case _0x1ddee6:
                case _0x22b667:
                case _0x55cd50:
                case _0xfd8d47:
                case _0x320e45:
                    break;
                case _0x4e59a2:
                    if (this.specType == 2) {
                        var _0x30e59c = "closed";
                        var _0x42f722 = "flytrap";
                        var _0x9d827e = "img/desert/" + _0x42f722 + "/mouth/" + _0x30e59c + ".png";
                        var _0x1931a2 = this.getSkinImageObj(_0x9d827e);
                        if (_0x1931a2) {
                            var _0x5715ad = this.rad;
                            _0x39e82d.save();
                            _0x39e82d.globalAlpha = 0.9;
                            _0x39e82d.rotate(this.angle - _0x4bfce6(-90));
                            _0x39e82d.drawImage(_0x1931a2, -_0x5715ad, -_0x5715ad, _0x5715ad * 2, _0x5715ad * 2);
                            _0x39e82d.restore();
                        }
                    } else {}
                    break;
                case _0x492198:
                    if (this.specType2 == 1) {
                        var _0x5764da = _0x4ec996 - this.spawnTime;
                        var _0x594074 = _0x39e82d.globalAlpha;
                        _0x39e82d.save();
                        _0x39e82d.rotate(this.angle - -_0x439930);
                        _0x39e82d.globalAlpha = _0x594074 * 0.9;
                        if (_0x5764da < 200) {
                            var _0x2b69cf = 1 + Math.trunc(_0x5764da / 50);
                            var _0x9d827e = "skins/desert/camel/201/spit" + this.specType + "_pop" + _0x2b69cf + ".png";
                            var _0x1931a2 = this.getSkinImageObjForSeason(_0x9d827e, 1);
                            if (_0x1931a2) {
                                var _0x5715ad = this.rad;
                                _0x39e82d.save();
                                _0x39e82d.drawImage(_0x1931a2, -_0x5715ad, -_0x5715ad, _0x5715ad * 2, _0x5715ad * 2);
                                _0x39e82d.restore();
                            }
                        } else {
                            var _0x9d827e = "skins/desert/camel/201/spit" + this.specType + "_pop4.png";
                            var _0x1931a2 = this.getSkinImageObjForSeason(_0x9d827e, 1);
                            if (_0x1931a2) {
                                var _0x5715ad = this.rad;
                                _0x39e82d.save();
                                _0x39e82d.drawImage(_0x1931a2, -_0x5715ad, -_0x5715ad, _0x5715ad * 2, _0x5715ad * 2);
                                _0x39e82d.restore();
                            }
                        }
                        _0x39e82d.restore();
                    } else {
                        _0x39e82d.save();
                        var _0x594074 = _0x39e82d.globalAlpha;
                        _0x39e82d.globalAlpha = _0x594074 * 0.15;
                        _0x466d9b(0, 0, this.rad, "black");
                        _0x39e82d.restore();
                    }
                    break;
                case _0x5aedc9: {
                    this.drawEffectScale_Slow = true;
                    this.doesDrawEffectScale = true;
                    _0x39e82d.globalAlpha = 0.2;
                    _0x466d9b(0, 0, this.rad * 0.85, "white");
                    var _0xb202c6 = this.specType == 3 ? "_e" : "";
                    var _0x1931a2 = this.getSkinImageObj("img/target" + _0xb202c6 + ".png");
                    if (_0x1931a2) {
                        var _0x5715ad = this.rad;
                        _0x39e82d.save();
                        _0x39e82d.globalAlpha = 0.5;
                        _0x39e82d.drawImage(_0x1931a2, -_0x5715ad, -_0x5715ad, _0x5715ad * 2, _0x5715ad * 2);
                        _0x39e82d.restore();
                    }
                    _0x39e82d.save();
                    if (this.is1v1Target == 1 && this.timerTxt != null) {
                        _0x39e82d.globalAlpha = 1;
                        this.timerTxt.x = 0;
                        this.timerTxt.y = 0;
                        this.timerTxt.draw();
                    } else if (this.is1v1Target == 2 && this.timerTxt != null) {
                        _0x39e82d.globalAlpha = 1;
                        this.timerTxt.x = 0;
                        this.timerTxt.y = 0;
                        this.timerTxt.draw();
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x3f1d5f: {
                    _0x39e82d.globalAlpha = 0.5;
                }
                break;
                case _0x2284c8: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.05;
                    _0x466d9b(0, 0, this.rad, "#B32E10");
                    _0x39e82d.globalAlpha = _0x594074 * 1;
                    var _0x95a64c = "skins/ocean/kingcrab/" + this.speciesType;
                    var _0x1038b4 = this.mopeSeasonID;
                    var _0x1931a2 = this.getSkinImageObjForSeason(_0x95a64c + "/ability_crabSmash" + this.specType + ".png", _0x1038b4);
                    if (_0x1931a2) {
                        var _0x359aad = _0x2944ee((_0x4ec996 - this.spawnTime) / 200, 0, 1);
                        var _0x5768e0 = this.specType == 1 ? -1 : 1;
                        var _0x2ec475 = -(-0.2 + _0x359aad) * _0x4bfce6(_0x5768e0 * -90);
                        _0x2ec475 = _0x5768e0 * (0.3 + _0x359aad) + _0x4bfce6(_0x5768e0 * -30);
                        var _0x5715ad = this.rad * 0.6;
                        _0x39e82d.rotate(this.angle + _0x2ec475);
                        var _0x2cb855 = 0;
                        var _0x5010ba = this.rad;
                        var _0x375592 = _0x5715ad * 2 * 0.7;
                        var _0x284f07 = _0x5715ad * 2;
                        var _0x5ce09f = 0.75;
                        var _0x5d26bc = 0.95;
                        if (this.specType == 1) {
                            _0x5ce09f = 0.25;
                            _0x5d26bc = 0.95;
                        }
                        _0x39e82d.drawImage(_0x1931a2, _0x2cb855 + _0x375592 * -_0x5ce09f, _0x5010ba + _0x284f07 * -_0x5d26bc, _0x375592, _0x284f07);
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x515181: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.05;
                    _0x466d9b(0, 0, this.rad, "#E4E7C8");
                    _0x39e82d.globalAlpha = _0x594074 * 1;
                    var _0x95a64c = "skins/land/elephant/" + this.speciesType;
                    var _0x1931a2 = this.getSkinImageObj(_0x95a64c + "/ability_elephantTrunkSmack.png");
                    console.log(_0x95a64c);
                    if (_0x1931a2) {
                        var _0x359aad = _0x2944ee((_0x4ec996 - this.spawnTime) / 300, 0, 1);
                        var _0x2ec475 = -(-0.5 + _0x359aad) * _0x439930;
                        var _0x5715ad = this.rad * 0.6;
                        _0x39e82d.rotate(this.angle + _0x2ec475);
                        var _0x2cb855 = 0;
                        var _0x5010ba = this.rad;
                        var _0x375592 = _0x5715ad * 2 * 0.7;
                        var _0x284f07 = _0x5715ad * 2;
                        var _0x5ce09f = 0.75;
                        var _0x5d26bc = 0.95;
                        _0x39e82d.drawImage(_0x1931a2, _0x2cb855 + _0x375592 * -_0x5ce09f, _0x5010ba + _0x284f07 * -_0x5d26bc, _0x375592, _0x284f07);
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x2cb681: {}
                break;
                case _0x1659f1: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.25;
                    _0x466d9b(0, 0, this.rad, "#44d31f");
                    _0x39e82d.globalAlpha = _0x594074 * 1;
                    var _0x1931a2 = this.getSkinImageObjForSeason("skins/land/croc/" + this.speciesType + "/" + this.speciesSubType + "/ability.png", this.mopeSeasonID);
                    if (_0x1931a2) {
                        var _0xcf4b08 = Math.min(1, (_0x4ec996 - this.spawnTime) / 200);
                        var _0x5715ad = this.rad * 0.6;
                        _0x39e82d.rotate(this.angle);
                        var _0x2cb855 = 0;
                        var _0x5010ba = this.rad;
                        var _0x375592 = _0x5715ad * 2.5;
                        var _0x284f07 = _0x5715ad * 2.5 * _0xcf4b08;
                        var _0x5ce09f = 0.5;
                        var _0x5d26bc = 0.95;
                        _0x39e82d.drawImage(_0x1931a2, _0x2cb855 + _0x375592 * -_0x5ce09f, _0x5010ba + _0x284f07 * -_0x5d26bc, _0x375592, _0x284f07);
                        _0x39e82d.rotate(Math.PI);
                        var _0x2cb855 = 0;
                        var _0x5010ba = this.rad * 0.5;
                        var _0x375592 = _0x5715ad * 2.5;
                        var _0x284f07 = _0x5715ad * 2.5 * _0xcf4b08;
                        var _0x5ce09f = 0.5;
                        var _0x5d26bc = 0.95;
                        _0x39e82d.drawImage(_0x1931a2, _0x2cb855 + _0x375592 * -_0x5ce09f, _0x5010ba + _0x284f07 * -_0x5d26bc, _0x375592, _0x284f07);
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x388454: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.25;
                    _0x466d9b(0, 0, this.rad, "#44d31f");
                    var _0x1038b4 = this.speciesType === 1 || this.speciesType === 2 ? 1 : this.mopeSeasonID;
                    var _0x95a64c = "skins/land/boaconstrictor/" + this.speciesType;
                    _0x39e82d.globalAlpha = _0x594074 * 1;
                    var _0x1931a2 = this.getSkinImageObjForSeason(_0x95a64c + "/ability_boabite.png", _0x1038b4);
                    if (_0x1931a2) {
                        var _0xcf4b08 = Math.min(1, (_0x4ec996 - this.spawnTime) / 200);
                        var _0x5715ad = this.rad * 0.6;
                        _0x39e82d.rotate(this.angle);
                        var _0x2cb855 = 0;
                        var _0x5010ba = this.rad;
                        var _0x375592 = _0x5715ad * 2.5;
                        var _0x284f07 = _0x5715ad * 2.5 * _0xcf4b08;
                        var _0x5ce09f = 0.5;
                        var _0x5d26bc = 0.95;
                        _0x39e82d.drawImage(_0x1931a2, _0x2cb855 + _0x375592 * -_0x5ce09f, _0x5010ba + _0x284f07 * -_0x5d26bc, _0x375592, _0x284f07);
                        _0x39e82d.rotate(Math.PI);
                        var _0x2cb855 = 0;
                        var _0x5010ba = this.rad * 0.5;
                        var _0x375592 = _0x5715ad * 2.5;
                        var _0x284f07 = _0x5715ad * 2.5 * _0xcf4b08;
                        var _0x5ce09f = 0.5;
                        var _0x5d26bc = 0.95;
                        _0x39e82d.drawImage(_0x1931a2, _0x2cb855 + _0x375592 * -_0x5ce09f, _0x5010ba + _0x284f07 * -_0x5d26bc, _0x375592, _0x284f07);
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x55fa0b: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.1;
                    _0x466d9b(0, 0, this.rad, "#755A2A");
                    _0x39e82d.globalAlpha = _0x594074 * 1;
                    var _0x95a64c = "skins/land/";
                    var _0x1038b4 = this.mopeSeasonID;
                    var _0x1931a2 = this.getSkinImageObjForSeason(_0x95a64c + "/tiger/" + this.speciesType + "/ability_tigerJump.png", _0x1038b4);
                    if (_0x1931a2) {
                        var _0xcf4b08 = Math.min(1, (_0x4ec996 - this.spawnTime) / 100);
                        var _0x5715ad = this.rad * 1.1;
                        _0x39e82d.rotate(this.angle);
                        var _0x2cb855 = 0;
                        var _0x5010ba = this.rad;
                        var _0x375592 = _0x5715ad * 2;
                        var _0x284f07 = _0x5715ad * 2 * _0xcf4b08;
                        var _0x5ce09f = 0.5;
                        var _0x5d26bc = 1;
                        _0x39e82d.drawImage(_0x1931a2, _0x2cb855 + _0x375592 * -_0x5ce09f, _0x5010ba + _0x284f07 * -_0x5d26bc, _0x375592, _0x284f07);
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x493100: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.05;
                    _0x466d9b(0, 0, this.rad, "#44d31f");
                    _0x39e82d.globalAlpha = _0x594074 * 1;
                    var _0x5b7598 = this.getSkinImageObj("img/ability_pounce2.png");
                    var _0x45248d = this.getSkinImageObj("img/ability_pounce1.png");
                    if (_0x5b7598 && _0x45248d) {
                        var _0xcf4b08 = Math.min(1, (_0x4ec996 - this.spawnTime) / 200);
                        var _0x5715ad = this.rad * 0.4;
                        _0x39e82d.rotate(this.angle);
                        var _0x2cb855 = 0;
                        var _0x5010ba = this.rad;
                        var _0x375592 = _0x5715ad * 2.5;
                        var _0x284f07 = _0x5715ad * 2.5 * _0xcf4b08;
                        var _0x5ce09f = 0.5;
                        var _0x5d26bc = 0.95;
                        _0x39e82d.drawImage(_0x5b7598, _0x2cb855 + _0x375592 * -_0x5ce09f, _0x5010ba + _0x284f07 * -_0x5d26bc, _0x375592, _0x284f07);
                        _0x5715ad = this.rad * 0.6;
                        var _0x2cb855 = 0;
                        var _0x5010ba = this.rad * 0.5;
                        var _0x375592 = _0x5715ad * 2.5;
                        var _0x284f07 = _0x5715ad * 2.5 * _0xcf4b08;
                        var _0x5ce09f = 0.5;
                        var _0x5d26bc = 0.95;
                        _0x39e82d.drawImage(_0x45248d, _0x2cb855 + _0x375592 * -_0x5ce09f, _0x5010ba + _0x284f07 * -_0x5d26bc, _0x375592, _0x284f07);
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x3c8805: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.05;
                    _0x466d9b(0, 0, this.rad, "#E4E7C8");
                    _0x39e82d.globalAlpha = _0x594074 * 1;
                    var _0x2b3249 = "skins/land/tiger/" + this.speciesType + "/ability_tigerSlash" + this.specType + ".png";
                    var _0x1931a2 = this.getSkinImageObj(_0x2b3249);
                    if (_0x1931a2) {
                        var _0x359aad = _0x2944ee((_0x4ec996 - this.spawnTime) / 300, 0, 1);
                        var _0x2ec475 = (this.specType == 1 ? 1 : -1) * (-0.6 + _0x359aad) * _0x4bfce6(90);
                        var _0x5715ad = this.rad * 1.2;
                        _0x39e82d.rotate(this.angle + _0x2ec475);
                        var _0x2cb855 = 0;
                        var _0x5010ba = this.rad;
                        var _0x375592 = _0x5715ad * 2 * 0.7;
                        var _0x284f07 = _0x5715ad * 2;
                        var _0x5ce09f = 0.2;
                        var _0x5d26bc = 0.5;
                        _0x39e82d.drawImage(_0x1931a2, _0x2cb855 + _0x375592 * -_0x5ce09f, _0x5010ba + _0x284f07 * -_0x5d26bc, _0x375592, _0x284f07);
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x5574b8: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 1;
                    var _0x1038b4 = this.mopeSeasonID;
                    var _0x144017 = _0x1038b4 === 1 ? "" : this.specType;
                    var _0x253703 = "skins/land/zebra/" + this.speciesType + "/kick" + _0x144017 + ".png";
                    var _0x1931a2 = this.getSkinImageObjForSeason(_0x253703, _0x1038b4);
                    if (_0x1931a2) {
                        var _0xcf4b08 = Math.min(1, (_0x4ec996 - this.spawnTime) / 200);
                        var _0x5715ad = this.rad * 0.6;
                        _0x39e82d.rotate(this.angle);
                        var _0x2cb855 = 0;
                        var _0x5010ba = this.rad;
                        var _0x375592 = _0x5715ad * 2;
                        var _0x284f07 = _0x5715ad * 3 * _0xcf4b08;
                        var _0x5ce09f = 0.3;
                        var _0x5d26bc = 1;
                        _0x39e82d.drawImage(_0x1931a2, _0x2cb855 + _0x375592 * -_0x5ce09f, _0x5010ba + _0x284f07 * -_0x5d26bc, _0x375592, _0x284f07);
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x28d61e: {
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.save();
                    let _0x4e08d3 = 1;
                    var _0x56dda8 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha *= _0x4e08d3 * 0.6;
                    _0x39e82d.rotate(this.angle);
                    _0x39e82d.globalAlpha = _0x594074 * 0.15;
                    _0x466d9b(this.rad * 0.3, 0, this.rad * (0.9 + _0x4e08d3 * 0.12), "#E4E7C8");
                    _0x466d9b(-this.rad * 0.3, 0, this.rad * (1.05 + _0x4e08d3 * 0.09), "#E4E7C8");
                    _0x39e82d.globalAlpha = _0x56dda8;
                    _0x39e82d.restore();
                    _0x39e82d.save();
                    let _0x34c501 = "skins/land/giraffe/" + this.speciesType;
                    if (this.speciesType == 202) {
                        _0x34c501 += "/" + this.speciesSubType;
                    }
                    _0x34c501 += "/stomp.png";
                    var _0x1931a2 = this.getSkinImageObj(_0x34c501);
                    if (_0x1931a2) {
                        var _0xcf4b08 = Math.min(1, (_0x4ec996 - this.spawnTime) / 200);
                        var _0x590c6d = this.angle;
                        _0x39e82d.rotate(_0x590c6d);
                        var _0x5715ad = -this.rad * 1;
                        var _0x2cb855 = 0;
                        var _0x5010ba = this.rad;
                        var _0x375592 = _0x5715ad * 3;
                        var _0x284f07 = _0x5715ad * 2 * _0xcf4b08;
                        var _0x5ce09f = 0.5;
                        var _0x5d26bc = 0.7;
                        _0x39e82d.drawImage(_0x1931a2, _0x2cb855 + _0x375592 * -_0x5ce09f, _0x5010ba + _0x284f07 * -_0x5d26bc + _0x5715ad, _0x375592, _0x284f07);
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x202d47: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 1;
                    _0x39e82d.rotate(this.angle);
                    var _0x1038b4 = this.mopeSeasonID;
                    var _0x1931a2 = this.getSkinImageObjForSeason("skins/ocean/shark/" + this.speciesType + "/ability.png", _0x1038b4);
                    if (_0x1931a2) {
                        var _0xa52bd9 = Math.min(1, (_0x4ec996 - this.spawnTime) / 200);
                        _0x39e82d.globalAlpha = 0.9;
                        var _0x5715ad = -this.rad * 1.75;
                        var _0x2cb855 = 0;
                        var _0x5010ba = this.rad;
                        var _0x375592 = _0x5715ad * 2;
                        var _0x284f07 = _0x5715ad * 2 * _0xa52bd9;
                        var _0x5ce09f = 0.5;
                        var _0x5d26bc = 0.9;
                        _0x39e82d.drawImage(_0x1931a2, _0x2cb855 + _0x375592 * -_0x5ce09f, _0x5010ba + _0x284f07 * -_0x5d26bc + _0x5715ad, _0x375592, _0x284f07);
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x136993: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.5;
                    var _0x5715ad = this.rad;
                    var _0x5764da = (_0x4ec996 - this.spawnTime) / 1000;
                    var _0x1f82df = 2.2;
                    var _0x1470b8 = Math.cos(Math.PI * 2 / _0x1f82df * _0x5764da) * 6.5;
                    var _0x222aaf = Math.sin(Math.PI * 2 / _0x1f82df * _0x5764da) * 6.5;
                    _0x39e82d.globalAlpha = _0x594074 * 0.3;
                    _0x466d9b(0, 0, _0x5715ad, _0x51276a);
                    _0x39e82d.globalAlpha = _0x594074 * 0.5;
                    _0x466d9b(0 + _0x1470b8 / 4.5 + this.rPer, 1 + _0x222aaf / 1.5, Math.max(0, _0x5715ad - 14), "#de9d23");
                    _0x39e82d.restore();
                }
                break;
                case _0x4ab0e8: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.5;
                    var _0x5715ad = this.rad;
                    var _0x5764da = (_0x4ec996 - this.spawnTime) / 1000;
                    var _0x1f82df = 2.2;
                    var _0x1470b8 = Math.cos(Math.PI * 2 / _0x1f82df * _0x5764da) * 6.5;
                    var _0x222aaf = Math.sin(Math.PI * 2 / _0x1f82df * _0x5764da) * 6.5;
                    _0x39e82d.globalAlpha = _0x594074 * 0.3;
                    _0x466d9b(0, 0, _0x5715ad, "#2CAAC4");
                    _0x39e82d.globalAlpha = _0x594074 * 0.5;
                    _0x466d9b(0 + _0x1470b8 / 4.5 + this.rPer, 1 + _0x222aaf / 1.5, Math.max(0, _0x5715ad - 14), "#29A0BA");
                    _0x466d9b(0 + _0x1470b8 / 1.5 - this.rPer * 2, _0x222aaf, Math.max(0, _0x5715ad - 38.5 + _0x222aaf / 5), "#2B8CAA");
                    _0x466d9b(0 + _0x1470b8 / 1.5 - this.rPer * 2, _0x222aaf, Math.max(0, _0x5715ad - 54.5 + _0x222aaf / 11), "#28829E");
                    _0x39e82d.restore();
                }
                break;
                case _0x16a714: {
                    if (this.specType == 0 || this.specType == 2 || this.specType == 3) {
                        _0x39e82d.save();
                        _0x39e82d.globalAlpha = 0.3;
                        var _0x11b1a4 = "";
                        var _0x1931a2 = this.getSkinImageObj("skins/pelican/" + this.speciesType + "/ability_pelican" + _0x11b1a4 + ".png");
                        if (_0x1931a2) {
                            var _0x5715ad = -this.rad * 1.5;
                            _0x39e82d.rotate(this.angle);
                            var _0x2cb855 = 0;
                            var _0x5010ba = this.rad;
                            var _0x375592 = _0x5715ad;
                            var _0x284f07 = _0x5715ad;
                            var _0x5ce09f = 0.5;
                            var _0x5d26bc = 0.5;
                            _0x39e82d.drawImage(_0x1931a2, _0x2cb855 + _0x375592 * -_0x5ce09f, _0x5010ba + _0x284f07 * -_0x5d26bc + _0x5715ad, _0x375592, _0x284f07);
                        }
                        _0x39e82d.restore();
                    }
                    break;
                }
                case _0x23a32e: {
                    if (this.specType == 0) {
                        _0x39e82d.save();
                        var _0x594074 = _0x39e82d.globalAlpha;
                        _0x39e82d.globalAlpha = _0x594074 * 0.15;
                        _0x39e82d.globalAlpha = _0x594074 * 1;
                        var _0x1931a2 = this.getSkinImageObjForSeason("skins/land/trex/" + this.speciesType + "/ability_trexBite.png", this.mopeSeasonID);
                        if (_0x1931a2) {
                            var _0xcf4b08 = Math.min(1, (_0x4ec996 - this.spawnTime) / 200);
                            var _0x5715ad = this.rad * 0.6;
                            _0x39e82d.rotate(this.angle);
                            var _0x2cb855 = 0;
                            var _0x5010ba = this.rad;
                            var _0x375592 = _0x5715ad * 2.5;
                            var _0x284f07 = _0x5715ad * 2.5 * _0xcf4b08;
                            var _0x5ce09f = 0.5;
                            var _0x5d26bc = 0.95;
                            _0x39e82d.drawImage(_0x1931a2, _0x2cb855 + _0x375592 * -_0x5ce09f, _0x5010ba + _0x284f07 * -_0x5d26bc, _0x375592, _0x284f07);
                            _0x39e82d.rotate(Math.PI);
                            var _0x2cb855 = 0;
                            var _0x5010ba = this.rad * 0.5;
                            var _0x375592 = _0x5715ad * 2.5;
                            var _0x284f07 = _0x5715ad * 2.5 * _0xcf4b08;
                            var _0x5ce09f = 0.5;
                            var _0x5d26bc = 0.95;
                            _0x39e82d.drawImage(_0x1931a2, _0x2cb855 + _0x375592 * -_0x5ce09f, _0x5010ba + _0x284f07 * -_0x5d26bc, _0x375592, _0x284f07);
                        }
                        var _0x1931a2 = this.getSkinImageObj("skins/land/trex/" + this.speciesType + "/trex-head.png", this.mopeSeasonID);
                        if (_0x1931a2) {
                            var _0xcf4b08 = Math.min(1, (_0x4ec996 - this.spawnTime) / 200);
                            var _0x5715ad = this.rad * 1.5;
                            _0x39e82d.rotate(_0x4bfce6(180));
                            var _0x2cb855 = 0;
                            var _0x5010ba = this.rad;
                            var _0x375592 = _0x5715ad * 2;
                            var _0x284f07 = _0x5715ad * 2 * _0xcf4b08;
                            var _0x5ce09f = 0.5;
                            var _0x5d26bc = -1.25;
                            _0x39e82d.drawImage(_0x1931a2, _0x2cb855 + _0x375592 * -_0x5ce09f, _0x5d26bc * _0x5715ad, _0x375592, _0x284f07);
                        }
                        _0x39e82d.restore();
                    }
                }
                break;
                case _0x21520c: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.15;
                    _0x466d9b(0, 0, this.rad, "#6D7471");
                    _0x39e82d.restore();
                }
                break;
                case _0x21efe2: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.15;
                    _0x466d9b(0, 0, this.rad, "#6D7471");
                    _0x39e82d.restore();
                }
                break;
                case _0x435b1c: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.15;
                    _0x466d9b(0, 0, this.rad, "#6D7471");
                    _0x39e82d.restore();
                }
                break;
                case _0xc2fd49: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.15;
                    _0x466d9b(0, 0, this.rad, "#f2f2f2");
                    _0x39e82d.restore();
                }
                break;
                case _0x157448: {
                    _0x39e82d.save();
                    _0x39e82d.rotate(this.angle + _0x4bfce6(180));
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.8;
                    var _0x1931a2 = this.getSkinImageObj("img/wave.png");
                    if (_0x1931a2) {
                        var _0x5715ad = this.rad;
                        _0x39e82d.drawImage(_0x1931a2, -_0x5715ad, -_0x5715ad, _0x5715ad * 2, _0x5715ad * 2);
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x184762: {
                    if (this.animalType !== undefined && this.animalType == _0x478075 && this.speciesType == 204) {
                        _0x39e82d.save();
                        var _0x594074 = _0x39e82d.globalAlpha;
                        _0x39e82d.globalAlpha = _0x594074 * 0.9;
                        var _0x1038b4 = 1;
                        var _0x1931a2 = this.getSkinImageObjForSeason("skins/land/hippo/204/roar.png", _0x1038b4);
                        if (_0x1931a2) {
                            var _0x5715ad = this.rad;
                            _0x39e82d.drawImage(_0x1931a2, -_0x5715ad, -_0x5715ad, _0x5715ad * 2, _0x5715ad * 2);
                        }
                        _0x39e82d.restore();
                    } else {
                        _0x39e82d.save();
                        var _0x594074 = _0x39e82d.globalAlpha;
                        _0x39e82d.globalAlpha = _0x594074 * 0.2;
                        _0x466d9b(0, 0, this.rad, "#746B3E");
                        _0x39e82d.restore();
                    }
                }
                break;
                case _0x571802: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.5;
                    _0x466d9b(0, 0, this.rad, "#62C5FF");
                    _0x39e82d.globalAlpha = _0x594074 * 1;
                    _0x39e82d.strokeStyle = "#62C5FF";
                    _0x39e82d.beginPath();
                    var _0x541233 = this.rad * -0.7;
                    var _0x392472 = -5;
                    var _0x3d404e = 10;
                    _0x39e82d.moveTo(_0x541233, _0x392472);
                    _0x39e82d.lineTo(_0x541233 - _0x3d404e * 0.4, _0x392472 + _0x3d404e);
                    _0x39e82d.lineTo(_0x541233 + _0x3d404e * 0.4, _0x392472 + _0x3d404e * 0.7);
                    _0x39e82d.lineTo(_0x541233 + _0x3d404e * 0.4 * 0.5, _0x392472 + _0x3d404e * 2);
                    _0x39e82d.lineWidth = 3;
                    _0x39e82d.stroke();
                    _0x39e82d.restore();
                }
                break;
                case _0x2de325: {
                    if (_0x1d523b || _0x5981a2 != 3) {
                        var _0x4698dd = this.getSkinImageObj("img/whirlpool2.png");
                        if (_0x4698dd) {
                            var _0x5715ad = this.rad;
                            _0x39e82d.save();
                            _0x39e82d.globalAlpha = 0.5;
                            _0x39e82d.drawImage(_0x4698dd, -_0x5715ad, -_0x5715ad, _0x5715ad * 2, _0x5715ad * 2);
                            _0x39e82d.restore();
                        } else {
                            _0x466d9b(0, 0, this.rad, "#2D93B0");
                        }
                    } else {
                        _0x39e82d.save();
                        var _0x5715ad = Math.max(0, this.rad - 30);
                        var _0x594074 = _0x39e82d.globalAlpha;
                        var _0x5764da = (_0x4ec996 - this.spawnTime) / 1000;
                        var _0x1f82df = 2.2;
                        var _0x1470b8 = Math.cos(Math.PI * 2 / _0x1f82df * _0x5764da) * 10.5;
                        var _0x222aaf = Math.sin(Math.PI * 2 / _0x1f82df * _0x5764da) * 6.5;
                        _0x39e82d.globalAlpha = _0x594074 * 0.05;
                        _0x466d9b(0 + _0x1470b8 + 15 - this.rPer, 0 + _0x222aaf + 20 - this.rPer, Math.max(0, _0x5715ad - 6), "white");
                        _0x39e82d.globalAlpha = _0x594074 * 0.1;
                        _0x466d9b(0 + _0x1470b8 + 15 - this.rPer, 0 + _0x222aaf / 2 - this.rPer, Math.max(0, _0x5715ad - 6), "#2D93B0");
                        _0x39e82d.globalAlpha = _0x594074 * 0.15;
                        _0x466d9b(0 + _0x1470b8 / 1.5 - this.rPer * 2, _0x222aaf, Math.max(0, _0x5715ad - 54.5 + _0x222aaf / 11), "#28829E");
                        _0x39e82d.restore();
                        _0x39e82d.save();
                        var _0x594074 = _0x39e82d.globalAlpha;
                        var _0x5715ad = Math.max(0, this.rad - 30);
                        var _0x5764da = (_0x4ec996 - this.spawnTime) / 1000;
                        var _0x1f82df = 3.2;
                        var _0x1470b8 = Math.cos(Math.PI * 2 / _0x1f82df * _0x5764da) * 50;
                        var _0x222aaf = Math.sin(Math.PI * 2 / _0x1f82df * _0x5764da) * 50;
                        _0x39e82d.globalAlpha = _0x594074 * 0.05;
                        _0x466d9b(0, 0, _0x5715ad, "#2CAAC4");
                        _0x39e82d.globalAlpha = _0x594074 * 0.15;
                        _0x466d9b(0 + _0x1470b8 / 2 - this.rPer, 0 + _0x222aaf / 2 - this.rPer, Math.max(0, _0x5715ad * 0.95), "#2D93B0");
                        _0x39e82d.globalAlpha = _0x594074 * 0.25;
                        _0x466d9b(0 + _0x1470b8 / 4.5 + this.rPer, 1 + _0x222aaf / 1.5, Math.max(0, _0x5715ad * 0.85), "#28829E");
                        _0x39e82d.restore();
                        var _0x4698dd = this.getSkinImageObj("img/whirlpool2.png");
                        if (_0x4698dd) {
                            var _0x5715ad = this.rad - 30;
                            var _0x187c1a = 5 / 60;
                            var _0x1e4ece = 1000 / _0x187c1a;
                            var _0xcf4b08 = (_0x4ec996 - this.spawnTime) % _0x1e4ece / _0x1e4ece;
                            var _0x1bbbbf = _0xcf4b08 * 2 * Math.PI;
                            _0x187c1a = 8 / 60;
                            _0x1e4ece = 1000 / _0x187c1a;
                            _0xcf4b08 = (_0x4ec996 - this.spawnTime) % _0x1e4ece / _0x1e4ece;
                            rotation2 = _0xcf4b08 * 2 * Math.PI;
                            _0x39e82d.save();
                            _0x39e82d.rotate(_0x1bbbbf);
                            var _0x594074 = _0x39e82d.globalAlpha;
                            _0x39e82d.globalAlpha = 0.1;
                            var _0x5764da = (_0x4ec996 - this.spawnTime) / 1000;
                            var _0x1f82df = 2.2;
                            var _0x1470b8 = Math.cos(Math.PI * 2 / _0x1f82df * _0x5764da) * 6.5;
                            var _0x222aaf = Math.sin(Math.PI * 2 / _0x1f82df * _0x5764da) * 6.5;
                            _0x39e82d.globalAlpha = 0.2;
                            _0x39e82d.drawImage(_0x4698dd, -_0x5715ad - _0x1470b8 + 30 / 2.2, -_0x5715ad, _0x5715ad * 2, _0x5715ad * 2);
                            _0x39e82d.restore();
                            _0x39e82d.save();
                            _0x39e82d.globalAlpha = 0.1;
                            _0x39e82d.rotate(rotation2 * 0.8);
                            _0x39e82d.drawImage(_0x4698dd, -_0x5715ad - _0x1470b8 / 2.2, -_0x5715ad, _0x5715ad * 2, _0x5715ad * 2);
                            _0x39e82d.restore();
                            _0x39e82d.save();
                            _0x39e82d.globalAlpha = 0.2;
                            _0x39e82d.rotate(rotation2);
                            _0x39e82d.drawImage(_0x4698dd, -_0x5715ad - _0x1470b8 - 20 / 2.2, -_0x5715ad, _0x5715ad * 2, _0x5715ad * 2);
                            _0x39e82d.restore();
                            _0x39e82d.save();
                            _0x39e82d.globalAlpha = 0.2;
                            _0x39e82d.rotate(rotation2);
                            _0x39e82d.drawImage(_0x4698dd, -_0x5715ad - _0x1470b8 / 2.2, -_0x5715ad, _0x5715ad * 2, _0x5715ad * 2);
                            _0x39e82d.restore();
                            _0x39e82d.save();
                            _0x39e82d.globalAlpha = 0.2;
                            _0x39e82d.rotate(_0x1bbbbf);
                            _0x39e82d.drawImage(_0x4698dd, -_0x5715ad - _0x1470b8 / 2.2, -_0x5715ad, _0x5715ad * 2, _0x5715ad * 2);
                            _0x39e82d.restore();
                            _0x39e82d.save();
                            _0x39e82d.globalAlpha = 0.2;
                            _0x39e82d.rotate(_0x1bbbbf);
                            _0x39e82d.drawImage(_0x4698dd, -_0x5715ad - _0x1470b8 / 2.2, -_0x5715ad, _0x5715ad * 2, _0x5715ad * 2);
                            _0x39e82d.restore();
                        }
                    }
                }
                break;
                case _0x2ae137: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.5;
                    var _0x5715ad = Math.max(0, this.rad - 30);
                    var _0x5764da = (_0x4ec996 - this.spawnTime) / 1000;
                    var _0x1f82df = 2.2;
                    var _0x1470b8 = Math.cos(Math.PI * 2 / _0x1f82df * _0x5764da) * 6.5;
                    var _0x222aaf = Math.sin(Math.PI * 2 / _0x1f82df * _0x5764da) * 6.5;
                    _0x39e82d.globalAlpha = _0x594074 * 0.4;
                    _0x466d9b(0, 0, _0x5715ad, "#2CAAC4");
                    _0x39e82d.globalAlpha = _0x594074 * 0.7;
                    if (_0x5981a2 != _0x4051d6) {
                        _0x466d9b(0 + _0x1470b8 / 2 - this.rPer, 0 + _0x222aaf / 2 - this.rPer, Math.max(0, _0x5715ad - 6), "#2D93B0");
                    }
                    _0x466d9b(0 + _0x1470b8 / 4.5 + this.rPer, 1 + _0x222aaf / 1.5, Math.max(0, _0x5715ad - 14), "#29A0BA");
                    _0x466d9b(0 + _0x1470b8 / 1.5 - this.rPer * 2, _0x222aaf, Math.max(0, _0x5715ad - 38.5 + _0x222aaf / 5), "#2B8CAA");
                    _0x466d9b(0 + _0x1470b8 / 1.5 - this.rPer * 2, _0x222aaf, Math.max(0, _0x5715ad - 54.5 + _0x222aaf / 11), "#28829E");
                    _0x39e82d.restore();
                }
                break;
                case _0x3aea93: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    if (_0x5981a2 != _0x4051d6) {
                        _0x39e82d.rotate(this.rPer * 2 * Math.PI);
                    }
                    var _0x44bac8 = 0;
                    var _0x5764da = (_0x4ec996 - this.spawnTime) / 1000;
                    var _0x1f82df = 6;
                    var _0x43d196 = 1.5;
                    _0x44bac8 = _0x43d196 * Math.sin(Math.PI * 2 / _0x1f82df * _0x5764da);
                    _0x39e82d.globalAlpha = _0x594074 * 0.7;
                    var _0x29a937 = 4;
                    _0x39e82d.fillStyle = "black";
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(0, 0, this.rad, 0, Math.PI * 2);
                    _0x39e82d.fill();
                    if (_0x5981a2 != _0x4051d6) {
                        _0x39e82d.fillStyle = "black";
                        _0x39e82d.globalAlpha = _0x594074 * 0.5;
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(0, 0, Math.max(0, this.rad - _0x29a937 + _0x44bac8), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad * 0.45, -this.rad * 0.45 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x44bac8), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad * 0.5, this.rad * 0.5 + this.rPer * 15, Math.max(0, this.rad * 0.4 + _0x44bac8), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x44bac8), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(-this.rad * 0.75, -this.rad * 0.35 + this.rPer * 15, Math.max(0, this.rad * 0.3 + _0x44bac8), 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad + this.rPer * 10, this.rPer * 50, 8, 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad - this.rPer * 20, this.rPer * 50, 10, 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                    }
                    _0x39e82d.restore();
                }
                break;
                case _0x8530b3: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.25;
                    _0x466d9b(0, 0, this.rad, "#9F8641");
                    _0x39e82d.restore();
                }
                break;
                case _0x4b42c8: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.25;
                    _0x466d9b(0, 0, this.rad, "#785228");
                    _0x39e82d.restore();
                }
                break;
                default: {
                    _0x39e82d.save();
                    var _0x594074 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x594074 * 0.15;
                    _0x466d9b(0, 0, this.rad, "black");
                    _0x39e82d.restore();
                }
                break;
            }
        };
        _0xa0a2ad.prototype.setObjTypes = function(_0x16183c, _0x414b95) {
            this.oType = _0x16183c;
            this.abilityType = _0x414b95;
        };
        _0xa0a2ad.prototype.skinThemeID = 0;
        _0xa0a2ad.prototype.mopeSeasonID = 0;
        _0xa0a2ad.prototype.readCustomData_onNewlyVisible = function(_0x1b20b1) {
            this.specType = _0x1b20b1.readUInt8();
            this.specType2 = _0x1b20b1.readUInt8();
            this.skinThemeID = _0x1b20b1.readUInt8();
            this.mopeSeasonID = _0x1b20b1.readUInt8();
            if (this.abilityType == _0x2448d2 || this.abilityType == _0x21efe2 || this.abilityType == _0x157448 || this.abilityType == _0x184762 || this.abilityType == _0x4b42c8) {
                this.rad = this.oRad = 0;
            }
        };
        _0xa0a2ad.prototype.updateTimer = function() {
            this.timer = Math.round(this.timer);
            var _0x2e6bb2 = this.timer;
            this.setTimer(_0x2e6bb2);
        };
        _0xa0a2ad.prototype.timerTxt = null;
        _0xa0a2ad.prototype.setTimer = function(_0x51ec1d) {
            var _0x1460c1 = "" + _0x51ec1d;
            if (this.timerTxt == null) {
                this.timerTxt = new _0x123582(20, "#FFFFFF");
                this.timerTxt.strokeW = 2;
                this.timerTxt.multiLine = true;
                this.timerTxt.renderScale = 5;
                this.timerTxt.setText(_0x1460c1);
            } else {
                this.timerTxt.setFontSize(20);
                this.timerTxt.setText(_0x1460c1);
            }
        };

        function _0xa0a2ad() {
            _0xa0a2ad.superClass.call(this, _0x651296);
            _0xa0a2ad.prototype.easeAngleChanges = false;
            if (this.abilityType == _0x4e59a2) {
                this.doesDrawEffectScale = this.drawEffectScale_Slow = true;
            }
        }
        _0x35d268.setCustomClassForGameObjType(_0xa0a2ad, _0x651296);
        var _0x5899d5 = _0x115d9a;
        var _0x28c171 = _0xa0a2ad;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x115d9a.prototype.customDraw = function(_0x3ae3e3) {
            _0x39e82d.save();
            var _0x25e763 = _0x39e82d.globalAlpha;
            _0x39e82d.rotate(this.angle);
            _0x39e82d.globalAlpha = _0x25e763 * 0.05;
            _0x466d9b(0, 0, this.rad, "#E4E7C8");
            _0x39e82d.globalAlpha = _0x25e763 * 1;
            var _0x495837 = "skins/land/elephant/" + this.speciesType;
            if (this.speciesType == 0) {
                _0x495837 += "/" + this.speciesSubType;
            }
            var _0x1f3c74 = this.getSkinImageObj(_0x495837 + "/ability_elephantTrunkSmack.png");
            if (_0x1f3c74) {
                var _0x387fc6 = _0x2944ee((_0x4ec996 - this.spawnTime) / 300, 0, 1);
                var _0x408516 = -(-0.5 + _0x387fc6) * _0x439930;
                var _0x233b49 = this.rad * 0.6;
                _0x39e82d.save();
                _0x39e82d.rotate(_0x408516);
                var _0x44c682 = 0;
                var _0x9eaff = this.rad;
                var _0x272c70 = _0x233b49 * 2 * 0.7;
                var _0x3caf4a = _0x233b49 * 2;
                var _0x2883ca = 0.75;
                var _0x2ee77b = 0.95;
                _0x39e82d.drawImage(_0x1f3c74, _0x44c682 + _0x272c70 * -_0x2883ca, _0x9eaff + _0x3caf4a * -_0x2ee77b, _0x272c70, _0x3caf4a);
                _0x39e82d.restore();
            }
            _0x39e82d.restore();
        };

        function _0x115d9a() {
            _0x115d9a.superClass.call(this);
        }
        _0x35d268.setCustomClassForGameObjType(_0x115d9a, _0x651296, _0x515181);
        var _0x5899d5 = _0x3ac276;
        var _0x28c171 = _0xa0a2ad;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x3ac276.prototype.customDraw = function(_0x3e0e03) {
            var _0x13eb73 = _0x39e82d.globalAlpha;
            _0x39e82d.save();
            var _0x59a6df = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x58e90b = 1.5;
            var _0x20c4a8 = 1;
            var _0x19b762 = _0x20c4a8 * Math.sin(Math.PI * 2 / _0x58e90b * _0x59a6df);
            var _0xfc4aa5 = _0x39e82d.globalAlpha;
            _0x39e82d.globalAlpha *= _0x19b762 * 0.6;
            _0x39e82d.rotate(this.angle);
            _0x39e82d.globalAlpha = _0x13eb73 * 0.15;
            if (this.specType2 == 0 && this.aniSpecies) {
                _0x466d9b(0, 0, this.rad, "#96661C");
            } else {
                _0x466d9b(0, 0, this.rad, "#e0dfde");
            }
            _0x39e82d.restore();
            _0x39e82d.save();
            var _0x1df1be = "skins/";
            if (this.animalType === 36) {
                _0x1df1be += "arctic/bear/" + this.aniSpecies + "/slash.png";
            } else {
                _0x1df1be += "land/bear/" + this.speciesType + "/" + this.speciesSubType + "/ability.png";
            }
            var _0x3f7a41 = this.getSkinImageObj(_0x1df1be);
            if (_0x3f7a41) {
                var _0x411283 = Math.min(1, (_0x4ec996 - this.spawnTime) / 200);
                var _0x303c4a = _0x2944ee((_0x4ec996 - this.spawnTime) / 300, 0, 1);
                var _0x1823a7 = -(-0.5 + _0x303c4a) * _0x439930;
                var _0x3a3f3b = this.angle;
                _0x39e82d.rotate(this.angle + _0x1823a7 * (this.specType == 0 ? 1 : -1));
                var _0x3e7047 = -this.rad * 1;
                var _0x291342 = 0;
                var _0x1936a7 = this.rad;
                var _0x30cb5e = _0x3e7047 * 2;
                var _0x376329 = _0x3e7047 * 2 * _0x411283;
                var _0x47bdd4 = 0.5;
                var _0x4820ed = 0.8;
                _0x39e82d.drawImage(_0x3f7a41, _0x291342 + _0x30cb5e * -_0x47bdd4, _0x1936a7 + _0x376329 * -_0x4820ed + _0x3e7047, _0x30cb5e, _0x376329);
            }
            _0x39e82d.restore();
        };
        _0x3ac276.prototype.getSkinImageObj = function(_0x362c55) {
            var _0x25883f = this.mopeSeasonID;
            if (this.animalType === 36) {
                _0x25883f = this.speciesType === 201 ? 1 : this.mopeSeasonID;
            }
            return this.getSkinImageObjForSeason(_0x362c55, _0x25883f);
        };
        _0x3ac276.prototype.readCustomData_onNewlyVisible = function(_0x41db13) {
            _0x3ac276.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x41db13);
            this.aniSpecies = _0x41db13.readUInt8();
        };

        function _0x3ac276() {
            _0x3ac276.superClass.call(this);
        }
        _0x35d268.setCustomClassForGameObjType(_0x3ac276, _0x651296, _0x461442);
        var _0x5899d5 = Animal;
        var _0x28c171 = GameObj;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        Animal.prototype.animalType = _0x473f55;
        Animal.prototype.animalSpecies = 0;
        Animal.prototype.animalSubSpecies = 0;
        Animal.prototype.nickName = "";
        Animal.prototype.skinImgName = null;
        Animal.prototype.skinNotLoadedColor = "#75ce67";
        Animal.prototype.flag_fullAlpha = false;
        Animal.prototype.flag_lowWat = false;
        Animal.prototype.flag_tailBitten = false;
        Animal.prototype.flag_underWater = false;
        Animal.prototype.flag_eff_stunned = false;
        Animal.prototype.flag_eff_frozen = false;
        Animal.prototype.flag_eff_virusInfection = false;
        Animal.prototype.flag_usingAbility = false;
        Animal.prototype.flag_eff_invincible = false;
        Animal.prototype.flag_eff_healing = Animal.prototype.flag_eff_poison = Animal.prototype.flag_eff_bleeding = false;
        Animal.prototype.flag_eff_hot = false;
        Animal.prototype.flag_eff_aloeveraHealing = false;
        Animal.prototype.flag_iceSliding = false;
        Animal.prototype.underwaterA = 0;
        4;
        Animal.prototype.nickNameA = 0;
        Animal.prototype.bleedingA = 0;
        Animal.prototype.stunA = 0;
        Animal.prototype.frozenEffA = Animal.prototype.onFireEffA = Animal.prototype.effA_healing = Animal.prototype.effA_hot = 0;
        Animal.prototype.effA_aloeveraHealing = Animal.prototype.effA_poison = Animal.prototype.effA_bleeding = Animal.prototype.effA_stunk = 0;
        Animal.prototype.effA_constricted = Animal.prototype.effA_slimed = Animal.prototype.effA_webStuck = 0;
        Animal.prototype.effA_speared = 0;
        Animal.prototype.effA_dirtStuck = 0;
        Animal.prototype.nameA = 0;
        Animal.prototype.loadedSkinImg = null;
        Animal.prototype.outlineW = null;
        Animal.prototype.teamID = 0;
        Animal.prototype.wins1v1 = 0;
        Animal.prototype.birdNoAnimationFlyWingAngle = -0.2;
        Animal.prototype.getNameSize = function() {
            return 10;
        };
        Animal.prototype.setNick = function(_0x17a167) {
            _0x17a167 = _0x292e5a(_0x17a167);
            this.nickName = _0x17a167;
            if (this.nickTXT == null) {
                this.nickTXT = new _0x123582(this.getNameSize(), "white");
                this.nickTXT.strokeW = 1.5;
                this.nickTXT.multiLine = true;
                this.nickTXT.renderScale = 5;
                this.nickTXT.setText(this.nickName);
            } else {
                this.nickTXT.setFontSize(this.getNameSize());
                this.nickTXT.setText(this.nickName);
            }
        };
        Animal.prototype.getOutlineColor = function() {
            var _0x10a3cb = this.curBiome;
            if (this.id > 0) {
                var _0x37fe46 = _0xb3e9be[_0x166276];
                if (this.alwaysPlainOutline) {
                    return _0x504cbf;
                }
                var _0x4e9892 = _0x444fd7 != _0x2530ce || _0x37fe46 && _0x37fe46.teamID != this.teamID && this.teamID != 0;
                if (_0x4e9892) {
                    if (this.isEdibleOutlined()) {
                        return _0x556e31;
                    }
                    if (_0x407e2a[this.animalType - 1] > 0 && this.id != _0x166276) {
                        return _0x59e0de;
                    }
                }
                if (this.flag_inWater) {
                    _0x10a3cb = _0x5d8525;
                }
                if (_0x54cc88 != null && this.id == _0x54cc88.id && !_0x1d523b) {
                    return "cyan";
                }
            }
            return _0x3a1319(_0x10a3cb);
        };
        Animal.prototype.drawEyeAtPos = function(_0x583d51, _0x5b1cde) {
            var _0x47c9c6 = 4.5;
            _0x39e82d.beginPath();
            _0x39e82d.arc(_0x583d51, _0x5b1cde, _0x47c9c6, 0, Math.PI * 2);
            _0x39e82d.fillStyle = "black";
            _0x39e82d.fill();
            _0x39e82d.beginPath();
            _0x39e82d.fillStyle = "white";
            var _0xc00c18 = _0x583d51 - 2;
            var _0x2e32b7 = _0x5b1cde - 1;
            _0x39e82d.arc(_0xc00c18, _0x2e32b7, _0x47c9c6 * 0.22, 0, Math.PI * 2);
            _0x39e82d.fill();
        };
        Animal.prototype.animalInfo = function() {
            var _0x3e1097 = {};
            switch (this.animalType) {
                case _0x346a56:
                    _0x3e1097.aniName = "Snail";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "You're a super slow snail!";
                    _0x3e1097.aniCol = "#fcc02b";
                    _0x3e1097.skinName = "snail";
                    break;
                case _0x473f55:
                    _0x3e1097.aniName = "Mouse";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "You're a tiny mouse, eat food to grow!";
                    _0x3e1097.aniCol = "#9BA9B9";
                    _0x3e1097.skinName = "mouse";
                    break;
                case _0x4f884f:
                    _0x3e1097.aniName = "Rabbit";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to RABBIT! \nPress W to burrow a hole to hide in!";
                    _0x3e1097.aniCol = "#AA937E";
                    _0x3e1097.skinName = "rabbit";
                    break;
                case _0x2bdc31:
                    _0x3e1097.aniName = "Pig";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to PIG!\n Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)";
                    _0x3e1097.aniCol = "#DD6BD4";
                    _0x3e1097.skinName = "pig";
                    break;
                case _0x5e51a3:
                    _0x3e1097.aniName = "Fox";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to FOX! ,\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!";
                    _0x3e1097.aniCol = "#FF9D43";
                    _0x3e1097.skinName = "fox";
                    break;
                case _0x52cad3:
                    _0x3e1097.aniName = "Deer";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to DEER! \nPress W to dig up food! \nDig in mud for better food!\n Hint:Check water areas for new food sources!";
                    _0x3e1097.aniCol = "#C4773E";
                    _0x3e1097.skinName = "deer";
                    break;
                case _0x56cf8f:
                    _0x3e1097.aniName = "Mole";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to MOLE!\n Hold W to dig underground!\nGo under anything, do surprise attacks!";
                    _0x3e1097.aniCol = "#4C4A45";
                    _0x3e1097.skinName = "mole";
                    break;
                case _0x2cd75a:
                    _0x3e1097.aniName = "Zebra";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to ZEBRA! \nPress W to kick side ways!";
                    _0x3e1097.aniCol = "#FFFFFF";
                    _0x3e1097.skinName = "zebra";
                    break;
                case _0x3bf8ca:
                    _0x3e1097.aniName = "Lion";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to LION!\n Press W to release a mighty ROAR (Rawr!)!";
                    _0x3e1097.aniCol = "#f8c923";
                    _0x3e1097.skinName = "lion";
                    break;
                case _0x28396e:
                    _0x3e1097.aniName = "Bear";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to BEAR!\n Bears climb through green hills! (Press W to use your claw!)";
                    _0x3e1097.aniCol = "#99591C";
                    _0x3e1097.skinName = "bear";
                    break;
                case _0xce5aa0:
                    _0x3e1097.aniName = "Croc";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to CROCODILE!\n Press W to bite and drag around animals! \n+ (Now hide in water spots)+ Swim well in Mud, Lakes & Oceans!";
                    _0x3e1097.aniCol = "#30F51C";
                    _0x3e1097.skinName = "croc";
                    break;
                case _0x478075:
                    _0x3e1097.aniName = "Hippo";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to HIPPO!\nHippos are great swimmers, dominate the Lakes/Oceans/Mud!";
                    _0x3e1097.aniCol = "#945A99";
                    _0x3e1097.skinName = "hippo";
                    break;
                case _0x273128:
                    _0x3e1097.aniName = "Rhino";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to RHINO!\n Press W to CHARGE with your mighty horn!";
                    _0x3e1097.aniCol = "#94a3a9";
                    _0x3e1097.skinName = "rhino";
                    break;
                case _0x27c6df:
                    _0x3e1097.aniName = "Shrimp";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.aniCol = "#f88e37";
                    _0x3e1097.skinName = "shrimp";
                    _0x3e1097.upgradeText = "You're a tiny shrimp, eat food to grow bigger!";
                    break;
                case _0x5767e8:
                    _0x3e1097.aniName = "Trout";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to TROUT!\nHint: Hold Left-click to RUN! (Uses extra water)";
                    _0x3e1097.aniCol = "#ac8686";
                    _0x3e1097.skinName = "trout";
                    break;
                case _0x9f0228:
                    _0x3e1097.aniName = "Crab";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to CRAB!\n Crabs can survive on dry land!\n (On land, Press W to go into your shell!)";
                    _0x3e1097.aniCol = "#bf2408";
                    _0x3e1097.skinName = "crab";
                    break;
                case _0x51851f:
                    _0x3e1097.aniName = "Squid";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to SQUID!\n Squids can use INK when injured (press W!) \n+ you can hide in plankton bushes!";
                    _0x3e1097.aniCol = "#40dda4";
                    _0x3e1097.skinName = "squid";
                    break;
                case _0x78a6fc:
                    _0x3e1097.aniName = "Shark";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to SHARK!\n A vicious predator of the oceans!";
                    _0x3e1097.aniCol = "#999fc6";
                    _0x3e1097.skinName = "shark";
                    break;
                case _0x32b37a:
                    _0x3e1097.aniName = "Sea-horse";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to SEA HORSE!\n An agile hunter!";
                    _0x3e1097.aniCol = "#73BE2F";
                    _0x3e1097.skinName = "seahorse";
                    break;
                case _0x29d150:
                    _0x3e1097.aniName = "Jellyfish";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to JELLYFISH!\n A slowly-turning animal that can grow quite large!";
                    _0x3e1097.aniCol = "#FDB9BA";
                    _0x3e1097.skinName = "jellyfish";
                    break;
                case _0x499275:
                    _0x3e1097.aniName = "Turtle";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to TURTLE!\n Lives well on land & water! (On land, Press W to go into your shell!)";
                    _0x3e1097.aniCol = "#502E1A";
                    _0x3e1097.skinName = "turtle";
                    break;
                case _0x245c67:
                    _0x3e1097.aniName = "Stingray";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to STINGRAY!\n Use electic shock (Release W key!) to shock animals! \n(Takes time to recharge)";
                    _0x3e1097.aniCol = "#164336";
                    _0x3e1097.skinName = "stingray";
                    break;
                case _0x519f92:
                    _0x3e1097.aniName = "The Kraken";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to THE KRAKEN!\n Terrorize the oceans, and be feared by all!\n (Release W to use whirlpool ability!)";
                    _0x3e1097.aniCol = "#64a034";
                    _0x3e1097.skinName = "kraken";
                    break;
                case _0x2b36cf:
                    _0x3e1097.aniName = "Pufferfish";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to PUFFERFISH!\n (Hold W to inflate- become spiky, and dangerous to touch!)";
                    _0x3e1097.aniCol = "#6C5C2C";
                    _0x3e1097.skinName = "pufferfish";
                    break;
                case _0x563e19:
                    _0x3e1097.aniName = "Killer Whale";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to Killer Whale! \nWhales blow out water when diving! (And sometimes other loot!)";
                    _0x3e1097.aniCol = "#141414";
                    _0x3e1097.skinName = "killerwhale";
                    break;
                case _0x371ea0:
                    _0x3e1097.aniName = "Swordfish";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n (Press W to rush with your sharp nose!)";
                    _0x3e1097.aniCol = "#689CD7";
                    _0x3e1097.skinName = "swordfish";
                    break;
                case _0x4d8eda:
                    _0x3e1097.aniName = "Gorilla";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n Gorillas are very fast on hills/trees!\n Press W to throw bananas! (from trees)";
                    _0x3e1097.aniCol = "#323232";
                    _0x3e1097.skinName = "gorilla";
                    break;
                case _0xbc1c26:
                    _0x3e1097.aniName = "Octopus";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to Octopus!\nHold W to use your 'Disguise' ability!\n(Hint: wait for prey to bite you- they get stunned!)";
                    _0x3e1097.aniCol = "#ff8340";
                    _0x3e1097.skinName = "octopus";
                    break;
                case _0x5642bc:
                    _0x3e1097.aniName = "Dragon";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n (You're amazing!) \nFly over everything, Hold W to shoot fire!";
                    _0x3e1097.aniCol = "#22FF8A";
                    _0x3e1097.skinName = "dragon";
                    break;
                case _0x47e6fe:
                    _0x3e1097.aniName = "Black Dragon";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n Black dragons drink lava instead of water! Black dragons only heal on healing stones/lava!";
                    _0x3e1097.aniCol = "black";
                    _0x3e1097.skinName = "blackdragon";
                    break;
                case _0x21b167:
                    _0x3e1097.aniName = "Giant Spider";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n Place web around the game to catch prey!";
                    _0x3e1097.aniCol = "black";
                    _0x3e1097.skinName = "giantSpider";
                    break;
                case _0x50e3b8:
                    _0x3e1097.aniName = "Cobra";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n Hold W to Spit venom, and poison animals with your bite!";
                    _0x3e1097.aniCol = "black";
                    _0x3e1097.skinName = "cobra";
                    break;
                case _0x471048:
                    _0x3e1097.aniName = "Boa Constrictor";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n Coil and suffocate other animals!";
                    _0x3e1097.aniCol = "black";
                    _0x3e1097.skinName = "boaConstrictor";
                    break;
                case _0x4a37d4:
                    _0x3e1097.aniName = "T-REX";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + " The Dinosaur!\n This ancient dinosaur has powerful jaws that can drag prey around!!";
                    _0x3e1097.aniCol = "#862A2A";
                    _0x3e1097.skinName = "trex";
                    break;
                case _0x567082:
                    _0x3e1097.aniName = "Giraffe";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to Giraffe!\nGiraffe have huge legs and stomp anyone in their way!";
                    _0x3e1097.aniCol = "#E9BD23";
                    _0x3e1097.skinName = "giraffe";
                    break;
                case _0x532f26:
                    _0x3e1097.aniName = "Eagle";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to Eagle!\nEagles can fly up other animals in the air! !\n";
                    _0x3e1097.aniCol = "#5b400d";
                    _0x3e1097.skinName = "eagle";
                    break;
                case _0x24396a:
                    _0x3e1097.aniName = "Arctic Fox";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!";
                    _0x3e1097.aniCol = "#CFCFCF";
                    _0x3e1097.skinName = "arctic/arcticfox";
                    break;
                case _0x5f399a:
                    _0x3e1097.aniName = "Arctic Hare";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n \nPress W to burrow a hole to hide in!";
                    _0x3e1097.aniCol = "#D5D5D5";
                    _0x3e1097.skinName = "arctic/arctichare";
                    break;
                case _0x174cd3:
                    _0x3e1097.aniName = "The Yeti!";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n So it really exists... \n Hold W to turn into snow, release W to freeeeeze!";
                    _0x3e1097.aniCol = "#839eb5";
                    _0x3e1097.skinName = "arctic/yeti";
                    break;
                case _0x5197c0:
                    _0x3e1097.aniName = "Chipmunk";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "";
                    _0x3e1097.aniCol = "#A77C30";
                    _0x3e1097.skinName = "arctic/chipmunk";
                    break;
                case _0x36539e:
                    _0x3e1097.aniName = "Muskox";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n Press W to charge with your horns! \nPlus move decently on ice!";
                    _0x3e1097.aniCol = "#231f18";
                    _0x3e1097.skinName = "arctic/muskox";
                    break;
                case _0x45fb63:
                    _0x3e1097.aniName = "Penguin";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n Left-click to run!\n (HOLD W to slide FAST on ice)!";
                    _0x3e1097.aniCol = "#FFFFFF";
                    _0x3e1097.skinName = "arctic/penguin";
                    break;
                case _0x3941c2:
                    _0x3e1097.aniName = "Polar Bear";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n Polar bears can climb hills! \n+ They're amazing swimmers!";
                    _0x3e1097.aniCol = "#e4e4e4";
                    _0x3e1097.skinName = "arctic/bear/bear";
                    break;
                case _0x2e1cf4:
                    _0x3e1097.aniName = "Seal";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n Seals can slide on ice (Hold W) + can climb hills (rocks too!)";
                    _0x3e1097.aniCol = "#cfcfcf";
                    _0x3e1097.skinName = "arctic/seal";
                    break;
                case _0x125d8e:
                    _0x3e1097.aniName = "Snow leopard";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n Press W to get a speed boost! (Every 8 seconds)!";
                    _0x3e1097.aniCol = "#cfcfcf";
                    _0x3e1097.skinName = "arctic/snowleopard";
                    break;
                case _0x52eaad:
                    _0x3e1097.aniName = "Walrus";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n You can slide on ice (Hold W) + can climb hills (rocks too!)";
                    _0x3e1097.aniCol = "#633838";
                    _0x3e1097.skinName = "arctic/walrus";
                    break;
                case _0x1171ab:
                    _0x3e1097.aniName = "Reindeer";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n Press W to dig up food! \n Your sharp hooves let you turn very well on ice!";
                    _0x3e1097.aniCol = "#a68976";
                    _0x3e1097.skinName = "arctic/reindeer";
                    break;
                case _0x57e1d4:
                    _0x3e1097.aniName = "Wolf";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n Wolf paws turn very well on ice!\n Press W to howl!";
                    _0x3e1097.aniCol = "#6B6B6B";
                    _0x3e1097.skinName = "arctic/wolf";
                    break;
                case _0x4372c1:
                    _0x3e1097.aniName = "Wolverine";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n Press W to Let out a Powerful GROWL! (Knocks back prey!)";
                    _0x3e1097.aniCol = "#843A0F";
                    _0x3e1097.skinName = "arctic/wolverine";
                    break;
                case _0x145a21:
                    _0x3e1097.aniName = "Mammoth";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n Press W to roll snowballs with your trunk!\n The bigger the snowball gets, the longer the freeze!";
                    _0x3e1097.aniCol = "#9d4717";
                    _0x3e1097.skinName = "arctic/mammoth";
                    break;
                case _0x2a825f:
                    _0x3e1097.aniName = "Donkey";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n Press W to Kick any animal behind you";
                    _0x3e1097.aniCol = "#8c7c64";
                    _0x3e1097.skinName = "donkey";
                    break;
                case _0x2ffcd2:
                    _0x3e1097.aniName = "Sabertooth Tiger";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to Sabertooth Tiger!\nSabertooth Tigers are great swimmers, dominate the Lakes/Oceans/Mud!";
                    _0x3e1097.aniCol = "#945A99";
                    _0x3e1097.skinName = "sabertoothtiger";
                    break;
                case _0x1bba03:
                    _0x3e1097.aniName = "Elephant";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to " + _0x3e1097.aniName + "!\n Use your long trunk to attack and eat food!";
                    _0x3e1097.aniCol = "#945A99";
                    _0x3e1097.skinName = "elephant";
                    break;
                case _0x1d87e9:
                    _0x3e1097.aniName = "Blue Whale";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to Blue Whale!\n Smash with your powerful tail!";
                    _0x3e1097.aniCol = "#945A99";
                    _0x3e1097.skinName = "bluewhale";
                    break;
                case _0x4abc25:
                    _0x3e1097.aniName = "Hedgehog";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to Hedgehog!\n (Hold W to become spiky, and dangerous to touch!)";
                    _0x3e1097.aniCol = "#5b400d";
                    _0x3e1097.skinName = "hedgehog";
                    break;
                case _0x50431e:
                    _0x3e1097.aniName = "King Crab";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to a KING CRAB!";
                    _0x3e1097.aniCol = "#971f0e";
                    _0x3e1097.skinName = "kingcrab";
                    break;
                case _0x3a5861:
                    _0x3e1097.aniName = "Lemming";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "";
                    _0x3e1097.aniCol = "#A77C30";
                    _0x3e1097.skinName = "arctic/lemming";
                    break;
                case _0x2fab82:
                    _0x3e1097.aniName = "Frog";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to Frog!!";
                    _0x3e1097.aniCol = "#FF9000";
                    _0x3e1097.skinName = "frog/frog";
                    break;
                case _0x1f5222:
                    _0x3e1097.aniName = "Ostrich";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to Ostrich! Lay eggs to hatch babies! \nCommand babies by placing your crosshair (right-click/W)-\n They can attack prey!";
                    _0x3e1097.aniCol = "#FF9000";
                    _0x3e1097.skinName = "ostrich/ostrich";
                    break;
                case _0x1c9f19:
                    _0x3e1097.aniName = "Pelican";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to Pelican! \nPick up water (and prey!) in your mouth,\nfly, and drop water on prey! (press W again)";
                    _0x3e1097.aniCol = "#FF9000";
                    _0x3e1097.skinName = "pelican/pelican";
                    break;
                case _0x4c676b:
                    _0x3e1097.aniName = "Falcon";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to Falcon! \nFly, and do a powerful dive attack! Aim it well.";
                    _0x3e1097.aniCol = "#FF9000";
                    _0x3e1097.skinName = "falcon/falcon";
                    break;
                case _0x57d22f:
                    _0x3e1097.aniName = "Snowy Owl";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to Snowy Owl!\n Aim the crosshair, \n right click/W when it's on top of prey, to attack!";
                    _0x3e1097.aniCol = "#FF9000";
                    _0x3e1097.skinName = "snowyowl/snowyowl";
                    break;
                case _0x49b249:
                    _0x3e1097.aniName = "Baby Ostrich";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.upgradeText = "UPGRADED to Baby Ostrich!!";
                    _0x3e1097.aniCol = "#FF9000";
                    _0x3e1097.skinName = "ostrich/ostrich-baby";
                    break;
                case _0x27033a:
                    _0x3e1097.aniName = "Phoenix";
                    _0x3e1097.upgradeText = "UPGRADED to Phoenix!\nCreate powerful fire tornados to burn your enemies alive!";
                    _0x3e1097.aniCol = "#FF9000";
                    _0x3e1097.skinName = "phoenix/phoenix";
                    break;
                case _0x46adbf:
                    _0x3e1097.aniName = "Sea Monster";
                    _0x3e1097.upgradeText = "UPGRADED to Sea Monster!";
                    _0x3e1097.aniCol = "#FF9000";
                    _0x3e1097.skinName = "seamonster";
                    break;
                case _0x5c13ab:
                    _0x3e1097.aniName = "Land Monster";
                    _0x3e1097.upgradeText = "UPGRADED to Land Monster!";
                    _0x3e1097.aniCol = "#FF9000";
                    _0x3e1097.skinName = "landmonster";
                    break;
                case _0x31abda:
                    _0x3e1097.aniName = "Ice Monster";
                    _0x3e1097.upgradeText = "UPGRADED to Ice Monster!";
                    _0x3e1097.aniCol = "#FF9000";
                    _0x3e1097.skinName = "icemonster";
                    break;
                case _0x504f20:
                    _0x3e1097.aniName = "Dino Monster";
                    _0x3e1097.upgradeText = "UPGRADED to Dino Monster!";
                    _0x3e1097.aniCol = "#FF9000";
                    _0x3e1097.skinName = "dinomonster";
                    break;
                case _0x2b4863:
                    _0x3e1097.aniName = "Pigeon";
                    _0x3e1097.upgradeText = "UPGRADED to Pigeon!\nHold right click (or W) to fly!\n";
                    _0x3e1097.aniCol = "#FF9000";
                    _0x3e1097.skinName = "pigeon/pigeon";
                    break;
                case _0x190fd6:
                    _0x3e1097.aniName = "Toucan";
                    _0x3e1097.upgradeText = "UPGRADED to Toucan!\nHold right click (or W) to fly!(HINT: Start flying from a fruit tree or bush to throw fruit upon landing!)";
                    _0x3e1097.aniCol = "#FF9000";
                    _0x3e1097.skinName = "toucan/toucan";
                    break;
                default:
                    _0x3e1097.aniName = "(Animal)";
                    _0x3e1097.aniDesc = "";
                    _0x3e1097.aniCol = "#000000";
                    _0x3e1097.upgradeText = "UPGRADED!";
            }
            return _0x3e1097;
        };
        Animal.prototype.loadAnimalSkinImg = function() {
            var _0x6fd44 = this.getSkinName();
            this.loadedSkinImg = null;
            if (_0x6fd44 && !_0x2480f7) {
                this.loadedSkinImg = this.getSkinImageObj("skins/" + _0x6fd44 + ".png");
            }
        };
        Animal.prototype.loadAnimalSkinImgAsync = async function() {
            var _0x3aecc1 = this.getSkinName();
            this.loadedSkinImg = await this.getSkinImageObjAsync("skins/" + _0x3aecc1 + ".png");
        };
        Animal.prototype.getIdealOpacity = function() {
            if (this.flag_usingDiveAbility || this.flag_underWater || this.flag_usingAbility && (this.animalType == _0x56cf8f || this.animalType == _0xbc1c26 || this.animalType == _0x174cd3)) {
                return 0;
            } else {
                return 1;
            }
        };
        Animal.prototype.isAnimalInside1v1Arena = function() {
            if (_0x3edd9e != null && _0x1d523b) {
                if (_0x3edd9e.p1ID == this.id || _0x3edd9e.p2ID == this.id) {
                    return true;
                }
            } else if (_0x389289[this.id] || _0x389289[_0x166276] && _0x166276 == this.id) {
                return true;
            }
            return false;
        };
        Animal.prototype.setStealth = function() {
            if (this.isAnimalInside1v1Arena() || this.flag_isInArena) {
                this.idealOp = 0.6;
            } else if (this.flag_stealth || this.flag_inHidingHole) {
                this.idealOp = 0.2;
            }
        };
        Animal.prototype.setOpacityForFlyingAnimals = function(_0x51dec8) {
            if (this.gabbedByAniID == this.id || this.grabbedAniID == this.id) {
                return;
            }
            if (this.id != _0x166276) {
                this.idealOp = 0.6;
            }
        };
        Animal.prototype.getImageDataKey = function() {
            return this.animalType + "__" + this.animalSpecies + "__" + this.animalSubSpecies + "__" + this.animalPremiumSkin + "__" + this.mopeSeasonID + "__" + this.skinThemeID;
        };
        const _0x5c862a = {};
        const _0xae6819 = "cached_animal_image_data_keys";
        const _0x5a26d9 = () => {
            if (_0x450ba1) {
                const _0x5e4bc5 = localStorage.getItem(_0xae6819);
                console.error("KEYS:", _0x5e4bc5);
                if (_0x5e4bc5) {
                    JSON.parse(_0x5e4bc5).forEach(_0x333594 => {
                        _0x5c862a[_0x333594] = localStorage.getItem(_0x333594);
                    });
                }
            }
        };
        Animal.prototype.getUpgradeImagePath = function() {
            let _0x1e514f = this.animalInfo().skinName;
            let _0x7a5af7 = "";
            if (!_0x1e514f || _0x1e514f.toLowerCase().includes("scorpion") || this.animalSpecies == 200) {
                _0x7a5af7 = this.getSkinImagePath("skins/" + this.getSkinName()) + ".png";
            } else {
                _0x7a5af7 = this.getSkinImagePath("skins/" + _0x1e514f + ".png");
            }
            return _0x7a5af7;
        };
        Animal.prototype.getImageData = async function() {
            const _0x11df48 = this.getImageDataKey();
            if (_0x11df48 in _0x5c862a) {
                return _0x5c862a[_0x11df48];
            }
            this.flag_fullAlpha = true;
            this.buttonScaleF = 1;
            this.imgSizeF = 1;
            var _0xf8b31a = this.animalInfo();
            var _0x5164e5 = _0xf8b31a.aniCol;
            this.skinImgName = _0xf8b31a.skinName;
            this.skinNotLoadedColor = _0x5164e5;
            await this.loadAnimalSkinImgAsync();
            this.draw();
            return new Promise(async (_0x31f39c, _0x1486db) => {
                const _0x19885e = document.createElement("canvas");
                const _0x5402c9 = 140;
                const _0x5d655a = 110;
                _0x19885e.width = _0x5402c9;
                _0x19885e.height = _0x5402c9;
                const _0x5612d6 = window.ctx;
                window.ctx = _0x19885e.getContext("2d");
                this.w = _0x5d655a;
                this.h = _0x5d655a;
                this.rad = _0x5d655a / 2;
                this.skinRad = _0x5d655a / 2;
                this.idealOp = 1;
                this.underwaterA = 0;
                window.ctx.translate(_0x5402c9 / 2, _0x5402c9 / 2);
                window.ctx.globalAlpha = 1;
                this.draw();
                const _0x4dcb2b = _0x19885e.toDataURL();
                window.ctx = _0x5612d6;
                _0x5c862a[_0x11df48] = _0x4dcb2b;
                if (_0x450ba1) {
                    try {
                        localStorage.setItem(_0xae6819, JSON.stringify(Object.keys(_0x5c862a)));
                        localStorage.setItem(_0x11df48``, _0x4dcb2b);
                    } catch (_0x5d1009) {}
                }
                return _0x31f39c(_0x4dcb2b);
            });
        };
        Animal.prototype.idealOp = 1;
        Animal.prototype.customDraw = function(_0x2324cb) {
            this.preLoad();
            var _0x28b8a4 = this.animalInfo();
            var _0x5be026 = _0x28b8a4.aniCol;
            this.skinImgName = _0x28b8a4.skinName;
            this.skinNotLoadedColor = _0x5be026;
            switch (this.animalType) {
                case _0x2b36cf:
                case _0x36539e:
                case _0x371ea0:
                case _0x499275:
                case _0xce5aa0:
                    tailLen = this.rad * 0.16;
                    break;
            }
            this.loadAnimalSkinImg();
            _0x39e82d.save();
            _0x39e82d.rotate(this.angle);
            var _0x1de954 = 0;
            var _0x18fc84 = (_0x4ec996 - this.spawnTime) / 1000;
            if (this.flag_eff_wobbling) {
                var _0x1bb52c = _0x1b594e(_0x18fc84, 1.25, 0.1, 2);
                this.rad += _0x1bb52c;
            }
            this.idealOp = this.getIdealOpacity();
            this.setStealth();
            if (this.flag_flying) {
                this.setOpacityForFlyingAnimals();
            }
            if (this.flag_fullAlpha) {
                _0x39e82d.globalAlpha = 1;
            } else {
                this.underwaterA += (this.idealOp - this.underwaterA) * 0.1;
                _0x39e82d.globalAlpha *= this.underwaterA;
            }
            if (this.flag_eff_invincible) {
                var _0x1b66c2 = 1;
                var _0x5b4bf5 = 0.3;
                var _0x57cff3 = 1;
                var _0xad3683 = (_0x57cff3 - _0x5b4bf5) * 0.5;
                _0x39e82d.globalAlpha *= _0x5b4bf5 + _0xad3683 + _0xad3683 * Math.sin(Math.PI * 2 / _0x1b66c2 * ((_0x4ec996 - this.spawnTime) / 1000));
            }
            this.outlineW = 2 + _0x1de954;
            if (!this.dead && !this.flag_underWater && (this.animalType != _0x56cf8f || !this.flag_usingAbility)) {
                if (!this.flag_underWater) {
                    var _0x451694 = this.getOutlineColor();
                    if (this.killerId == 0 && (!this.flag_flying || this.id != _0x166276) && (_0x5981a2 != _0x4051d6 || _0x451694 == _0x556e31 || _0x451694 == _0x59e0de)) {
                        if (this.teamID > 0 && _0xebbf06 != null && _0x444fd7 == _0x2530ce) {
                            _0x39e82d.save();
                            _0x39e82d.globalAlpha = this.isAnimalInside1v1Arena() ? 0.3 : this.idealOp;
                            _0x466d9b(0, 0, this.rad + 2, _0xebbf06.getTeamColor(this.teamID));
                            _0x39e82d.restore();
                        }
                        this.drawAnimalUnderSkinCircle(_0x451694);
                    } else {
                        this.outlineW = 0;
                    }
                }
            }
            this.drawUnderEffects();
            if (this.canDrawAnimalSkin()) {
                this.drawAnimalSkin(_0x451694);
            }
            this.drawUnderWater();
            if (this.animalPremiumSkin != 0 && !this.flag_eff_shivering) {
                this.sparkleAnim();
            }
            _0x39e82d.restore();
            this.drawTopEffects();
            this.drawLowWaterDrop();
            if (!this.flag_isInArena) {
                if (this.id == _0x166276 && this.flag_viewing1v1Invite) {} else if (!this.flag_usingDiveAbility) {
                    this.drawNickName(_0x53365e == null ? this.idealOp : 0.2);
                }
            }
            this.drawZombieEffect();
        };
        Animal.prototype.canDrawAnimalSkin = function() {
            return true;
        };
        Animal.prototype.drawZombieEffect = function() {
            if (this.effecT_isZombie) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = 0.6;
                _0x466d9b(0, 0, this.skinRad, "#B6CF40");
                _0x39e82d.restore();
            }
        };
        Animal.prototype.drawLowWaterDrop = function() {
            if (this.flag_lowWat) {
                var _0x555c6f = 1.2;
                var _0x13006e = 0.2;
                var _0x1ea53f = 0.8;
                var _0x398591 = (_0x1ea53f - _0x13006e) * 0.5;
                var _0x4b6cac = _0x13006e + _0x398591 + _0x398591 * Math.sin(Math.PI * 2 / _0x555c6f * (_0x4ec996 / 1000));
                _0x39e82d.save();
                _0x39e82d.globalAlpha = _0x4b6cac;
                if (this.animalType == _0x47e6fe || this.animalType == _0x27033a || this.animalType == _0x5c13ab || this.animalType == _0x190fd6 && this.animalSpecies == 4) {
                    _0x39e82d.fillStyle = _0x51276a;
                } else if (this.animalType == _0x46adbf) {
                    _0x39e82d.fillStyle = _0x4e5bdd;
                } else if (this.animalType == _0x5b6d09) {
                    _0x39e82d.fillStyle = _0x424ca9;
                } else {
                    _0x39e82d.fillStyle = _0x4fbc4b;
                }
                _0x39e82d.beginPath();
                _0x39e82d.arc(0, this.rad + 5, 5, 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.restore();
            }
        };
        Animal.prototype.sparkleInterval = 5;
        Animal.prototype.sparklDuration = 3;
        Animal.prototype.sparkleNext = 0;
        Animal.prototype.sparkleAniT = 0;
        Animal.prototype.setSparkleInterval = function(_0x429888, _0x5a13cd) {
            this.sparkleInterval = _0x429888;
            this.sparklDuration = _0x5a13cd;
            this.setSparkleXY();
        };
        Animal.prototype.seSparkle = function() {
            this.sparkleAniT = +new Date() + this.sparklDuration * 1000;
            this.sparkleNext = this.sparkleAniT + this.sparkleInterval * 1000;
            this.setSparkleXY();
        };
        Animal.prototype.isMouseHovering = false;
        Animal.prototype.sparkleAnim = function() {
            if (this.animalPremiumSkin && (_0x4ec996 - this.spawnTime) / 1000 > 5) {
                if (this.id > 0 || this.id == 0 && this.isMouseHovering) {
                    if (+new Date() > this.sparkleNext) {
                        this.seSparkle();
                        this.setSparkleXY();
                    }
                }
                if (this.sparkleAniT > +new Date()) {
                    this.showSparkling();
                }
            }
        };
        Animal.prototype.sparkleAng = 0;
        Animal.prototype.sparkleX = 0;
        Animal.prototype.sparkleY = 0;
        Animal.prototype.setSparkleXY = function() {
            var _0x5df7c7 = this.rad / 2;
            var _0x247239 = _0x5df7c7 * 0.3;
            var _0x4243f1 = _0x5df7c7;
            var _0xc2ac8 = _0x14db03(_0x247239, _0x4243f1);
            var _0x52d65a = _0x14db03(_0x247239, _0x4243f1);
            _0xc2ac8 *= Math.random() * 10 > 5 ? -1 : 1;
            _0x52d65a *= Math.random() * 10 > 5 ? -1 : 1;
            this.sparkleX = _0xc2ac8;
            this.sparkleY = _0x52d65a;
        };
        Animal.prototype.showSparkling = function() {
            var _0x37c604 = 5;
            _0x39e82d.save();
            var _0x14a206 = 1.5;
            var _0x3e7100 = 0.3;
            var _0xe34103 = 1;
            var _0x51aa17 = (_0xe34103 - _0x3e7100) * 0.5;
            _0x39e82d.globalAlpha *= _0x3e7100 + _0x51aa17 + _0x51aa17 * Math.sin(Math.PI * 2 / _0x14a206 * ((_0x4ec996 - this.spawnTime) / 1000));
            this.sparkleAng += 0.5;
            var _0x52f379 = 1;
            var _0x31672b = 0;
            _0x39e82d.fillStyle = "#faffb6";
            for (i = 0; i < 3; i++) {
                _0x39e82d.save();
                _0x39e82d.translate(this.sparkleX, this.sparkleY);
                _0x39e82d.rotate(_0x4bfce6(this.sparkleAng));
                _0x39e82d.save();
                _0x39e82d.rotate(_0x4bfce6(_0x31672b));
                _0x39e82d.scale(_0x52f379 * 0.5, _0x37c604);
                _0x39e82d.beginPath();
                _0x39e82d.arc(0, 0, _0x52f379, 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.restore();
                _0x31672b += 60;
                _0x39e82d.restore();
            }
            _0x39e82d.beginPath();
            _0x39e82d.arc(this.sparkleX, this.sparkleY, _0x52f379, 0, Math.PI * 2);
            _0x39e82d.fill();
            _0x39e82d.restore();
        };
        Animal.prototype.shakeOffsetX = 0;
        Animal.prototype.shakeOffsetY = 0;
        Animal.prototype.updateNick = function() {
            if (_0x36536c && this.flag_can1v1) {
                let _0x3e55f9 = "\n(wins:" + this.wins1v1 + ")";
                this.nickTXT.setText(this.nickName + _0x3e55f9);
                this.winsAddedInNick = true;
            } else if (this.winsAddedInNick) {
                this.winsAddedInNick = false;
                this.nickTXT.setText(this.nickName);
            }
        };
        Animal.prototype.drawAnimalSkin = function(_0x454a75) {
            _0x39e82d.save();
            this.updateNick();
            if (this.flag_eff_shivering) {
                var _0x3d0c84 = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x40c9e3 = 0.1;
                var _0x345ed1 = this.rad * this.shiverF;
                this.shakeOffsetX = _0x345ed1 * Math.sin(Math.PI * 2 / _0x40c9e3 * _0x3d0c84);
                var _0x40c9e3 = 0.05;
                var _0x345ed1 = this.rad * this.shiverF;
                this.shakeOffsetY = _0x345ed1 * Math.sin(Math.PI * 2 / _0x40c9e3 * _0x3d0c84);
                _0x39e82d.translate(-this.shakeOffsetX, -this.shakeOffsetY);
            }
            this.drawPropsUnderSkin();
            this.beforeDrawAnimalSkin();
            if (this.id > 0) {
                this.drawUnderSkinTail(_0x454a75);
            }
            this.drawUnderSkinImgOutline();
            this.drawUnderSkinImg();
            this.drawSkinImg();
            this.drawOnTopOfSkinImg();
            this.drawPropsTopOfSkin();
            this.drawStatueEffect();
            _0x39e82d.restore();
        };
        Animal.prototype.drawStatueEffect = function() {
            if (this.flag_eff_statue) {
                var _0x4ceb4c = null;
                switch (this.eff_statueType) {
                    case 1:
                        _0x4ceb4c = "snowball";
                        break;
                    case 2:
                        _0x4ceb4c = "goldball";
                        break;
                }
                if (_0x4ceb4c) {
                    var _0x2b7cde = this.getSkinImageObj("img/" + _0x4ceb4c + ".png");
                    if (_0x2b7cde) {
                        _0x39e82d.save();
                        _0x39e82d.globalAlpha = _0x166276 == this.id ? 0.7 : 1;
                        var _0x2379f4 = this.rad * 1.2;
                        _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        _0x39e82d.drawImage(_0x2b7cde, -_0x2379f4, -_0x2379f4, _0x2379f4 * 2, _0x2379f4 * 2);
                        _0x39e82d.restore();
                    }
                }
            }
        };
        Animal.prototype.drawElectroStunEffect = function() {
            if (this.flag_eff_electroStun === true) {
                var _0xfdcec7 = Math.trunc(_0x4ec996 / 250) % 4;
                let _0x2fa681 = "skins/land/birdmonster/0/stun/" + _0xfdcec7 + ".png";
                var _0xf812ac = this.getSkinImageObj(_0x2fa681);
                if (_0xf812ac) {
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = 1;
                    var _0x37b88c = this.rad * 1.2;
                    _0x39e82d.rotate(this.angle);
                    _0x39e82d.drawImage(_0xf812ac, -_0x37b88c, -_0x37b88c, _0x37b88c * 2, _0x37b88c * 2);
                    _0x39e82d.restore();
                }
            }
        };
        Animal.prototype.propsEnabled = false;
        Animal.prototype.drawPropsUnderSkin = function(_0x4174dd) {
            if (this.propsEnabled) {
                if (this.animalType == _0x473f55) {}
            }
        };
        Animal.prototype.drawPropsTopOfSkin = function(_0x465a90) {
            if (this.propsEnabled) {
                if (this.animalType == _0x473f55) {
                    this.drawProp("scarfs", 1);
                    this.drawProp("glasses", 0);
                    this.drawProp("hats", 1);
                }
            }
        };
        Animal.prototype.drawProp = function(_0x56d5b9, _0x17b4bc) {
            var _0xebb773 = this.skinScale;
            var _0x42dd2f = this.skinRad + 0.9;
            var _0x5ccf40 = this.getSkinImageObj("props/" + this.animalType + "/" + _0x56d5b9 + "/" + _0x17b4bc + ".png");
            if (_0x5ccf40) {
                _0x39e82d.drawImage(_0x5ccf40, -_0x42dd2f * _0xebb773, -_0x42dd2f * _0xebb773, _0x42dd2f * 2 * _0xebb773, _0x42dd2f * 2 * _0xebb773);
            }
        };
        Animal.prototype.beforeDrawAnimalSkin = function(_0x4100ff) {};
        Animal.prototype.drawUnderSkinTail = function(_0x180fa8) {
            if (this.killerId > 0 || this.flag_underWater) {
                return;
            }
            if (this.animalType != _0x4f884f && this.animalType != _0x473f55 && this.animalType != _0x9f0228) {
                var _0xb491e3 = this.animalInfo();
                var _0x8ee153 = _0xb491e3.aniCol;
                var _0x4b66bb = this.rad * 0.1;
                var _0x244aaf = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x3a928e = 5;
                var _0xcb1a28 = 4;
                var _0x2d1013 = _0xcb1a28 * Math.sin(Math.PI * 2 / _0x3a928e * _0x244aaf);
                var _0x4e9866 = this.outlineW * 2.5;
                var _0x3afb12 = 25;
                var _0x18afcb = Math.PI / 180;
                if (this.flag_tailBitten) {
                    _0x39e82d.fillStyle = _0x59e0de;
                } else {
                    var _0x293d90 = this.animalType;
                    if (_0x8a0626[_0x293d90 - 1] > 0 && this.id != _0x166276) {
                        _0x39e82d.fillStyle = _0x556e31;
                    } else {
                        _0x39e82d.fillStyle = _0x180fa8;
                    }
                }
                if (_0x5981a2 != _0x4051d6 || _0x39e82d.fillStyle == _0x504cbf) {
                    _0x39e82d.beginPath();
                    _0x39e82d.moveTo((this.rad - this.outlineW + 1) * Math.cos((270 + _0x3afb12 / 2 + _0x4e9866) * _0x18afcb), (this.rad - this.outlineW + 1) * Math.sin((270 + _0x3afb12 / 2) * _0x18afcb));
                    _0x39e82d.lineTo((this.rad - this.outlineW + 1) * Math.cos((270 - _0x3afb12 / 2 - _0x4e9866) * _0x18afcb), (this.rad - this.outlineW + 1) * Math.sin((270 - _0x3afb12 / 2) * _0x18afcb));
                    _0x39e82d.lineTo((this.rad + _0x4b66bb + this.outlineW) * Math.cos((270 + _0x2d1013) * _0x18afcb), (this.rad + _0x4b66bb + this.outlineW) * Math.sin((270 + _0x2d1013) * _0x18afcb));
                    _0x39e82d.lineTo((this.rad - this.outlineW + 1) * Math.cos((270 + _0x3afb12 / 2 + _0x4e9866) * _0x18afcb), (this.rad - this.outlineW + 1) * Math.sin((270 + _0x3afb12 / 2) * _0x18afcb));
                    _0x39e82d.fill();
                }
                if (_0x5981a2 != _0x4051d6) {
                    if (!this.loadedSkinImg || this.flag_tailBitten) {
                        _0x39e82d.fillStyle = this.flag_tailBitten ? _0x59e0de : _0x8ee153;
                        _0x39e82d.beginPath();
                        _0x39e82d.moveTo((this.rad - this.outlineW) * Math.cos((270 + _0x3afb12 / 2) * _0x18afcb), (this.rad - this.outlineW) * Math.sin((270 + _0x3afb12 / 2) * _0x18afcb));
                        _0x39e82d.lineTo((this.rad - this.outlineW) * Math.cos((270 - _0x3afb12 / 2) * _0x18afcb), (this.rad - this.outlineW) * Math.sin((270 - _0x3afb12 / 2) * _0x18afcb));
                        _0x39e82d.lineTo((this.rad + _0x4b66bb) * Math.cos((270 + _0x2d1013) * _0x18afcb), (this.rad + _0x4b66bb) * Math.sin((270 + _0x2d1013) * _0x18afcb));
                        _0x39e82d.lineTo((this.rad - this.outlineW) * Math.cos((270 + _0x3afb12 / 2) * _0x18afcb), (this.rad - this.outlineW) * Math.sin((270 + _0x3afb12 / 2) * _0x18afcb));
                        _0x39e82d.fill();
                    }
                }
            }
        };
        Animal.prototype.drawAnimalUnderSkinCircle = function(_0x14fbcd) {
            if (!this.flag_isGrabbed) {
                if (this.playerNumberFor1v1Arena == 1) {
                    _0x14fbcd = "cyan";
                } else if (this.playerNumberFor1v1Arena == 2) {
                    _0x14fbcd = "yellow";
                } else if (this.flag_eff_isOnSpiderWeb) {
                    _0x14fbcd = "white";
                }
                _0x39e82d.save();
                _0x39e82d.globalAlpha = this.isAnimalInside1v1Arena() ? 0.3 : this.idealOp;
                _0x466d9b(0, 0, this.rad, _0x14fbcd);
                _0x39e82d.restore();
            }
        };
        Animal.prototype.devMode_num = 0;
        Animal.prototype.hasMultipleSpecies = function() {
            return false;
        };
        Animal.prototype.drawNickName = function(_0x42e6cc) {
            if (_0x42e6cc == 0) {
                return;
            }
            var _0x91b06 = _0x42e6cc;
            this.nickNameA += (_0x91b06 - this.nickNameA) * 0.1;
            if (this.nickName && this.nickTXT && !_0x26aab4) {
                _0x39e82d.save();
                if (this.dead) {
                    _0x39e82d.globalAlpha *= 1 - this.moveUpdF;
                } else {
                    _0x39e82d.globalAlpha = 1;
                }
                _0x39e82d.globalAlpha *= this.nickNameA;
                this.nickTXT.x = 0;
                this.nickTXT.y = this.rad + 9;
                var _0x2ba7e1 = "#FFFFFF";
                if (this.flag_isDevMode) {
                    if (!this.flag_hideDevPrint) {
                        switch (this.devMode_num) {
                            case 8:
                                if (_0x54cc88 != null && _0x54cc88.id == this.id) {
                                    _0x2ba7e1 = "cyan";
                                } else {
                                    _0x2ba7e1 = "yellow";
                                }
                                break;
                            case 1:
                                _0x2ba7e1 = "#e23ca6";
                                break;
                            case 2:
                                _0x2ba7e1 = "#a715e6";
                                break;
                            case 3:
                                _0x2ba7e1 = "#db1b18";
                                break;
                            case 4:
                                _0x2ba7e1 = "#62b0c8";
                                break;
                            case 5:
                                _0x2ba7e1 = "#18db38";
                                break;
                            case 6:
                                _0x2ba7e1 = "#000000";
                                break;
                            default:
                                break;
                        }
                    }
                }
                if (this.isVip) {
                    _0x2ba7e1 = "#FFD700";
                }
                this.nickTXT.setColor(_0x2ba7e1);
                this.nickTXT.draw();
                _0x39e82d.restore();
            }
        };
        Animal.prototype.drawHealthBar = function() {
            Animal.superClass.prototype.drawHealthBar.call(this);
            this.drawInfectionBar();
        };
        Animal.prototype.drawInfectionBar = function() {
            if (this.flag_underWater) {
                return;
            }
            var _0x29172e = _0x4ec996 < this.infectionBarTimeoutT ? 1 : 0;
            this.infectionBarA += (_0x29172e - this.infectionBarA) * 0.04;
            if (this.infectionBarA > 0.001) {
                this.infectionPer += (this.infectionPer_n - this.infectionPer) * 0.1;
                this.drawBar("red", this.infectionBarA, this.infectionPer, 2, 6.5);
            }
        };
        Animal.prototype.drawUnderWater = function() {
            if (this.flag_usingDiveAbility || this.flag_underWater || this.flag_usingAbility && this.animalType == _0x56cf8f) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = 1 - this.underwaterA;
                this.drawWhenUnderwater();
                _0x39e82d.restore();
            }
        };
        Animal.prototype.drawUnderSkinImgOutline = function() {
            if (this.flag_eff_stunk) {
                _0x39e82d.save();
                var _0x1dce90 = 1;
                var _0x19c5ad = 0.3;
                var _0x1d608a = 1;
                var _0x32408d = (_0x1d608a - _0x19c5ad) * 0.5;
                var _0x3923de = _0x19c5ad + _0x32408d + _0x32408d * Math.sin(Math.PI * 2 / _0x1dce90 * ((_0x4ec996 - this.spawnTime) / 1000));
                _0x39e82d.globalAlpha *= _0x3923de;
                var _0x310807 = 2.6;
                _0x466d9b(0, 0, this.rad + _0x310807 * _0x3923de, "brown");
                _0x39e82d.restore();
            }
            if (this.flag_iceSliding) {
                var _0xa5d936 = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x1dce90 = 0.75;
                var _0x34c395 = 1;
                var _0x1447e3 = _0x34c395 * Math.sin(Math.PI * 2 / _0x1dce90 * _0xa5d936);
                var _0x12f603 = _0x39e82d.globalAlpha;
                _0x39e82d.globalAlpha *= 0.8 - _0x1447e3 * 0.2;
                _0x466d9b(0, this.rad * 0.3, this.rad * (0.9 + _0x1447e3 * 0.15), "#7BB7BB");
                _0x466d9b(0, -this.rad * 0.3, this.rad * (1.05 + _0x1447e3 * 0.1), "#7BB7BB");
                _0x39e82d.globalAlpha = _0x12f603;
            }
            if (this.flag_usingAbility && (this.animalType == _0x52cad3 || this.animalType == _0x1171ab)) {
                var _0xa5d936 = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x1dce90 = 1.5;
                var _0x34c395 = 1;
                var _0x1447e3 = _0x34c395 * Math.sin(Math.PI * 2 / _0x1dce90 * _0xa5d936);
                var _0x12f603 = _0x39e82d.globalAlpha;
                _0x39e82d.globalAlpha *= 0.8;
                _0x466d9b(0, this.rad * 0.3, this.rad * (0.9 + _0x1447e3 * 0.12), "#7F582B");
                _0x466d9b(0, -this.rad * 0.3, this.rad * (1.05 + _0x1447e3 * 0.09), "#7F582B");
                _0x39e82d.globalAlpha = _0x12f603;
            }
            var _0x44c03d = this.flag_eff_frozen || this.flag_cold ? 1 : 0;
            this.frozenEffA += (_0x44c03d - this.frozenEffA) * 0.1;
            if (this.frozenEffA > 0.01) {
                var _0x12f603 = _0x39e82d.globalAlpha;
                _0x39e82d.globalAlpha *= this.frozenEffA;
                var _0x310807 = 1.6;
                _0x466d9b(0, 0, this.rad + _0x310807 * this.frozenEffA, "white");
                _0x39e82d.globalAlpha = _0x12f603;
            }
            var _0x44c03d = this.flag_eff_healing ? 1 : 0;
            this.effA_healing += (_0x44c03d - this.effA_healing) * 0.1;
            if (this.effA_healing > 0.01) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha *= this.effA_healing;
                var _0x310807 = 2.6;
                _0x466d9b(0, 0, this.rad + _0x310807 * this.effA_healing, "purple");
                _0x39e82d.restore();
            }
            this.effect_aloeveraHeal(true);
            this.effect_sanitized(true);
            var _0x44c03d = this.flag_eff_hot ? 1 : 0;
            this.effA_hot += (_0x44c03d - this.effA_hot) * 0.1;
            if (this.effA_hot > 0.01) {
                _0x39e82d.save();
                var _0x1dce90 = 1.2;
                var _0x19c5ad = 0.3;
                var _0x1d608a = 1;
                var _0x32408d = (_0x1d608a - _0x19c5ad) * 0.5;
                _0x39e82d.globalAlpha *= _0x19c5ad + _0x32408d + _0x32408d * Math.sin(Math.PI * 2 / _0x1dce90 * ((_0x4ec996 - this.spawnTime) / 1000));
                var _0x310807 = 2.6;
                _0x466d9b(0, 0, this.rad + _0x310807 * this.effA_hot, "rgba(249, 212, 77, 0.5)");
                _0x39e82d.restore();
            }
            var _0x44c03d = this.flag_eff_poison ? 1 : 0;
            this.effA_poison += (_0x44c03d - this.effA_poison) * 0.1;
            if (this.effA_poison > 0.01) {
                _0x39e82d.save();
                var _0x1dce90 = 1.2;
                var _0x19c5ad = 0.3;
                var _0x1d608a = 1;
                var _0x32408d = (_0x1d608a - _0x19c5ad) * 0.5;
                _0x39e82d.globalAlpha *= _0x19c5ad + _0x32408d + _0x32408d * Math.sin(Math.PI * 2 / _0x1dce90 * ((_0x4ec996 - this.spawnTime) / 1000));
                _0x39e82d.globalAlpha *= this.effA_poison;
                var _0x310807 = 2.6;
                _0x466d9b(0, 0, this.rad + _0x310807 * this.effA_poison, "#7FF600");
                _0x39e82d.restore();
            }
            var _0x44c03d = this.flag_eff_bleeding || this.flag_eff_wobbling ? 1 : 0;
            this.effA_bleeding += (_0x44c03d - this.effA_bleeding) * 0.1;
            if (this.effA_bleeding > 0.01) {
                _0x39e82d.save();
                var _0x1dce90 = 1.2;
                var _0x19c5ad = 0.3;
                var _0x1d608a = 1;
                var _0x32408d = (_0x1d608a - _0x19c5ad) * 0.5;
                _0x39e82d.globalAlpha *= _0x19c5ad + _0x32408d + _0x32408d * Math.sin(Math.PI * 2 / _0x1dce90 * ((_0x4ec996 - this.spawnTime) / 1000));
                _0x39e82d.globalAlpha *= this.effA_bleeding;
                var _0x310807 = 2.6;
                var _0x4757b7 = this.flag_eff_wobbling ? "brown" : "red";
                _0x466d9b(0, 0, this.rad + _0x310807 * this.effA_bleeding, _0x4757b7);
                _0x39e82d.restore();
            }
            var _0x44c03d = this.flag_eff_slimed ? 1 : 0;
            this.effA_slimed += (_0x44c03d - this.effA_slimed) * 0.1;
            if (this.effA_slimed > 0.01) {
                _0x39e82d.save();
                var _0x1dce90 = 1.2;
                var _0x19c5ad = 0.3;
                var _0x1d608a = 1;
                var _0x32408d = (_0x1d608a - _0x19c5ad) * 0.5;
                _0x39e82d.globalAlpha *= _0x19c5ad + _0x32408d + _0x32408d * Math.sin(Math.PI * 2 / _0x1dce90 * ((_0x4ec996 - this.spawnTime) / 1000));
                _0x39e82d.globalAlpha *= this.effA_slimed;
                var _0x310807 = 2.6;
                _0x466d9b(0, 0, this.rad + _0x310807 * this.effA_slimed, "grey");
                _0x39e82d.restore();
            }
        };
        Animal.prototype.drawUnderSkinImg = function() {};
        Animal.prototype.drawUnderwaterBubbles = function() {
            _0x39e82d.save();
            var _0xfee7f1 = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x53afd2 = 1.5;
            var _0x3e056a = 1;
            var _0x1c5c8b = _0x3e056a * Math.sin(Math.PI * 2 / _0x53afd2 * _0xfee7f1);
            if (this.animalType == _0xce5aa0) {
                _0x39e82d.globalAlpha *= 0.3;
            }
            var _0xb9a2c8 = this.flag_inWater ? "#4E71C3" : "#7E6A35";
            if (this.animalType == _0x27033a) {
                _0xb9a2c8 = "#f9d43b";
            }
            _0x39e82d.fillStyle = _0xb9a2c8;
            var _0x462f7d = this.rad * 0.2;
            _0x39e82d.beginPath();
            _0x39e82d.arc(this.rad * -0.35, this.rad * -0.33, Math.max(0, _0x462f7d + _0x1c5c8b), 0, Math.PI * 2);
            _0x39e82d.fill();
            _0x39e82d.beginPath();
            _0x39e82d.arc(this.rad * 0.35, this.rad * -0.32, Math.max(0, _0x462f7d - _0x1c5c8b), 0, Math.PI * 2);
            _0x39e82d.fill();
            _0x39e82d.beginPath();
            _0x39e82d.arc(this.rad * 0.35, this.rad * 0.36, Math.max(0, _0x462f7d + _0x1c5c8b), 0, Math.PI * 2);
            _0x39e82d.fill();
            _0x39e82d.beginPath();
            _0x39e82d.arc(this.rad * -0.35, this.rad * 0.35, Math.max(0, _0x462f7d - _0x1c5c8b), 0, Math.PI * 2);
            _0x39e82d.fill();
            _0x39e82d.restore();
        };
        Animal.prototype.drawUnderwaterCustomization = function(_0x4d249c, _0x35a86d) {
            _0x39e82d.save();
            var _0x42cd84 = (_0x4ec996 - this.spawnTime) / 1000;
            if (this.animalType == _0x78a6fc) {
                _0x39e82d.globalAlpha = 1 - this.underwaterA;
                _0x39e82d.fillStyle = "#73799b";
                _0x39e82d.beginPath();
                var _0x88f898 = this.rad;
                var _0x1152a7 = _0x88f898 * 0.25;
                _0x39e82d.moveTo(_0x88f898 * -0.07, _0x1152a7);
                _0x39e82d.lineTo(0, _0x1152a7 - _0x88f898 * 0.5);
                _0x39e82d.lineTo(_0x88f898 * 0.35, _0x1152a7);
                _0x39e82d.closePath();
                _0x39e82d.fill();
            } else if (this.animalType == _0x563e19) {
                _0x466d9b(0, this.rad * 0.2, this.rad * 0.12, "#4D4D4D");
            } else if (this.animalType == _0x1d87e9) {
                _0x466d9b(0, this.rad * 0.45, this.rad * 0.08, "#202A65");
            } else if (this.animalType == _0x50431e) {
                var _0x7c4092 = _0x1b594e(_0x42cd84, 1, 1, 1);
                _0x39e82d.save();
                _0x39e82d.rotate(_0x4bfce6(40));
                _0x39e82d.scale(1, 2);
                _0x39e82d.globalAlpha = 0.08;
                _0x466d9b(this.rad * 1, this.rad * 0.2, this.rad * 0.1 + this.rad * 0.1 * _0x7c4092, "#B32E10");
                _0x39e82d.globalAlpha = 0.2;
                _0x466d9b(this.rad * 1, this.rad * 0.2, this.rad * 0.15, "#B32E10");
                _0x39e82d.restore();
                _0x39e82d.save();
                _0x39e82d.globalAlpha = 1;
                _0x39e82d.rotate(_0x4bfce6(-40));
                _0x39e82d.scale(1, 2);
                _0x39e82d.globalAlpha = 0.08;
                _0x466d9b(this.rad * -1, this.rad * 0.2, this.rad * 0.1 + this.rad * 0.1 * -_0x7c4092, "#B32E10");
                _0x39e82d.globalAlpha = 0.2;
                _0x466d9b(this.rad * -1, this.rad * 0.2, this.rad * 0.15, "#B32E10");
                _0x39e82d.restore();
            } else if (this.animalType == _0x519f92) {
                _0x39e82d.globalAlpha = 1 - this.underwaterA;
                _0x466d9b(this.rad * 0.4, this.rad * 0.75, this.rad * 0.12, "#598b30");
                _0x466d9b(this.rad * 0.65, this.rad * 0.55, this.rad * 0.1, "#64a034");
                _0x466d9b(this.rad * -0.4, this.rad * 0.75, this.rad * 0.12, "#64a034");
                _0x466d9b(this.rad * -0.65, this.rad * 0.55, this.rad * 0.1, "#598b30");
            } else if (this.animalType == _0x4a37d4) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = 0.2;
                _0x39e82d.scale(1, 2);
                _0x466d9b(0, this.rad * 0.24, this.rad * 0.08, "#202A65");
                _0x466d9b(0, this.rad * -0.02, this.rad * 0.06, "#202A65");
                _0x466d9b(0, this.rad * -0.28, this.rad * 0.05, "#202A65");
                _0x466d9b(0, this.rad * -0.54, this.rad * 0.04, "#202A65");
                _0x39e82d.restore();
            }
            _0x39e82d.restore();
        };
        Animal.prototype.drawWhenUnderwater = function() {
            this.drawUnderwaterCustomization(1, 1);
            this.drawUnderwaterBubbles();
        };
        Animal.prototype.shiveringStartT = 0;
        Animal.prototype.flag_eff_shivering = false;
        Animal.prototype.flag_inHidingHole = false;
        Animal.prototype.effect_shivering = function() {
            if (this.shiveringStartT == 0 && this.flag_eff_shivering) {
                this.shiveringStartT = +new Date();
            } else if (!this.flag_eff_shivering) {
                this.shiveringStartT = 0;
            }
            if (this.flag_eff_shivering) {
                var _0x4b0edd = (+new Date() - this.shiveringStartT) * 10;
                if (_0x4b0edd % 10 == 0) {
                    this.eff_shiver_shakeX = Math.round(Math.random() * 10);
                    this.eff_shiver_shakeX = Math.round(Math.random() * 10);
                }
            }
        };
        if (this.effA_healing > 0.01) {
            _0x39e82d.save();
            var _0x4340aa = 0.3;
            _0x39e82d.globalAlpha *= _0x4340aa * this.effA_healing;
            _0x466d9b(0, 0, Math.max(0, this.rad - this.outlineW), "#ef24ed");
            _0x39e82d.restore();
        }
        Animal.prototype.effect_sanitized = function(_0xa322e6) {
            var _0xc44ca9 = this.flag_eff_sanitized ? 0.9 : 0;
            if (this.effA__sanitized == undefined) {
                this.effA__sanitized = 0;
            }
            this.effA__sanitized += (_0xc44ca9 - this.effA__sanitized) * 0.1;
            if (this.effA__sanitized > 0.01) {
                var _0x1161f8 = 0.3;
                var _0x31c57b = 0.8;
                var _0x404f67 = 0.2;
                var _0x5d8834 = 0.4;
                var _0x319a7d = (_0x5d8834 - _0x404f67) * 0.5;
                var _0x4070e3 = _0x404f67 + _0x319a7d + _0x319a7d * Math.sin(Math.PI * 2 / _0x31c57b * ((_0x4ec996 - this.spawnTime) / 1000));
                if (_0xa322e6) {
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha *= _0x4070e3;
                    var _0x236560 = 2.6;
                    _0x466d9b(0, 0, this.rad + _0x236560 * this.effA__sanitized, "white");
                    _0x39e82d.restore();
                } else {
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha *= _0x4070e3;
                    _0x466d9b(0, 0, Math.max(0, this.rad), "#bbc94d");
                    _0x39e82d.restore();
                }
            }
        };
        Animal.prototype.effect_aloeveraHeal = function(_0x59762c) {
            var _0x26655c = this.flag_eff_aloeveraHealing ? 0.9 : 0;
            if (this.effA_aloeveraHealing == undefined) {
                this.effA_aloeveraHealing = 0;
            }
            this.effA_aloeveraHealing += (_0x26655c - this.effA_aloeveraHealing) * 0.1;
            if (this.effA_aloeveraHealing > 0.01) {
                var _0x5b341d = 0.3;
                var _0x5e084a = 0.8;
                var _0x3afe31 = 0.2;
                var _0x1df108 = 0.4;
                var _0x209307 = (_0x1df108 - _0x3afe31) * 0.5;
                var _0x6a13fd = _0x3afe31 + _0x209307 + _0x209307 * Math.sin(Math.PI * 2 / _0x5e084a * ((_0x4ec996 - this.spawnTime) / 1000));
                if (_0x59762c) {
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha *= _0x6a13fd;
                    var _0x38fe8b = 2.6;
                    _0x466d9b(0, 0, this.rad + _0x38fe8b * this.effA_aloeveraHealing, "#bbc94d");
                    _0x39e82d.restore();
                } else {
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha *= _0x6a13fd;
                    _0x466d9b(0, 0, Math.max(0, this.rad), "#bbc94d");
                    _0x39e82d.restore();
                }
            }
        };
        Animal.prototype.effect_sweatPoisoned = function() {
            var _0x146135 = this.flag_eff_sweatPoisoned ? 1 : 0;
            if (this.effA_sweatPoisoned == undefined) {
                this.effA_sweatPoisoned = 0;
            }
            this.effA_sweatPoisoned += (_0x146135 - this.effA_sweatPoisoned) * 0.1;
            if (this.effA_sweatPoisoned > 0.01) {
                _0x39e82d.save();
                var _0x36297a = 0.3;
                var _0x28c31e = 1.2;
                var _0x105a1a = 0.3;
                var _0x3856da = 1;
                var _0x3a4b30 = (_0x3856da - _0x105a1a) * 0.5;
                _0x39e82d.globalAlpha *= _0x105a1a + _0x3a4b30 + _0x3a4b30 * Math.sin(Math.PI * 2 / _0x28c31e * ((_0x4ec996 - this.spawnTime) / 1000));
                _0x466d9b(0, 0, Math.max(0, this.rad - this.outlineW), _0x16b30d);
                _0x39e82d.restore();
            }
        };
        Animal.prototype.skinRad = 0;
        Animal.prototype.skinScale = 0;
        Animal.prototype.setSkinScale = function() {
            var _0x1b20ac = 500 / 340;
            var _0x20ff28 = this.rad - this.outlineW;
            this.skinRad = _0x20ff28;
            this.skinScale = _0x1b20ac;
        };
        Animal.prototype.getAniRadius = function(_0x1c9e60) {
            return _0x1c9e60;
        };
        Animal.prototype.basicDrawSkinImg = function() {
            this.setSkinScale();
            var _0x18f3fd = this.skinScale;
            var _0x451829 = this.getAniRadius(this.skinRad);
            if (this.loadedSkinImg) {
                _0x39e82d.drawImage(this.loadedSkinImg, -_0x451829 * _0x18f3fd, -_0x451829 * _0x18f3fd, _0x451829 * 2 * _0x18f3fd, _0x451829 * 2 * _0x18f3fd);
            } else {
                _0x39e82d.fillStyle = this.skinNotLoadedColor;
                _0x39e82d.beginPath();
                _0x39e82d.arc(0, 0, Math.max(0, this.rad - this.outlineW), 0, Math.PI * 2);
                _0x39e82d.fill();
            }
        };
        Animal.prototype.preLoad = function() {};
        Animal.prototype.shiverF = 0.02;
        Animal.prototype.drawSkinImg = function() {
            this.basicDrawSkinImg();
            this.drawSkinCustomization();
        };
        Animal.prototype.drawSkinCustomization = function() {};
        Animal.prototype.drawOnTopOfSkinImg = function() {
            if (!this.loadedSkinImg) {
                _0x39e82d.save();
                var _0x22994b = Math.max(1, this.rad / 25);
                _0x39e82d.scale(_0x22994b, _0x22994b);
                this.drawEyeAtPos(6, this.rad * 0.32);
                this.drawEyeAtPos(-6, this.rad * 0.32);
                _0x39e82d.restore();
            }
            if (this.animalType == _0x273128) {
                _0x39e82d.fillStyle = "#E5CF79";
                _0x39e82d.beginPath();
                var _0x236d4e = this.rad - this.outlineW;
                var _0x3d3427 = _0x236d4e * 1;
                _0x39e82d.moveTo(_0x236d4e * -0.16, _0x3d3427);
                _0x39e82d.lineTo(0, _0x236d4e * (this.flag_usingAbility ? 1.41 : 0.7));
                _0x39e82d.lineTo(_0x236d4e * 0.153, _0x3d3427);
                _0x39e82d.closePath();
                _0x39e82d.fill();
            }
            if (this.flag_usingAbility && this.animalType == _0x174cd3) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = 1 - this.underwaterA;
                var _0x300bdf = this.getSkinImageObj("img/snowball.png");
                if (_0x300bdf) {
                    var _0x236d4e = this.rad;
                    _0x39e82d.rotate(this.rPer * Math.PI * 2);
                    _0x39e82d.drawImage(_0x300bdf, -_0x236d4e, -_0x236d4e, _0x236d4e * 2, _0x236d4e * 2);
                } else {
                    this.drawOutlinedCircle("", "white");
                }
                _0x39e82d.restore();
            }
        };
        Animal.prototype.drawUnderEffects = function() {
            if (this.flag_eff_dirty) {
                if (this.effA_dirtStuck > 0.01) {
                    _0x39e82d.save();
                    var _0xe06484 = 0.9;
                    _0x39e82d.globalAlpha *= _0xe06484 * this.effA_dirtStuck;
                    var _0x2c5847 = this.getImageObjForPath("img/dirt/dirt_below.png");
                    if (_0x2c5847) {
                        var _0x30dae3 = this.skinScale;
                        var _0x423c44 = this.skinRad - 2;
                        _0x39e82d.drawImage(_0x2c5847, -_0x423c44 * _0x30dae3, -_0x423c44 * _0x30dae3, _0x423c44 * 2 * _0x30dae3, _0x423c44 * 2 * _0x30dae3);
                    }
                    _0x39e82d.restore();
                }
            }
        };
        var _0x57d57e = 1;
        var _0x22d0a5 = 0.5;
        Animal.prototype.maskStartT = 0;
        Animal.prototype.wasWearingMask = false;
        Animal.prototype.drawProtectiveMask = function() {
            if (!this.flag_eff_wearingMask) {
                this.wasWearingMask = false;
                return;
            }
            if (!this.wasWearingMask) {
                this.wasWearingMask = true;
                this.maskStartT = _0x4ec996;
            }
            _0x39e82d.save();
            var _0x15bf94 = this.getSkinImageObj("img/viralpandemic/mask.png");
            var _0xf0a410 = this.getSkinImageObj("img/viralpandemic/mask-outline.png");
            if (_0x15bf94 && _0xf0a410) {
                var _0x22744a = this.rad * 0.7 + this.rPer;
                var _0xf20388 = _0x22744a * 0.1;
                if (this.animalType == _0x504f20) {
                    _0xf20388 = _0x22744a * 0.2;
                } else if (this.animalType == _0x4a37d4) {
                    _0x22744a = this.rad * 0.6;
                    _0xf20388 = _0x22744a * 1;
                } else if (this.animalType == _0x519f92 || this.animalType == _0x50431e || this.animalType == _0x174cd3 || this.animalType == _0xbc1c26) {
                    _0xf20388 = _0x22744a * -0.05;
                } else if (this.animalType == _0x21b167) {
                    _0xf20388 = _0x22744a * -0.2;
                } else if (this.animalType == _0x27689a) {
                    _0xf20388 = _0x22744a * 0;
                } else if (this.animalType == _0x31189f || this.animalType == _0x1f5222 || this.animalType == _0x28396e || this.animalType == _0x3941c2 || this.animalType == _0x2a7ad6) {
                    _0x22744a = this.rad * 0.5;
                    _0xf20388 = _0x22744a * 0.4;
                } else if (this.animalType == _0x4c676b) {
                    _0x22744a = this.rad * 0.5;
                    _0xf20388 = _0x22744a * 0.6;
                    if (this.flag_usingAbility) {
                        _0xf20388 = _0x22744a * 1.3;
                    }
                } else if (this.animalType == _0x532f26) {
                    _0x22744a = this.rad * 0.55;
                    _0xf20388 = _0x22744a * 0.5;
                    if (this.flag_usingAbility) {
                        _0xf20388 = _0x22744a * 1;
                    }
                } else if (this.animalType == _0x2e29dc) {
                    _0x22744a = this.rad * 0.43;
                    _0xf20388 = _0x22744a * 1;
                    if (this.flag_usingAbility) {
                        if (this.specType == 1) {
                            _0x22744a = this.rad * 0.45;
                            _0xf20388 = _0x22744a * 1.3;
                        } else if (this.specType == 2) {
                            _0x22744a = this.rad * 0.5;
                            _0xf20388 = _0x22744a * 1.9;
                        }
                    }
                } else if (this.animalType == _0x1c9f19) {
                    _0x22744a = this.rad * 0.5;
                    _0xf20388 = _0x22744a * 0.55;
                    if (this.flag_usingAbility) {
                        _0xf20388 = _0x22744a * 0.8;
                    }
                } else if (this.animalType == _0x190fd6) {
                    _0x22744a = this.rad * 0.55;
                    _0xf20388 = _0x22744a * 0;
                    if (this.flag_usingAbility) {
                        _0xf20388 = _0x22744a * 0.5;
                    }
                } else if (this.animalType == _0x57d22f) {
                    _0x22744a = this.rad * 0.4;
                    _0xf20388 = _0x22744a * 1.1;
                    if (this.flag_usingAbility) {
                        _0x22744a = this.rad * 0.5;
                        _0xf20388 = _0x22744a * _0x57d57e;
                    }
                } else if (this.animalType == _0x3adb75) {
                    _0x22744a = this.rad * 0.5;
                    _0xf20388 = _0x22744a * 0.5;
                    if (this.flag_usingAbility) {
                        _0x22744a = this.rad * 0.5;
                        _0xf20388 = _0x22744a * 1;
                    }
                } else if (this.animalType == _0x8f4f69) {
                    _0x22744a = this.rad * 0.4;
                    _0xf20388 = _0x22744a * 1;
                    if (this.flag_usingAbility) {
                        _0x22744a = this.rad * 0.5;
                        _0xf20388 = _0x22744a * 1;
                    }
                } else if (this.animalType == _0x4e8c9f) {
                    _0x22744a = this.rad * 0.4;
                    _0xf20388 = _0x22744a * 1;
                    if (this.flag_usingAbility) {
                        _0x39e82d.restore();
                        return;
                    }
                }
                var _0x22a7fd = 1;
                var _0x173af9 = (_0x4ec996 - this.maskStartT) / 1000;
                if (_0x173af9 > 80) {
                    var _0x5f1dac = 1;
                    var _0x2a3451 = 0.3;
                    var _0x3358ab = 0.5;
                    var _0x2d9a4a = (_0x3358ab - _0x2a3451) * 0.5;
                    var _0x22a7fd = _0x2a3451 + _0x2d9a4a + _0x2d9a4a * Math.sin(Math.PI * 2 / _0x5f1dac * (_0x4ec996 / 1000));
                }
                var _0x10840b = 0.8;
                if (this.flag_inHidingHole) {
                    _0x10840b = 0.6;
                } else if (this.flag_underWater) {
                    _0x10840b = this.idealOp;
                }
                _0x39e82d.globalAlpha = _0x10840b * _0x22a7fd;
                _0x39e82d.rotate(this.angle);
                _0x39e82d.drawImage(_0x15bf94, -_0x22744a, _0xf20388, _0x22744a * 2, _0x22744a * 2);
                _0x39e82d.drawImage(_0xf0a410, -_0x22744a, _0xf20388, _0x22744a * 2, _0x22744a * 2);
            }
            _0x39e82d.restore();
        };
        Animal.prototype.drawTopEffects = function() {
            this.effect_aloeveraHeal();
            var _0x5a2a81 = this.flag_eff_stunned ? 1 : 0;
            this.stunA += (_0x5a2a81 - this.stunA) * 0.1;
            if (this.stunA > 0.01) {
                _0x39e82d.save();
                var _0x525f81 = 2.5;
                var _0x124958 = _0x4ec996 % (_0x525f81 * 1000) / (_0x525f81 * 1000);
                _0x39e82d.rotate(_0x124958 * (Math.PI * 2));
                _0x39e82d.globalAlpha *= this.stunA;
                var _0x249740 = this.rad * 0.2;
                var _0x4b918f = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x757205 = 1;
                var _0x320539 = 0.5 + _0x249740 * 0.07;
                var _0xaaf81f = _0x320539 * Math.sin(Math.PI * 2 / _0x757205 * _0x4b918f);
                _0x39e82d.fillStyle = "#F3D444";
                _0x39e82d.beginPath();
                _0x39e82d.arc(this.rad * -0.22, this.rad * -0.22, Math.max(0, _0x249740 + _0xaaf81f), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.beginPath();
                _0x39e82d.arc(this.rad * 0.22, this.rad * -0.22, Math.max(0, _0x249740 - _0xaaf81f), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.beginPath();
                _0x39e82d.arc(this.rad * 0.22, this.rad * 0.22, Math.max(0, _0x249740 + _0xaaf81f), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.beginPath();
                _0x39e82d.arc(this.rad * -0.22, this.rad * 0.22, Math.max(0, _0x249740 - _0xaaf81f), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.restore();
            }
            var _0x5a2a81 = this.flag_eff_onFire ? 1 : 0;
            this.onFireEffA += (_0x5a2a81 - this.onFireEffA) * 0.1;
            if (this.onFireEffA > 0.01) {
                var _0x757205 = 1;
                var _0x481262 = 0.15;
                var _0x34184d = 0.4;
                var _0x393e99 = (_0x34184d - _0x481262) * 0.5;
                var _0x532f53 = _0x481262 + _0x393e99 + _0x393e99 * Math.sin(Math.PI * 2 / _0x757205 * (_0x4ec996 / 1000));
                _0x39e82d.save();
                _0x39e82d.globalAlpha *= _0x532f53 * this.onFireEffA;
                _0x466d9b(0, 0, Math.max(0, this.rad), "orange");
                _0x39e82d.restore();
                var _0x2e78e7 = 1;
                if (_0x5981a2 != _0x4051d6) {
                    var _0x757205 = 1;
                    var _0x481262 = 0.5;
                    var _0x34184d = 1;
                    var _0x393e99 = (_0x34184d - _0x481262) * 0.5;
                    var _0xaaf81f = _0x481262 + _0x393e99 + _0x393e99 * Math.sin(Math.PI * 2 / _0x757205 * (_0x4ec996 / 1000));
                    var _0x3b0f03 = Math.trunc(_0x4ec996 / 100) % 5;
                    var _0xfd4d91 = Math.trunc(_0x4ec996 / 150) % 5;
                    var _0x3d82e2 = this.getImageObjForPath("gameobj/70/0/" + _0x3b0f03 + ".png", _0x2e78e7);
                    var _0x279431 = this.getImageObjForPath("gameobj/70/0/" + _0xfd4d91 + ".png", _0x2e78e7);
                    if (_0x3d82e2 || _0x279431) {
                        var _0x24d5b2 = 0 - this.rad * 0.3;
                        var _0x90de42 = this.rad * 0.2 - this.rad * 0.3;
                        var _0x2aa389 = this.rad * 1 * (2 + _0xaaf81f * 2) / 3;
                        var _0x47bd7e = this.rad * 1 * _0xaaf81f;
                        var _0x28f9a9 = 0.5;
                        var _0x13be9b = 0.95;
                        _0x39e82d.save();
                        if (_0x3d82e2) {
                            _0x39e82d.globalAlpha *= this.onFireEffA * _0xaaf81f;
                            _0x39e82d.drawImage(_0x3d82e2, _0x24d5b2 + _0x2aa389 * -_0x28f9a9, _0x90de42 + _0x47bd7e * -_0x13be9b, _0x2aa389, _0x47bd7e);
                        }
                        if (_0x279431) {
                            _0x39e82d.globalAlpha *= this.onFireEffA * _0xaaf81f;
                            _0x39e82d.drawImage(_0x279431, _0x24d5b2 + this.rad * 0.5 + _0x2aa389 * -_0x28f9a9, _0x90de42 + this.rad * 0.5 + _0x47bd7e * -_0x13be9b, _0x2aa389, _0x47bd7e);
                        }
                        _0x39e82d.restore();
                    }
                } else {
                    var _0x757205 = 1;
                    var _0x481262 = 0.5;
                    var _0x34184d = 1;
                    var _0x393e99 = (_0x34184d - _0x481262) * 0.5;
                    var _0xaaf81f = _0x481262 + _0x393e99 + _0x393e99 * Math.sin(Math.PI * 2 / _0x757205 * (_0x4ec996 / 1000));
                    var _0x3d82e2 = this.getImageObjForPath("gameobj/70/0.png", _0x2e78e7);
                    if (_0x3d82e2) {
                        var _0x24d5b2 = 0 - this.rad * 0.3;
                        var _0x90de42 = this.rad * 0.2 - this.rad * 0.3;
                        var _0x2aa389 = this.rad * 1 * (2 + _0xaaf81f * 2) / 3;
                        var _0x47bd7e = this.rad * 1 * _0xaaf81f;
                        var _0x28f9a9 = 0.5;
                        var _0x13be9b = 0.95;
                        _0x39e82d.save();
                        _0x39e82d.globalAlpha *= this.onFireEffA * _0xaaf81f;
                        _0x39e82d.drawImage(_0x3d82e2, _0x24d5b2 + _0x2aa389 * -_0x28f9a9, _0x90de42 + _0x47bd7e * -_0x13be9b, _0x2aa389, _0x47bd7e);
                        _0x39e82d.globalAlpha *= this.onFireEffA * _0xaaf81f;
                        _0x39e82d.drawImage(_0x3d82e2, _0x24d5b2 + this.rad * 0.5 + _0x2aa389 * -_0x28f9a9, _0x90de42 + this.rad * 0.5 + _0x47bd7e * -_0x13be9b, _0x2aa389, _0x47bd7e);
                        _0x39e82d.restore();
                    }
                }
            }
            if (this.frozenEffA > 0.01 && this.flag_eff_frozen) {
                _0x39e82d.save();
                var _0x525f81 = 7;
                var _0x124958 = _0x4ec996 % (_0x525f81 * 1000) / (_0x525f81 * 1000);
                _0x39e82d.rotate(_0x124958 * (Math.PI * 2));
                _0x39e82d.globalAlpha *= this.frozenEffA;
                var _0x249740 = this.rad * 0.2;
                var _0x4b918f = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x757205 = 1;
                var _0x320539 = 0.5 + _0x249740 * 0.07;
                var _0xaaf81f = _0x320539 * Math.sin(Math.PI * 2 / _0x757205 * _0x4b918f);
                _0x39e82d.fillStyle = "white";
                var _0x2ce340 = this.rad * 0.27;
                _0x39e82d.beginPath();
                _0x39e82d.arc(-_0x2ce340, -_0x2ce340, Math.max(0, _0x249740 + _0xaaf81f), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.beginPath();
                _0x39e82d.arc(_0x2ce340, -_0x2ce340, Math.max(0, _0x249740 - _0xaaf81f), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.beginPath();
                _0x39e82d.arc(_0x2ce340, _0x2ce340, Math.max(0, _0x249740 + _0xaaf81f), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.beginPath();
                _0x39e82d.arc(-_0x2ce340, _0x2ce340, Math.max(0, _0x249740 - _0xaaf81f), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.restore();
            }
            if (this.frozenEffA > 0.01) {
                _0x39e82d.save();
                var _0x3c998b = 0.3;
                _0x39e82d.globalAlpha *= _0x3c998b * this.frozenEffA;
                _0x466d9b(0, 0, Math.max(0, this.rad - this.outlineW), "white");
                _0x39e82d.restore();
            }
            if (this.effA_healing > 0.01) {
                _0x39e82d.save();
                var _0x3c998b = 0.3;
                _0x39e82d.globalAlpha *= _0x3c998b * this.effA_healing;
                _0x466d9b(0, 0, Math.max(0, this.rad - this.outlineW), "#ef24ed");
                _0x39e82d.restore();
            }
            this.effect_sweatPoisoned();
            if (this.effA_hot > 0.01) {
                _0x39e82d.save();
                var _0x3c998b = 0.3;
                var _0x757205 = 1.2;
                var _0x481262 = 0.3;
                var _0x34184d = 1;
                var _0x393e99 = (_0x34184d - _0x481262) * 0.5;
                _0x39e82d.globalAlpha *= _0x481262 + _0x393e99 + _0x393e99 * Math.sin(Math.PI * 2 / _0x757205 * ((_0x4ec996 - this.spawnTime) / 1000));
                _0x466d9b(0, 0, Math.max(0, this.rad - this.outlineW), "rgba(249, 212, 77, 0.3)");
                _0x39e82d.restore();
            }
            if (this.effA_poison > 0.01) {
                _0x39e82d.save();
                var _0x3c998b = 0.3;
                _0x39e82d.globalAlpha *= _0x3c998b * this.effA_poison;
                var _0x757205 = 1.2;
                var _0x481262 = 0.3;
                var _0x34184d = 1;
                var _0x393e99 = (_0x34184d - _0x481262) * 0.5;
                _0x39e82d.globalAlpha *= _0x481262 + _0x393e99 + _0x393e99 * Math.sin(Math.PI * 2 / _0x757205 * ((_0x4ec996 - this.spawnTime) / 1000));
                _0x466d9b(0, 0, Math.max(0, this.rad - this.outlineW), "#9FDA00");
                _0x39e82d.restore();
            }
            var _0x5a2a81 = this.flag_eff_bleeding ? 0.8 : 0;
            this.effA_bleeding += (_0x5a2a81 - this.effA_bleeding) * 0.1;
            if (this.effA_bleeding > 0.01) {
                _0x39e82d.save();
                var _0x757205 = 1.2;
                var _0x481262 = 0.3;
                var _0x34184d = 1;
                var _0x393e99 = (_0x34184d - _0x481262) * 0.3;
                _0x39e82d.globalAlpha *= _0x481262 + _0x393e99 + _0x393e99 * Math.sin(Math.PI * 2 / _0x757205 * ((_0x4ec996 - this.spawnTime) / 1000));
                _0x39e82d.globalAlpha *= this.effA_bleeding;
                var _0x2886e7 = -2.6;
                _0x466d9b(0, 0, this.rad + _0x2886e7 * this.effA_bleeding, "red");
                _0x39e82d.restore();
            }
            var _0x5a2a81 = this.flag_eff_slimed ? 0.8 : 0;
            this.effA_slimed += (_0x5a2a81 - this.effA_slimed) * 0.1;
            if (this.effA_slimed > 0.01) {
                _0x39e82d.save();
                var _0x757205 = 1.2;
                var _0x481262 = 0.3;
                var _0x34184d = 1;
                var _0x393e99 = (_0x34184d - _0x481262) * 0.3;
                _0x39e82d.globalAlpha *= _0x481262 + _0x393e99 + _0x393e99 * Math.sin(Math.PI * 2 / _0x757205 * ((_0x4ec996 - this.spawnTime) / 1000));
                _0x39e82d.globalAlpha *= this.effA_slimed;
                var _0x2886e7 = -2.6;
                _0x466d9b(0, 0, this.rad + _0x2886e7 * this.effA_slimed, "grey");
                _0x39e82d.restore();
            }
            var _0x5a2a81 = this.flag_eff_stunk ? 0.8 : 0;
            this.effA_stunk += (_0x5a2a81 - this.effA_stunk) * 0.1;
            if (this.effA_stunk > 0.01) {
                _0x39e82d.save();
                var _0x757205 = 1.2;
                var _0x481262 = 0.3;
                var _0x34184d = 1;
                var _0x393e99 = (_0x34184d - _0x481262) * 0.3;
                _0x39e82d.globalAlpha *= _0x481262 + _0x393e99 + _0x393e99 * Math.sin(Math.PI * 2 / _0x757205 * ((_0x4ec996 - this.spawnTime) / 1000));
                _0x39e82d.globalAlpha *= this.effA_stunk;
                var _0x2886e7 = -2.6;
                _0x466d9b(0, 0, this.rad + _0x2886e7 * this.effA_stunk, "brown");
                _0x39e82d.restore();
            }
            if (this.animalType == _0x21b167 && this.flag_usingAbility) {
                var _0x757205 = 0.75;
                var _0x320539 = 1;
                var _0xaaf81f = _0x320539 * Math.sin(Math.PI * 2 / _0x757205 * _0x4b918f);
                var _0x3c6fe7 = _0x39e82d.globalAlpha;
                _0x39e82d.globalAlpha *= 0.8 - _0xaaf81f * 0.2;
                _0x466d9b(this.rad * 0.15, -this.rad * 1.27, this.rad * (0.1 + _0xaaf81f * 0.05), "#efefef");
                _0x466d9b(-this.rad * 0.15, -this.rad * 1.27, this.rad * (0.1 - _0xaaf81f * 0.05), "#efefef");
                _0x39e82d.globalAlpha = _0x3c6fe7;
            }
            var _0x5a2a81 = this.flag_webStuck ? 1 : 0;
            this.effA_webStuck += (_0x5a2a81 - this.effA_webStuck) * 0.02;
            if (this.effA_webStuck > 0.01) {
                _0x39e82d.save();
                var _0x3c998b = 0.9;
                _0x39e82d.globalAlpha *= _0x3c998b * this.effA_webStuck;
                var _0x3d82e2 = this.getImageObjForPath("img/web/" + this.eff_webStuckType + "/spiderWeb_stuck.png", 1);
                if (_0x3d82e2) {
                    var _0x1401e1 = this.rad * 1.3;
                    _0x39e82d.rotate(this.angle);
                    _0x39e82d.drawImage(_0x3d82e2, -_0x1401e1, -_0x1401e1, _0x1401e1 * 2, _0x1401e1 * 2);
                }
                _0x39e82d.restore();
            }
            this.effectDirt();
            var _0x5a2a81 = this.flag_constricted ? 1 : 0;
            this.effA_constricted += (_0x5a2a81 - this.effA_constricted) * 0.04;
            if (this.effA_constricted > 0.01) {
                _0x39e82d.save();
                var _0x3c998b = 0.9;
                _0x39e82d.globalAlpha *= _0x3c998b * this.effA_constricted;
                var _0x59142c = "skins/land/boaconstrictor/" + this.eff_constrictedSpecies;
                if (this.eff_constrictedSubSpecies !== undefined && this.eff_constrictedSubSpecies > 0) {
                    _0x59142c += "/" + this.eff_constrictedSubSpecies;
                }
                var _0x7e80b0 = this.eff_constrictedSpecies === 1 || this.eff_constrictedSpecies === 2 ? 1 : this.mopeSeasonID;
                console.log("constrict img: " + _0x59142c);
                var _0x3d82e2 = this.getSkinImageObjForSeason(_0x59142c + "/constrict.png", _0x7e80b0);
                if (_0x3d82e2) {
                    var _0x1401e1 = this.rad * 1.3;
                    _0x39e82d.rotate(this.angle);
                    _0x39e82d.drawImage(_0x3d82e2, -_0x1401e1, -_0x1401e1, _0x1401e1 * 2, _0x1401e1 * 2);
                }
                _0x39e82d.restore();
            }
            this.drawProtectiveMask();
            this.drawElectroStunEffect();
        };
        Animal.prototype.effectDirt = function() {
            if (this.eff_dirtType == 0 || this.eff_dirtType == undefined) {
                return;
            }
            if (this.effA_dirtStuck == undefined) {
                this.effA_dirtStuck = 0;
            }
            var _0x44f03b = this.flag_eff_dirty ? 1 : 0;
            this.effA_dirtStuck += (_0x44f03b - this.effA_dirtStuck) * 0.02;
            if (this.effA_dirtStuck > 0.01) {
                _0x39e82d.save();
                _0x39e82d.rotate(this.angle);
                var _0x247a36 = 0.9;
                _0x39e82d.globalAlpha *= _0x247a36 * this.effA_dirtStuck;
                var _0x29da7e = this.getImageObjForPath("img/dirt/" + this.eff_dirtType + "/0.png");
                if (_0x29da7e) {
                    var _0xe526d3 = this.skinScale;
                    var _0x2fd0d1 = this.skinRad;
                    _0x39e82d.drawImage(_0x29da7e, -_0x2fd0d1 * _0xe526d3, -_0x2fd0d1 * _0xe526d3, _0x2fd0d1 * 2 * _0xe526d3, _0x2fd0d1 * 2 * _0xe526d3);
                }
                var _0x29da7e = this.getImageObjForPath("img/dirt/" + this.eff_dirtType + "/1.png");
                if (_0x29da7e) {
                    var _0xe526d3 = this.skinScale;
                    var _0x2fd0d1 = this.skinRad;
                    _0x39e82d.drawImage(_0x29da7e, -_0x2fd0d1 * _0xe526d3, -_0x2fd0d1 * _0xe526d3, _0x2fd0d1 * 2 * _0xe526d3, _0x2fd0d1 * 2 * _0xe526d3);
                }
                _0x39e82d.restore();
            }
        };
        Animal.prototype.getSpeciesPath = function(_0x45a865) {
            return _0x45a865 + "/" + this.animalSpecies;
        };
        Animal.prototype.getWing = function(_0x4ce1c5, _0x211081, _0x4fec1f) {
            var _0xb4007c = "skins/" + (_0x4fec1f ? this.getSpeciesPath(_0x4ce1c5) + "/" : _0x4ce1c5 + "/");
            _0xb4007c += _0x4ce1c5 + "_wing" + _0x211081 + ".png";
            return _0xb4007c;
        };
        Animal.prototype.getHead = function(_0x3c7194, _0x598064) {
            var _0x4fe3ff = "skins/" + (_0x598064 ? this.getSpeciesPath(_0x3c7194) + "/" : _0x3c7194 + "/");
            _0x4fe3ff += _0x3c7194 + "_head.png";
            return _0x4fe3ff;
        };
        Animal.prototype.getSkinName = function() {
            var _0x1a80dc = this.skinImgName;
            switch (this.animalType) {
                case _0x2b36cf:
                case _0x36539e:
                case _0x371ea0:
                case _0x499275:
                case _0x346a56:
                case _0x50e3b8:
                case _0x471048:
                case _0x4abc25:
                    var _0x460d68 = "";
                    if (this.flag_usingAbility) {
                        _0x1a80dc = _0x460d68 + _0x1a80dc + "2";
                    }
                    break;
                case _0x49687e:
                    this.z = this.z * 2;
                    if (this.flag_usingAbility && this.specType == 4) {
                        _0x1a80dc = _0x1a80dc + "2";
                    }
                    break;
            }
            return this.getPremiumSkin(_0x1a80dc);
        };
        Animal.prototype.getPremiumSkinFolder = function() {
            switch (this.animalPremiumSkin) {
                case 1:
                    return "premium/golden/";
                case 2:
                    return "premium/locked/";
            }
            return "";
        };
        Animal.prototype.getPremiumSkin = function(_0x5a8584) {
            return this.getPremiumSkinFolder() + _0x5a8584;
        };
        Animal.prototype.onAnimalSpeciesSet = function() {};
        Animal.prototype.setObjTypes = function(_0x14f041, _0x25beb0) {
            this.oType = _0x14f041;
            this.animalType = _0x25beb0;
        };
        Animal.prototype.readCustomData_onNewlyVisible = function(_0x5eaa58) {
            Animal.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x5eaa58);
            var _0x171db6 = _0x5eaa58.readString();
            this.nickName = _0x171db6 && _0x171db6.length > 0 ? _0x171db6 : "mope.io";
            this.animalSpecies = _0x5eaa58.readUInt16();
            this.animalSubSpecies = _0x5eaa58.readUInt16();
            this.animalPremiumSkin = _0x5eaa58.readUInt8();
            this.skinThemeID = _0x5eaa58.readUInt8();
            this.mopeSeasonID = _0x5eaa58.readUInt8();
            this.isVip = _0x5eaa58.readUInt8();
            this.onAnimalSpeciesSet();
            if (this.animalPremiumSkin > 0) {
                this.setSparkleInterval(_0x14db03(5, 10), _0x14db03(2, 3));
            }
            this.setNick(this.nickName);
            var _0x4c0d4b = _0x5eaa58.readBitGroup();
            this.readUpdatedFlags(_0x4c0d4b);
            if (this.flag_webStuck) {
                this.readUpdatedProperty(_0x21e881, _0x5eaa58);
            }
            if (this.flag_isInArena) {
                this.readUpdatedProperty(_0x26ac15, _0x5eaa58);
            }
            if (this.flag_isDevMode) {
                this.readUpdatedProperty(_0x5efaac, _0x5eaa58);
            }
            this.readUpdatedProperty(_0x42a096, _0x5eaa58);
            this.readUpdatedProperty(_0x134e5a, _0x5eaa58);
        };
        Animal.prototype.custom_canvas = null;
        Animal.prototype.drawCanvas = function() {
            if (!this.custom_canvas) {
                this.custom_canvas = document.createElement("canvas");
                var _0x38187d = this.rad * 20;
                var _0x3f4da6 = this.rad * 20;
                this.custom_canvas.width = _0x38187d;
                this.custom_canvas.height = _0x3f4da6;
                var _0x5b7b3b = this.custom_canvas.getContext("2d");
                _0x5b7b3b.save();
                _0x5b7b3b.filter = "blur(4px)";
                _0x5b7b3b.globalAlpha = 1;
                _0x5b7b3b.fillStyle = "black";
                _0x5b7b3b.fillRect(0, 0, this.custom_canvas.width * 2, this.custom_canvas.height * 2);
                _0x5b7b3b.globalCompositeOperation = "xor";
                _0x5b7b3b.beginPath();
                _0x5b7b3b.arc(_0x38187d / 2, _0x38187d / 2, this.rad + 5, 0, Math.PI * 2);
                _0x5b7b3b.fillStyle = "red";
                _0x5b7b3b.fill();
                _0x5b7b3b.restore();
            }
            if (this.custom_canvas != null) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = 0.5;
                _0x39e82d.drawImage(this.custom_canvas, -this.custom_canvas.width / 2, -this.custom_canvas.height / 2, this.custom_canvas.width, this.custom_canvas.height);
                _0x39e82d.restore();
            }
        };
        Animal.prototype.updateAngle = function(_0x5e168b) {
            var _0x175361 = _0x4bfce6(_0x5e168b - 90);
            this.oAngle = this.angle;
            this.nAngle = _0x175361;
            if (this.firstPosUpd) {
                this.oAngle = this.angle = this.nAngle = _0x175361;
            }
        };
        Animal.prototype.readUpdatedFlags = function(_0x3ab106) {
            Animal.superClass.prototype.readUpdatedFlags.call(this, _0x3ab106);
            this.flag_lowWat = _0x3ab106.getBool();
            this.flag_underWater = _0x3ab106.getBool();
            this.flag_usingDiveAbility = _0x3ab106.getBool();
            this.flag_eff_invincible = _0x3ab106.getBool();
            this.flag_usingAbility = _0x3ab106.getBool();
            this.flag_tailBitten = _0x3ab106.getBool();
            this.flag_eff_stunned = _0x3ab106.getBool();
            this.flag_iceSliding = _0x3ab106.getBool();
            this.flag_eff_frozen = _0x3ab106.getBool();
            this.flag_eff_onFire = _0x3ab106.getBool();
            this.flag_eff_healing = _0x3ab106.getBool();
            this.flag_eff_poison = _0x3ab106.getBool();
            this.flag_constricted = _0x3ab106.getBool();
            this.flag_webStuck = _0x3ab106.getBool();
            this.flag_stealth = _0x3ab106.getBool();
            this.flag_eff_bleeding = _0x3ab106.getBool();
            this.flag_flying = _0x3ab106.getBool();
            this.flag_isGrabbed = _0x3ab106.getBool();
            this.flag_eff_aniInClaws = _0x3ab106.getBool();
            this.flag_eff_stunk = _0x3ab106.getBool();
            this.flag_cold = _0x3ab106.getBool();
            this.flag_inWater = _0x3ab106.getBool();
            this.flag_inLava = _0x3ab106.getBool();
            this.flag_canClimbHill = _0x3ab106.getBool();
            this.flag_isClimbingHill = _0x3ab106.getBool();
            this.flag_isDevMode = _0x3ab106.getBool();
            this.flag_eff_slimed = _0x3ab106.getBool();
            this.flag_eff_wobbling = _0x3ab106.getBool();
            this.flag_eff_hot = _0x3ab106.getBool();
            this.flag_eff_sweatPoisoned = _0x3ab106.getBool();
            this.flag_eff_shivering = _0x3ab106.getBool();
            this.flag_inHidingHole = _0x3ab106.getBool();
            this.flag_eff_grabbedByFlytrap = _0x3ab106.getBool();
            this.flag_eff_aloeveraHealing = _0x3ab106.getBool();
            this.flag_eff_tossedInAir = _0x3ab106.getBool();
            this.flag_eff_isOnSpiderWeb = _0x3ab106.getBool();
            this.flag_fliesLikeDragon = _0x3ab106.getBool();
            this.flag_eff_isInMud = _0x3ab106.getBool();
            this.flag_eff_statue = _0x3ab106.getBool();
            this.flag_eff_isOnTree = _0x3ab106.getBool();
            this.flag_eff_isUnderTree = _0x3ab106.getBool();
            this.flag_speared = _0x3ab106.getBool();
            this.flag_eff_dirty = _0x3ab106.getBool();
            this.flag_eff_virusInfection = _0x3ab106.getBool();
            this.flag_eff_wearingMask = _0x3ab106.getBool();
            this.flag_eff_sanitized = _0x3ab106.getBool();
            this.flag_viewing1v1Invite = _0x3ab106.getBool();
            this.flag_can1v1 = _0x3ab106.getBool();
            this.flag_isInArena = _0x3ab106.getBool();
            if (this.flag_isDevMode) {
                this.flag_hideDevPrint = _0x3ab106.getBool();
            }
            this.flag_eff_electroStun = _0x3ab106.getBool();
        };
        Animal.prototype.eff_webStuckType = 0;
        Animal.prototype.readUpdatedProperty = function(_0x34de55, _0xeeed44) {
            if (_0x34de55 == _0x42a096) {
                this.wins1v1 = _0xeeed44.readUInt16();
            } else if (_0x34de55 == _0x5efaac) {
                this.devMode_num = _0xeeed44.readUInt8();
            } else if (_0x34de55 == _0x26ac15) {
                this.playerNumberFor1v1Arena = _0xeeed44.readUInt8();
            } else if (_0x34de55 == _0x384357) {
                this.diveType = _0xeeed44.readUInt8();
            } else if (_0x34de55 == _0x5d9c71) {
                this.eff_statueType = _0xeeed44.readUInt8();
            } else if (_0x34de55 == _0x27bdf5) {
                this.eff_constrictedSpecies = _0xeeed44.readUInt16();
            } else if (_0x34de55 == _0x24a48a) {
                this.eff_constrictedSubSpecies = _0xeeed44.readUInt16();
            } else if (_0x34de55 == _0x21e881) {
                this.eff_webStuckType = _0xeeed44.readUInt8();
            } else if (_0x34de55 == _0x4e77b3) {
                this.eff_dirtType = _0xeeed44.readUInt8();
            } else if (_0x34de55 == _0x1e8d7a) {
                let _0x13d633 = _0xeeed44.readUInt8();
                if (this.infectionBarA < 0.001) {
                    this.infectionPer = _0x13d633;
                }
                this.infectionPer_n = _0x13d633;
                this.infectionBarTimeoutT = +new Date() + 3000;
            } else if (_0x34de55 == _0x260928) {
                this.lastHidingHoleID = _0xeeed44.readUInt32();
                this.hidingHoleVisibilityRad = _0xeeed44.readUInt16() / 4;
            } else if (_0x34de55 == _0x486c98) {
                let _0x557a6b = _0xeeed44.readUInt8();
                if (this.infectionBarA < 0.001) {
                    this.infectionPer = _0x557a6b;
                }
                this.infectionPer_n = _0x557a6b;
                this.infectionBarTimeoutT = +new Date() + 3000;
            } else if (_0x34de55 == _0x5ce440) {
                this.lava = _0xeeed44.readUInt8();
            } else if (_0x34de55 == _0x450242) {
                let _0x269bfe = _0xeeed44.readUInt16() / 4;
                let _0x1d299b = _0xeeed44.readUInt16() / 4;
                if (_0x269bfe > 0 && _0x1d299b > 0) {
                    this.hasDevTarget = _0x166276 == this.id;
                    this.target_ox = this.devTargetX;
                    this.target_oy = this.devTargetY;
                    this.target_nx = _0x269bfe;
                    this.target_ny = _0x1d299b;
                } else {
                    this.hasDevTarget = false;
                }
            } else if (_0x34de55 == _0x134e5a) {
                this.teamID = _0xeeed44.readUInt8();
            } else {
                this.customUpdatedProperty(_0x34de55, _0xeeed44);
            }
        };
        Animal.prototype.devTargetX = 0;
        Animal.prototype.devTargetY = 0;
        Animal.prototype.target_ox = 0;
        Animal.prototype.target_oy = 0;
        Animal.prototype.target_nx = 0;
        Animal.prototype.target_ny = 0;
        Animal.prototype.hasDevTarget = false;
        Animal.prototype.onLerpUpdate = function(_0x4dea95) {
            if (this.hasDevTarget) {
                this.devTargetX = _0x4dea95 * (this.target_nx - this.target_ox) + this.target_ox;
                this.devTargetY = _0x4dea95 * (this.target_ny - this.target_oy) + this.target_oy;
            }
        };
        Animal.prototype.beforeCustomDraw = function(_0x999b29) {
            if (this.hasDevTarget) {
                console.log(this.devTargetX + ":" + this.devTargetY);
                _0x39e82d.save();
                _0x39e82d.strokeStyle = "yellow";
                _0x39e82d.lineWidth = 2;
                _0x39e82d.globalAlpha = 1;
                _0x39e82d.beginPath();
                _0x39e82d.moveTo(this.x, this.y);
                _0x39e82d.lineTo(this.devTargetX, this.devTargetY);
                _0x39e82d.stroke();
                _0x39e82d.restore();
            }
        };
        Animal.prototype.customUpdatedProperty = function(_0x11f20c, _0x4268b5) {};
        Animal.prototype.diveType = 0;
        Animal.prototype.lastHidingHoleID = 0;
        Animal.prototype.hidingHoleVisibilityRad = 0;
        Animal.prototype.winsAddedInNick = false;

        function Animal(_0x1d3bdc, _0x79024) {
            Animal.superClass.call(this, _0x48c056);
            this.animalType = _0x79024;
        }
        Animal.prototype.getAbilityInfo = function(_0x1ec6ec) {
            if (this.animalType == _0x3941c2) {
                var _0x445f5b = {
                    abilName: "Claw Slash!",
                    abilImg: "skins/arctic/bear/" + this.animalSpecies + "/clawslash.png",
                    skinThemeID: this.skinThemeID,
                    mopeSeasonID: this.mopeSeasonID
                };
                return _0x445f5b;
            } else {
                return _0x5243f1(_0x1ec6ec);
            }
        };
        Animal.prototype.calculateZIndex = function() {
            this.updateZ();
            if (_0x1d523b && _0x166276 == this.id) {
                this.z = 2000 + this.rad;
            } else if (this.flag_eff_grabbedByFlytrap) {
                this.z = 1100 + this.rad;
            } else if (this.flag_eff_tossedInAir) {
                this.z = 1200 + this.rad;
            } else if (this.flag_flying) {
                this.z = 100000;
                if (this.flag_isGrabbed) {
                    this.z -= this.rad;
                } else {
                    this.z += this.rad;
                }
                if (this.flag_eff_aniInClaws) {
                    this.z += 1000;
                }
                if (this.specType2 == 100) {
                    this.z = 1014;
                }
            } else if (this.flag_underWater || this.flag_usingAbility && this.animalType == _0x56cf8f) {
                this.z = -151;
            } else {
                if (this.flag_usingAbility && (this.animalType == _0x532f26 || this.animalType == _0x1c9f19 || this.animalType == _0x5443af)) {
                    this.z = 10001 + this.rad;
                } else if (this.flag_canClimbHill && this.animalType != _0x5443af || this.animalType == _0x28396e || this.animalType == _0x273128 || this.animalType == _0x4d8eda || this.animalType == _0x3941c2 || this.animalType == _0x9f0228 || this.animalType == _0x499275 || this.animalType == _0x2e1cf4 || this.animalType == _0x52eaad || this.animalType == _0x174cd3 || this.animalType == _0x2ffcd2 || this.animalType == _0x471048 || this.animalType == _0x21b167) {
                    this.z = 1000 + this.rad;
                } else if (this.animalType == _0x47e6fe) {
                    this.z = 1009 + this.rad;
                } else if (this.animalType == _0x4a37d4) {
                    this.z = 1008 + (this.flag_usingAbility ? 1 : 0) + this.rad;
                } else {
                    this.z = this.rad * 1.5;
                }
                if (this.flag_fliesLikeDragon || this.flag_isInArena) {
                    this.z += 2000;
                }
            }
            this.updateZ_onTree(this.z);
        };
        Animal.prototype.canDrawDark = function() {
            if (this.flag_inHidingHole) {
                return true;
            }
            return false;
        };
        var _0x50c913 = null;
        Animal.prototype.drawDark = function() {
            if (!this.canDrawDark()) {
                console.log("cant draw darkness!");
                return;
            }
            if (_0x50c913 == null) {
                _0x50c913 = document.createElement("canvas");
                var _0x3575a4 = this.rad * 10;
                var _0xb395b8 = this.rad * 10;
                _0x50c913.width = _0x3575a4;
                _0x50c913.height = _0xb395b8;
                var _0x2f7a0b = _0x50c913.getContext("2d");
                _0x2f7a0b.save();
                _0x2f7a0b.filter = "blur(2px)";
                _0x2f7a0b.globalAlpha = 1;
                _0x2f7a0b.fillStyle = "black";
                _0x2f7a0b.fillRect(0, 0, _0x50c913.width, _0x50c913.height);
                _0x2f7a0b.globalCompositeOperation = "xor";
                _0x2f7a0b.beginPath();
                _0x2f7a0b.arc(_0x3575a4 / 2, _0x3575a4 / 2, this.rad - 3, 0, Math.PI * 2);
                _0x2f7a0b.fillStyle = "blue";
                _0x2f7a0b.fill();
                _0x2f7a0b.restore();
            }
            if (_0x50c913 != null) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = 0.5;
                _0x39e82d.drawImage(_0x50c913, -_0x50c913.width / 2, -_0x50c913.height / 2, _0x50c913.width, _0x50c913.height);
                _0x39e82d.restore();
            }
        };
        Animal.prototype.skinThemeID = 0;
        Animal.prototype.getSkinImagePath = function(_0x30e430) {
            var _0x585fff = "";
            if (this.skinThemeID != 0 && (this.animalSpecies == 0 || this.animalSpecies == 1 && this.animalType == _0x4d63e3)) {
                _0x585fff = "./assets/t/" + this.skinThemeID + "/" + _0x30e430;
            } else {
                var _0x69ac34 = _0x30e430.includes("_dive") ? 2 : this.mopeSeasonID;
                _0x585fff = "./assets/s/" + _0x69ac34 + "/" + _0x30e430;
            }
            return _0x585fff;
        };
        Animal.prototype.getSkinImagePathForShop = function(_0x43f6ad) {
            var _0x3cbee1 = "";
            if (this.skinThemeID != 0 && this.animalSpecies == 0) {
                _0x3cbee1 = "./assets/t/" + this.skinThemeID + "/skins/" + _0x43f6ad;
            } else {
                _0x3cbee1 = "./assets/s/" + this.mopeSeasonID + "/skins/" + _0x43f6ad;
            }
            return _0x3cbee1;
        };
        Animal.prototype.getSkinImageObj = function(_0x3f5c5d) {
            if (_0x2480f7) {
                return;
            }
            var _0x1b6e82 = this.getSkinImagePath(_0x3f5c5d);
            return _0x4172bb(_0x1b6e82, function(_0x435576) {
                console.log(_0x435576.src);
            });
        };
        Animal.prototype.getSkinImageObjAsync = async function(_0x41412a) {
            var _0x2af426 = this.getSkinImagePath(_0x41412a);
            return _0x3d6302(_0x2af426);
        };
        Animal.prototype.getImagePath = function(_0xd99269, _0x3fa95e) {
            const _0x539008 = _0x3fa95e === undefined ? this.mopeSeasonID : _0x3fa95e;
            var _0x18a93d = "";
            _0x18a93d = "./assets/s/" + _0x539008 + "/" + _0xd99269;
            return _0x18a93d;
        };
        Animal.prototype.getImageObjForPath = function(_0x2194d8, _0x5cbe00) {
            var _0x575198 = this.getImagePath(_0x2194d8, _0x5cbe00);
            return _0x4172bb(_0x575198, function(_0x24070c) {
                console.log(_0x24070c.src);
            });
        };
        Animal.prototype.setRadius = function(_0x4993a0) {
            this.rad = _0x4993a0;
        };
        _0x35d268.setCustomClassForGameObjType(Animal, _0x48c056);
        var _0x5899d5 = _0x4e391a;
        var _0x28c171 = GameObj;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x4e391a.prototype.animalType = _0x473f55;
        _0x4e391a.prototype.animalSpecies = 0;
        _0x4e391a.prototype.animalSubSpecies = 0;
        _0x4e391a.prototype.segmentNum = 0;
        _0x4e391a.prototype.updateZ = function() {
            this.z = 30 - this.segmentNum;
        };
        _0x4e391a.prototype.customDraw = function(_0x984fdd) {
            _0x39e82d.save();
            var _0x35cb4d = this.segmentNum;
            var _0x844565 = this.getSkinImageObj("skins/deathworm/segment_" + _0x35cb4d + ".png");
            if (_0x844565) {
                var _0x2afedd = this.rad * 2;
                _0x39e82d.rotate(this.angle);
                _0x39e82d.drawImage(_0x844565, -_0x2afedd, -_0x2afedd, _0x2afedd * 2, _0x2afedd * 2);
            }
            _0x39e82d.restore();
        };
        _0x4e391a.prototype.readCustomData_onNewlyVisible = function(_0x2e028) {
            _0x4e391a.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x2e028);
            this.segmentNum = _0x2e028.readUInt8();
            this.animalSpecies = _0x2e028.readUInt8();
            this.animalSubSpecies = _0x2e028.readUInt8();
            this.animalPremiumSkin = _0x2e028.readUInt8();
            console.log("segment num: " + this.segmentNum);
        };

        function _0x4e391a(_0x445174, _0x580d35) {
            _0x4e391a.superClass.call(this, _0x4a5d9c);
            this.animalType = _0x580d35;
        }
        _0x35d268.setCustomClassForGameObjType(_0x4e391a, _0x4a5d9c);
        var _0x28c171 = GameObj;
        _0x127c1b.prototype = Object.create(_0x28c171.prototype);
        _0x127c1b.prototype.constructor = _0x127c1b;
        _0x127c1b.superClass = _0x28c171;
        _0x127c1b.prototype.updateZ = function() {
            this.z = 1002;
        };
        _0x127c1b.prototype.readUpdatedProperty = function(_0x4a9138, _0x4f47cf) {
            if (_0x4a9138 == _0x2beec8) {
                this.webTransparency = _0x4f47cf.readUInt8();
            }
        };
        _0x127c1b.prototype.readCustomData_onNewlyVisible = function(_0x4bcbe2) {
            this.webTransparency = _0x4bcbe2.readUInt8();
            this.webType = _0x4bcbe2.readUInt8();
        };
        _0x127c1b.prototype.customDraw = function(_0x2e5d8f) {
            _0x39e82d.save();
            _0x39e82d.globalAlpha *= this.webTransparency / 100 * 0.9;
            var _0x53cd6a = this.getSkinImageObj("img/web/" + this.webType + "/spiderWeb.png");
            if (_0x53cd6a) {
                var _0x32e843 = this.rad;
                _0x39e82d.rotate(this.rPer * Math.PI * 2);
                _0x39e82d.drawImage(_0x53cd6a, -_0x32e843, -_0x32e843, _0x32e843 * 2, _0x32e843 * 2);
            }
            _0x39e82d.restore();
        };

        function _0x127c1b() {
            _0x127c1b.superClass.call(this, _0x63bdc1);
            this.webTransparency = 0;
            this.doesDrawEffectScale = true;
            this.drawEffectScale_Slow = true;
        }
        _0x35d268.setCustomClassForGameObjType(_0x127c1b, _0x63bdc1);
        var _0x28c171 = Animal;
        _0x51eb8f.prototype = Object.create(_0x28c171.prototype);
        _0x51eb8f.prototype.constructor = _0x51eb8f;
        _0x51eb8f.superClass = _0x28c171;
        _0x51eb8f.prototype.animalInfo = function() {
            var _0x1ee42e = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x1ee42e.aniName = "Octopus";
                    break;
                case 111:
                    _0x1ee42e.aniName = "Classic Octopus";
                    break;
                case 112:
                    _0x1ee42e.aniName = "Gold-trim Octopus";
                    break;
                case 200:
                    _0x1ee42e.aniName = "Vampire Squid";
                    break;
                case 201:
                    _0x1ee42e.aniName = "Fuchsia Tiger";
                    break;
                case 202:
                    _0x1ee42e.aniName = "Na Kika";
                    break;
            }
            _0x1ee42e.skinName = this.getSkinName();
            _0x1ee42e.aniDesc = "";
            _0x1ee42e.upgradeText = "UPGRADED to " + _0x1ee42e.aniName + "!\nPress W to use your 'Disguise' ability!\n(Hint: wait for prey to bite you- they get stunned!)";
            _0x1ee42e.aniCol = "#ff8340";
            return _0x1ee42e;
        };
        _0x51eb8f.prototype.getSkinName = function() {
            let _0x10ccb5 = this.getSpeciesPath() + "/octopus";
            _0x10ccb5 += this.specType == 0 ? "" : 1;
            return _0x10ccb5;
        };
        _0x51eb8f.prototype.getSpeciesPath = function() {
            return "ocean/octopus/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x51eb8f.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x51eb8f.prototype.getAbilityInfo = function(_0x26338d) {
            var _0xb9baec = {
                abilName: "Disguise"
            };
            _0xb9baec.abilImg = "skins/" + this.getSpeciesPath() + "/ability.png";
            _0xb9baec.skinThemeID = this.skinThemeID;
            _0xb9baec.mopeSeasonID = this.mopeSeasonID;
            return _0xb9baec;
        };
        _0x51eb8f.prototype.drawUnderSkinImg = function() {
            if (this.animalSpecies == 200) {
                return;
            }
            var _0x5d4516 = 500 / 340;
            var _0x5e4355 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/head.png");
            if (_0x5e4355) {
                _0x39e82d.save();
                var _0x56e204 = 1.1;
                var _0xe4b0f2 = this.rad - this.outlineW;
                _0x39e82d.drawImage(_0x5e4355, -_0xe4b0f2 * _0x5d4516, -_0xe4b0f2 * _0x56e204 * _0x5d4516, _0xe4b0f2 * 2 * _0x5d4516, _0xe4b0f2 * 2 * _0x5d4516);
                _0x39e82d.restore();
            }
        };
        _0x51eb8f.prototype.readCustomData_onNewlyVisible = function(_0x318fc1) {
            _0x51eb8f.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x318fc1);
            var _0x15bc8a = _0x318fc1.readUInt8() > 0;
            if (_0x15bc8a) {
                var _0x40a07e = _0x318fc1.readUInt8() > 0;
                var _0x53126e = _0x318fc1.readUInt16();
                this.createDisguiseAniObj(_0x40a07e, _0x53126e);
            }
        };
        _0x51eb8f.prototype.customUpdatedProperty = function(_0x137805, _0x57df57) {
            if (_0x137805 == _0x293bc6) {
                var _0x1afe79 = _0x57df57.readUInt8() > 0;
                if (_0x1afe79) {
                    var _0x1559bb = _0x57df57.readUInt8() > 0;
                    var _0x3da753 = _0x57df57.readUInt16();
                    this.octoDisguiseObjT = !_0x1559bb ? _0x3da753 : 0;
                    this.createDisguiseAniObj(_0x1559bb, _0x3da753);
                } else {
                    this.octoDrawObj = null;
                }
            }
        };
        _0x51eb8f.prototype.createDisguiseAniObj = function(_0x29f131, _0x5697c1) {
            if (this.octoDrawObj == null) {
                var _0x5d58cf = _0x29f131 ? _0x48c056 : _0x5697c1;
                var _0x1f34e1 = _0x29f131 ? _0x5697c1 : null;
                var _0x3d8dce = _0x35d268.createGameObjOfOType(_0x5d58cf, _0x1f34e1);
                if (_0x29f131) {
                    _0x3d8dce.animalType = _0x1f34e1;
                }
                _0x3d8dce.oRad = this.oRad;
                _0x3d8dce.nRad = this.nRad;
                _0x3d8dce.curBiome = this.curBiome;
                this.octoDrawObj = _0x3d8dce;
            }
        };
        _0x51eb8f.prototype.drawUnderSkinImgOutline = function() {
            _0x51eb8f.superClass.prototype.drawUnderSkinImgOutline.call(this);
        };
        _0x51eb8f.prototype.drawOnTopOfSkinImg = function() {
            _0x51eb8f.superClass.prototype.drawOnTopOfSkinImg.call(this);
            if (this.flag_usingAbility && this.octoDrawObj != null) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = 1 - this.underwaterA;
                if (this.octoDisguiseObjT == _0x260340) {
                    this.octoDrawObj.nRad = 25;
                } else if (this.octoDisguiseObjT == _0x1e888e) {
                    this.octoDrawObj.nRad = 17;
                } else if (this.octoDisguiseObjT == _0x2e9b97) {
                    this.octoDrawObj.nRad = 15;
                } else if (this.octoDisguiseObjT == _0x5c8a84) {
                    this.octoDrawObj.nRad = 15;
                    this.octoDrawObj.innerRad = 35;
                } else {
                    this.octoDrawObj.nRad = this.rad;
                }
                this.octoDrawObj.mopeSeasonID = 1;
                this.octoDrawObj.draw();
                _0x39e82d.restore();
            }
        };
        _0x51eb8f.prototype.drawWhenUnderwater = function() {
            _0x51eb8f.superClass.prototype.drawWhenUnderwater.call(this);
        };
        _0x51eb8f.prototype.octoDisguiseObjT = 0;
        _0x51eb8f.prototype.octoIsAnimal = false;
        _0x51eb8f.prototype.drawHealthBar = function() {
            if (this.flag_usingAbility && this.octoDrawObj != null) {
                if (this.octoIsAnimal) {
                    _0x51eb8f.superClass.prototype.drawNickName.call(this, 1);
                    this.octoDrawObj.curBiome = this.curBiome;
                    this.hpPer_n = 2;
                    this.hpPer = 25;
                    this.hpBarA = 1;
                } else {
                    return;
                }
            }
            _0x39e82d.save();
            var _0x34e8cc = _0x4ec996 < this.hpBarTimeoutT ? 1 : 0;
            this.hpBarA += (_0x34e8cc - this.hpBarA) * 0.04;
            if (this.hpBarA > 0.001) {
                this.hpPer += (this.hpPer_n - this.hpPer) * 0.1;
                var _0x411cf5 = Math.max(1, this.rad / 25);
                var _0x533ebd = _0x411cf5 * 20;
                var _0x100c72 = _0x411cf5 * 5;
                var _0x470cef = 0;
                var _0x82afb = -this.rad - _0x411cf5 * 10;
                _0x39e82d.globalAlpha *= this.hpBarA;
                _0x39e82d.fillStyle = "rgba(0,0,0,0.35)";
                _0x39e82d.fillRect(_0x470cef - _0x533ebd / 2, _0x82afb - _0x100c72 / 2, _0x533ebd, _0x100c72);
                _0x39e82d.fillStyle = "#16D729";
                var _0x4256b3 = _0x533ebd * (this.hpPer / 100);
                if (this.flag_usingAbility && this.octoIsAnimal) {
                    _0x4256b3 = _0x533ebd * (25 / 100);
                }
                _0x39e82d.fillRect(_0x470cef - _0x533ebd / 2, _0x82afb - _0x100c72 / 2, _0x4256b3, _0x100c72);
            }
            _0x39e82d.restore();
        };

        function _0x51eb8f() {
            _0x51eb8f.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x51eb8f, _0x48c056, _0xbc1c26);
        var _0x28c171 = Animal;
        _0x56c51b.prototype = Object.create(_0x28c171.prototype);
        _0x56c51b.prototype.constructor = _0x56c51b;
        _0x56c51b.superClass = _0x28c171;
        _0x56c51b.prototype.animalData = {};
        _0x56c51b.prototype.animalInfo = function() {
            if (this.animalData[this.animalSpecies] == undefined) {
                const _0x214ee2 = this.animalSpecies === 0 ? "Bald Eagle" : this.animalSpecies === 1 ? "Golden Eagle" : this.animalSpecies === 2 ? "Harpy Eagle!" : this.animalSpecies === 3 ? "Greater Spotted Eagle!" : this.animalSpecies == 111 ? "Classic Eagle" : "Gold-trim Eagle";
                this.animalData[this.animalSpecies] = {
                    info: {
                        aniName: _0x214ee2,
                        aniCol: "#5b400d",
                        upgradeText: "UPGRADED to " + _0x214ee2 + "!\nEagles can fly up other animals in the air!\n" + (this.animalSpecies === 1 ? "(Can even pick monsters!)" : this.animalSpecies === 2 ? "(picks anything including Black Dragon)" : this.animalSpecies === 3 ? "(picks everything!)" : "")
                    },
                    ability: {
                        abilName: "Fly with prey",
                        abilImg: "skins/land/eagle/" + this.animalSpecies + "/eagle.png",
                        speciesType: this.animalSpecies,
                        skinThemeID: this.skinThemeID,
                        mopeSeasonID: this.mopeSeasonID
                    },
                    skin: (() => {
                        const _0xfb96f0 = this.mopeSeasonID === 2 && this.animalSpecies === 0 && this.animalSubSpecies > 0 ? "/" + this.animalSubSpecies : "";
                        const _0x5ed46e = "land/eagle/" + this.animalSpecies + _0xfb96f0 + "/eagle";
                        return {
                            path: ["" + _0x5ed46e, _0x5ed46e + "1", _0x5ed46e + "2", _0x5ed46e + "3"],
                            wing1: "skins/" + _0x5ed46e + "_wing1.png",
                            wing2: "skins/" + _0x5ed46e + "_wing2.png",
                            head: "skins/" + _0x5ed46e + "_head.png",
                            head1: "skins/" + _0x5ed46e + "_head1.png",
                            head2: "skins/" + _0x5ed46e + "_head2.png"
                        };
                    })()
                };
            }
            this.animalData[this.animalSpecies].info.skinName = this.getSkinName();
            return this.animalData[this.animalSpecies].info;
        };
        _0x56c51b.prototype.getSkinName = function() {
            return this.animalData[this.animalSpecies].skin.path[this.specType];
        };
        _0x56c51b.prototype.getWing = function(_0x115b38) {
            if (_0x115b38 == 1) {
                return this.animalData[this.animalSpecies].skin.wing1;
            } else {
                return this.animalData[this.animalSpecies].skin.wing2;
            }
        };
        _0x56c51b.prototype.getHead = function() {
            if (this.specType == 1) {
                return this.animalData[this.animalSpecies].skin.head2;
            } else {
                return this.animalData[this.animalSpecies].skin.head;
            }
        };
        _0x56c51b.prototype.getAbilityInfo = function(_0x3a343d) {
            return this.animalData[this.animalSpecies].ability;
        };
        _0x56c51b.prototype.ANIMATION_NAME = "eagle";
        _0x56c51b.prototype.drawUnderSkinImg = function() {
            if (this.mopeSeasonID !== 0) {
                return;
            }
            if (this.flag_flying && !this.flag_isGrabbed) {
                _0x39e82d.save();
                var _0xa29a25 = _0x4e4bab(this.ANIMATION_NAME, this.spawnTime);
                if (_0xa29a25 !== undefined && _0xa29a25 != null) {
                    this.theFrame = _0xa29a25;
                }
                var _0x52393f = _0x5981a2 != _0x4051d6 && !_0x1d523b ? this.theFrame : this.birdNoAnimationFlyWingAngle;
                var _0x341fd8 = this.getSkinImageObj(this.getWing(1));
                if (_0x341fd8) {
                    _0x39e82d.save();
                    var _0x2287e5 = -(-0.2 + _0x52393f) * _0x439930;
                    var _0x2fa63f = this.rad * 0.8;
                    _0x39e82d.rotate(_0x2287e5);
                    var _0x20ca49 = 0;
                    var _0x3d8bc0 = this.rad;
                    var _0x1a6158 = _0x2fa63f * 2 * 0.7;
                    var _0x37b195 = _0x2fa63f * 2;
                    var _0x1e5811 = -0.2;
                    var _0x4cab04 = 1.2;
                    _0x39e82d.drawImage(_0x341fd8, _0x20ca49 + _0x1a6158 * -_0x1e5811, _0x3d8bc0 + _0x37b195 * -_0x4cab04, _0x1a6158, _0x37b195);
                    _0x39e82d.restore();
                }
                var _0x341fd8 = this.getSkinImageObj(this.getWing(2));
                if (_0x341fd8) {
                    _0x39e82d.save();
                    var _0x2287e5 = -(-0.2 + _0x52393f) * _0x4bfce6(-90);
                    var _0x2fa63f = this.rad * 0.8;
                    _0x39e82d.rotate(_0x2287e5);
                    var _0x20ca49 = 0;
                    var _0x3d8bc0 = this.rad;
                    var _0x1a6158 = _0x2fa63f * 2 * 0.7;
                    var _0x37b195 = _0x2fa63f * 2;
                    var _0x1e5811 = 1.2;
                    var _0x4cab04 = 1.2;
                    _0x39e82d.drawImage(_0x341fd8, _0x20ca49 + _0x1a6158 * -_0x1e5811, _0x3d8bc0 + _0x37b195 * -_0x4cab04, _0x1a6158, _0x37b195);
                    _0x39e82d.restore();
                }
                _0x39e82d.restore();
            }
        };
        _0x56c51b.prototype.drawSkinCustomization = function() {
            if (this.mopeSeasonID == 0) {
                return;
            }
            if (!this.flag_usingAbility) {
                return;
            }
            var _0x4a48fd = 500 / 340;
            {
                if (this.flag_flying && !this.flag_isGrabbed) {
                    _0x39e82d.save();
                    var _0xd59420 = _0x4e4bab(this.ANIMATION_NAME, this.spawnTime);
                    if (_0xd59420 !== undefined && _0xd59420 != null) {
                        this.theFrame = _0xd59420;
                    }
                    var _0x1bce53 = _0x5981a2 != _0x4051d6 && !_0x1d523b ? this.theFrame : this.birdNoAnimationFlyWingAngle;
                    var _0x5794ea = this.getSkinImageObj(this.getWing(1));
                    if (_0x5794ea) {
                        _0x39e82d.save();
                        var _0x157201 = -(-0.2 + _0x1bce53) * _0x439930;
                        var _0x1990e7 = this.rad * 0.8;
                        _0x39e82d.rotate(_0x4bfce6(45) + _0x157201);
                        var _0x103a05 = 0;
                        var _0x39b430 = this.rad;
                        var _0x4dc2b0 = _0x1990e7 * 2 * 0.62;
                        var _0x465688 = _0x1990e7 * 2.5;
                        var _0x521ff3 = 0.2;
                        var _0x57a0f7 = 1.7;
                        _0x39e82d.drawImage(_0x5794ea, _0x103a05 + _0x4dc2b0 * -_0x521ff3, _0x39b430 + _0x465688 * -_0x57a0f7, _0x4dc2b0, _0x465688);
                        _0x39e82d.restore();
                    }
                    var _0x5794ea = this.getSkinImageObj(this.getWing(2));
                    if (_0x5794ea) {
                        _0x39e82d.save();
                        var _0x157201 = -(-0.2 + _0x1bce53) * _0x4bfce6(-90);
                        var _0x1990e7 = this.rad * 0.8;
                        _0x39e82d.rotate(_0x4bfce6(-45) + _0x157201);
                        var _0x103a05 = 0;
                        var _0x39b430 = this.rad;
                        var _0x4dc2b0 = _0x1990e7 * 2 * 0.62;
                        var _0x465688 = _0x1990e7 * 2.5;
                        var _0x521ff3 = 0.8;
                        var _0x57a0f7 = 1.7;
                        _0x39e82d.drawImage(_0x5794ea, _0x103a05 + _0x4dc2b0 * -_0x521ff3, _0x39b430 + _0x465688 * -_0x57a0f7, _0x4dc2b0, _0x465688);
                        _0x39e82d.restore();
                    }
                    _0x39e82d.restore();
                } else if (this.specType == 1 && this.mopeSeasonID != 0) {
                    _0x39e82d.save();
                    var _0xc454a3 = (_0x4ec996 - this.spawnTime) / 1000;
                    var _0x1bce53 = _0x5981a2 != _0x4051d6 ? _0x1b594e(_0xc454a3, 0.7, 0.3, 2) : 0;
                    var _0x5794ea = this.getSkinImageObj(this.getWing(1));
                    if (_0x5794ea) {
                        _0x39e82d.save();
                        var _0x157201 = -(-0.2 + _0x1bce53) * _0x4bfce6(45);
                        var _0x1990e7 = this.rad * 0.8;
                        _0x39e82d.rotate(_0x4bfce6(15) + _0x157201);
                        var _0x103a05 = 0;
                        var _0x39b430 = this.rad;
                        var _0x4dc2b0 = _0x1990e7 * 2 * 0.8;
                        var _0x465688 = _0x1990e7 * 2.2;
                        var _0x521ff3 = 0;
                        var _0x57a0f7 = 1.5;
                        _0x39e82d.drawImage(_0x5794ea, _0x103a05 + _0x4dc2b0 * -_0x521ff3, _0x39b430 + _0x465688 * -_0x57a0f7, _0x4dc2b0, _0x465688);
                        _0x39e82d.restore();
                    }
                    var _0x5794ea = this.getSkinImageObj(this.getWing(2));
                    if (_0x5794ea) {
                        _0x39e82d.save();
                        var _0x157201 = -(-0.2 + _0x1bce53) * _0x4bfce6(-45);
                        var _0x1990e7 = this.rad * 0.8;
                        _0x39e82d.rotate(_0x4bfce6(-15) + _0x157201);
                        var _0x103a05 = 0;
                        var _0x39b430 = this.rad;
                        var _0x4dc2b0 = _0x1990e7 * 2 * 0.8;
                        var _0x465688 = _0x1990e7 * 2.2;
                        var _0x521ff3 = 1;
                        var _0x57a0f7 = 1.5;
                        _0x39e82d.drawImage(_0x5794ea, _0x103a05 + _0x4dc2b0 * -_0x521ff3, _0x39b430 + _0x465688 * -_0x57a0f7, _0x4dc2b0, _0x465688);
                        _0x39e82d.restore();
                    }
                    _0x39e82d.restore();
                }
                if (this.specType != 0 && this.specType != undefined) {
                    var _0x222858 = -0.05;
                    if (this.flag_flying) {
                        _0x222858 = 0.1;
                    } else if (this.animalSpecies == 2) {
                        _0x222858 = -0.075;
                    }
                    var _0x98da16 = this.getSkinImageObj(this.getHead());
                    if (_0x98da16) {
                        _0x39e82d.save();
                        var _0x1990e7 = this.rad;
                        _0x39e82d.drawImage(_0x98da16, -_0x1990e7 * _0x4a48fd, (-_0x1990e7 + _0x1990e7 * _0x222858) * _0x4a48fd, _0x1990e7 * 2 * _0x4a48fd, _0x1990e7 * 2 * _0x4a48fd);
                        _0x39e82d.restore();
                    }
                }
            }
        };

        function _0x56c51b() {
            _0x56c51b.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x56c51b, _0x48c056, _0x532f26);
        var _0x28c171 = Animal;
        _0x2e8cce.prototype = Object.create(_0x28c171.prototype);
        _0x2e8cce.prototype.constructor = _0x2e8cce;
        _0x2e8cce.superClass = _0x28c171;
        _0x2e8cce.prototype.getSkinName = function() {
            return "land/ostrich/" + this.animalSpecies + this.getSubSpecies() + "/ostrich";
        };
        _0x2e8cce.prototype.getSubSpecies = function() {
            if (this.animalSpecies === 204) {
                return "/" + this.animalSubSpecies;
            } else {
                return "";
            }
        };
        _0x2e8cce.prototype.animalInfo = function() {
            var _0x18c109 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x18c109.aniName = "Ostrich!";
                    break;
                case 1:
                    _0x18c109.aniName = "Golden Ostrich!";
                    break;
                case 2:
                    _0x18c109.aniName = "Ruffled Ostrich!";
                    break;
                case 111:
                    _0x18c109.aniName = "Classic Ostrich";
                    break;
                case 202:
                    _0x18c109.aniName = "Sunset Ostrich";
                    break;
                case 204:
                    _0x18c109.aniName = "Necromancer Ostrich!";
                    break;
            }
            _0x18c109.skinName = "land/ostrich/" + this.animalSpecies + this.getSubSpecies() + "/ostrich";
            _0x18c109.aniDesc = "";
            _0x18c109.upgradeText = "UPGRADED to " + _0x18c109.aniName + "! Lay eggs to hatch babies! \nCommand babies by placing your crosshair (right-click/W)-\n They can attack prey!";
            _0x18c109.aniCol = "#FF9000";
            return _0x18c109;
        };
        _0x2e8cce.prototype.getAbilityInfo = function(_0x256058) {
            var _0x50f0d5 = {
                abilName: "Command Babies!",
                abilImg: "skins/land/ostrich/" + this.animalSpecies + "/ostrich-baby.png",
                skinThemeID: this.skinThemeID,
                mopeSeasonID: this.mopeSeasonID
            };
            return _0x50f0d5;
        };
        _0x2e8cce.prototype.getSkinImageObj = function(_0x45a2ef) {
            var _0x55cd34 = this.animalSpecies === 1 || this.animalSpecies === 2 || this.animalSpecies === 204 ? 1 : this.mopeSeasonID;
            return this.getSkinImageObjForSeason(_0x45a2ef, _0x55cd34);
        };

        function _0x2e8cce() {
            _0x2e8cce.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x2e8cce, _0x48c056, _0x1f5222);
        var _0x28c171 = Animal;
        _0xa4e113.prototype = Object.create(_0x28c171.prototype);
        _0xa4e113.prototype.constructor = _0xa4e113;
        _0xa4e113.superClass = _0x28c171;
        _0xa4e113.prototype.getSkinName = function() {
            return "land/ostrich/" + this.animalSpecies + "/ostrich-baby";
        };
        _0xa4e113.prototype.isEdibleOutlined = function() {
            if (this.mommyID == _0x166276) {
                return false;
            }
            var _0x31841e = _0xb3e9be[_0x166276];
            if (_0x31841e) {
                var _0x20f8cb = _0x31841e.animalType;
                if (_0x20f8cb == _0x478075 || _0x20f8cb == _0x471048 || _0x20f8cb == _0x563e19) {
                    return false;
                }
            }
            return _0xa4e113.superClass.prototype.isEdibleOutlined.call(this);;
        };
        _0xa4e113.prototype.getSkinImageObj = function(_0x4aec8c) {
            var _0x40c0b4 = this.animalSpecies === 1 || this.animalSpecies === 2 || this.animalSpecies === 204 ? 1 : this.mopeSeasonID;
            return this.getSkinImageObjForSeason(_0x4aec8c, _0x40c0b4);
        };
        _0xa4e113.prototype.readCustomData_onNewlyVisible = function(_0x4b2a7e) {
            _0xa4e113.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x4b2a7e);
            this.mommyID = _0x4b2a7e.readUInt32();
        };

        function _0xa4e113() {
            _0xa4e113.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0xa4e113, _0x48c056, _0x49b249);
        var _0x28c171 = Animal;
        _0x351a40.prototype = Object.create(_0x28c171.prototype);
        _0x351a40.prototype.constructor = _0x351a40;
        _0x351a40.superClass = _0x28c171;
        _0x351a40.prototype.getSkinName = function() {
            var _0x1b2f3a = this.getSpeciesPath("land/falcon") + "/falcon";
            _0x1b2f3a += this.specType == 0 ? "" : this.specType;
            return _0x1b2f3a;
        };
        _0x351a40.prototype.animalInfo = function() {
            var _0x45f340 = {};
            var _0x184b25 = "";
            switch (this.animalSpecies) {
                case 0:
                    _0x45f340.aniName = "Falcon";
                    break;
                case 1:
                    _0x45f340.aniName = "Predator";
                    break;
                case 2:
                    _0x45f340.aniName = "Shaheen";
                    _0x184b25 = "\n(Shaheen flies longer and swoop everything!)";
                    break;
                case 111:
                    _0x45f340.aniName = "Classic Falcon";
                    break;
                case 112:
                    _0x45f340.aniName = "Gold-trim Falcon";
                    break;
                case 202:
                    _0x45f340.aniName = "Meteor Falcon";
                    break;
            }
            _0x45f340.upgradeText = "UPGRADED to " + _0x45f340.aniName + "! \nFly, and do a powerful dive attack! Aim it well." + _0x184b25;
            _0x45f340.aniCol = "#FF9000";
            _0x45f340.skinName = "land/falcon/" + this.animalSpecies + "/falcon" + (this.specType == 0 ? "" : this.specType);
            return _0x45f340;
        };
        _0x351a40.prototype.getWing = function(_0xe02856, _0x2b7810, _0x552c88) {
            _0x552c88 = true;
            var _0x598ae3 = "skins/land/" + (_0x552c88 ? this.getSpeciesPath(_0xe02856) + "/" : _0xe02856 + "/");
            _0x598ae3 += _0xe02856 + "_wing" + _0x2b7810 + ".png";
            return _0x598ae3;
        };
        _0x351a40.prototype.getHead = function(_0x11e375, _0x344363, _0x3d38c3) {
            _0x3d38c3 = true;
            var _0x4d9ad2 = "skins/land/" + (_0x3d38c3 ? this.getSpeciesPath(_0x11e375) + "/" : _0x11e375 + "/");
            _0x4d9ad2 += _0x11e375 + "_head.png";
            return _0x4d9ad2;
        };
        _0x351a40.prototype.getAbilityInfo = function(_0x3b8b54) {
            var _0x2fecac = {
                abilName: "Sky dive",
                abilImg: "skins/land/falcon/" + this.animalSpecies + "/falcon_ability.png",
                speciesType: this.animalSpecies,
                skinThemeID: this.skinThemeID,
                mopeSeasonID: this.mopeSeasonID
            };
            return _0x2fecac;
        };
        _0x351a40.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                return;
            }
            var _0x13dfef = "skins";
            var _0x37e080 = 500 / 340;
            if (this.flag_flying && !this.flag_isGrabbed && this.specType == 1) {
                _0x39e82d.save();
                var _0x431367 = _0x4e4bab("bird", this.spawnTime);
                if (_0x431367 !== undefined && _0x431367 != null) {
                    this.theFrame = _0x431367;
                }
                var _0x3f0674 = _0x5981a2 != _0x4051d6 && !_0x1d523b ? this.theFrame : this.birdNoAnimationFlyWingAngle;
                var _0x4fa902 = this.getSkinImageObj(this.getWing("falcon", 1, false));
                if (_0x4fa902) {
                    _0x39e82d.save();
                    var _0x31a4ee = -(-0.2 + _0x3f0674) * _0x4bfce6(80);
                    var _0x5e6747 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(25) + _0x31a4ee);
                    var _0x4a95ee = 0;
                    var _0x11a495 = this.rad;
                    var _0x1b522d = _0x5e6747 * 2 * 0.65;
                    var _0x4554b6 = _0x5e6747 * 2.5;
                    var _0x3f448b = 0;
                    var _0x1b6bff = 1.5;
                    _0x39e82d.drawImage(_0x4fa902, _0x4a95ee + _0x1b522d * -_0x3f448b, _0x11a495 + _0x4554b6 * -_0x1b6bff, _0x1b522d, _0x4554b6);
                    _0x39e82d.restore();
                }
                var _0x4fa902 = this.getSkinImageObj(this.getWing("falcon", 2, false));
                if (_0x4fa902) {
                    _0x39e82d.save();
                    var _0x31a4ee = -(-0.2 + _0x3f0674) * _0x4bfce6(-80);
                    var _0x5e6747 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(-25) + _0x31a4ee);
                    var _0x4a95ee = 0;
                    var _0x11a495 = this.rad;
                    var _0x1b522d = _0x5e6747 * 2 * 0.65;
                    var _0x4554b6 = _0x5e6747 * 2.5;
                    var _0x3f448b = 1;
                    var _0x1b6bff = 1.5;
                    _0x39e82d.drawImage(_0x4fa902, _0x4a95ee + _0x1b522d * -_0x3f448b, _0x11a495 + _0x4554b6 * -_0x1b6bff, _0x1b522d, _0x4554b6);
                    _0x39e82d.restore();
                }
                _0x39e82d.restore();
            } else if (this.flag_flying && this.specType == 2) {
                _0x39e82d.save();
                var _0x14b671 = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x3f0674 = _0x5981a2 != _0x4051d6 ? _0x1b594e(_0x14b671, 0.7, 0.3, 2) : 0;
                var _0x4fa902 = this.getSkinImageObj(this.getWing("falcon", 1, false));
                if (_0x4fa902) {
                    _0x39e82d.save();
                    var _0x31a4ee = - -0.2 * _0x4bfce6(25);
                    var _0x5e6747 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x31a4ee);
                    var _0x4a95ee = 0;
                    var _0x11a495 = this.rad;
                    var _0x1b522d = _0x5e6747 * 2 * 0.7;
                    var _0x4554b6 = _0x5e6747 * 2.2;
                    var _0x3f448b = 0;
                    var _0x1b6bff = 1.5;
                    _0x39e82d.drawImage(_0x4fa902, _0x4a95ee + _0x1b522d * -_0x3f448b, _0x11a495 + _0x4554b6 * -_0x1b6bff, _0x1b522d, _0x4554b6);
                    _0x39e82d.restore();
                }
                var _0x4fa902 = this.getSkinImageObj(this.getWing("falcon", 2, false));
                if (_0x4fa902) {
                    _0x39e82d.save();
                    var _0x31a4ee = - -0.2 * _0x4bfce6(-25);
                    var _0x5e6747 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x31a4ee);
                    var _0x4a95ee = 0;
                    var _0x11a495 = this.rad;
                    var _0x1b522d = _0x5e6747 * 2 * 0.7;
                    var _0x4554b6 = _0x5e6747 * 2.2;
                    var _0x3f448b = 1;
                    var _0x1b6bff = 1.5;
                    _0x39e82d.drawImage(_0x4fa902, _0x4a95ee + _0x1b522d * -_0x3f448b, _0x11a495 + _0x4554b6 * -_0x1b6bff, _0x1b522d, _0x4554b6);
                    _0x39e82d.restore();
                }
                _0x39e82d.restore();
            } else if (this.flag_flying && this.specType == 3) {
                _0x39e82d.save();
                var _0x14b671 = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x3f0674 = _0x5981a2 != _0x4051d6 ? _0x1b594e(_0x14b671, 0.5, 0.4, 2) : 0;
                var _0x4fa902 = this.getSkinImageObj(this.getWing("falcon", 1, true));
                if (_0x4fa902) {
                    _0x39e82d.save();
                    var _0x31a4ee = -(-0.2 + _0x3f0674) * _0x4bfce6(45);
                    var _0x5e6747 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(15) + _0x31a4ee);
                    var _0x4a95ee = 0;
                    var _0x11a495 = this.rad;
                    var _0x1b522d = _0x5e6747 * 2 * 1;
                    var _0x4554b6 = _0x5e6747 * 2.2;
                    var _0x3f448b = 0;
                    var _0x1b6bff = 1.5;
                    _0x39e82d.drawImage(_0x4fa902, _0x4a95ee + _0x1b522d * -_0x3f448b, _0x11a495 + _0x4554b6 * -_0x1b6bff, _0x1b522d, _0x4554b6);
                    _0x39e82d.restore();
                }
                var _0x4fa902 = this.getSkinImageObj(this.getWing("falcon", 2, true));
                if (_0x4fa902) {
                    _0x39e82d.save();
                    var _0x31a4ee = -(-0.2 + _0x3f0674) * _0x4bfce6(-45);
                    var _0x5e6747 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(-15) + _0x31a4ee);
                    var _0x4a95ee = 0;
                    var _0x11a495 = this.rad;
                    var _0x1b522d = _0x5e6747 * 2 * 1;
                    var _0x4554b6 = _0x5e6747 * 2.2;
                    var _0x3f448b = 1;
                    var _0x1b6bff = 1.5;
                    _0x39e82d.drawImage(_0x4fa902, _0x4a95ee + _0x1b522d * -_0x3f448b, _0x11a495 + _0x4554b6 * -_0x1b6bff, _0x1b522d, _0x4554b6);
                    _0x39e82d.restore();
                }
                _0x39e82d.restore();
            }
            if (this.specType != 0 && this.specType != undefined) {
                var _0x5d63e2 = this.getSkinImageObj(this.getHead("/falcon", true));
                if (_0x5d63e2) {
                    _0x39e82d.save();
                    var _0x5e6747 = this.rad * (this.specType == 3 ? 1.2 : 1);
                    var _0xa1f34e = _0x5e6747 * 0.2;
                    if (this.specType == 3) {
                        _0xa1f34e = _0x5e6747 * -0.15;
                    }
                    _0x39e82d.drawImage(_0x5d63e2, -_0x5e6747 * _0x37e080, (-_0x5e6747 + _0xa1f34e) * _0x37e080, _0x5e6747 * 2 * _0x37e080, _0x5e6747 * 2 * _0x37e080);
                    _0x39e82d.restore();
                }
            }
        };

        function _0x351a40() {
            _0x351a40.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x351a40, _0x48c056, _0x4c676b);
        var _0x28c171 = Animal;
        _0xe3ce08.prototype = Object.create(_0x28c171.prototype);
        _0xe3ce08.prototype.constructor = _0xe3ce08;
        _0xe3ce08.superClass = _0x28c171;
        _0xe3ce08.prototype.animalInfo = function() {
            var _0x154fc1 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x154fc1.aniName = "Snowy Owl";
                    break;
                case 111:
                    _0x154fc1.aniName = "Classic Snowy Owl!";
                    break;
                case 112:
                    _0x154fc1.aniName = "Gold-trim Snowy Owl";
                    break;
                case 201:
                    _0x154fc1.aniName = "Owlrigami";
                    break;
            }
            _0x154fc1.skinName = this.getSkinName();
            _0x154fc1.aniDesc = "";
            _0x154fc1.upgradeText = "UPGRADED to " + _0x154fc1.aniName + "!\nAim the crosshair\nright-click / press W when its on top of prey to attack";
            _0x154fc1.aniCol = "#633838";
            return _0x154fc1;
        };
        _0xe3ce08.prototype.getSkinName = function() {
            let _0x5e4189 = this.getSpeciesPath() + "/snowyowl";
            _0x5e4189 += this.specType == 0 ? "" : this.specType;
            return _0x5e4189;
        };
        _0xe3ce08.prototype.getSpeciesPath = function() {
            return "arctic/snowyowl/" + this.animalSpecies + this.getSubSpecies();
        };
        _0xe3ce08.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0xe3ce08.prototype.getWing = function(_0x121ce1) {
            var _0x4c4e5c = "skins/" + this.getSpeciesPath();
            _0x4c4e5c += "/snowyowl_wing" + _0x121ce1 + ".png";
            return _0x4c4e5c;
        };
        _0xe3ce08.prototype.getHead = function() {
            var _0x54729a = "skins/" + this.getSpeciesPath();
            _0x54729a += "/snowyowl_head.png";
            return _0x54729a;
        };
        _0xe3ce08.prototype.getAbilityInfo = function(_0x2f8bac) {
            var _0x149196 = {
                abilName: "Target Prey!"
            };
            _0x149196.abilImg = "skins/" + this.getSpeciesPath() + "/snowyowl.png";
            _0x149196.skinThemeID = this.skinThemeID;
            _0x149196.mopeSeasonID = this.mopeSeasonID;
            return _0x149196;
        };
        _0xe3ce08.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                return;
            }
            var _0x5860e1 = "skins";
            var _0x2426f5 = 500 / 340;
            if (this.flag_flying && !this.flag_isGrabbed && this.specType == 1) {
                _0x39e82d.save();
                var _0x1f57e4 = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x15b01d = _0x5981a2 != _0x4051d6 && !_0x1d523b ? _0x1b594e(_0x1f57e4, 0.7, 0.4, 2) : this.birdNoAnimationFlyWingAngle;
                var _0x3628e6 = this.getSkinImageObj(this.getWing(1));
                if (_0x3628e6) {
                    _0x39e82d.save();
                    var _0x53dedc = -(-0.2 + _0x15b01d) * _0x4bfce6(80);
                    var _0x326af8 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(25) + _0x53dedc);
                    var _0xeaa24e = 0;
                    var _0x2fe701 = this.rad;
                    var _0x51c861 = _0x326af8 * 2 * 0.65;
                    var _0x1fab9f = _0x326af8 * 2.5;
                    var _0x2b3289 = 0;
                    var _0x5e0c39 = 1.5;
                    _0x39e82d.drawImage(_0x3628e6, _0xeaa24e + _0x51c861 * -_0x2b3289, _0x2fe701 + _0x1fab9f * -_0x5e0c39, _0x51c861, _0x1fab9f);
                    _0x39e82d.restore();
                }
                var _0x3628e6 = this.getSkinImageObj(this.getWing(2));
                if (_0x3628e6) {
                    _0x39e82d.save();
                    var _0x53dedc = -(-0.2 + _0x15b01d) * _0x4bfce6(-80);
                    var _0x326af8 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(-25) + _0x53dedc);
                    var _0xeaa24e = 0;
                    var _0x2fe701 = this.rad;
                    var _0x51c861 = _0x326af8 * 2 * 0.65;
                    var _0x1fab9f = _0x326af8 * 2.5;
                    var _0x2b3289 = 1;
                    var _0x5e0c39 = 1.5;
                    _0x39e82d.drawImage(_0x3628e6, _0xeaa24e + _0x51c861 * -_0x2b3289, _0x2fe701 + _0x1fab9f * -_0x5e0c39, _0x51c861, _0x1fab9f);
                    _0x39e82d.restore();
                }
                _0x39e82d.restore();
            } else if (this.flag_flying && this.specType == 2) {
                _0x39e82d.save();
                var _0x1f57e4 = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x15b01d = _0x5981a2 != _0x4051d6 ? _0x1b594e(_0x1f57e4, 0.7, 0.3, 2) : 0;
                var _0x3628e6 = this.getSkinImageObj(this.getWing(1));
                if (_0x3628e6) {
                    _0x39e82d.save();
                    var _0x53dedc = -(-0.2 + _0x15b01d) * _0x4bfce6(45);
                    var _0x326af8 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(15) + _0x53dedc);
                    var _0xeaa24e = 0;
                    var _0x2fe701 = this.rad;
                    var _0x51c861 = _0x326af8 * 2 * 0.7;
                    var _0x1fab9f = _0x326af8 * 2.2;
                    var _0x2b3289 = 0;
                    var _0x5e0c39 = 1.5;
                    _0x39e82d.drawImage(_0x3628e6, _0xeaa24e + _0x51c861 * -_0x2b3289, _0x2fe701 + _0x1fab9f * -_0x5e0c39, _0x51c861, _0x1fab9f);
                    _0x39e82d.restore();
                }
                var _0x3628e6 = this.getSkinImageObj(this.getWing(2));
                if (_0x3628e6) {
                    _0x39e82d.save();
                    var _0x53dedc = -(-0.2 + _0x15b01d) * _0x4bfce6(-45);
                    var _0x326af8 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(-15) + _0x53dedc);
                    var _0xeaa24e = 0;
                    var _0x2fe701 = this.rad;
                    var _0x51c861 = _0x326af8 * 2 * 0.7;
                    var _0x1fab9f = _0x326af8 * 2.2;
                    var _0x2b3289 = 1;
                    var _0x5e0c39 = 1.5;
                    _0x39e82d.drawImage(_0x3628e6, _0xeaa24e + _0x51c861 * -_0x2b3289, _0x2fe701 + _0x1fab9f * -_0x5e0c39, _0x51c861, _0x1fab9f);
                    _0x39e82d.restore();
                }
                _0x39e82d.restore();
            } else if (this.flag_flying && this.specType == 3) {
                _0x39e82d.save();
                var _0x1f57e4 = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x15b01d = _0x5981a2 != _0x4051d6 ? _0x1b594e(_0x1f57e4, 0.5, 0.5, 2) : 0;
                var _0x3628e6 = this.getSkinImageObj(this.getWing(1));
                if (_0x3628e6) {
                    _0x39e82d.save();
                    var _0x53dedc = -(-0.2 + _0x15b01d) * _0x4bfce6(45);
                    var _0x326af8 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(25) + _0x53dedc);
                    var _0xeaa24e = 0;
                    var _0x2fe701 = this.rad;
                    var _0x51c861 = _0x326af8 * 2 * 0.7;
                    var _0x1fab9f = _0x326af8 * 2.2;
                    var _0x2b3289 = 0;
                    var _0x5e0c39 = 1.5;
                    _0x39e82d.drawImage(_0x3628e6, _0xeaa24e + _0x51c861 * -_0x2b3289, _0x2fe701 + _0x1fab9f * -_0x5e0c39, _0x51c861, _0x1fab9f);
                    _0x39e82d.restore();
                }
                var _0x3628e6 = this.getSkinImageObj(this.getWing(2));
                if (_0x3628e6) {
                    _0x39e82d.save();
                    var _0x53dedc = -(-0.2 + _0x15b01d) * _0x4bfce6(-45);
                    var _0x326af8 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(-25) + _0x53dedc);
                    var _0xeaa24e = 0;
                    var _0x2fe701 = this.rad;
                    var _0x51c861 = _0x326af8 * 2 * 0.7;
                    var _0x1fab9f = _0x326af8 * 2.2;
                    var _0x2b3289 = 1;
                    var _0x5e0c39 = 1.5;
                    _0x39e82d.drawImage(_0x3628e6, _0xeaa24e + _0x51c861 * -_0x2b3289, _0x2fe701 + _0x1fab9f * -_0x5e0c39, _0x51c861, _0x1fab9f);
                    _0x39e82d.restore();
                }
                _0x39e82d.restore();
            }
            if (this.specType != 0 && this.specType != undefined) {
                var _0x1de97c = this.getSkinImageObj(this.getHead());
                if (_0x1de97c) {
                    _0x39e82d.save();
                    var _0x326af8 = this.rad;
                    _0x39e82d.drawImage(_0x1de97c, -_0x326af8 * _0x2426f5, (-_0x326af8 + _0x326af8 * 0.1) * _0x2426f5, _0x326af8 * 2 * _0x2426f5, _0x326af8 * 2 * _0x2426f5);
                    _0x39e82d.restore();
                }
            }
        };

        function _0xe3ce08() {
            _0xe3ce08.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0xe3ce08, _0x48c056, _0x57d22f);
        var _0x28c171 = Animal;
        _0x46f28d.prototype = Object.create(_0x28c171.prototype);
        _0x46f28d.prototype.constructor = _0x46f28d;
        _0x46f28d.superClass = _0x28c171;
        _0x46f28d.prototype.animalInfo = function() {
            const _0x5b016b = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x5b016b.aniName = "Pelican";
                    break;
                case 111:
                    _0x5b016b.aniName = "Classic Pelican";
                    break;
                case 112:
                    _0x5b016b.aniName = "Gold-trim Pelican";
                    break;
            }
            _0x5b016b.upgradeText = "UPGRADED to " + _0x5b016b.aniName + "! \nPick up water (and prey!) in your mouth,\nfly, and drop water on prey! (press W again)";
            _0x5b016b.skinName = this.getSkinName();
            return _0x5b016b;
        };
        _0x46f28d.prototype.getSpeciesPath = function(_0x4366ec) {
            return "pelican/" + this.animalSpecies;
        };
        _0x46f28d.prototype.getSkinName = function() {
            return this.getSpeciesPath("pelican") + "/pelican" + (this.specType == 0 ? "" : this.specType);
        };
        _0x46f28d.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                return;
            }
            var _0x1e7987 = 500 / 340;
            var _0x1a7596 = this.rad - this.outlineW;
            var _0x199af9 = "skins";
            if (this.flag_flying) {
                var _0x5e4eae = "";
                _0x5e4eae = "pelican";
                _0x39e82d.save();
                var _0xa7c1a5 = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x3b225a = _0x5981a2 != _0x4051d6 && !_0x1d523b ? _0x1b594e(_0xa7c1a5, 0.9, 0.3, 2) : this.birdNoAnimationFlyWingAngle;
                var _0x281cf6 = this.getSkinImageObj(this.getWing("pelican", 1, true));
                if (_0x281cf6) {
                    _0x39e82d.save();
                    var _0x3a3481 = -(-0.2 + _0x3b225a) * _0x439930;
                    var _0x1a7596 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(45) + _0x3a3481);
                    var _0x2c99fe = 0;
                    var _0x30bcda = this.rad;
                    var _0x1cca83 = _0x1a7596 * 2 * 0.6;
                    var _0x2d5006 = _0x1a7596 * 2.3;
                    var _0x1716da = 0;
                    var _0x1a4636 = 1.7;
                    _0x39e82d.drawImage(_0x281cf6, _0x2c99fe + _0x1cca83 * -_0x1716da, _0x30bcda + _0x2d5006 * -_0x1a4636, _0x1cca83, _0x2d5006);
                    _0x39e82d.restore();
                }
                var _0x281cf6 = this.getSkinImageObj(this.getWing("pelican", 2, true));
                if (_0x281cf6) {
                    _0x39e82d.save();
                    var _0x3a3481 = -(-0.2 + _0x3b225a) * _0x4bfce6(-90);
                    var _0x1a7596 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(-45) + _0x3a3481);
                    var _0x2c99fe = 0;
                    var _0x30bcda = this.rad;
                    var _0x1cca83 = _0x1a7596 * 2 * 0.6;
                    var _0x2d5006 = _0x1a7596 * 2.3;
                    var _0x1716da = 1;
                    var _0x1a4636 = 1.7;
                    _0x39e82d.drawImage(_0x281cf6, _0x2c99fe + _0x1cca83 * -_0x1716da, _0x30bcda + _0x2d5006 * -_0x1a4636, _0x1cca83, _0x2d5006);
                    _0x39e82d.restore();
                }
                _0x39e82d.restore();
            } else if (this.specType == 1) {
                var _0x5e4eae = "";
                _0x5e4eae = "pelican";
                _0x39e82d.save();
                var _0xa7c1a5 = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x3b225a = _0x5981a2 != _0x4051d6 ? _0x1b594e(_0xa7c1a5, 0.9, 0.3, 2) : 0;
                var _0x281cf6 = this.getSkinImageObj(this.getWing("pelican", 11, true));
                if (_0x281cf6) {
                    _0x39e82d.save();
                    var _0x3a3481 = -(-0.2 + _0x3b225a) * _0x4bfce6(45);
                    var _0x1a7596 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(45) + _0x3a3481);
                    var _0x2c99fe = 0;
                    var _0x30bcda = this.rad;
                    var _0x1cca83 = _0x1a7596 * 2 * 0.7;
                    var _0x2d5006 = _0x1a7596 * 2.2;
                    var _0x1716da = 0;
                    var _0x1a4636 = 1.7;
                    _0x39e82d.drawImage(_0x281cf6, _0x2c99fe + _0x1cca83 * -_0x1716da, _0x30bcda + _0x2d5006 * -_0x1a4636, _0x1cca83, _0x2d5006);
                    _0x39e82d.restore();
                }
                var _0x281cf6 = this.getSkinImageObj(this.getWing("pelican", 21, true));
                if (_0x281cf6) {
                    _0x39e82d.save();
                    var _0x3a3481 = -(-0.2 + _0x3b225a) * _0x4bfce6(-45);
                    var _0x1a7596 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(-45) + _0x3a3481);
                    var _0x2c99fe = 0;
                    var _0x30bcda = this.rad;
                    var _0x1cca83 = _0x1a7596 * 2 * 0.7;
                    var _0x2d5006 = _0x1a7596 * 2.2;
                    var _0x1716da = 1;
                    var _0x1a4636 = 1.7;
                    _0x39e82d.drawImage(_0x281cf6, _0x2c99fe + _0x1cca83 * -_0x1716da, _0x30bcda + _0x2d5006 * -_0x1a4636, _0x1cca83, _0x2d5006);
                    _0x39e82d.restore();
                }
                _0x39e82d.restore();
            }
            if (this.specType != 0 && !this.flag_isGrabbed) {
                if (this.specType == 2) {
                    var _0x42a5d6 = _0x199af9 + "/" + this.getSpeciesPath("pelican") + "/ability_pelican.png";
                    var _0x3f3e42 = this.getSkinImageObj(_0x42a5d6);
                    if (_0x3f3e42) {
                        _0x39e82d.save();
                        _0x39e82d.rotate(_0x4bfce6(180));
                        var _0x1a7596 = this.rad * 0.3;
                        var _0xcbd78f = this.rad * 1;
                        _0x39e82d.drawImage(_0x3f3e42, -_0x1a7596 * _0x1e7987, -_0x1a7596 - _0xcbd78f * _0x1e7987, _0x1a7596 * 2 * _0x1e7987, _0x1a7596 * 2 * _0x1e7987);
                        _0x39e82d.restore();
                    }
                }
                var _0x470afc = this.getSkinImageObj(this.getHead("pelican", true));
                if (_0x470afc) {
                    _0x39e82d.save();
                    var _0x1a7596 = this.rad * 1;
                    var _0xcbd78f = -this.rad * 0.3;
                    _0x39e82d.drawImage(_0x470afc, -_0x1a7596 * _0x1e7987, -_0x1a7596 + _0xcbd78f * _0x1e7987, _0x1a7596 * 2 * _0x1e7987, _0x1a7596 * 2 * _0x1e7987);
                    _0x39e82d.restore();
                }
            }
        };

        function _0x46f28d() {
            _0x46f28d.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x46f28d, _0x48c056, _0x1c9f19);
        var _0x28c171 = Animal;
        _0x5a5a2a.prototype = Object.create(_0x28c171.prototype);
        _0x5a5a2a.prototype.constructor = _0x5a5a2a;
        _0x5a5a2a.superClass = _0x28c171;
        _0x5a5a2a.prototype.updateZ = function() {
            this.z = 1003 + this.rad;
        };
        _0x5a5a2a.prototype.getSkinName = function() {
            var _0x34e767 = "";
            if (this.flag_usingAbility && !this.flag_underWater) {
                _0x34e767 = "2";
            }
            return "frog/frog" + _0x34e767;
        };
        _0x5a5a2a.prototype.drawUnderSkinImg = function() {
            if (this.flag_usingAbility && !this.flag_underWater) {
                var _0x31e935 = this.rad - this.outlineW;
                var _0x268e37 = 500 / 340;
                var _0xd23d5c = this.getSkinImageObj("./skins/frog/frogLegs.png");
                if (_0xd23d5c) {
                    _0x39e82d.drawImage(_0xd23d5c, -_0x31e935 * _0x268e37, (-_0x31e935 - _0x31e935) * _0x268e37, _0x31e935 * 2 * _0x268e37, _0x31e935 * 2 * _0x268e37);
                }
            }
        };
        _0x5a5a2a.prototype.canDrawAnimalSkin = function() {
            return !this.flag_underWater;
        };
        _0x5a5a2a.prototype.drawUnderWater = function() {
            if (this.flag_underWater) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = 0.2;
                _0x39e82d.scale(1, 1.5);
                _0x466d9b(0, 0, this.rad * 0.5, "#598b30");
                _0x466d9b(0, this.rad * -0.6, this.rad * 0.3, "#64a034");
                _0x39e82d.restore();
            }
        };

        function _0x5a5a2a() {
            _0x5a5a2a.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x5a5a2a, _0x48c056, _0x2fab82);
        var _0x5899d5 = _0x194b7f;
        var _0x28c171 = Animal;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x194b7f.prototype.isAttacking = false;
        _0x194b7f.prototype.objSkinPath = {};
        _0x194b7f.prototype.getSkinName = function() {
            return this.objSkinPath[this.getSkinIndex()].skin;
        };
        _0x194b7f.prototype.getSkinIndex = function() {
            if (this.animalSpecies == 2 && (this.isAttacking || this.flag_usingAbility)) {
                return 3;
            }
            return this.animalSpecies;
        };
        _0x194b7f.prototype.setSkinPath = function() {};
        _0x194b7f.prototype.onAnimalSpeciesSet = function() {
            let _0x132513 = this.animalSpecies;
            let _0x46eb70 = "";
            let {
                skin: _0x232485,
                wing1: _0x216be3,
                wing2: _0x426f4d,
                head: _0x39c30e
            } = {
                skin: "duck/" + _0x132513 + "/duck" + _0x46eb70,
                wing1: "skins/duck/" + _0x132513 + "/duck_wing1.png",
                wing2: "skins/duck/" + _0x132513 + "/duck_wing2.png",
                head: "skins/duck/" + _0x132513 + "/duck_head.png"
            };
            this.objSkinPath[_0x132513] = {
                skin: _0x232485,
                wing1: _0x216be3,
                wing2: _0x426f4d,
                head: _0x39c30e
            };
            if (_0x132513 === 2) {
                _0x46eb70 = 1;
                ({
                    skin: _0x232485,
                    wing1: _0x216be3,
                    wing2: _0x426f4d,
                    head: _0x39c30e
                } = {
                    skin: "duck/" + _0x132513 + "/duck" + _0x46eb70,
                    wing1: "skins/duck/" + _0x132513 + "/duck_wing1.png",
                    wing2: "skins/duck/" + _0x132513 + "/duck_wing2.png",
                    head: "skins/duck/" + _0x132513 + "/duck_head.png"
                });
                this.objSkinPath[3] = {
                    skin: _0x232485,
                    wing1: _0x216be3,
                    wing2: _0x426f4d,
                    head: _0x39c30e
                };
            }
        };
        _0x5899d5.prototype.drawSkinCustomization = function() {
            if (this.isAttacking && this.animalSpecies == 2) {
                this.angryGooseAnimation();
            }
            if (this.flag_usingAbility && this.animalSpecies == 2) {
                this.flyingAnimation();
            }
        };
        _0x194b7f.prototype.angryGooseAnimation = function() {
            var _0x36bb66 = this.skinScale;
            _0x39e82d.save();
            var _0x4d4e1e = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x4a4fd6 = _0x5981a2 != _0x4051d6 && !_0x1d523b ? _0x1b594e(_0x4d4e1e, 0.5, 0.3, 2) : this.birdNoAnimationFlyWingAngle;
            var _0x2bcb5f = this.getSkinImageObj(this.objSkinPath[this.getSkinIndex()].wing1);
            if (_0x2bcb5f) {
                _0x39e82d.save();
                var _0x4a8844 = -(-0.2 + _0x4a4fd6) * _0x4bfce6(15);
                var _0x554f2b = this.rad * 0.8;
                _0x39e82d.rotate(_0x4bfce6(15) + _0x4a8844);
                var _0x32d606 = 0;
                var _0x171738 = this.rad;
                var _0x53f76f = _0x554f2b * 2 * 0.7;
                var _0x28350c = _0x554f2b * 2.2;
                var _0x5cc515 = 0;
                var _0x170514 = 1.5;
                _0x39e82d.drawImage(_0x2bcb5f, _0x32d606 + _0x53f76f * -_0x5cc515, _0x171738 + _0x28350c * -_0x170514, _0x53f76f, _0x28350c);
                _0x39e82d.restore();
            }
            var _0x2bcb5f = this.getSkinImageObj(this.objSkinPath[this.getSkinIndex()].wing2);
            if (_0x2bcb5f) {
                _0x39e82d.save();
                var _0x4a8844 = -(-0.2 + _0x4a4fd6) * _0x4bfce6(-15);
                var _0x554f2b = this.rad * 0.8;
                _0x39e82d.rotate(_0x4bfce6(-15) + _0x4a8844);
                var _0x32d606 = 0;
                var _0x171738 = this.rad;
                var _0x53f76f = _0x554f2b * 2 * 0.7;
                var _0x28350c = _0x554f2b * 2.2;
                var _0x5cc515 = 1;
                var _0x170514 = 1.5;
                _0x39e82d.drawImage(_0x2bcb5f, _0x32d606 + _0x53f76f * -_0x5cc515, _0x171738 + _0x28350c * -_0x170514, _0x53f76f, _0x28350c);
                _0x39e82d.restore();
            }
            var _0x3df7f7 = this.getSkinImageObj(this.objSkinPath[this.getSkinIndex()].head);
            if (_0x3df7f7) {
                _0x39e82d.save();
                var _0x554f2b = this.rad * 1;
                var _0x4cbc73 = -this.rad * 0.1;
                _0x39e82d.drawImage(_0x3df7f7, -_0x554f2b * _0x36bb66, -_0x554f2b + _0x4cbc73 * _0x36bb66, _0x554f2b * 2 * _0x36bb66, _0x554f2b * 2 * _0x36bb66);
                _0x39e82d.restore();
            }
            _0x39e82d.restore();
        };
        _0x194b7f.prototype.skinScale = 500 / 340;
        _0x194b7f.prototype.flyingAnimation = function() {
            var _0x863356 = this.skinScale;
            if (this.flag_flying && !this.flag_isGrabbed) {
                _0x39e82d.save();
                var _0x13178c = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x1d4e76 = _0x5981a2 != _0x4051d6 && !_0x1d523b ? _0x1b594e(_0x13178c, 0.5, 0.3, 2) : this.birdNoAnimationFlyWingAngle;
                var _0xca8eb7 = this.getSkinImageObj(this.objSkinPath[this.getSkinIndex()].wing1);
                if (_0xca8eb7) {
                    _0x39e82d.save();
                    var _0x2c047d = -(-0.2 + _0x1d4e76) * _0x439930;
                    var _0x45f325 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(45) + _0x2c047d);
                    var _0x22f767 = 0;
                    var _0x586132 = this.rad;
                    var _0x5e0513 = _0x45f325 * 2 * 0.62;
                    var _0x485335 = _0x45f325 * 2.5;
                    var _0x52d7b0 = 0.2;
                    var _0x1b4d28 = 1.7;
                    _0x39e82d.drawImage(_0xca8eb7, _0x22f767 + _0x5e0513 * -_0x52d7b0, _0x586132 + _0x485335 * -_0x1b4d28, _0x5e0513, _0x485335);
                    _0x39e82d.restore();
                }
                var _0xca8eb7 = this.getSkinImageObj(this.objSkinPath[this.getSkinIndex()].wing2);
                if (_0xca8eb7) {
                    _0x39e82d.save();
                    var _0x2c047d = -(-0.2 + _0x1d4e76) * _0x4bfce6(-90);
                    var _0x45f325 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(-45) + _0x2c047d);
                    var _0x22f767 = 0;
                    var _0x586132 = this.rad;
                    var _0x5e0513 = _0x45f325 * 2 * 0.62;
                    var _0x485335 = _0x45f325 * 2.5;
                    var _0x52d7b0 = 0.8;
                    var _0x1b4d28 = 1.7;
                    _0x39e82d.drawImage(_0xca8eb7, _0x22f767 + _0x5e0513 * -_0x52d7b0, _0x586132 + _0x485335 * -_0x1b4d28, _0x5e0513, _0x485335);
                    _0x39e82d.restore();
                }
                _0x39e82d.restore();
            }
            if (this.specType != 0 && this.specType != undefined) {
                var _0x590aa1 = this.getSkinImageObj(this.objSkinPath[this.getSkinIndex()].head);
                if (_0x590aa1) {
                    _0x39e82d.save();
                    var _0x45f325 = this.rad;
                    _0x39e82d.drawImage(_0x590aa1, -_0x45f325 * _0x863356, (-_0x45f325 + _0x45f325 * 0.1) * _0x863356, _0x45f325 * 2 * _0x863356, _0x45f325 * 2 * _0x863356);
                    _0x39e82d.restore();
                }
            }
        };
        _0x194b7f.prototype.readCustomData_onNewlyVisible = function(_0x3e5260) {
            _0x194b7f.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x3e5260);
            this.isAttacking = _0x3e5260.readUInt8();
        };
        _0x194b7f.prototype.readCustomData_onUpdate = function(_0x15af3c) {
            _0x194b7f.superClass.prototype.readCustomData_onUpdate.call(this, _0x15af3c);
            this.isAttacking = _0x15af3c.readUInt8();
        };

        function _0x194b7f() {
            _0x28c171.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x194b7f, _0x48c056, _0xcd3c11);
        var _0x28c171 = Animal;
        _0x273048.prototype = Object.create(_0x28c171.prototype);
        _0x273048.prototype.constructor = _0x273048;
        _0x273048.superClass = _0x28c171;
        _0x273048.prototype.setSkinPath = function() {
            this.objSkinPath = "duck/duckling";
        };
        _0x273048.prototype.getSkinName = function() {
            return this.objSkinPath;
        };

        function _0x273048() {
            _0x273048.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x273048, _0x48c056, _0x1c45fa);
        var _0x28c171 = Animal;
        _0x453a61.prototype = Object.create(_0x28c171.prototype);
        _0x453a61.prototype.constructor = _0x453a61;
        _0x453a61.superClass = _0x28c171;
        _0x453a61.prototype.updateZ = function() {
            this.z = 10000 + this.rad;
        };
        _0x453a61.prototype.canUseTailslap = false;
        _0x453a61.prototype.tailState = 0;
        _0x453a61.prototype.getSkinName = function() {
            return "volcano/blackdragon/" + this.animalSpecies + "/blackdragon";
        };
        _0x453a61.prototype.leftWingAnim = null;
        _0x453a61.prototype.drawSkinCustomization = function() {
            if (this.flag_underWater) {
                return;
            }
            var _0x2576d6 = 500 / 340;
            var _0x3a990e = this.lava;
            var _0x7c211c = 50;
            if (_0x3a990e < _0x7c211c) {
                var _0x530bae = _0x3a990e / _0x7c211c;
                var _0x804494 = this.getSkinImageObj("skins/volcano/blackdragon/" + this.animalSpecies + "/wings.png");
                if (_0x804494) {
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = 1 - _0x530bae;
                    var _0x5e03f1 = this.rad - this.outlineW;
                    _0x39e82d.drawImage(_0x804494, -_0x5e03f1 * _0x2576d6, -_0x5e03f1 * _0x2576d6, _0x5e03f1 * 2 * _0x2576d6, _0x5e03f1 * 2 * _0x2576d6);
                    _0x39e82d.restore();
                }
            }
        };
        _0x453a61.prototype.animalInfo = function() {
            var _0x53e6b8 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x53e6b8.aniName = "Black Dragon";
                    break;
                case 1:
                    _0x53e6b8.aniName = "Golden Black Dragon";
                    break;
                case 2:
                    _0x53e6b8.aniName = "Azure Bringer";
                    break;
                case 111:
                    _0x53e6b8.aniName = "Classic Black Dragon";
                    break;
                case 204:
                    _0x53e6b8.aniName = "Violet Dusk Black Dragon";
                    break;
                default:
                    break;
            }
            _0x53e6b8.aniCol = "#FF9000";
            _0x53e6b8.skinName = this.getSkinName();
            _0x53e6b8.upgradeText = "UPGRADED to " + _0x53e6b8.aniName;
            _0x53e6b8.upgradeText += "!\n Black dragons drink lava instead of water! Black dragons only heal on healing stones/lava!";
            _0x53e6b8.aniCol = "black";
            return _0x53e6b8;
        };
        _0x453a61.prototype.getAbilityInfo = function(_0x25a1f3) {
            var _0x506b50 = {
                abilName: "Multi Fireballs"
            };
            var _0x58b6fb = 0;
            switch (this.animalSpecies) {
                case 0:
                    _0x58b6fb = 1;
                    break;
                case 1:
                    _0x58b6fb = 2;
                    break;
                case 2:
                    _0x58b6fb = 7;
                    break;
            }
            _0x506b50.speciesType = _0x58b6fb;
            _0x506b50.abilImg = "img/fire/" + _0x58b6fb + "/0.png";
            _0x506b50.skinThemeID = this.skinThemeID;
            _0x506b50.mopeSeasonID = this.mopeSeasonID;
            return _0x506b50;
        };

        function _0x453a61() {
            this.lava = 100;
            _0x453a61.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x453a61, _0x48c056, _0x47e6fe);
        var _0x28c171 = Animal;
        _0x57c973.prototype = Object.create(_0x28c171.prototype);
        _0x57c973.prototype.constructor = _0x57c973;
        _0x57c973.superClass = _0x28c171;
        _0x57c973.prototype.getSkinName = function() {
            return "/honeybee/0/" + this.animalSubSpecies + "/honeybee" + (this.specType == 0 || this.specType == undefined ? "" : this.specType);
        };
        _0x57c973.prototype.drawSkinCustomization = function() {
            _0x39e82d.save();
            var _0x123d5c = _0x4ec996 - this.spawnTime;
            let _0x254c4d = _0x5981a2 != _0x4051d6 && !_0x1d523b && !_0x1acb6f;
            let _0x1b69e0 = _0x254c4d ? _0x2f34bb.honeybee[_0x123d5c % _0x2f34bb.honeybee.length] : 0;
            var _0x44d0a5 = frame2 = _0x1b69e0;
            var _0x179a77 = this.rad * 0.6;
            var _0x664f5b = 30;
            var _0x9076f3 = 2;
            var _0x5786ad = 20;
            var _0x4a8efc = this.getSkinImageObj("skins/honeybee/0/" + this.animalSubSpecies + "/honeybee_wing2.png");
            if (_0x4a8efc) {
                _0x39e82d.save();
                var _0x5e038d = -(-_0x9076f3 + frame2) * _0x4bfce6(-(_0x664f5b - 5));
                _0x39e82d.globalAlpha = 0.6;
                _0x39e82d.rotate(_0x4bfce6(-_0x5786ad + 10) + _0x5e038d);
                var _0x364019 = 0;
                var _0x3f92eb = this.rad;
                var _0x26d1c9 = _0x179a77 * 2 * 0.7;
                var _0x2016dd = _0x179a77 * 2.3;
                var _0x1f4fc2 = 0.5;
                var _0x3628ea = 1.6;
                _0x39e82d.drawImage(_0x4a8efc, _0x364019 + _0x26d1c9 * -_0x1f4fc2, _0x3f92eb + _0x2016dd * -_0x3628ea, _0x26d1c9, _0x2016dd);
                _0x39e82d.restore();
            }
            var _0x4a8efc = this.getSkinImageObj("skins/honeybee/0/" + this.animalSubSpecies + "/honeybee_wing1.png");
            if (_0x4a8efc) {
                _0x39e82d.save();
                var _0x5e038d = -(-_0x9076f3 + frame2) * _0x4bfce6(_0x664f5b - 5);
                _0x39e82d.globalAlpha = 0.6;
                _0x39e82d.rotate(_0x4bfce6(_0x5786ad - 10) + _0x5e038d);
                var _0x364019 = 0;
                var _0x3f92eb = this.rad;
                var _0x26d1c9 = _0x179a77 * 2.3 * 0.7;
                var _0x2016dd = _0x179a77 * 2.3;
                var _0x1f4fc2 = 0.5;
                var _0x3628ea = 1.6;
                _0x39e82d.drawImage(_0x4a8efc, _0x364019 + _0x26d1c9 * -_0x1f4fc2, _0x3f92eb + _0x2016dd * -_0x3628ea, _0x26d1c9, _0x2016dd);
                _0x39e82d.restore();
            }
            var _0x4a8efc = this.getSkinImageObj("skins/honeybee/0/" + this.animalSubSpecies + "/honeybee_wing1.png");
            if (_0x4a8efc) {
                _0x39e82d.save();
                var _0x5e038d = -(-_0x9076f3 + _0x44d0a5) * _0x4bfce6(_0x664f5b);
                _0x39e82d.globalAlpha = 0.5;
                _0x39e82d.rotate(_0x4bfce6(_0x5786ad) + _0x5e038d);
                var _0x364019 = 0;
                var _0x3f92eb = this.rad;
                var _0x26d1c9 = _0x179a77 * 2 * 0.7;
                var _0x2016dd = _0x179a77 * 2.3;
                var _0x1f4fc2 = 0.5;
                var _0x3628ea = 1.7;
                _0x39e82d.drawImage(_0x4a8efc, _0x364019 + _0x26d1c9 * -_0x1f4fc2, _0x3f92eb + _0x2016dd * -_0x3628ea, _0x26d1c9, _0x2016dd);
                _0x39e82d.restore();
            }
            var _0x4a8efc = this.getSkinImageObj("skins/honeybee/0/" + this.animalSubSpecies + "/honeybee_wing2.png");
            if (_0x4a8efc) {
                _0x39e82d.save();
                var _0x5e038d = -(-_0x9076f3 + _0x44d0a5) * _0x4bfce6(-_0x664f5b);
                _0x39e82d.globalAlpha = 0.5;
                _0x39e82d.rotate(_0x4bfce6(-_0x5786ad) + _0x5e038d);
                var _0x364019 = 0;
                var _0x3f92eb = this.rad;
                var _0x26d1c9 = _0x179a77 * 2 * 0.7;
                var _0x2016dd = _0x179a77 * 2.3;
                var _0x1f4fc2 = 0.5;
                var _0x3628ea = 1.7;
                _0x39e82d.drawImage(_0x4a8efc, _0x364019 + _0x26d1c9 * -_0x1f4fc2, _0x3f92eb + _0x2016dd * -_0x3628ea, _0x26d1c9, _0x2016dd);
                _0x39e82d.restore();
            }
            _0x39e82d.restore();
        };

        function _0x57c973() {
            _0x57c973.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x57c973, _0x48c056, _0x438400);
        var _0x28c171 = Animal;
        _0x2eefb8.prototype = Object.create(_0x28c171.prototype);
        _0x2eefb8.prototype.constructor = _0x2eefb8;
        _0x2eefb8.superClass = _0x28c171;
        _0x2eefb8.prototype.animalInfo = function() {
            var _0x567462 = {};
            var _0xa8db02 = this.animalSpecies;
            switch (this.animalSpecies) {
                case 0:
                    _0x567462.aniName = "The Phoenix";
                    break;
                case 1:
                    _0x567462.aniName = "Golden Phoenix";
                    break;
                case 2:
                    _0x567462.aniName = "Alpha Phoenix";
                    break;
                case 3:
                    _0x567462.aniName = "Copper Phoenix";
                    break;
                case 111:
                    _0x567462.aniName = "Classic Phoenix";
                    break;
                case 200:
                    _0xa8db02 = "/" + this.animalSubSpecies;
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0x567462.aniName = "Aqua Phoenix";
                            break;
                        case 1:
                            _0x567462.aniName = "Ice Phoenix";
                            break;
                        case 2:
                            _0x567462.aniName = "Ash Phoenix";
                            break;
                        case 3:
                            _0x567462.aniName = "Red Giant Phoenix";
                            break;
                        case 4:
                            _0x567462.aniName = "Astral Phoenix";
                            break;
                    }
                    break;
            }
            _0x567462.aniCol = "#FF9000";
            _0x567462.skinName = this.getSkinName();
            _0x567462.upgradeText = "UPGRADED to " + _0x567462.aniName + "!\nPhoenix shoot Firetornados to burn their prey alive!";
            return _0x567462;
        };
        _0x2eefb8.prototype.getSkinImageObj = function(_0x39335d) {
            if (_0x2480f7) {
                return;
            }
            var _0x3a49cd = this.animalSpecies === 1 || this.animalSpecies === 2 || this.animalSpecies === 200 ? 1 : this.mopeSeasonID;
            return this.getSkinImageObjForSeason(_0x39335d, _0x3a49cd);
        };
        _0x2eefb8.prototype.getAbilityInfo = function(_0x3053b2) {
            var _0x7ba6cd = {};
            var _0x2dfaf5 = this.animalSpecies;
            if (this.animalSpecies == 200) {
                _0x2dfaf5 += "/" + this.animalSubSpecies;
            }
            _0x7ba6cd.abilName = "Fire Tornado!";
            _0x7ba6cd.abilImg = "skins/volcano/phoenix/" + _0x2dfaf5 + "/firetornado.png";
            _0x7ba6cd.skinThemeID = this.skinThemeID;
            _0x7ba6cd.mopeSeasonID = this.mopeSeasonID;
            return _0x7ba6cd;
        };
        _0x2eefb8.prototype.getSkinName = function() {
            var _0xdc3d9f = this.animalSpecies;
            if (this.animalSpecies == 200) {
                _0xdc3d9f += "/" + this.animalSubSpecies;
            }
            return "/volcano/phoenix/" + _0xdc3d9f + "/phoenix" + (this.specType == 0 || this.specType == undefined ? "" : this.specType);
        };
        _0x2eefb8.prototype.getSkinPart = function(_0x10f6cf) {
            var _0x16df9a = this.animalSpecies;
            if (this.animalSpecies == 200) {
                _0x16df9a += "/" + this.animalSubSpecies;
            }
            return this.getSkinImageObj("skins/volcano/phoenix/" + _0x16df9a + "/" + _0x10f6cf + ".png");
        };
        _0x2eefb8.prototype.drawSkinImg = function() {
            if (_0x5981a2 != _0x4051d6 && !_0x1d523b && !_0x2afba4 && this.animalSpecies != 200) {
                var _0x8e3a84 = 500 / 340;
                var _0x284f3b = this.rad - this.outlineW;
                var _0x16131e = this.getSkinPart("phoenix_body");
                var _0x269227 = this.getSkinPart("phoenix_head");
                var _0x55165b = Math.trunc(_0x4ec996 / 166) % 6;
                var _0x47bf54 = this.getSkinPart("/tail_mid/tail_mid_" + _0x55165b);
                if (_0x47bf54) {
                    _0x39e82d.drawImage(_0x47bf54, -_0x284f3b * _0x8e3a84, -_0x284f3b * _0x8e3a84, _0x284f3b * 2 * _0x8e3a84, _0x284f3b * 2 * _0x8e3a84);
                }
                var _0x55165b = Math.trunc(_0x4ec996 / 166) % 6;
                var _0x5e1d0c = Math.trunc(_0x4ec996 / 250) % 6;
                var _0x4f4896 = this.getSkinPart("/tail/tail_" + _0x55165b);
                var _0x51b7c1 = this.getSkinPart("tail_flipped/tail_" + _0x5e1d0c);
                if (_0x4f4896) {
                    _0x39e82d.drawImage(_0x4f4896, -_0x284f3b * _0x8e3a84, -_0x284f3b * _0x8e3a84, _0x284f3b * 2 * _0x8e3a84, _0x284f3b * 2 * _0x8e3a84);
                }
                if (_0x51b7c1) {
                    _0x39e82d.drawImage(_0x51b7c1, -_0x284f3b * _0x8e3a84, -_0x284f3b * _0x8e3a84, _0x284f3b * 2 * _0x8e3a84, _0x284f3b * 2 * _0x8e3a84);
                }
                if (_0x16131e) {
                    _0x39e82d.drawImage(_0x16131e, -_0x284f3b * _0x8e3a84, -_0x284f3b * _0x8e3a84, _0x284f3b * 2 * _0x8e3a84, _0x284f3b * 2 * _0x8e3a84);
                }
                var _0x2cf69a = Math.trunc(_0x4ec996 / 125) % 8;
                var _0x5337b0 = Math.trunc(_0x4ec996 / 150) % 8;
                var _0x22523a = this.getSkinPart("wing_flame_orange/wing_flame_orange_" + _0x2cf69a);
                var _0x3ce56f = this.getSkinPart("wing_flame_yellow/wing_flame_yellow_" + _0x5337b0);
                if (_0x22523a) {
                    _0x39e82d.drawImage(_0x22523a, -_0x284f3b * _0x8e3a84, -_0x284f3b * _0x8e3a84, _0x284f3b * 2 * _0x8e3a84, _0x284f3b * 2 * _0x8e3a84);
                }
                if (_0x3ce56f) {
                    _0x39e82d.drawImage(_0x3ce56f, -_0x284f3b * _0x8e3a84, -_0x284f3b * _0x8e3a84, _0x284f3b * 2 * _0x8e3a84, _0x284f3b * 2 * _0x8e3a84);
                }
                var _0x5668d5 = this.getSkinPart("wing_flame_orange_flipped/wing_flame_orange_" + _0x2cf69a);
                var _0x3c8998 = this.getSkinPart("wing_flame_yellow_flipped/wing_flame_yellow_" + _0x5337b0);
                if (_0x5668d5) {
                    _0x39e82d.drawImage(_0x5668d5, -_0x284f3b * _0x8e3a84, -_0x284f3b * _0x8e3a84, _0x284f3b * 2 * _0x8e3a84, _0x284f3b * 2 * _0x8e3a84);
                }
                if (_0x3c8998) {
                    _0x39e82d.drawImage(_0x3c8998, -_0x284f3b * _0x8e3a84, -_0x284f3b * _0x8e3a84, _0x284f3b * 2 * _0x8e3a84, _0x284f3b * 2 * _0x8e3a84);
                }
                if (_0x269227) {
                    _0x39e82d.drawImage(_0x269227, -_0x284f3b * _0x8e3a84, -_0x284f3b * _0x8e3a84, _0x284f3b * 2 * _0x8e3a84, _0x284f3b * 2 * _0x8e3a84);
                }
            } else {
                _0x2eefb8.superClass.prototype.drawSkinImg.call(this);
            }
            if (this.animalSubSpecies === 4) {
                const _0x22a47a = this.getSkinPart("glow");
                if (_0x22a47a) {
                    _0x39e82d.globalAlpha = Math.sin(_0x4ec996 / 1000) * 0.5 + 0.5;
                    var _0x8e3a84 = this.skinScale;
                    var _0x284f3b = this.getAniRadius(this.skinRad);
                    _0x39e82d.drawImage(_0x22a47a, -_0x284f3b * _0x8e3a84, -_0x284f3b * _0x8e3a84, _0x284f3b * 2 * _0x8e3a84, _0x284f3b * 2 * _0x8e3a84);
                }
            }
        };
        _0x2eefb8.prototype.drawWhenUnderwater = function() {
            var _0x3c1d83 = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x4cc144 = 1.5;
            var _0x405fdf = 1;
            var _0x12abfe = _0x405fdf * Math.sin(Math.PI * 2 / _0x4cc144 * _0x3c1d83);
            var _0x2ea608 = "#f9d43b";
            _0x39e82d.globalAlpha = 0.3;
            _0x39e82d.fillStyle = _0x2ea608;
            var _0x1b13f6 = this.flag_underWater ? this.rad * 0.15 : this.rad * 0.1;
            _0x39e82d.beginPath();
            _0x39e82d.arc(this.rad * -0.35, this.rad * -0.33, Math.max(0, _0x1b13f6 + _0x12abfe), 0, Math.PI * 2);
            _0x39e82d.fill();
            _0x39e82d.beginPath();
            _0x39e82d.arc(this.rad * 0.35, this.rad * -0.32, Math.max(0, _0x1b13f6 - _0x12abfe), 0, Math.PI * 2);
            _0x39e82d.fill();
            _0x39e82d.beginPath();
            _0x39e82d.arc(this.rad * 0.35, this.rad * 0.36, Math.max(0, _0x1b13f6 + _0x12abfe), 0, Math.PI * 2);
            _0x39e82d.fill();
            _0x39e82d.beginPath();
            _0x39e82d.arc(this.rad * -0.35, this.rad * 0.35, Math.max(0, _0x1b13f6 - _0x12abfe), 0, Math.PI * 2);
            _0x39e82d.fill();
        };

        function _0x2eefb8() {
            _0x2eefb8.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x2eefb8, _0x48c056, _0x27033a);
        var _0x28c171 = Animal;
        _0x25a990.prototype = Object.create(_0x28c171.prototype);
        _0x25a990.prototype.constructor = _0x25a990;
        _0x25a990.superClass = _0x28c171;
        _0x25a990.prototype.animalInfo = function() {
            var _0x3b3137 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x3b3137.aniName = "Pigeon";
                    break;
                case 1:
                    _0x3b3137.aniName = "Rare White Dove";
                    _0x3b3137.upgradeText += "\n(Doves fly faster!)";
                    break;
                case 111:
                    _0x3b3137.aniName = "Classic Pigeon";
                    break;
                case 112:
                    _0x3b3137.aniName = "Gold-trim Pigeon";
                    break;
                case 202:
                    _0x3b3137.aniName = "Thug Pigeon";
                    break;
            }
            _0x3b3137.aniCol = "#FF9000";
            _0x3b3137.skinName = this.getSkinName();
            _0x3b3137.upgradeText = "UPGRADED to " + _0x3b3137.aniName + "!\nHold W to fly around. ";
            return _0x3b3137;
        };
        _0x25a990.prototype.getSkinName = function() {
            let _0x39f535 = this.getSpeciesPath() + "/pigeon";
            _0x39f535 += this.specType == 0 ? "" : this.specType;
            return _0x39f535;
        };
        _0x25a990.prototype.getSpeciesPath = function() {
            return "land/pigeon/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x25a990.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x25a990.prototype.getWing = function(_0x2fd54c) {
            var _0xe39aac = "skins/" + this.getSpeciesPath();
            _0xe39aac += "/pigeon_wing" + _0x2fd54c + ".png";
            return _0xe39aac;
        };
        _0x25a990.prototype.getHead = function() {
            var _0x9ff3f0 = "skins/" + this.getSpeciesPath();
            _0x9ff3f0 += "/pigeon_head.png";
            return _0x9ff3f0;
        };
        _0x25a990.prototype.theFrame = 0;
        _0x25a990.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                return;
            }
            var _0x3e0152 = "skins";
            {
                var _0x51669b = 500 / 340;
                if (this.flag_flying && !this.flag_isGrabbed) {
                    _0x39e82d.save();
                    var _0x19c1b8 = _0x4e4bab("bird", this.spawnTime);
                    if (_0x19c1b8 !== undefined && _0x19c1b8 != null) {
                        this.theFrame = _0x19c1b8;
                    }
                    var _0xee0b4b = _0x5981a2 != _0x4051d6 && !_0x1d523b ? this.theFrame : this.birdNoAnimationFlyWingAngle;
                    var _0x3b6471 = this.getSkinImageObj(this.getWing(1));
                    if (_0x3b6471) {
                        _0x39e82d.save();
                        var _0x2b78fb = -(-0.2 + _0xee0b4b) * _0x439930;
                        var _0x416e59 = this.rad * 0.8;
                        _0x39e82d.rotate(_0x506969 + _0x2b78fb);
                        var _0x23fdaa = 0;
                        var _0x1dc604 = this.rad;
                        var _0x1439be = _0x416e59 * 2 * 0.62;
                        var _0x11b0c8 = _0x416e59 * 2.5;
                        var _0x1e2179 = 0.2;
                        var _0x235fcb = 1.7;
                        _0x39e82d.drawImage(_0x3b6471, _0x23fdaa + _0x1439be * -_0x1e2179, _0x1dc604 + _0x11b0c8 * -_0x235fcb, _0x1439be, _0x11b0c8);
                        _0x39e82d.restore();
                    }
                    var _0x3b6471 = this.getSkinImageObj(this.getWing(2));
                    if (_0x3b6471) {
                        _0x39e82d.save();
                        var _0x2b78fb = -(-0.2 + _0xee0b4b) * _0x4bfce6(-90);
                        var _0x416e59 = this.rad * 0.8;
                        _0x39e82d.rotate(_0x4bfce6(-45) + _0x2b78fb);
                        var _0x23fdaa = 0;
                        var _0x1dc604 = this.rad;
                        var _0x1439be = _0x416e59 * 2 * 0.62;
                        var _0x11b0c8 = _0x416e59 * 2.5;
                        var _0x1e2179 = 0.8;
                        var _0x235fcb = 1.7;
                        _0x39e82d.drawImage(_0x3b6471, _0x23fdaa + _0x1439be * -_0x1e2179, _0x1dc604 + _0x11b0c8 * -_0x235fcb, _0x1439be, _0x11b0c8);
                        _0x39e82d.restore();
                    }
                    _0x39e82d.restore();
                }
                if (this.specType != 0 && this.specType != undefined) {
                    var _0x4d8ebb = this.getSkinImageObj(this.getHead());
                    if (_0x4d8ebb) {
                        _0x39e82d.save();
                        var _0x416e59 = this.rad;
                        _0x39e82d.drawImage(_0x4d8ebb, -_0x416e59 * _0x51669b, (-_0x416e59 + _0x416e59 * 0.1) * _0x51669b, _0x416e59 * 2 * _0x51669b, _0x416e59 * 2 * _0x51669b);
                        _0x39e82d.restore();
                    }
                }
            }
        };

        function _0x25a990() {
            _0x25a990.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x25a990, _0x48c056, _0x2b4863);
        var _0x28c171 = Animal;
        _0x1c5e0c.prototype = Object.create(_0x28c171.prototype);
        _0x1c5e0c.prototype.constructor = _0x1c5e0c;
        _0x1c5e0c.superClass = _0x28c171;
        _0x1c5e0c.prototype.getSpeciesPath = function(_0x224e33) {
            var _0x240476 = "/land/" + _0x224e33 + "/" + this.animalSpecies + (this.animalSpecies == 4 ? "/" + this.animalSubSpecies : "");
            return _0x240476;
        };
        _0x1c5e0c.prototype.getWing = function(_0x56f051, _0x2c9b91, _0x1b7219) {
            var _0x5a6246 = "skins/";
            switch (this.animalSpecies) {
                case 5:
                case 6:
                case 200:
                case 220:
                    _0x5a6246 += this.getSpeciesPath(_0x56f051);
                    break;
                default:
                    _0x5a6246 += "land/" + _0x56f051;
            }
            switch (_0x2c9b91) {
                case 1:
                    _0x5a6246 += "/" + _0x56f051 + "_wing1.png";
                    break;
                case 2:
                    _0x5a6246 += "/" + _0x56f051 + "_wing2.png";
                    break;
            }
            return _0x5a6246;
        };
        _0x1c5e0c.prototype.animalInfo = function() {
            var _0x33173f = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x33173f.aniName = "Toco Toucan";
                    break;
                case 1:
                    _0x33173f.aniName = "Choco Toucan";
                    break;
                case 2:
                    _0x33173f.aniName = "Keel-Billed Toucan";
                    break;
                case 3:
                    _0x33173f.aniName = "Fiery Toucan";
                    break;
                case 4:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0x33173f.aniName = "Lava Toucan";
                            break;
                        case 1:
                            _0x33173f.aniName = "Ice Toucan";
                            break;
                        case 2:
                            _0x33173f.aniName = "Aqua Toucan";
                            break;
                    }
                    break;
                case 5:
                    _0x33173f.aniName = "Helmeted Hornbill";
                    break;
                case 6:
                    _0x33173f.aniName = "Prisma Toucan";
                    break;
                case 100:
                    _0x33173f.aniName = "The Dapper";
                    break;
                case 111:
                    _0x33173f.aniName = "Classic Toucan";
                    break;
                case 200:
                    _0x33173f.aniName = "Ice Toucan";
                    break;
                case 112:
                    _0x33173f.aniName = "Gold-trim Toucan";
                    break;
                case 202:
                    _0x33173f.aniName = "Corpse Flower Toucan";
                    break;
                case 220:
                    _0x33173f.aniName = "Molten Toucan";
                    break;
            }
            _0x33173f.upgradeText = "UPGRADED to " + _0x33173f.aniName + "!\nHold right click (or W) to fly!\n(HINT: Start flying from a fruit tree or bush to throw fruit upon landing!)";
            _0x33173f.aniCol = "#FF9000";
            _0x33173f.skinName = this.getSpeciesPath("toucan") + "/toucan";
            return _0x33173f;
        };
        _0x1c5e0c.prototype.getSkinName = function() {
            var _0x49769b = this.getSpeciesPath("toucan") + "/toucan" + (this.specType == 0 ? "" : this.specType);
            return _0x49769b;
        };
        _0x1c5e0c.prototype.drawSkinCustomization = function() {
            var _0x574e01 = 500 / 340;
            if (!this.flag_usingAbility) {
                this.drawBeak();
                return;
            } {
                if (this.flag_flying && !this.flag_isGrabbed) {
                    _0x39e82d.save();
                    var _0x5e1551 = _0x4e4bab("bird", this.spawnTime);
                    if (_0x5e1551 !== undefined && _0x5e1551 != null) {
                        this.theFrame = _0x5e1551;
                    }
                    var _0x1d357f = _0x5981a2 != _0x4051d6 && !_0x1d523b ? this.theFrame : this.birdNoAnimationFlyWingAngle;
                    var _0x2f4c2a = this.getSkinImageObj(this.getWing("toucan", 1, true));
                    if (_0x2f4c2a) {
                        _0x39e82d.save();
                        var _0x25bf8f = -(-0.2 + _0x1d357f) * _0x439930;
                        var _0x588f58 = this.rad * 0.8;
                        _0x39e82d.rotate(_0x4bfce6(45) + _0x25bf8f);
                        var _0x2e022e = 0;
                        var _0x19d074 = this.rad;
                        var _0x51497a = _0x588f58 * 2 * 0.62;
                        var _0x374ca2 = _0x588f58 * 2.5;
                        var _0x3afc2b = 0.2;
                        var _0xb8870e = 1.7;
                        _0x39e82d.drawImage(_0x2f4c2a, _0x2e022e + _0x51497a * -_0x3afc2b, _0x19d074 + _0x374ca2 * -_0xb8870e, _0x51497a, _0x374ca2);
                        _0x39e82d.restore();
                    }
                    var _0x2f4c2a = this.getSkinImageObj(this.getWing("toucan", 2, true));
                    if (_0x2f4c2a) {
                        _0x39e82d.save();
                        var _0x25bf8f = -(-0.2 + _0x1d357f) * _0x4bfce6(-90);
                        var _0x588f58 = this.rad * 0.8;
                        _0x39e82d.rotate(_0x4bfce6(-45) + _0x25bf8f);
                        var _0x2e022e = 0;
                        var _0x19d074 = this.rad;
                        var _0x51497a = _0x588f58 * 2 * 0.62;
                        var _0x374ca2 = _0x588f58 * 2.5;
                        var _0x3afc2b = 0.8;
                        var _0xb8870e = 1.7;
                        _0x39e82d.drawImage(_0x2f4c2a, _0x2e022e + _0x51497a * -_0x3afc2b, _0x19d074 + _0x374ca2 * -_0xb8870e, _0x51497a, _0x374ca2);
                        _0x39e82d.restore();
                    }
                    _0x39e82d.restore();
                }
                if (this.specType != 0 && this.specType != undefined) {
                    var _0x54625f = this.getSkinImageObj(this.getHead("toucan", true));
                    if (_0x54625f) {
                        _0x39e82d.save();
                        var _0x588f58 = this.rad;
                        _0x39e82d.drawImage(_0x54625f, -_0x588f58 * _0x574e01, (-_0x588f58 + _0x588f58 * 0.1) * _0x574e01, _0x588f58 * 2 * _0x574e01, _0x588f58 * 2 * _0x574e01);
                        _0x39e82d.restore();
                    }
                    this.drawBeak();
                }
            }
        };
        _0x1c5e0c.prototype.drawBeak = function() {
            if (this.mopeSeasonID != 2) {
                return;
            }
            var _0x69229 = 500 / 340;
            var _0x3b7fca = this.flag_flying && !this.flag_isGrabbed ? 0.25 : 0.1;
            var _0x35b2da = "skins/" + this.getSpeciesPath("toucan") + "/toucan_beak.png";
            var _0x3e824a = this.getSkinImageObj(_0x35b2da);
            if (_0x3e824a) {
                _0x39e82d.save();
                var _0x1d38e0 = this.rad;
                _0x39e82d.drawImage(_0x3e824a, -_0x1d38e0 * _0x69229, (-_0x1d38e0 + _0x1d38e0 * _0x3b7fca) * _0x69229, _0x1d38e0 * 2 * _0x69229, _0x1d38e0 * 2 * _0x69229);
                _0x39e82d.restore();
            }
        };

        function _0x1c5e0c() {
            _0x1c5e0c.superClass.call(this, _0x48c056);
            this.doesDrawEffectScale = false;
        }
        _0x35d268.setCustomClassForGameObjType(_0x1c5e0c, _0x48c056, _0x190fd6);
        var _0x28c171 = Animal;
        _0x85354f.prototype = Object.create(_0x28c171.prototype);
        _0x85354f.prototype.constructor = _0x85354f;
        _0x85354f.superClass = _0x28c171;
        _0x85354f.prototype.animalInfo = function() {
            var _0x248dff = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x248dff.aniName = "Tiger";
                    break;
                case 1:
                    _0x248dff.aniName = "Rare White Tiger";
                    break;
                case 111:
                    _0x248dff.aniName = "Classic Tiger";
                    break;
                case 112:
                    _0x248dff.aniName = "Gold-trim Tiger";
                    break;
                case 204:
                    _0x248dff.aniName = "Chimera Tiger";
                    break;
            }
            _0x248dff.aniDesc = "";
            _0x248dff.upgradeText = "UPGRADED to " + _0x248dff.aniName + "!\n Tigers can launch an ambush attack (HOLD W to grow a bush)!";
            _0x248dff.aniCol = "#FF9000";
            _0x248dff.skinName = this.getSkinName();
            return _0x248dff;
        };
        _0x85354f.prototype.getSkinName = function() {
            let _0xf36678 = this.getSpeciesPath() + "/tiger";
            _0xf36678 += this.specType == 0 ? "" : this.specType;
            return _0xf36678;
        };
        _0x85354f.prototype.getSpeciesPath = function() {
            return "land/tiger/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x85354f.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x85354f.prototype.getSkinImageObj = function(_0x321226) {
            var _0x386c5c = this.animalSpecies === 204 ? 1 : this.mopeSeasonID;
            return this.getSkinImageObjForSeason(_0x321226, _0x386c5c);
        };

        function _0x85354f() {
            _0x85354f.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x85354f, _0x48c056, _0x49687e);
        var _0x28c171 = Animal;
        _0x43657e.prototype = Object.create(_0x28c171.prototype);
        _0x43657e.prototype.constructor = _0x43657e;
        _0x43657e.superClass = _0x28c171;
        _0x43657e.prototype.animalInfo = function() {
            var _0x2b0b86 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x2b0b86.aniName = "Cobra";
                    break;
                case 100:
                    _0x2b0b86.aniName = "Wyrmous";
                    break;
                case 111:
                    _0x2b0b86.aniName = "Classic Cobra";
                    break;
                case 112:
                    _0x2b0b86.aniName = "Gold-trim Cobra";
                    break;
                case 200:
                    _0x2b0b86.aniName = "Celestial Cobra";
                    break;
            }
            _0x2b0b86.skinName = this.getSkinName();
            _0x2b0b86.aniDesc = "";
            _0x2b0b86.upgradeText = "UPGRADED to " + _0x2b0b86.aniName + "!\n Hold W to Spit venom, and poison animals with your bite!";
            _0x2b0b86.aniCol = "black";
            return _0x2b0b86;
        };
        _0x43657e.prototype.getAbilityInfo = function(_0x2b89bd) {
            var _0x561a5b = {
                abilName: "Venom Spit",
                abilImg: "skins/land/cobra/" + this.animalSpecies + "/cobra2.png",
                skinThemeID: this.skinThemeID,
                mopeSeasonID: this.mopeSeasonID
            };
            return _0x561a5b;
        };
        _0x43657e.prototype.getSkinName = function() {
            let _0x1827d8 = this.getSpeciesPath() + "/cobra";
            _0x1827d8 += this.flag_usingAbility ? "2" : "";
            return _0x1827d8;
        };
        _0x43657e.prototype.getSpeciesPath = function() {
            return "land/cobra/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x43657e.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x43657e.prototype.drawUnderSkinImg = function() {
            if (this.flag_usingAbility) {
                return;
            }
            var _0x46431f = this.rad - this.outlineW;
            var _0x4577cd = 500 / 340;
            var _0x56887a = "skins/" + this.getSpeciesPath() + "/tongue.png";
            var _0x116eef = this.getSkinImageObj(_0x56887a);
            var _0x2b115e = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x2f94ba = _0x5981a2 == _0x4051d6 ? 0 : _0x1b594e(_0x2b115e, 0.5, 5, 0.5);
            var _0x4b122c = _0x5981a2 == _0x4051d6 ? 0 : 5;
            if (_0x116eef) {
                _0x39e82d.drawImage(_0x116eef, -_0x46431f * _0x4577cd, -(_0x46431f + _0x4b122c + _0x2f94ba) * _0x4577cd, _0x46431f * 2 * _0x4577cd, _0x46431f * 2 * _0x4577cd);
            }
        };

        function _0x43657e() {
            _0x43657e.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x43657e, _0x48c056, _0x50e3b8);
        var _0x28c171 = GameObj;
        _0x54c863.prototype = Object.create(_0x28c171.prototype);
        _0x54c863.prototype.constructor = _0x54c863;
        _0x54c863.superClass = _0x28c171;
        _0x54c863.prototype.updateZ = function() {
            this.z = 1005;
        };
        _0x54c863.prototype.customDraw = function(_0x38ec20) {
            if (_0x5981a2 != _0x4051d6 && !_0x1d523b) {
                var _0x100d42 = Math.trunc(_0x4ec996 / 120) % 5;
                let _0x594ab1 = "gameobj/" + this.oType + "/" + this.speciesType + "/" + _0x100d42 + ".png";
                var _0x4c2757 = this.getSkinImageObj(_0x594ab1);
                if (_0x4c2757) {
                    var _0x23b80d = 0;
                    var _0x2cd746 = this.rad * 0.4;
                    var _0x508dc7 = this.rad * 2 * 4 / 3;
                    var _0x1365b7 = this.rad * 2;
                    var _0x14b6fd = 0.5;
                    var _0x4fd6de = 0.95;
                    _0x39e82d.save();
                    _0x39e82d.rotate(_0x4bfce6(0));
                    _0x39e82d.drawImage(_0x4c2757, _0x23b80d + _0x508dc7 * -_0x14b6fd, _0x2cd746 + _0x1365b7 * -_0x4fd6de, _0x508dc7, _0x1365b7);
                    _0x39e82d.restore();
                }
            } else {
                let _0x2dd498 = "gameobj/" + this.oType + "/" + this.speciesType + "/0.png";
                var _0x4c2757 = this.getSkinImageObj(_0x2dd498);
                if (_0x4c2757) {
                    var _0x23b80d = 0;
                    var _0x2cd746 = this.rad * 0.4;
                    var _0x508dc7 = this.rad * 2 * 4 / 3;
                    var _0x1365b7 = this.rad * 2;
                    var _0x14b6fd = 0.5;
                    var _0x4fd6de = 0.95;
                    _0x39e82d.save();
                    _0x39e82d.rotate(_0x4bfce6(0));
                    _0x39e82d.drawImage(_0x4c2757, _0x23b80d + _0x508dc7 * -_0x14b6fd, _0x2cd746 + _0x1365b7 * -_0x4fd6de, _0x508dc7, _0x1365b7);
                    _0x39e82d.restore();
                }
            }
        };
        _0x54c863.prototype.readCustomData_onNewlyVisible = function(_0x18c23d) {
            _0x54c863.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x18c23d);
            this.speciesType = _0x18c23d.readUInt16();
            this.speciesSubType = _0x18c23d.readUInt16();
        };

        function _0x54c863() {
            _0x54c863.superClass.call(this, _0x3ac4e6);
            this.webTransparency = 0;
            this.doesDrawEffectScale = true;
            this.drawEffectScale_Slow = true;
        }
        _0x35d268.setCustomClassForGameObjType(_0x54c863, _0x3ac4e6);
        var _0x28c171 = GameObj;
        _0x52636b.prototype = Object.create(_0x28c171.prototype);
        _0x52636b.prototype.constructor = _0x52636b;
        _0x52636b.superClass = _0x28c171;
        _0x52636b.prototype.updateZ = function() {
            this.z = 1005;
        };
        _0x52636b.prototype.ANIMATION_NAME = "fireball";
        _0x52636b.prototype.customDraw = function(_0x4f35e0) {
            if (_0x5981a2 != _0x4051d6 && !_0x1d523b) {
                let _0x21f0c8 = _0x4e4bab(this.ANIMATION_NAME, this.spawnTime);
                if (_0x21f0c8 == null || _0x21f0c8 == NaN) {
                    _0x21f0c8 = 0;
                }
                var _0x185075 = Math.trunc(_0x4ec996 / 120) % 5;
                let _0x577ecd = "gameobj/" + this.oType + "/" + this.speciesType + "/" + _0x185075 + ".png";
                var _0x1d018a = this.getSkinImageObj(_0x577ecd);
                if (_0x1d018a) {
                    var _0x32a034 = 0;
                    var _0x403c6d = this.rad * 0.4;
                    var _0x3a6993 = this.rad * 2 * (2 + _0x21f0c8 * 2) / 3;
                    var _0x377165 = this.rad * 3.5 * _0x21f0c8;
                    var _0x1274f2 = 0.5;
                    var _0x417013 = 0.95;
                    _0x39e82d.save();
                    {
                        _0x39e82d.globalAlpha *= this.onFireEffA * _0x21f0c8;
                        _0x39e82d.rotate(this.angle);
                        _0x39e82d.drawImage(_0x1d018a, _0x32a034 + _0x3a6993 * -_0x1274f2, _0x403c6d + _0x377165 * -_0x417013, _0x3a6993, _0x377165);
                    }
                    _0x39e82d.restore();
                }
            } else {
                let _0x3897f5 = "gameobj/" + this.oType + "/" + this.speciesType + "/0.png";
                var _0x1d018a = this.getSkinImageObj(_0x3897f5);
                if (_0x1d018a) {
                    var _0x32a034 = 0;
                    var _0x403c6d = this.rad * 0.4;
                    var _0x3a6993 = this.rad * 2 * 4 / 3;
                    var _0x377165 = this.rad * 3.5;
                    var _0x1274f2 = 0.5;
                    var _0x417013 = 0.95;
                    _0x39e82d.save();
                    {
                        _0x39e82d.rotate(this.angle);
                        _0x39e82d.drawImage(_0x1d018a, _0x32a034 + _0x3a6993 * -_0x1274f2, _0x403c6d + _0x377165 * -_0x417013, _0x3a6993, _0x377165);
                    }
                    _0x39e82d.restore();
                }
            }
        };
        _0x52636b.prototype.readCustomData_onNewlyVisible = function(_0x3d5f6f) {
            _0x52636b.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x3d5f6f);
            this.speciesType = _0x3d5f6f.readUInt16();
            this.speciesSubType = _0x3d5f6f.readUInt16();
        };

        function _0x52636b() {
            _0x52636b.superClass.call(this, _0x4eb74c);
        }
        _0x35d268.setCustomClassForGameObjType(_0x52636b, _0x4eb74c);
        var _0x28c171 = GameObj;
        _0x9a403.prototype = Object.create(_0x28c171.prototype);
        _0x9a403.prototype.constructor = _0x9a403;
        _0x9a403.superClass = _0x28c171;
        _0x9a403.prototype.nickName = "mope.io";
        _0x9a403.prototype.fadeAway = false;
        _0x9a403.prototype.webTransparency = 100;
        _0x9a403.prototype.carcassType = 0;
        _0x9a403.prototype.updateZ = function() {
            if (this.flag_flying) {
                this.z = 100000 + this.rad / 10;
            } else {
                this.z = -100;
            }
        };
        _0x9a403.prototype.getNameSize = function() {
            return 6;
        };
        _0x9a403.prototype.setNick = function(_0xb81dc) {
            _0xb81dc = _0x292e5a(_0xb81dc);
            this.nickName = _0xb81dc;
            if (this.nickTXT == null) {
                this.nickTXT = new _0x123582(this.getNameSize(), "#FFFFFF");
                this.nickTXT.strokeW = 1.5;
                this.nickTXT.renderScale = 5;
                this.nickTXT.setText(this.nickName);
            } else {
                this.nickTXT.setFontSize(this.getNameSize());
                this.nickTXT.setText(this.nickName);
            }
        };
        _0x9a403.prototype.customDraw = function(_0x5d8aa9) {
            _0x39e82d.save();
            var _0x463ef2 = 0.3;
            if (this.fadeAway) {
                var _0x154f66 = this.webTransparency / 100;
                _0x39e82d.globalAlpha = _0x154f66;
                _0x463ef2 = Math.min(_0x463ef2, _0x154f66);
            } else {
                _0x39e82d.globalAlpha = 0.8;
            }
            var _0x3e0d5f = this.getSkinImageObj("gameobj/" + this.oType + "/" + this.carcassType + ".png");
            if (_0x3e0d5f) {
                var _0x5a77fe = this.rad;
                _0x39e82d.rotate(this.angle);
                _0x39e82d.drawImage(_0x3e0d5f, -_0x5a77fe, -_0x5a77fe, _0x5a77fe * 2, _0x5a77fe * 2);
            }
            _0x39e82d.restore();
            this.drawNickName(_0x463ef2);
        };
        _0x9a403.prototype.drawNickName = function(_0xaedf0) {
            if (!this.spawnedFromDeadAni) {
                return;
            }
            if (this.nickName && this.nickTXT && !_0x26aab4) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = _0xaedf0;
                this.nickTXT.x = 0;
                this.nickTXT.y = this.rad;
                this.nickTXT.draw();
                _0x39e82d.restore();
            }
        };
        _0x9a403.prototype.spawnedFromDeadAni = false;
        _0x9a403.prototype.readCustomData_onNewlyVisible = function(_0x1f726c) {
            this.spawnedFromDeadAni = _0x1f726c.readUInt8() == 1;
            this.animalType = _0x1f726c.readUInt16();
            this.animalHomeBiome = _0x1f726c.readUInt8();
            this.carcassType = this.lookupCarcassType();
            var _0x5dd053 = _0x1f726c.readString();
            this.fadeAway = _0x1f726c.readUInt8() == 1;
            if (this.fadeAway) {
                this.webTransparency = _0x1f726c.readUInt16();
            }
            if (this.spawnedFromDeadAni) {
                this.setNick(_0x5dd053 ? _0x5dd053 : "mope.io");
            }
        };
        const _0x2e14f7 = 0;
        const _0x547289 = 1;
        const _0x441ec3 = 2;
        const _0x21f160 = 3;
        const _0x1096b9 = 4;
        const _0x478412 = 5;
        const _0x371823 = 6;
        const _0x341c0a = 7;
        const _0x79d3c = 8;
        const _0x1da566 = 9;
        const _0x423502 = 10;
        const _0xaa2ed8 = 11;
        const _0xd4ac4d = 12;
        const _0x144300 = 13;
        const _0x128fdc = 14;
        const _0x3b999d = 15;
        const _0x441a82 = 16;
        const _0x2717a9 = 17;
        const _0x36c477 = 18;
        const _0x238215 = 19;
        const _0x5e5b3a = 20;
        _0x9a403.prototype.lookupCarcassType = function() {
            const _0x1b981f = {
                [_0x3b999d]: [_0x5642bc, _0x5c13ab],
                [_0x1096b9]: [_0x371ea0],
                [_0x478412]: [_0x50431e],
                [_0x1096b9]: [_0x371ea0],
                [_0x441ec3]: [_0x471048, _0x50e3b8],
                [_0x1da566]: [_0x499275],
                [_0x423502]: [_0x36539e, _0x5ed5f7],
                [_0x36c477]: [_0x273128],
                [_0x238215]: [_0x1bba03],
                [_0x5e5b3a]: [_0x145a21],
                [_0x2717a9]: [_0x21b167],
                [_0x79d3c]: [_0x51851f],
                [_0x341c0a]: [_0xbc1c26, _0x46adbf, _0x519f92],
                [_0xd4ac4d]: [_0x27c6df],
                [_0x128fdc]: [_0x4a37d4, _0x504f20],
                [_0x144300]: [_0x9f0228],
                [_0xaa2ed8]: [_0x32b37a],
                [_0x441a82]: [_0x47e6fe, _0x370aae],
                [_0x371823]: [_0x563e19, _0x78a6fc, _0x1d87e9, _0x2e1cf4],
                [_0x547289]: [_0x4e8c9f, _0x532f26, _0x116c1b, _0x4c676b, _0x27033a, a_birdMonster, _0x1c9f19, _0x2b4863, _0x190fd6, _0x57d22f, _0x3adb75, _0x2e29dc, _0x8f4f69, _0x30aab5, _0x45fb63, _0x2be8a3, _0x1c7e65, _0x1f5222, _0x49b249, _0x31189f, _0x3afb27, _0x5b6d09]
            };
            if (_0x1b981f instanceof Array) {
                const _0x2f0509 = Object.keys(_0x1b981f);
                for (let _0x2ef516 = 0; _0x2ef516 < _0x2f0509.length; _0x2ef516++) {
                    const _0x15f480 = _0x2f0509[_0x2ef516];
                    if (_0x1b981f[_0x15f480].includes(this.animalType)) {
                        return _0x15f480;
                    }
                }
            }
            if (this.animalHomeBiome == _0x5d8525) {
                return _0x21f160;
            }
            return _0x2e14f7;
        };
        _0x9a403.prototype.readUpdatedProperty = function(_0xc38a67, _0x2e2fb6) {
            if (_0xc38a67 == _0x26b779) {
                this.flag_flying = _0x2e2fb6.readUInt8() == 1;
            } else if (_0xc38a67 == _0x435286) {
                this.webTransparency = _0x2e2fb6.readUInt16();
            }
        };

        function _0x9a403() {
            _0x9a403.superClass.call(this, _0x167c4d);
            this.shrinkedRad = 0;
        }
        _0x35d268.setCustomClassForGameObjType(_0x9a403, _0x167c4d);
        var _0x28c171 = GameObj;
        _0x60f054.prototype = Object.create(_0x28c171.prototype);
        _0x60f054.prototype.constructor = _0x60f054;
        _0x60f054.superClass = _0x28c171;
        _0x60f054.prototype.chilliType = 0;
        _0x60f054.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x60f054.prototype.setSkinPath = function() {
            var _0x4b7bba = "chilli";
            _0x4b7bba += this.isEdibleOutlined() ? "_e" : "";
            this.objSkinPath = "gameobj/" + this.oType + "/" + this.chilliType + "/" + _0x4b7bba + ".png";
        };
        _0x60f054.prototype.customDraw = function(_0x342071) {
            _0x39e82d.save();
            var _0x2258fb = this.getSkinImageObj(this.objSkinPath);
            if (_0x2258fb) {
                var _0x6605b9 = this.rad;
                if (this.specType2 == 1) {
                    if (this.angle == 0) {
                        this.angle = this.rPer * Math.PI * 2;
                    }
                    this.angle += 0.4;
                    _0x39e82d.rotate(this.angle);
                } else if (this.specType2 == 2) {
                    _0x39e82d.rotate(this.angle);
                } else {
                    _0x39e82d.rotate(this.rPer * Math.PI * 2);
                }
                _0x39e82d.drawImage(_0x2258fb, -_0x6605b9, -_0x6605b9, _0x6605b9 * 2, _0x6605b9 * 2);
            }
            _0x39e82d.restore();
        };
        _0x60f054.prototype.readCustomData_onNewlyVisible = function(_0x1dfc08) {
            this.chilliType = _0x1dfc08.readUInt8();
        };

        function _0x60f054() {
            _0x60f054.superClass.call(this, _0x1d2c49);
            this.doesDrawEffectScale = false;
        }
        _0x35d268.setCustomClassForGameObjType(_0x60f054, _0x1d2c49);
        var _0x28c171 = Animal;
        _0x474478.prototype = Object.create(_0x28c171.prototype);
        _0x474478.prototype.constructor = _0x474478;
        _0x474478.superClass = _0x28c171;
        _0x474478.prototype.objSkinSpotsCanvas = null;
        _0x474478.prototype.animalInfo = function() {
            var _0x59ce17 = {};
            this.animalName = "";
            switch (this.animalSpecies) {
                case 0:
                    _0x59ce17.aniName = "Cheetah";
                    _0x59ce17.upgradeText = "UPGRADED to Cheetah!\n Press W to get a speed boost!";
                    this.animalName = "cheetah";
                    break;
                case 1:
                    _0x59ce17.aniName = "Jaguar";
                    _0x59ce17.upgradeText = "UPGRADED to JAGUAR!\n Press W to get a speed boost!\n(Jaguars can climb hills!)";
                    this.animalName = "jaguar";
                    break;
                case 2:
                    _0x59ce17.aniName = "Leopard";
                    _0x59ce17.upgradeText = "UPGRADED to LEOPARD!\n Press W to get a speed boost!\n(Leopards can dive longer)";
                    this.animalName = "leopard";
                    break;
                case 3:
                    _0x59ce17.aniName = "Black Panther";
                    _0x59ce17.upgradeText = "UPGRADED to Black Panther!\n Press W to get a speed boost!\n(Black Panthers are fast on mud)";
                    this.animalName = "blackpanther";
                    break;
                case 100:
                    _0x59ce17.aniName = "Big Cookie";
                    _0x59ce17.upgradeText = "UPGRADED to Big Cookie!\n Press W to get a speed boost!\n(Big Cookies are fast on mud)";
                    this.animalName = "100/bigcat";
                    break;
                case 111:
                    _0x59ce17.aniName = "Classic Cheetah";
                    _0x59ce17.upgradeText = "UPGRADED to Classic Cheetah!\n Press W to get a speed boost!";
                    this.animalName = "cheetah";
                    break;
                case 112:
                    _0x59ce17.aniName = "Gold-trim Cheetah";
                    _0x59ce17.upgradeText = "UPGRADED to Gold-trim Cheetah!\n Press W to get a speed boost!";
                    this.animalName = "cheetah";
                    break;
                case 202:
                    _0x59ce17.aniName = "C.M.Y.K NeoN Cheetak";
                    _0x59ce17.upgradeText = "UPGRADED to C.M.Y.K NeoN Cheetak!\n Press W to get a speed boost!\n(C.M.Y.K NeoN Cheetaks are fast on mud)";
                    this.animalName = "cheetah";
                    break;
                case 204:
                    _0x59ce17.aniName = "Genie Cheetah";
                    _0x59ce17.upgradeText = "UPGRADED to Genie Cheetah!\n Press W to get a speed boost!\n(Genie Cheetah are fast on mud)";
                    this.animalName = "genie_cheetah";
                    break;
            }
            _0x59ce17.aniCol = "#CAC05B";
            _0x59ce17.skinName = this.getSkinName();
            return _0x59ce17;
        };
        _0x474478.prototype.getSkinName = function() {
            return this.getSpeciesPath() + "/" + this.animalName;
        };
        _0x474478.prototype.getSpeciesPath = function() {
            return "land/bigcat/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x474478.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };

        function _0x474478() {
            _0x474478.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x474478, _0x48c056, _0x5a7f16);

        function _0x450d88(_0x129225, _0x25286f, _0x21402d, _0x254a29, _0xb232f6, _0x50bb29, _0x242491) {
            var _0x231c72 = _0x53a3ae;
            this.x = _0x129225;
            this.y = _0x25286f;
            this.w = _0x21402d;
            this.h = _0x254a29;
            this.label = _0xb232f6;
            this.font = Number(_0x50bb29) ? Number(_0x50bb29) : 30;
            this.isVisible = true;
            this.hoverColor = "#16932A";
            this.defaultColor = "#0aa633";
            this.alpha = 1;
            this.txtAlpha = 1;
            this.ctx = _0x242491 === undefined || _0x242491 == null ? _0x39e82d : _0x242491;
            this.labelColor = "white";
            this.buttonTXT = new _0x123582(12, this.labelColor);
            this.buttonTXT.renderScale = 1.5;
            this.drawButtonRect = true;
            this.isHighLighted = false;
            this.showLabeleOnHover = false;
            this.textShadow = false;
            this.buttonScaleF = 1;
            this.strokeWidth = _0x231c72 * 4;
            this.setLabelColor = function(_0xf85c00) {
                this.buttonTXT = new _0x123582(12, _0xf85c00);
                this.buttonTXT.renderScale = 1.5;
            };
            this.testPosHitsButton = function(_0x25a801, _0x25bd09) {
                var _0x3b52f8 = this.x;
                var _0x425a74 = this.x + this.w;
                var _0x57dd67 = this.y;
                var _0x23399a = this.y + this.h;
                if (_0x25a801 < _0x3b52f8 || _0x25a801 > _0x425a74) {
                    return false;
                }
                if (_0x25bd09 < _0x57dd67 || _0x25bd09 > _0x23399a) {
                    return false;
                } else {
                    return true;
                }
            };
            this.setPosAndSize = function(_0x605bf1, _0x4c6214, _0x38299b, _0x23fa4f, _0x9a276d, _0x3c430e) {
                this.w = _0x38299b;
                this.h = _0x23fa4f;
                this.x = _0x605bf1 + _0x38299b * (0.5 - _0x9a276d);
                this.y = _0x4c6214 + _0x23fa4f * (0.5 - _0x3c430e);
            };
            this.draw = function() {
                if (!this.isVisible) {
                    return;
                }
                this.update();
                this.ctx.save();
                this.ctx.translate(this.x, this.y);
                this.ctx.scale(this.buttonScaleF, this.buttonScaleF);
                var _0x14c974 = this.alpha;
                if (this.drawButtonRect) {
                    this.ctx.fillStyle = this.defaultColor;
                    this.ctx.strokeStyle = "#116c17";
                    this.ctx.lineWidth = this.strokeWidth;
                    this.roundRect(0, 0, this.w, this.h, 5, true, true);
                    if (this.isHighLighted) {
                        this.ctx.fillStyle = this.hoverColor;
                        this.roundRect(0, 0, this.w, this.h, 5, true, false);
                    }
                }
                if (!this.showLabeleOnHover) {
                    this.ctx.globalAlpha = this.txtAlpha;
                    this.drawText(this.w / 2, this.h / 2);
                } else if (this.isHighLighted && this.showLabeleOnHover) {
                    this.drawTextOnHowever();
                }
                this.ctx.restore();
                this.onAfterDraw();
            };
            this.drawTextOnHowever = function() {
                this.drawText(this.w / 2, this.h / 2);
            };
            this.beforeDrawText = function() {};
            this.drawText = function(_0x234ccf, _0x74c238) {
                this.buttonTXT.setText(this.label);
                this.buttonTXT.strokeW = this.isHighLighted && !this.textShadow ? 0 : 1;
                this.buttonTXT.setFontSize(this.font);
                this.buttonTXT.setColor(this.labelColor);
                this.buttonTXT.x = _0x234ccf;
                this.buttonTXT.y = _0x74c238;
                this.beforeDrawText();
                this.buttonTXT.draw();
            };
            this.roundRect = function(_0xacd935, _0x333ae6, _0x31919e, _0xc72da, _0x46933f, _0x4b329c, _0x5eaa44) {
                if (typeof _0x5eaa44 == "undefined") {
                    _0x5eaa44 = true;
                }
                if (typeof _0x46933f === "undefined") {
                    _0x46933f = 5;
                }
                if (typeof _0x46933f === "number") {
                    _0x46933f = {
                        tl: _0x46933f,
                        tr: _0x46933f,
                        br: _0x46933f,
                        bl: _0x46933f
                    };
                } else {
                    var _0x4ef462 = {
                        tl: 0,
                        tr: 0,
                        br: 0,
                        bl: 0
                    };
                    for (var _0x2f3f5f in _0x4ef462) {
                        _0x46933f[_0x2f3f5f] = _0x46933f[_0x2f3f5f] || _0x4ef462[_0x2f3f5f];
                    }
                }
                this.ctx.globalAlpha = this.alpha;
                this.ctx.lineWidth = 2;
                this.ctx.beginPath();
                this.ctx.moveTo(_0xacd935 + _0x46933f.tl, _0x333ae6);
                this.ctx.lineTo(_0xacd935 + _0x31919e - _0x46933f.tr, _0x333ae6);
                this.ctx.quadraticCurveTo(_0xacd935 + _0x31919e, _0x333ae6, _0xacd935 + _0x31919e, _0x333ae6 + _0x46933f.tr);
                this.ctx.lineTo(_0xacd935 + _0x31919e, _0x333ae6 + _0xc72da - _0x46933f.br);
                this.ctx.quadraticCurveTo(_0xacd935 + _0x31919e, _0x333ae6 + _0xc72da, _0xacd935 + _0x31919e - _0x46933f.br, _0x333ae6 + _0xc72da);
                this.ctx.lineTo(_0xacd935 + _0x46933f.bl, _0x333ae6 + _0xc72da);
                this.ctx.quadraticCurveTo(_0xacd935, _0x333ae6 + _0xc72da, _0xacd935, _0x333ae6 + _0xc72da - _0x46933f.bl);
                this.ctx.lineTo(_0xacd935, _0x333ae6 + _0x46933f.tl);
                this.ctx.quadraticCurveTo(_0xacd935, _0x333ae6, _0xacd935 + _0x46933f.tl, _0x333ae6);
                this.ctx.closePath();
                if (_0x4b329c) {
                    this.ctx.fill();
                }
                if (_0x5eaa44) {
                    this.ctx.stroke();
                }
            };
            this.onClick = function() {};
            this.onMouseMove = function() {};
            this.onMouseIn = function() {};
            this.onMouseOut = function() {};
            this.isMouseIn = false;
            this.setMouseRawPos = function(_0x3b7e2b, _0x30de79) {
                this.rawX = _0x3b7e2b;
                this.rawY = _0x30de79;
                if (this.testPosHitsButton(this.rawX, this.rawY)) {
                    if (!this.isMouseIn) {
                        this.isMouseIn = true;
                        this.onMouseIn();
                    }
                } else if (this.isMouseIn) {
                    this.isMouseIn = false;
                    this.onMouseOut();
                }
            };
            this.update = function() {};
            this.onInterfaceReset = function() {
                _0x1d5b65(this.label + ".onInterfaceReset");
            };
            this.onAfterDraw = function() {};
        }
        _0x38881e.prototype = {
            mode: 0,
            state: 0,
            myPlayer: null
        };
        _0x38881e.prototype.chatAllowed = true;
        _0x38881e.prototype.isHalloween = false;
        _0x38881e.prototype.stamp = 0;
        _0x38881e.prototype.interface = function() {};
        _0x38881e.prototype.drawMap = function() {};
        _0x38881e.prototype.interfaceReset = function() {};
        _0x38881e.prototype.main = function(_0x5d16ad) {};
        _0x38881e.prototype.onInit = function(_0x45bff3) {};
        _0x38881e.prototype.drawCustomObjs = function(_0x352dd9) {};
        _0x38881e.prototype.worldUpdate = function(_0x9bd8e9) {};
        _0x38881e.prototype.setPlayer = function() {
            this.myPlayer = _0xb3e9be[_0x166276];
        };

        function _0x38881e() {}
        var _0x28c171 = _0x38881e;
        _0x2e1ffa.prototype = Object.create(_0x28c171.prototype);
        _0x2e1ffa.prototype.constructor = _0x2e1ffa;
        _0x2e1ffa.superClass = _0x28c171;
        _0x2e1ffa.prototype.safeArea = null;

        function _0x2e1ffa(_0x1daa90) {
            this.mode = _0x1daa90;
            this.stamp = +new Date();
            this.chatAllowed = true;
            this.createInterfaceButtons();
        }
        _0x2e1ffa.prototype.wastedPopups = [];
        _0x2e1ffa.prototype.playerDisplayNum = 0;
        _0x2e1ffa.prototype.setServerPlayerCount = function() {
            _0x469fbf.setText(_0x5461df(_0x170cf4) + " online");
            if (_0x596003) {
                _0x596003.setPlayersCount(_0x170cf4);
            }
            this.playerDisplayNum = this.playerDisplayNum == 0 ? 1 : 0;
        };
        _0x2e1ffa.prototype.interface = function() {
            if (this.state == -1 || this.mode != _0x444fd7) {
                return;
            }
            if (_0x4c02d5) {
                for (var _0x19b81c = this.wastedPopups.length - 1; _0x19b81c >= 0; _0x19b81c--) {
                    var _0x56fee5 = this.wastedPopups[_0x19b81c];
                    _0x56fee5.draw();
                    if (_0x56fee5.timedOut) {
                        this.wastedPopups.splice(_0x19b81c, 1);
                    }
                }
            }
            if (this.endScreenCanvas != null) {
                if (this.endScreenCanvas.width) {
                    _0x39e82d.drawImage(this.endScreenCanvas, _0x19e9b5 / 2 - this.endScreenCanvas.width / 2, _0x149ef1 * 15, this.endScreenCanvas.width, this.endScreenCanvas.height);
                }
                if (!_0x4c02d5 || isGhost) {
                    _0x3a369a(true);
                }
            }
            this.drawInterfaceButtons();
        };
        _0x2e1ffa.prototype.interfaceReset = function() {
            this.endScreenCanvas = null;
            this.dangerCircleMiniMapCanvas = null;
            this.wastedPopups = [];
            this.lastWastedPopupT = 0;
            this.playercount = 0;
            this.safeArea = null;
            if (this.interfaceButtons) {
                for (var _0x12cbfb = 0; _0x12cbfb < this.interfaceButtons.length; _0x12cbfb++) {
                    var _0x55a1fc = this.interfaceButtons[_0x12cbfb];
                    _0x55a1fc.onInterfaceReset();
                }
            }
            this.interfaceButtons = [];
        };
        _0x2e1ffa.prototype.onInit = function() {};
        _0x2e1ffa.prototype.playercount = 0;
        _0x2e1ffa.prototype.setPlayerCount = function(_0x3033a6) {
            this.playercount = _0x3033a6;
        };
        _0x2e1ffa.prototype.showPlayerCount = function() {
            _0x39e82d.save();
            var _0x34c736 = _0x19e9b5 / 2;
            var _0x547b55 = _0x53a3ae * 50;
            var _0x350f82 = _0x53a3ae * 300;
            _0x39e82d.globalAlpha = 0.35;
            _0x39e82d.fillStyle = "black";
            var _0xe1fa9a = _0x53a3ae * 30;
            _0x39e82d.fillRect(_0x34c736 - _0x350f82 / 2, _0xe1fa9a, _0x350f82, _0x547b55);
            _0x39e82d.globalAlpha = 1;
            _0x39e82d.fillStyle = "white";
            _0x39e82d.font = _0x53a3ae * 30 + "px Arial";
            _0x39e82d.lineWidth = 1;
            _0x39e82d.textAlign = "center";
            _0x39e82d.textBaseline = "middle";
            _0x39e82d.shadowOffsetX = 1;
            _0x39e82d.shadowOffsetY = 1;
            _0x39e82d.shadowColor = "black";
            _0xe1fa9a += _0x53a3ae * 25;
            var _0x58e304 = " player";
            if (this.playercount > 1) {
                _0x58e304 += "s";
            }
            if (this.state == battleRoyal_inProgress) {
                _0x58e304 += " alive!";
            } else if (this.state == _0x5d13e3 || this.state == battleRoyal_ready) {
                _0x58e304 += " joined";
            }
            _0x39e82d.fillText(this.playercount + _0x58e304, _0x34c736, _0xe1fa9a);
            _0x39e82d.restore();
        };
        _0x2e1ffa.prototype.lbCanvas = null;
        _0x2e1ffa.prototype.leaderboard = function(_0x5d28d5) {
            if (this.lbCanvas == null) {
                this.lbCanvas = document.createElement("canvas");
            }
            if (_0x5d28d5) {
                var _0xe6a9d9 = this.lbCanvas.getContext("2d");
                var _0x5919e1 = 55;
                var _0xe1bcbf = 22;
                _0x5919e1 = _0x5919e1 + _0xe1bcbf * _0x5d28d5.length;
                this.lbCanvas.width = 270;
                this.lbCanvas.height = _0x5919e1;
                _0xe6a9d9.globalAlpha = 0.2;
                _0xe6a9d9.fillStyle = "#000000";
                _0xe6a9d9.fillRect(0, 0, this.lbCanvas.width, this.lbCanvas.height);
                _0xe6a9d9.globalAlpha = 1;
                _0xe6a9d9.fillStyle = "#FFFFFF";
                var _0x7d8f99 = _0x925cfa.name;
                _0xe6a9d9.font = "24px Arial";
                if (_0x5981a2 != _0x4051d6) {
                    _0xe6a9d9.shadowOffsetX = 1;
                    _0xe6a9d9.shadowOffsetY = 1;
                }
                _0xe6a9d9.shadowColor = "black";
                _0xe6a9d9.fillText(_0x7d8f99, this.lbCanvas.width / 2 - _0xe6a9d9.measureText(_0x7d8f99).width / 2, 40);
                var _0x52a4ef;
                _0xe6a9d9.textAlign = "left";
                _0xe6a9d9.font = "17px Arial";
                _0x52a4ef = 0;
                for (; _0x52a4ef < _0x5d28d5.length; ++_0x52a4ef) {
                    _0x7d8f99 = _0x26aab4 ? "" : _0x5d28d5[_0x52a4ef].name || "mope.io";
                    _0x7d8f99 += " (" + _0x540660(_0x5d28d5[_0x52a4ef].xp) + ")";
                    _0xe6a9d9.fillStyle = "#FFFFFF";
                    _0xe6a9d9.fillText(_0x7d8f99, 15, 65 + _0xe1bcbf * _0x52a4ef);
                }
            }
        };
        _0x2e1ffa.prototype.drawLeaderboard = function() {
            if (_0x4c02d5) {
                if (!_0x33698e) {
                    if (_0x12b152) {
                        if (_0x12b152.width) {
                            _0x39e82d.drawImage(_0x12b152, _0x149ef1 * 10, _0x149ef1 * 10, _0x12b152.width * _0x53a3ae, _0x12b152.height * _0x53a3ae);
                        }
                    }
                }
            }
        };
        _0x2e1ffa.prototype.btnPlayAgain = null;
        _0x2e1ffa.prototype.showStats = true;
        _0x2e1ffa.prototype.interfaceButtons = [];
        _0x2e1ffa.prototype.createInterfaceButtons = function() {
            this.interfaceButtons = [];
        };
        _0x2e1ffa.prototype.drawInterfaceButtons = function() {
            if (this.interfaceButtons) {
                for (var _0x243c90 = 0; _0x243c90 < this.interfaceButtons.length; _0x243c90++) {
                    var _0x24be67 = this.interfaceButtons[_0x243c90];
                    if (_0x24be67.isVisible) {
                        _0x24be67.draw();
                    }
                }
            }
        };
        _0x2e1ffa.prototype.onResize = function() {
            this.drawInterfaceButtons();
        };
        _0x2e1ffa.prototype.readPlayerStats = function(_0x51802b) {
            var _0x12ce65 = [];
            _0x12ce65.rank = _0x51802b.readUInt16();
            _0x12ce65.timeAlive = _0x51802b.readUInt16();
            _0x12ce65.totalKills = _0x51802b.readUInt16();
            _0x12ce65.topRank = _0x51802b.readUInt16();
            _0x12ce65.maxXP = _0x51802b.readUInt32();
            _0x12ce65.killedBy = _0x51802b.readString();
            return _0x12ce65;
        };
        _0x2e1ffa.prototype.playerInfo = function(_0x15b45a) {
            if (isGhost && !_0x464637) {
                var _0x4c6632 = this.readPlayerStats(_0x15b45a);
                this.buildEndScreenHTML(_0x4c6632);
            } else if (!isGhost) {
                this.endScreenCanvas = null;
            }
        };
        _0x2e1ffa.prototype.playerWorldUpdate = function(_0x27e4cb) {};
        _0x2e1ffa.prototype.worldUpdate = function(_0x3f80f0) {};
        _0x2e1ffa.prototype.drawMap = function() {
            if (_0x4c02d5) {
                if (_0x1d523b) {
                    return;
                }
                if (_0x596003) {
                    _0x596003.drawMap();
                }
                this.drawLeaderboard();
            }
        };
        _0x2e1ffa.prototype.pieChartCanvas = null;
        _0x2e1ffa.prototype.teamColors = {
            0: "white",
            1: "#B6CF40"
        };
        _0x2e1ffa.prototype.endScreenDisplayed = false;
        _0x2e1ffa.prototype.buildEndScreenHTML = function(_0x30abd3) {
            if (this.endScreenDisplayed) {
                return;
            }
            this.endScreenDisplayed = true;
            var _0x100a15 = "";
            _0x100a15 += "<div class='msg'>YOU WERE #" + _0x30abd3.rank + "</div>";
            _0x100a15 += "<div class='row'>";
            _0x100a15 += "<div class='label'>Killed by:</div>";
            _0x100a15 += "<div class='value2'>" + _0x30abd3.killedBy + "</div>";
            _0x100a15 += "</div>";
            _0x100a15 += "<div class='row'>";
            _0x100a15 += "<div class='col1'>";
            _0x100a15 += "<div class='label'>Time alive:</div>";
            _0x100a15 += "<div class='value'>" + _0x82cc9e(_0x30abd3.timeAlive) + "</div>";
            _0x100a15 += "</div>";
            _0x100a15 += "<div class='col2'>";
            _0x100a15 += "<div class='label'>Total kills:</div>";
            _0x100a15 += "<div class='value'>" + _0x30abd3.totalKills + "</div>";
            _0x100a15 += "</div>";
            _0x100a15 += "</div>";
            _0x100a15 += "<div class='row'>";
            _0x100a15 += "<div class='col1'>";
            _0x100a15 += "<div class='label'>Top rank:</div>";
            _0x100a15 += "<div class='value'>" + _0x30abd3.topRank + "</div>";
            _0x100a15 += "</div>";
            _0x100a15 += "<div class='col2'>";
            _0x100a15 += "<div class='label'>Max xp:</div>";
            _0x100a15 += "<div class='value'>" + _0x540660(_0x30abd3.maxXP) + "</div>";
            _0x100a15 += "</div>";
            _0x100a15 += "</div>";
            _0x100a15 += "<div style='clear:both;'></div>";
            _0x100a15 += "<div class='btnDiv'>";
            _0x100a15 += "<button id='btnMopeOptions' class='btn'>      CONTINUE      </button>";
            _0x100a15 += "</div>";
            _0x100a15 += "<div style='clear:both;'></div>";
            var _0x30c9cd = document.getElementById("endScreen");
            if (_0x30c9cd) {
                _0x30c9cd.innerHTML = _0x100a15;
                _0x30c9cd.style.display = "block";
            }
            if (!_0x4c02d5 || isGhost) {
                _0x3d4608();
            }
        };
        _0x2e1ffa.prototype.endScreenCanvas = null;
        _0x2e1ffa.prototype.buildEndScreen = function(_0x33564a, _0x37eba2) {
            if (this.endScreenCanvas == null) {
                this.endScreenCanvas = document.createElement("canvas");
            }
            if (this.endScreenCanvas == null) {
                return;
            }
            var _0x32a564 = this.endScreenCanvas.getContext("2d");
            var _0xe6a2a0 = 55;
            var _0x372292 = 40;
            var _0x5b83aa = 5;
            var _0x135a5c = 240;
            var _0x2dff9a = 420;
            _0xe6a2a0 = _0x135a5c + _0x5b83aa * 2;
            this.endScreenCanvas.width = _0x2dff9a + _0x5b83aa * 2;
            this.endScreenCanvas.height = _0xe6a2a0;
            _0x32a564.globalAlpha = 0.2;
            _0x32a564.fillStyle = "#000000";
            _0x32a564.fillRect(0, 0, this.endScreenCanvas.width, this.endScreenCanvas.height);
            _0x32a564.fillStyle = "#000000";
            _0x32a564.fillRect(_0x5b83aa, _0x5b83aa, this.endScreenCanvas.width - _0x5b83aa * 2, this.endScreenCanvas.height - _0x5b83aa * 2);
            var _0x4db0cb = _0x5b83aa;
            _0x32a564.globalAlpha = 1;
            _0x32a564.fillStyle = "#FFFFFF";
            _0x32a564.font = "30px Arial";
            _0x4db0cb += 55;
            var _0x53a878 = "Final Stats";
            _0x32a564.font = "30px Arial";
            _0x32a564.fillText(_0x53a878, this.endScreenCanvas.width / 2 - _0x32a564.measureText(_0x53a878).width / 2, _0x4db0cb);
            _0x32a564.font = "20px Arial";
            _0x4db0cb += 45;
            _0x53a878 = "You were #" + _0x37eba2.rank;
            _0x32a564.fillText(_0x53a878, this.endScreenCanvas.width / 2 - _0x32a564.measureText(_0x53a878).width / 2, _0x4db0cb);
            _0x4db0cb += 40;
            var _0x42741e = _0x82cc9e(_0x37eba2.timeAlive);
            var _0xc2a160 = _0x5b83aa + 15;
            _0x501cf4(_0x32a564, "Killed by", _0x37eba2.killedBy, _0xc2a160, _0x4db0cb);
            _0x4db0cb += 40;
            _0x501cf4(_0x32a564, "Time Alive", _0x82cc9e(_0x37eba2.timeAlive), _0xc2a160, _0x4db0cb);
            _0xc2a160 += 210;
            _0x501cf4(_0x32a564, "Total Kills", _0x37eba2.totalKills, _0xc2a160, _0x4db0cb);
            _0x4db0cb += 40;
            _0xc2a160 = _0x5b83aa + 15;
            _0x501cf4(_0x32a564, "Top rank", _0x37eba2.topRank, _0xc2a160, _0x4db0cb);
            _0xc2a160 += 210;
            _0x501cf4(_0x32a564, "Max XP", _0x540660(_0x37eba2.maxXP), _0xc2a160, _0x4db0cb);
            _0x4db0cb += 50;
        };
        _0x2e1ffa.prototype.lastWastedPopupT = 0;
        _0x2e1ffa.prototype.onPlayerWasted = function(_0x50fb18) {
            if ((_0x4ec996 - this.lastWastedPopupT) / 1000 > 0.7) {
                this.lastWastedPopupT = _0x4ec996;
                var _0x357393 = new _0x15cab0(_0x50fb18 + " wasted!", 40, "red", 1500);
                this.wastedPopups.push(_0x357393);
            }
        };
        _0x2e1ffa.prototype.lastWastedPopupT = 0;
        _0x2e1ffa.prototype.msgDisplayPlayersOnMiniMap = function(_0x4a2bf5) {
            _0x46a09d = [];
            var _0x2535cd = _0x4a2bf5.readUInt16();
            for (var _0x365695 = 0; _0x365695 < _0x2535cd; _0x365695++) {
                _0x46a09d.push({
                    id: _0x4a2bf5.readUInt32(),
                    x: _0x4a2bf5.readUInt32() / 100,
                    y: _0x4a2bf5.readUInt32() / 100,
                    rad: 3
                });
            }
        };
        _0x2e1ffa.prototype.msgDisplayPumpkinsOnMiniMap = function(_0x2e1139) {
            _0x2809d9 = [];
            var _0x579faa = _0x2e1139.readUInt16();
            for (var _0x1d6cf7 = 0; _0x1d6cf7 < _0x579faa; _0x1d6cf7++) {
                _0x2809d9.push({
                    x: _0x2e1139.readUInt16() / 4,
                    y: _0x2e1139.readUInt16() / 4,
                    type: 0,
                    rad: 2
                });
            }
        };
        var _0x28c171 = _0x38881e;
        _0x337605.prototype = Object.create(_0x28c171.prototype);
        _0x337605.prototype.constructor = _0x337605;
        _0x337605.superClass = _0x28c171;
        _0x337605.prototype.safeArea = null;
        var _0x41cad8 = false;

        function _0x337605(_0x2cffc0) {
            this.mode = _0x338d0a;
            this.chatAllowed = true;
            this.createInterfaceButtons();
            console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@ zombie mode @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
            console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@ zombie mode @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
            console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@ zombie mode @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
            console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@ zombie mode @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
            console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@ zombie mode @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
        }
        _0x337605.prototype.wastedPopups = [];
        _0x337605.prototype.playerDisplayNum = 0;
        _0x337605.prototype.setServerPlayerCount = function() {
            if (this.playerDisplayNum == 0) {
                _0x469fbf.setText(_0x5461df(_0x170cf4) + " mopers");
            } else {
                _0x469fbf.setText(_0x5461df(_0xaaa98c) + " on server");
            }
            if (_0x596003) {
                _0x596003.setPlayersCount(_0x170cf4);
            }
            this.playerDisplayNum = this.playerDisplayNum == 0 ? 1 : 0;
        };
        _0x337605.prototype.interface = function() {
            if (this.state == -1 || this.mode != _0x444fd7) {
                return;
            }
            if (_0x4c02d5) {
                for (var _0x1409bc = this.wastedPopups.length - 1; _0x1409bc >= 0; _0x1409bc--) {
                    var _0x206a07 = this.wastedPopups[_0x1409bc];
                    _0x206a07.draw();
                    if (_0x206a07.timedOut) {
                        this.wastedPopups.splice(_0x1409bc, 1);
                    }
                }
            }
            if (this.endScreenCanvas != null) {
                if (this.endScreenCanvas.width) {
                    _0x39e82d.drawImage(this.endScreenCanvas, _0x19e9b5 / 2 - this.endScreenCanvas.width / 2, _0x149ef1 * 15, this.endScreenCanvas.width, this.endScreenCanvas.height);
                }
                if (!_0x4c02d5 || isGhost) {
                    _0x3a369a(true);
                }
            }
            this.drawInterfaceButtons();
        };
        _0x337605.prototype.interfaceReset = function() {
            this.endScreenCanvas = null;
            this.dangerCircleMiniMapCanvas = null;
            this.wastedPopups = [];
            this.lastWastedPopupT = 0;
            this.playercount = 0;
            this.safeArea = null;
            _0x1943b8 = null;
            _0x51e151 = null;
            if (this.interfaceButtons) {
                for (var _0x57556a = 0; _0x57556a < this.interfaceButtons.length; _0x57556a++) {
                    var _0x61f6e2 = this.interfaceButtons[_0x57556a];
                    _0x61f6e2.onInterfaceReset();
                }
            }
            this.interfaceButtons = [];
        };
        _0x337605.prototype.onInit = function() {};
        _0x337605.prototype.playercount = 0;
        _0x337605.prototype.setPlayerCount = function(_0x5561bb) {
            this.playercount = _0x5561bb;
        };
        _0x337605.prototype.showPlayerCount = function() {
            _0x39e82d.save();
            var _0x6f07cc = _0x19e9b5 / 2;
            var _0x376169 = _0x53a3ae * 50;
            var _0x5d9e0b = _0x53a3ae * 300;
            _0x39e82d.globalAlpha = 0.35;
            _0x39e82d.fillStyle = "black";
            var _0x2e96c4 = _0x53a3ae * 30;
            _0x39e82d.fillRect(_0x6f07cc - _0x5d9e0b / 2, _0x2e96c4, _0x5d9e0b, _0x376169);
            _0x39e82d.globalAlpha = 1;
            _0x39e82d.fillStyle = "white";
            _0x39e82d.font = _0x53a3ae * 30 + "px Arial";
            _0x39e82d.lineWidth = 1;
            _0x39e82d.textAlign = "center";
            _0x39e82d.textBaseline = "middle";
            _0x39e82d.shadowOffsetX = 1;
            _0x39e82d.shadowOffsetY = 1;
            _0x39e82d.shadowColor = "black";
            _0x2e96c4 += _0x53a3ae * 25;
            var _0x5b1da6 = " player";
            if (this.playercount > 1) {
                _0x5b1da6 += "s";
            }
            if (this.state == battleRoyal_inProgress) {
                _0x5b1da6 += " alive!";
            } else if (this.state == _0x5d13e3 || this.state == battleRoyal_ready) {
                _0x5b1da6 += " joined";
            }
            _0x39e82d.fillText(this.playercount + _0x5b1da6, _0x6f07cc, _0x2e96c4);
            _0x39e82d.restore();
        };
        _0x337605.prototype.lbCanvas = null;
        _0x337605.prototype.leaderboard = function(_0x14f624) {
            if (this.lbCanvas == null) {
                this.lbCanvas = document.createElement("canvas");
            }
            if (_0x14f624) {
                var _0x5dcfe0 = this.lbCanvas.getContext("2d");
                var _0xc75a08 = 55;
                var _0x59cb20 = 22;
                _0xc75a08 = _0xc75a08 + _0x59cb20 * _0x14f624.length;
                this.lbCanvas.width = 270;
                this.lbCanvas.height = _0xc75a08;
                _0x5dcfe0.globalAlpha = 0.2;
                _0x5dcfe0.fillStyle = "#000000";
                _0x5dcfe0.fillRect(0, 0, this.lbCanvas.width, this.lbCanvas.height);
                _0x5dcfe0.globalAlpha = 1;
                _0x5dcfe0.fillStyle = "#FFFFFF";
                var _0x48d058 = _0x925cfa.name;
                _0x5dcfe0.font = "24px Arial";
                if (!options_lowGraphics) {
                    _0x5dcfe0.shadowOffsetX = 1;
                    _0x5dcfe0.shadowOffsetY = 1;
                }
                _0x5dcfe0.shadowColor = "black";
                _0x5dcfe0.fillText(_0x48d058, this.lbCanvas.width / 2 - _0x5dcfe0.measureText(_0x48d058).width / 2, 40);
                var _0x27afaa;
                _0x5dcfe0.textAlign = "left";
                _0x5dcfe0.font = "17px Arial";
                _0x27afaa = 0;
                for (; _0x27afaa < _0x14f624.length; ++_0x27afaa) {
                    _0x48d058 = _0x26aab4 ? "" : _0x14f624[_0x27afaa].name || "mope.io";
                    _0x48d058 += " (" + _0x540660(_0x14f624[_0x27afaa].xp) + ")";
                    _0x5dcfe0.fillStyle = "#FFFFFF";
                    _0x5dcfe0.fillText(_0x48d058, 15, 65 + _0x59cb20 * _0x27afaa);
                }
            }
        };
        _0x337605.prototype.drawLeaderboard = function() {
            if (_0x4c02d5) {
                if (this.pieChartCanvas != null) {
                    if (this.pieChartCanvas.width) {
                        _0x39e82d.drawImage(this.pieChartCanvas, _0x149ef1 * 20, _0x149ef1 * 20, this.pieChartCanvas.width, this.pieChartCanvas.height);
                    }
                }
            }
            _0x3523cd();
        };
        _0x337605.prototype.btnPlayAgain = null;
        _0x337605.prototype.showStats = true;
        _0x337605.prototype.interfaceButtons = [];
        _0x337605.prototype.createInterfaceButtons = function() {
            this.interfaceButtons = [];
        };
        _0x337605.prototype.drawInterfaceButtons = function() {
            if (this.interfaceButtons) {
                for (var _0xf816c5 = 0; _0xf816c5 < this.interfaceButtons.length; _0xf816c5++) {
                    var _0x3c80f4 = this.interfaceButtons[_0xf816c5];
                    if (_0x3c80f4.isVisible) {
                        _0x3c80f4.draw();
                    }
                }
            }
        };
        _0x337605.prototype.onResize = function() {
            this.drawInterfaceButtons();
        };
        _0x337605.prototype.readPlayerStats = function(_0x240287) {
            var _0x53325f = [];
            _0x53325f.rank = _0x240287.readUInt16();
            _0x53325f.timeAlive = _0x240287.readUInt16();
            _0x53325f.totalKills = _0x240287.readUInt16();
            _0x53325f.topRank = _0x240287.readUInt16();
            _0x53325f.maxXP = _0x240287.readUInt32();
            _0x53325f.killedBy = _0x240287.readString();
            return _0x53325f;
        };
        _0x337605.prototype.playerInfo = function(_0x9548f9) {
            if (isGhost && !_0x464637) {
                var _0x562689 = this.readPlayerStats(_0x9548f9);
                this.buildEndScreenHTML(_0x562689);
            } else if (!isGhost) {
                this.endScreenCanvas = null;
            }
        };
        _0x337605.prototype.worldUpdate = function(_0x27e173) {
            var _0x5eafe6 = minimapW / 200;
            var _0x2bcd3b = minimapH / 200;
            var _0x43a0ab = _0x27e173.readUInt32() * _0x5eafe6;
            var _0x11037f = _0x27e173.readUInt32() * _0x2bcd3b;
            var _0x4862e7 = _0x27e173.readUInt32() * 5;
            _0x1943b8 = {
                x: _0x43a0ab,
                y: _0x11037f,
                rad: _0x4862e7 * (minimapW / _0x5039a5)
            };
            this.nonZombiePlayersCount = _0x27e173.readUInt16();
            this.zombieCount = _0x27e173.readUInt16();
            if (!_0x41cad8) {
                this.zombiePlayers = [];
                for (i = 0; i < this.zombieCount; i++) {
                    var _0x43a0ab = _0x27e173.readUInt16() / 4;
                    var _0x11037f = _0x27e173.readUInt16() / 4;
                    var _0x4bc5e8 = _0x27e173.readUInt16() / 10;
                    this.zombiePlayers.push({
                        x: _0x43a0ab,
                        y: _0x11037f,
                        rad: _0x4bc5e8
                    });
                }
            }
        };
        var _0x51e151 = null;

        function _0x3523cd() {
            if (!_0x51e151) {
                _0x51e151 = document.createElement("canvas");
            }
            _0x51e151.width = minimapW;
            _0x51e151.height = minimapH;
            var _0x2f10d9 = _0x51e151.getContext("2d");
            _0x2f10d9.clearRect(0, 0, _0x51e151.width, _0x51e151.height);
            _0x2f10d9.save();
            var _0x390ae9 = Math.max(3, _0x1943b8.rad);
            var _0x2c22d1 = _0x1943b8.x;
            var _0x581be4 = _0x1943b8.y;
            _0x2f10d9.translate(_0x2c22d1, _0x581be4);
            _0x2f10d9.save();
            _0x2f10d9.globalAlpha = 1;
            _0x36784f(_0x2f10d9, 0, 0, _0x1943b8.rad, 5, "white");
            _0x2f10d9.restore();
            var _0x592126 = _0x53a3ae * minimapW * 1.5;
            var _0x3fc6aa = _0x53a3ae * minimapH * 1.5;
            var _0x151813 = 1;
            var _0x509ca6 = "red";
            _0x5b0733(_0x2f10d9, _0x1943b8.rad, Math.PI * 0, _0x509ca6, _0x151813, _0x592126, _0x3fc6aa);
            _0x5b0733(_0x2f10d9, _0x1943b8.rad, Math.PI * 0.5, _0x509ca6, _0x151813, _0x592126, _0x3fc6aa);
            _0x5b0733(_0x2f10d9, _0x1943b8.rad, Math.PI * 1, _0x509ca6, _0x151813, _0x592126, _0x3fc6aa);
            _0x5b0733(_0x2f10d9, _0x1943b8.rad, Math.PI * 1.5, _0x509ca6, _0x151813, _0x592126, _0x3fc6aa);
            _0x2f10d9.restore();
            if (_0x51e151) {
                _0x39e82d.drawImage(_0x51e151, _0x19e9b5 - (_0x149ef1 * 10 + _0x1189f4.width * _0x53a3ae), _0x149ef1 * 10, minimapW * _0x53a3ae, minimapH * _0x53a3ae);
            }
        }
        _0x337605.prototype.drawZombiePlayers = function() {
            if (this.zombiePlayers) {
                for (t = 0; t < this.zombiePlayers.length; t++) {
                    _0x102c70(this.zombiePlayers[t], "#adff32", 1);
                }
            }
        };
        _0x337605.prototype.drawMap = function() {
            this.buildPieChart();
            if (!_0x41cad8) {
                this.drawZombiePlayers();
            }
        };
        _0x337605.prototype.pieChartCanvas = null;
        _0x337605.prototype.teamColors = {
            0: "white",
            1: "#B6CF40"
        };
        _0x337605.prototype.buildPieChart = function() {
            if (this.pieChartCanvas == null) {
                this.pieChartCanvas = document.createElement("canvas");
            }
            if (this.pieChartCanvas == null) {
                return;
            }
            var _0x3e6d37 = this.pieChartCanvas.getContext("2d");
            var _0xd40138 = {
                0: this.nonZombiePlayersCount,
                1: this.zombieCount
            };
            _0x18c43f = _0x41cad8 ? 1 : 0;
            var _0x3cc993 = new _0x1d868c({
                pad: 30,
                canvas: this.pieChartCanvas,
                data: _0xd40138,
                colors: this.teamColors
            });
            var _0x4f6a4f = 55;
            var _0x47811f = 40;
            var _0x4a0fcd = 5;
            var _0x639f40 = 200;
            var _0x4fa919 = 200;
            _0x4f6a4f = _0x639f40 + _0x4a0fcd * 2;
            this.pieChartCanvas.width = _0x4fa919 + _0x4a0fcd * 2;
            this.pieChartCanvas.height = _0x4f6a4f;
            _0x3cc993.draw();
            _0x3e6d37.globalAlpha = 0.2;
            var _0x166438 = _0x4a0fcd;
            _0x3e6d37.globalAlpha = 0.5;
            _0x3e6d37.fillStyle = "white";
            _0x3e6d37.font = "20px Arial";
            var _0x166438 = 200;
            str = _0x925cfa.name;
            _0x3e6d37.fillText(str, this.pieChartCanvas.width / 2 - _0x3e6d37.measureText(str).width / 2 - 15, _0x166438);
        };
        _0x337605.prototype.endScreenDisplayed = false;
        _0x337605.prototype.buildEndScreenHTML = function(_0x3f996f) {
            if (this.endScreenDisplayed) {
                return;
            }
            this.endScreenDisplayed = true;
            var _0xdc4426 = "";
            _0xdc4426 += "<div class='msg'>YOU WERE #" + _0x3f996f.rank + "</div>";
            _0xdc4426 += "<div class='row'>";
            _0xdc4426 += "<div class='label'>Killed by:</div>";
            _0xdc4426 += "<div class='value2'>" + _0x3f996f.killedBy + "</div>";
            _0xdc4426 += "</div>";
            _0xdc4426 += "<div class='row'>";
            _0xdc4426 += "<div class='col1'>";
            _0xdc4426 += "<div class='label'>Time alive:</div>";
            _0xdc4426 += "<div class='value'>" + _0x82cc9e(_0x3f996f.timeAlive) + "</div>";
            _0xdc4426 += "</div>";
            _0xdc4426 += "<div class='col2'>";
            _0xdc4426 += "<div class='label'>Total kills:</div>";
            _0xdc4426 += "<div class='value'>" + _0x3f996f.totalKills + "</div>";
            _0xdc4426 += "</div>";
            _0xdc4426 += "</div>";
            _0xdc4426 += "<div class='row'>";
            _0xdc4426 += "<div class='col1'>";
            _0xdc4426 += "<div class='label'>Top rank:</div>";
            _0xdc4426 += "<div class='value'>" + _0x3f996f.topRank + "</div>";
            _0xdc4426 += "</div>";
            _0xdc4426 += "<div class='col2'>";
            _0xdc4426 += "<div class='label'>Max xp:</div>";
            _0xdc4426 += "<div class='value'>" + _0x540660(_0x3f996f.maxXP) + "</div>";
            _0xdc4426 += "</div>";
            _0xdc4426 += "</div>";
            _0xdc4426 += "<div style='clear:both;'></div>";
            _0xdc4426 += "<div class='btnDiv'>";
            _0xdc4426 += "<button id='btnMopeOptions' class='btn'>      CONTINUE      </button>";
            _0xdc4426 += "</div>";
            _0xdc4426 += "<div style='clear:both;'></div>";
            var _0x24fc89 = document.getElementById("endScreen");
            if (_0x24fc89) {
                _0x24fc89.innerHTML = _0xdc4426;
                _0x24fc89.style.display = "block";
            }
            if (!_0x4c02d5 || isGhost) {
                _0x3d4608();
            }
        };
        _0x337605.prototype.endScreenCanvas = null;
        _0x337605.prototype.buildEndScreen = function(_0x3188c4, _0x32f123) {
            if (this.endScreenCanvas == null) {
                this.endScreenCanvas = document.createElement("canvas");
            }
            if (this.endScreenCanvas == null) {
                return;
            }
            var _0x5607ba = this.endScreenCanvas.getContext("2d");
            var _0x5de696 = 55;
            var _0x15bc89 = 40;
            var _0x42ea2d = 5;
            var _0x3ed11d = 240;
            var _0x215afd = 420;
            _0x5de696 = _0x3ed11d + _0x42ea2d * 2;
            this.endScreenCanvas.width = _0x215afd + _0x42ea2d * 2;
            this.endScreenCanvas.height = _0x5de696;
            _0x5607ba.globalAlpha = 0.2;
            _0x5607ba.fillStyle = "#000000";
            _0x5607ba.fillRect(0, 0, this.endScreenCanvas.width, this.endScreenCanvas.height);
            _0x5607ba.fillStyle = "#000000";
            _0x5607ba.fillRect(_0x42ea2d, _0x42ea2d, this.endScreenCanvas.width - _0x42ea2d * 2, this.endScreenCanvas.height - _0x42ea2d * 2);
            var _0x27f4d9 = _0x42ea2d;
            _0x5607ba.globalAlpha = 1;
            _0x5607ba.fillStyle = "#FFFFFF";
            _0x5607ba.font = "30px Arial";
            _0x27f4d9 += 55;
            var _0x1632ce = "Final Stats";
            _0x5607ba.font = "30px Arial";
            _0x5607ba.fillText(_0x1632ce, this.endScreenCanvas.width / 2 - _0x5607ba.measureText(_0x1632ce).width / 2, _0x27f4d9);
            _0x5607ba.font = "20px Arial";
            _0x27f4d9 += 45;
            _0x1632ce = "You were #" + _0x32f123.rank;
            _0x5607ba.fillText(_0x1632ce, this.endScreenCanvas.width / 2 - _0x5607ba.measureText(_0x1632ce).width / 2, _0x27f4d9);
            _0x27f4d9 += 40;
            var _0x11e9a1 = _0x82cc9e(_0x32f123.timeAlive);
            var _0x397f9f = _0x42ea2d + 15;
            _0x501cf4(_0x5607ba, "Killed by", _0x32f123.killedBy, _0x397f9f, _0x27f4d9);
            _0x27f4d9 += 40;
            _0x501cf4(_0x5607ba, "Time Alive", _0x82cc9e(_0x32f123.timeAlive), _0x397f9f, _0x27f4d9);
            _0x397f9f += 210;
            _0x501cf4(_0x5607ba, "Total Kills", _0x32f123.totalKills, _0x397f9f, _0x27f4d9);
            _0x27f4d9 += 40;
            _0x397f9f = _0x42ea2d + 15;
            _0x501cf4(_0x5607ba, "Top rank", _0x32f123.topRank, _0x397f9f, _0x27f4d9);
            _0x397f9f += 210;
            _0x501cf4(_0x5607ba, "Max XP", _0x540660(_0x32f123.maxXP), _0x397f9f, _0x27f4d9);
            _0x27f4d9 += 50;
        };

        function _0x5b0733(_0x1d7b6f, _0x31e710, _0x3f4b61, _0x58799a, _0x58a132, _0x79d119, _0xe837f1) {
            _0x1d7b6f.save();
            _0x1d7b6f.globalAlpha = _0x58a132;
            _0x1d7b6f.fillStyle = _0x58799a;
            _0x1d7b6f.rotate(_0x3f4b61);
            _0x1d7b6f.save();
            _0x1d7b6f.strokeStyle = "white";
            _0x1d7b6f.beginPath();
            _0x1d7b6f.arc(0, 0, _0x31e710, 0, Math.PI * 0.5, false);
            _0x1d7b6f.stroke();
            _0x1d7b6f.restore();
            _0x1d7b6f.save();
            _0x1d7b6f.beginPath();
            _0x1d7b6f.arc(0, 0, _0x31e710, 0, Math.PI * 0.5, false);
            _0x1d7b6f.lineTo(0, _0x79d119);
            _0x1d7b6f.lineTo(_0xe837f1, _0x79d119);
            _0x1d7b6f.lineTo(_0xe837f1, 0);
            _0x1d7b6f.closePath();
            _0x1d7b6f.fill();
            _0x1d7b6f.restore();
            _0x1d7b6f.restore();
        }
        _0x337605.prototype.lastWastedPopupT = 0;
        _0x337605.prototype.onPlayerWasted = function(_0x562545) {
            if ((_0x4ec996 - this.lastWastedPopupT) / 1000 > 0.7) {
                this.lastWastedPopupT = _0x4ec996;
                var _0xc9c8d3 = new _0x15cab0(_0x562545 + " wasted!", 40, "red", 1500);
                this.wastedPopups.push(_0xc9c8d3);
            }
        };
        var _0x28c171 = _0x38881e;
        _0x1f7918.prototype = Object.create(_0x28c171.prototype);
        _0x1f7918.prototype.constructor = _0x1f7918;
        _0x1f7918.superClass = _0x28c171;
        _0x1f7918.prototype.safeArea = null;
        var _0x41cad8 = false;
        _0x1f7918.prototype.wastedPopups = [];
        _0x1f7918.prototype.playerDisplayNum = 0;
        _0x1f7918.prototype.setServerPlayerCount = function() {
            if (this.playerDisplayNum == 0) {
                _0x469fbf.setText(_0x5461df(_0x170cf4) + " mopers");
            } else {
                _0x469fbf.setText(_0x5461df(_0xaaa98c) + " on server");
            }
            if (_0x596003) {
                _0x596003.setPlayersCount(_0x170cf4);
            }
            this.playerDisplayNum = this.playerDisplayNum == 0 ? 1 : 0;
        };
        _0x1f7918.prototype.interface = function() {
            if (this.state == -1 || this.mode != _0x444fd7) {
                return;
            }
            if (_0x4c02d5) {
                for (var _0x2c1e92 = this.wastedPopups.length - 1; _0x2c1e92 >= 0; _0x2c1e92--) {
                    var _0x22fff6 = this.wastedPopups[_0x2c1e92];
                    _0x22fff6.draw();
                    if (_0x22fff6.timedOut) {
                        this.wastedPopups.splice(_0x2c1e92, 1);
                    }
                }
            }
            if (this.endScreenCanvas != null) {
                if (this.endScreenCanvas.width) {
                    _0x39e82d.drawImage(this.endScreenCanvas, _0x19e9b5 / 2 - this.endScreenCanvas.width / 2, _0x149ef1 * 15, this.endScreenCanvas.width, this.endScreenCanvas.height);
                }
                if (!_0x4c02d5 || isGhost) {
                    _0x3a369a(true);
                }
            }
            this.drawInterfaceButtons();
            this.gameMode_screenMsg();
        };
        _0x1f7918.prototype.interfaceReset = function() {
            this.endScreenCanvas = null;
            this.dangerCircleMiniMapCanvas = null;
            this.wastedPopups = [];
            this.lastWastedPopupT = 0;
            this.playercount = 0;
            this.safeArea = null;
            _0x1943b8 = null;
            _0x51e151 = null;
            if (this.interfaceButtons) {
                for (var _0x2f03a7 = 0; _0x2f03a7 < this.interfaceButtons.length; _0x2f03a7++) {
                    var _0x911050 = this.interfaceButtons[_0x2f03a7];
                    _0x911050.onInterfaceReset();
                }
            }
            this.interfaceButtons = [];
        };
        _0x1f7918.prototype.onInit = function() {};
        _0x1f7918.prototype.playercount = 0;
        _0x1f7918.prototype.setPlayerCount = function(_0x579d18) {
            this.playercount = _0x579d18;
        };
        _0x1f7918.prototype.showPlayerCount = function() {
            _0x39e82d.save();
            var _0x51cdfc = _0x19e9b5 / 2;
            var _0x2e6540 = _0x53a3ae * 50;
            var _0x51ed5e = _0x53a3ae * 300;
            _0x39e82d.globalAlpha = 0.35;
            _0x39e82d.fillStyle = "black";
            var _0x59314c = _0x53a3ae * 30;
            _0x39e82d.fillRect(_0x51cdfc - _0x51ed5e / 2, _0x59314c, _0x51ed5e, _0x2e6540);
            _0x39e82d.globalAlpha = 1;
            _0x39e82d.fillStyle = "white";
            _0x39e82d.font = _0x53a3ae * 30 + "px Arial";
            _0x39e82d.lineWidth = 1;
            _0x39e82d.textAlign = "center";
            _0x39e82d.textBaseline = "middle";
            _0x39e82d.shadowOffsetX = 1;
            _0x39e82d.shadowOffsetY = 1;
            _0x39e82d.shadowColor = "black";
            _0x59314c += _0x53a3ae * 25;
            var _0x4cb3ce = " player";
            if (this.playercount > 1) {
                _0x4cb3ce += "s";
            }
            if (this.state == battleRoyal_inProgress) {
                _0x4cb3ce += " alive!";
            } else if (this.state == _0x5d13e3 || this.state == battleRoyal_ready) {
                _0x4cb3ce += " joined";
            }
            _0x39e82d.fillText(this.playercount + _0x4cb3ce, _0x51cdfc, _0x59314c);
            _0x39e82d.restore();
        };
        _0x1f7918.prototype.lbCanvas = null;
        _0x1f7918.prototype.leaderboard = function(_0x4dbf74) {
            if (this.lbCanvas == null) {
                this.lbCanvas = document.createElement("canvas");
            }
            if (_0x4dbf74) {
                var _0x28532a = this.lbCanvas.getContext("2d");
                var _0xa4d40e = 55;
                var _0x5b79cf = 22;
                _0xa4d40e = _0xa4d40e + _0x5b79cf * _0x4dbf74.length;
                this.lbCanvas.width = 270;
                this.lbCanvas.height = _0xa4d40e;
                _0x28532a.globalAlpha = 0.2;
                _0x28532a.fillStyle = "#000000";
                _0x28532a.fillRect(0, 0, this.lbCanvas.width, this.lbCanvas.height);
                _0x28532a.globalAlpha = 1;
                _0x28532a.fillStyle = "#FFFFFF";
                var _0x310711 = _0x925cfa.name;
                _0x28532a.font = "24px Arial";
                if (!options_lowGraphics) {
                    _0x28532a.shadowOffsetX = 1;
                    _0x28532a.shadowOffsetY = 1;
                }
                _0x28532a.shadowColor = "black";
                _0x28532a.fillText(_0x310711, this.lbCanvas.width / 2 - _0x28532a.measureText(_0x310711).width / 2, 40);
                var _0x4c7749;
                _0x28532a.textAlign = "left";
                _0x28532a.font = "17px Arial";
                _0x4c7749 = 0;
                for (; _0x4c7749 < _0x4dbf74.length; ++_0x4c7749) {
                    _0x310711 = _0x26aab4 ? "" : _0x4dbf74[_0x4c7749].name || "mope.io";
                    _0x310711 += " (" + _0x540660(_0x4dbf74[_0x4c7749].xp) + ")";
                    _0x28532a.fillStyle = "#FFFFFF";
                    _0x28532a.fillText(_0x310711, 15, 65 + _0x5b79cf * _0x4c7749);
                }
            }
        };
        _0x1f7918.prototype.drawLeaderboard = function() {
            if (_0x4c02d5) {
                if (this.pieChartCanvas != null) {
                    if (this.pieChartCanvas.width) {
                        _0x39e82d.drawImage(this.pieChartCanvas, _0x149ef1 * 20, _0x149ef1 * 20, this.pieChartCanvas.width, this.pieChartCanvas.height);
                    }
                }
            }
            if (_0x1943b8) {
                _0x3523cd();
            }
        };
        _0x1f7918.prototype.btnPlayAgain = null;
        _0x1f7918.prototype.showStats = true;
        _0x1f7918.prototype.interfaceButtons = [];
        _0x1f7918.prototype.createInterfaceButtons = function() {
            this.interfaceButtons = [];
        };
        _0x1f7918.prototype.drawInterfaceButtons = function() {
            if (this.interfaceButtons) {
                for (var _0x4bfd0d = 0; _0x4bfd0d < this.interfaceButtons.length; _0x4bfd0d++) {
                    var _0x2a0ea1 = this.interfaceButtons[_0x4bfd0d];
                    if (_0x2a0ea1.isVisible) {
                        _0x2a0ea1.draw();
                    }
                }
            }
        };
        _0x1f7918.prototype.onResize = function() {
            this.drawInterfaceButtons();
        };
        _0x1f7918.prototype.readPlayerStats = function(_0x28f576) {
            var _0x1325bb = [];
            _0x1325bb.rank = _0x28f576.readUInt16();
            _0x1325bb.timeAlive = _0x28f576.readUInt16();
            _0x1325bb.totalKills = _0x28f576.readUInt16();
            _0x1325bb.topRank = _0x28f576.readUInt16();
            _0x1325bb.maxXP = _0x28f576.readUInt32();
            _0x1325bb.killedBy = _0x28f576.readString();
            return _0x1325bb;
        };
        _0x1f7918.prototype.playerInfo = function(_0x19ddaf) {
            if (isGhost && !_0x464637) {
                var _0x253a1c = this.readPlayerStats(_0x19ddaf);
                this.buildEndScreenHTML(_0x253a1c);
            } else if (!isGhost) {
                this.endScreenCanvas = null;
            }
        };
        var _0x5d13e3 = 0;
        var _0x322d9c = 1;
        var _0x322d9c = 1;
        var _0x458c53 = 2;
        var _0x239c0c = 4;
        var _0x1e80e8 = 4;
        _0x1f7918.prototype.worldUpdate = function(_0x6edc01) {
            _0x5066de = _0x6edc01.readUInt8();
            if (_0x5066de == _0x458c53) {
                var _0xfa4386 = minimapW / 200;
                var _0x522288 = minimapH / 200;
                var _0x1e2ea0 = _0x6edc01.readUInt32() * _0xfa4386;
                var _0x299a1f = _0x6edc01.readUInt32() * _0x522288;
                var _0x45222d = _0x6edc01.readUInt32() * 5;
                _0x1943b8 = {
                    x: _0x1e2ea0,
                    y: _0x299a1f,
                    rad: _0x45222d * (minimapW / _0x5039a5)
                };
            } else {
                _0x1943b8 = null;
            }
        };
        _0x1f7918.prototype.handleMessage = function(_0x3bb8da) {
            var _0x22d5d6 = _0x3bb8da.readUInt8();
            switch (_0x22d5d6) {
                case _0x2311e7: {
                    var _0xb046d9 = _0x3bb8da.readString();
                    this.setStatusBarMessage(_0xb046d9, 15);
                    break;
                }
                case _0x462897: {
                    this.alivePlayers = _0x3bb8da.readUInt16();
                    this.playerCountMsg = _0x3bb8da.readString();
                    this.setPlayerCountMsg();
                    break;
                }
                case _0x24f460: {
                    this.timeRemain = _0x3bb8da.readUInt16();
                    break;
                }
                case 33: {
                    var _0x51bb51 = _0x3bb8da.readUInt16();
                    isGhost = true;
                    this.showStats = true;
                    _0x33698e = false;
                    _0x347987();
                }
                break;
                case 34: {
                    _0x28e3d1 = "You WON!";
                    respawnXp = 0;
                    _0x35f207 = 80;
                    _0x14ad18 = "limegreen";
                    _0x5a50bf = +new Date() + 5000;
                    _0x33698e = false;
                    _0x347987();
                }
                break;
                case 35: {}
                break;
                case 36: {
                    var _0x55b028 = _0x3bb8da.readUInt8();
                    var _0x71418d = [];
                    for (_0x454fbf = 0; _0x454fbf < _0x55b028; ++_0x454fbf) {
                        _0x71418d.push({
                            name: _0x3bb8da.readString(),
                            xp: _0x3bb8da.readUInt32()
                        });
                    }
                    this.leaderboard(_0x71418d);
                }
                break;
                case 37: {
                    var _0x5c37a1 = _0x3bb8da.readUInt16();
                    var _0x6908a6 = _0x82cc9e(_0x5c37a1);
                    if (this.state == 4) {
                        var _0xb046d9 = "Game restarts in " + _0x6908a6;
                        if (_0x5c37a1 < 3) {
                            _0xb046d9 = "Starting new game";
                        }
                        this.setMessage(_0xb046d9, 500);
                    } else {
                        var _0xb046d9 = "Battle begins in " + _0x6908a6;
                        if (_0x5c37a1 < 3) {
                            if (_0x6908a6 == "") {
                                _0xb046d9 = "Starting new battle!";
                            } else {
                                _0xb046d9 = "Starting new battle! (" + _0x6908a6 + ")";
                            }
                        }
                        this.setMessage(_0xb046d9, 500);
                        if (_0x5c37a1 == 0) {
                            _0x114a53("SURVIVE!", 2500);
                        }
                    }
                }
                break;
                case 38: {
                    this.playersJoined = _0x3bb8da.readUInt16();
                    if (this.playersJoined > 0) {
                        this.setPlayerCount(this.playersJoined);
                    }
                }
                break;
                case 39: {
                    var _0x5c37a1 = _0x3bb8da.readUInt16();
                    var _0x6908a6 = _0x82cc9e(_0x5c37a1);
                    if (!isGhost) {
                        var _0xb046d9 = "Heatwave expanding in " + _0x6908a6;
                        if (_0x5c37a1 < 4) {
                            _0xb046d9 = "Heatwave expands now!";
                        }
                        this.setMessage(_0xb046d9, 500);
                        if (_0x5c37a1 == 0) {
                            _0x114a53("STAY SAFE!", 2500);
                        }
                    }
                }
                break;
                case 40: {
                    if (isGhost) {
                        this.setMessage("You have been eliminated!", 500);
                    } else {
                        this.setMessage("Stay in safe area!", 500);
                    }
                }
                break;
                case 41: {
                    _0x5066de = this.state = _0x3bb8da.readUInt8();
                    this.playersJoined = _0x3bb8da.readUInt16();
                    if (this.playersJoined > 0) {
                        this.setPlayerCount(this.playersJoined);
                    }
                    if (this.state == _0x5d13e3) {
                        this.setMessage("Waiting for players", 1000);
                    } else if (this.state == battleRoyal_gameReset) {
                        _0x3596f8();
                    }
                }
                break;
                case 42: {
                    var _0x3d4333 = _0x3bb8da.readUInt8() == 1;
                    if (_0x3d4333) {
                        this.setMessage("You WON!", 15000);
                    } else {
                        this.setMessage("You LOST!", 15000);
                    }
                }
                break;
                case 43: {
                    _0x259bfe = true;
                    if (_0x30770a()) {
                        _0x328977.close();
                    }
                }
                break;
                case 44: {
                    var _0x5cb4f7 = _0x3bb8da.readString();
                    if (_0x5cb4f7 && _0x5cb4f7.length > 0) {
                        this.onPlayerWasted(_0x5cb4f7);
                    }
                }
                break;
                case 45: {
                    console.log("Msg_battleroyal_endScreen");
                    var _0x4bcc2c = null;
                    var _0x2ba6fa = 0;
                    if (!_0x18f712) {
                        _0x4bcc2c = this.readPlayerStats(_0x3bb8da);
                        _0x2ba6fa = _0x4bcc2c.totalPlayers;
                    } else {
                        _0x2ba6fa = _0x3bb8da.readUInt16();
                    }
                    var _0x25204a = [];
                    if (_0x2ba6fa > 0) {
                        if (_0x2ba6fa > 5) {
                            _0x2ba6fa = 5;
                        }
                        for (var _0x454fbf = 0; _0x454fbf < _0x2ba6fa; ++_0x454fbf) {
                            _0x25204a.push({
                                playerName: _0x3bb8da.readString(),
                                wins: _0x3bb8da.readUInt8()
                            });
                        }
                    }
                    if (_0x25204a != null || _0x4bcc2c != null) {
                        this.endScreenDisplayed = false;
                        this.buildEndScreenHTML(_0x25204a, _0x4bcc2c);
                    }
                }
                break;
                case 46: {
                    var _0x5c37a1 = _0x3bb8da.readUInt16();
                    if (_0x5c37a1 == 0) {
                        this.setMessage("Battle Ended", 500);
                    } else {
                        var _0x6908a6 = _0x82cc9e(_0x5c37a1);
                        if (!isGhost) {
                            this.setMessage("Battle Ending in " + _0x6908a6, 500);
                        }
                    }
                }
                case 48: {
                    var _0x4bcc2c = this.readPlayerStats(_0x3bb8da);
                    this.buildEndScreen(null, _0x4bcc2c);
                }
            }
        };
        var _0x51e151 = null;

        function _0x3523cd() {
            if (!_0x51e151) {
                _0x51e151 = document.createElement("canvas");
            }
            _0x51e151.width = minimapW;
            _0x51e151.height = minimapH;
            var _0x471bf4 = _0x51e151.getContext("2d");
            _0x471bf4.clearRect(0, 0, _0x51e151.width, _0x51e151.height);
            _0x471bf4.save();
            var _0x6d69e2 = Math.max(3, _0x1943b8.rad);
            var _0x29e0cd = _0x1943b8.x;
            var _0x5e143a = _0x1943b8.y;
            _0x471bf4.translate(_0x29e0cd, _0x5e143a);
            _0x471bf4.save();
            _0x471bf4.globalAlpha = 1;
            _0x36784f(_0x471bf4, 0, 0, _0x1943b8.rad, 5, "white");
            _0x471bf4.restore();
            var _0x1bb6d2 = _0x53a3ae * minimapW * 1.5;
            var _0x449f70 = _0x53a3ae * minimapH * 1.5;
            var _0x457439 = 1;
            var _0x21f140 = "red";
            _0x5b0733(_0x471bf4, _0x1943b8.rad, Math.PI * 0, _0x21f140, _0x457439, _0x1bb6d2, _0x449f70);
            _0x5b0733(_0x471bf4, _0x1943b8.rad, Math.PI * 0.5, _0x21f140, _0x457439, _0x1bb6d2, _0x449f70);
            _0x5b0733(_0x471bf4, _0x1943b8.rad, Math.PI * 1, _0x21f140, _0x457439, _0x1bb6d2, _0x449f70);
            _0x5b0733(_0x471bf4, _0x1943b8.rad, Math.PI * 1.5, _0x21f140, _0x457439, _0x1bb6d2, _0x449f70);
            _0x471bf4.restore();
            if (_0x51e151) {
                _0x39e82d.drawImage(_0x51e151, _0x19e9b5 - (_0x149ef1 * 10 + _0x1189f4.width * _0x53a3ae), _0x149ef1 * 10, minimapW * _0x53a3ae, minimapH * _0x53a3ae);
            }
        }
        _0x1f7918.prototype.drawZombiePlayers = function() {
            if (this.zombiePlayers) {
                for (t = 0; t < this.zombiePlayers.length; t++) {
                    _0x102c70(this.zombiePlayers[t], "#adff32", 1);
                }
            }
        };
        _0x1f7918.prototype.drawMap = function() {
            this.buildPieChart();
            if (!_0x41cad8) {
                this.drawZombiePlayers();
            }
        };
        _0x1f7918.prototype.pieChartCanvas = null;
        _0x1f7918.prototype.teamColors = {
            0: "white",
            1: "#B6CF40"
        };
        _0x1f7918.prototype.buildPieChart = function() {
            if (this.pieChartCanvas == null) {
                this.pieChartCanvas = document.createElement("canvas");
            }
            if (this.pieChartCanvas == null) {
                return;
            }
            var _0x5052d8 = this.pieChartCanvas.getContext("2d");
            var _0x46ebe1 = {
                0: this.nonZombiePlayersCount,
                1: this.zombieCount
            };
            _0x18c43f = _0x41cad8 ? 1 : 0;
            var _0x2206c5 = new _0x1d868c({
                pad: 30,
                canvas: this.pieChartCanvas,
                data: _0x46ebe1,
                colors: this.teamColors
            });
            var _0x45fb2f = 55;
            var _0x17c0cc = 40;
            var _0x13f381 = 5;
            var _0x43f9d1 = 200;
            var _0x894200 = 200;
            _0x45fb2f = _0x43f9d1 + _0x13f381 * 2;
            this.pieChartCanvas.width = _0x894200 + _0x13f381 * 2;
            this.pieChartCanvas.height = _0x45fb2f;
            _0x2206c5.draw();
            _0x5052d8.globalAlpha = 0.2;
            var _0x2b1c18 = _0x13f381;
            _0x5052d8.globalAlpha = 0.5;
            _0x5052d8.fillStyle = "white";
            _0x5052d8.font = "20px Arial";
            var _0x2b1c18 = 200;
            str = _0x925cfa.name;
            _0x5052d8.fillText(str, this.pieChartCanvas.width / 2 - _0x5052d8.measureText(str).width / 2 - 15, _0x2b1c18);
        };
        _0x1f7918.prototype.endScreenDisplayed = false;
        _0x1f7918.prototype.buildEndScreenHTML = function(_0x3b5803) {
            if (this.endScreenDisplayed) {
                return;
            }
            this.endScreenDisplayed = true;
            var _0x2488f8 = "";
            _0x2488f8 += "<div class='msg'>YOU WERE #" + _0x3b5803.rank + "</div>";
            _0x2488f8 += "<div class='row'>";
            _0x2488f8 += "<div class='label'>Killed by:</div>";
            _0x2488f8 += "<div class='value2'>" + _0x3b5803.killedBy + "</div>";
            _0x2488f8 += "</div>";
            _0x2488f8 += "<div class='row'>";
            _0x2488f8 += "<div class='col1'>";
            _0x2488f8 += "<div class='label'>Time alive:</div>";
            _0x2488f8 += "<div class='value'>" + _0x82cc9e(_0x3b5803.timeAlive) + "</div>";
            _0x2488f8 += "</div>";
            _0x2488f8 += "<div class='col2'>";
            _0x2488f8 += "<div class='label'>Total kills:</div>";
            _0x2488f8 += "<div class='value'>" + _0x3b5803.totalKills + "</div>";
            _0x2488f8 += "</div>";
            _0x2488f8 += "</div>";
            _0x2488f8 += "<div class='row'>";
            _0x2488f8 += "<div class='col1'>";
            _0x2488f8 += "<div class='label'>Top rank:</div>";
            _0x2488f8 += "<div class='value'>" + _0x3b5803.topRank + "</div>";
            _0x2488f8 += "</div>";
            _0x2488f8 += "<div class='col2'>";
            _0x2488f8 += "<div class='label'>Max xp:</div>";
            _0x2488f8 += "<div class='value'>" + _0x540660(_0x3b5803.maxXP) + "</div>";
            _0x2488f8 += "</div>";
            _0x2488f8 += "</div>";
            _0x2488f8 += "<div style='clear:both;'></div>";
            _0x2488f8 += "<div class='btnDiv'>";
            _0x2488f8 += "<button id='btnMopeOptions' class='btn'>      CONTINUE      </button>";
            _0x2488f8 += "</div>";
            _0x2488f8 += "<div style='clear:both;'></div>";
            var _0x1551ba = document.getElementById("endScreen");
            if (_0x1551ba) {
                _0x1551ba.innerHTML = _0x2488f8;
                _0x1551ba.style.display = "block";
            }
            if (!_0x4c02d5 || isGhost) {
                _0x3a369a(true);
            }
        };
        _0x1f7918.prototype.endScreenCanvas = null;
        _0x1f7918.prototype.buildEndScreen = function(_0x3aba7d, _0x3397ef) {
            if (this.endScreenCanvas == null) {
                this.endScreenCanvas = document.createElement("canvas");
            }
            if (this.endScreenCanvas == null) {
                return;
            }
            var _0x187744 = this.endScreenCanvas.getContext("2d");
            var _0x5b733b = 55;
            var _0x32397e = 40;
            var _0x2513a2 = 5;
            var _0x3b2474 = 240;
            var _0x39b92b = 420;
            _0x5b733b = _0x3b2474 + _0x2513a2 * 2;
            this.endScreenCanvas.width = _0x39b92b + _0x2513a2 * 2;
            this.endScreenCanvas.height = _0x5b733b;
            _0x187744.globalAlpha = 0.2;
            _0x187744.fillStyle = "#000000";
            _0x187744.fillRect(0, 0, this.endScreenCanvas.width, this.endScreenCanvas.height);
            _0x187744.fillStyle = "#000000";
            _0x187744.fillRect(_0x2513a2, _0x2513a2, this.endScreenCanvas.width - _0x2513a2 * 2, this.endScreenCanvas.height - _0x2513a2 * 2);
            var _0x48350e = _0x2513a2;
            _0x187744.globalAlpha = 1;
            _0x187744.fillStyle = "#FFFFFF";
            _0x187744.font = "30px Arial";
            _0x48350e += 55;
            var _0x550b93 = "Final Stats";
            _0x187744.font = "30px Arial";
            _0x187744.fillText(_0x550b93, this.endScreenCanvas.width / 2 - _0x187744.measureText(_0x550b93).width / 2, _0x48350e);
            _0x187744.font = "20px Arial";
            _0x48350e += 45;
            _0x550b93 = "You were #" + _0x3397ef.rank;
            _0x187744.fillText(_0x550b93, this.endScreenCanvas.width / 2 - _0x187744.measureText(_0x550b93).width / 2, _0x48350e);
            _0x48350e += 40;
            var _0x234665 = _0x82cc9e(_0x3397ef.timeAlive);
            var _0x1e07ac = _0x2513a2 + 15;
            _0x501cf4(_0x187744, "Killed by", _0x3397ef.killedBy, _0x1e07ac, _0x48350e);
            _0x48350e += 40;
            _0x501cf4(_0x187744, "Time Alive", _0x82cc9e(_0x3397ef.timeAlive), _0x1e07ac, _0x48350e);
            _0x1e07ac += 210;
            _0x501cf4(_0x187744, "Total Kills", _0x3397ef.totalKills, _0x1e07ac, _0x48350e);
            _0x48350e += 40;
            _0x1e07ac = _0x2513a2 + 15;
            _0x501cf4(_0x187744, "Top rank", _0x3397ef.topRank, _0x1e07ac, _0x48350e);
            _0x1e07ac += 210;
            _0x501cf4(_0x187744, "Max XP", _0x540660(_0x3397ef.maxXP), _0x1e07ac, _0x48350e);
            _0x48350e += 50;
        };

        function _0x5b0733(_0x268526, _0x57f661, _0x344f5d, _0x4fb433, _0x325c76, _0x25b390, _0x448e8b) {
            _0x268526.save();
            _0x268526.globalAlpha = _0x325c76;
            _0x268526.fillStyle = _0x4fb433;
            _0x268526.rotate(_0x344f5d);
            _0x268526.save();
            _0x268526.strokeStyle = "white";
            _0x268526.beginPath();
            _0x268526.arc(0, 0, _0x57f661, 0, Math.PI * 0.5, false);
            _0x268526.stroke();
            _0x268526.restore();
            _0x268526.save();
            _0x268526.beginPath();
            _0x268526.arc(0, 0, _0x57f661, 0, Math.PI * 0.5, false);
            _0x268526.lineTo(0, _0x25b390);
            _0x268526.lineTo(_0x448e8b, _0x25b390);
            _0x268526.lineTo(_0x448e8b, 0);
            _0x268526.closePath();
            _0x268526.fill();
            _0x268526.restore();
            _0x268526.restore();
        }
        _0x1f7918.prototype.lastWastedPopupT = 0;
        _0x1f7918.prototype.onPlayerWasted = function(_0x1ff265) {
            if ((_0x4ec996 - this.lastWastedPopupT) / 1000 > 0.7) {
                this.lastWastedPopupT = _0x4ec996;
                var _0x5805e0 = new _0x15cab0(_0x1ff265 + " wasted!", 40, "red", 1500);
                this.wastedPopups.push(_0x5805e0);
            }
        };
        _0x1f7918.prototype.screenTextEndT = 0;
        _0x1f7918.prototype.screenTextMsg = "";
        _0x1f7918.prototype.setMessage = function(_0x1c7b64, _0x24c9ff) {
            this.screenTextMsg = _0x1c7b64;
            if (_0x24c9ff == 0) {
                this.screenTextEndT = +new Date() + _0x24c9ff;
            } else {
                this.screenTextEndT = +new Date() + _0x24c9ff;
            }
        };
        _0x1f7918.prototype.screenMessage = function() {
            var _0x37966d = 1;
            var _0x321164 = (this.screenTextEndT - _0x4ec996) / 1000 / _0x37966d;
            _0x321164 = _0x321164 < 0 ? 0 : _0x321164 > 1 ? 1 : _0x321164;
            if (_0x321164 > 0) {
                _0x39e82d.save();
                var _0x3f8b3a = _0x19e9b5 / 2;
                var _0x27c759 = _0x53a3ae * 60;
                var _0x33b361 = (_0x19e9b5 / 2 - 100) * _0x53a3ae;
                _0x39e82d.globalAlpha = 0.35;
                _0x39e82d.fillStyle = "black";
                var _0x261136 = _0x1519a6 - _0x1519a6 * 0.2;
                _0x39e82d.fillRect(_0x3f8b3a - _0x33b361 / 2, _0x261136 - _0x27c759 / 2, _0x33b361, _0x27c759);
                _0x39e82d.globalAlpha = 1;
                _0x39e82d.globalAlpha = _0x321164;
                _0x39e82d.globalAlpha = 1;
                _0x39e82d.fillStyle = "white";
                _0x39e82d.font = _0x53a3ae * 40 + "px Arial";
                _0x39e82d.lineWidth = 1;
                _0x39e82d.textAlign = "center";
                _0x39e82d.textBaseline = "middle";
                _0x39e82d.shadowOffsetX = 1;
                _0x39e82d.shadowOffsetY = 1;
                _0x39e82d.shadowColor = "black";
                _0x39e82d.fillText(this.screenTextMsg, _0x19e9b5 / 2, _0x261136);
                _0x39e82d.restore();
            }
        };
        var _0x4456f9 = new Array();
        _0x1f7918.prototype.setStatusBarMessage = function(_0x4c048d, _0x42912d) {
            var _0x136648 = 40;
            var _0x14e91e = 1;
            var _0x334df2 = "white";
            var _0x3144b1 = _0x19e9b5 / 2;
            var _0x22b326 = _0x1519a6 - _0x1519a6 * 0.15;
            var _0x58f6e4 = _0x19e9b5 / 2 - 100;
            var _0x29d884 = 60;
            var _0x10561c = "black";
            var _0x219068 = 0.1;
            var _0x2aef0d = +new Date() + _0x42912d * 1000;
            this.msg_statusbar = {
                txt: _0x4c048d,
                txt_size: _0x136648,
                txt_alpha: _0x14e91e,
                txt_color: _0x334df2,
                x: _0x3144b1,
                y: _0x22b326,
                bg_w: _0x58f6e4,
                bg_h: _0x29d884,
                bg_color: _0x10561c,
                bg_alpha: _0x219068,
                dur: _0x2aef0d
            };
        };
        _0x1f7918.prototype.msg_statusbar = null;
        _0x1f7918.prototype.msg_playerCount = null;
        var _0x2b8f2e = 0.1;
        _0x1f7918.prototype.setPlayerCountMsg = function() {
            var _0x31b67f = 20;
            var _0x14fdca = 1;
            var _0x400693 = "white";
            var _0x1d8497 = _0x19e9b5 / 2;
            var _0x255960 = 30;
            var _0x351179 = 100;
            var _0x130a51 = 40;
            var _0x1e313b = "black";
            var _0x28d71c = 0.1;
            var _0x98b5ae = "";
            if (this.playerCountMsg != "alive") {
                _0x130a51 = 70;
                _0x98b5ae = this.playerCountMsg + "\n" + this.alivePlayers + " joined";
            } else {
                _0x98b5ae = this.alivePlayers + " alive";
            }
            var _0x3d21ac = +new Date() + 60000;
            this.msg_playerCount = {
                txt: _0x98b5ae,
                txt_size: _0x31b67f,
                txt_alpha: _0x14fdca,
                txt_color: _0x400693,
                x: _0x1d8497,
                y: _0x255960,
                bg_w: _0x351179,
                bg_h: _0x130a51,
                bg_color: _0x1e313b,
                bg_alpha: _0x28d71c,
                dur: _0x3d21ac
            };
        };
        _0x1f7918.prototype.gameMode_screenMsg = function() {
            if (this.msg_statusbar) {
                this.drawMessage(this.msg_statusbar);
                if (this.msg_statusbar.dur - _0x4ec996 < 0) {
                    this.msg_statusbar = null;
                }
            }
            if (this.msg_playerCount) {
                this.drawMessage(this.msg_playerCount);
            }
        };
        _0x1f7918.prototype.drawMessage = function(_0x41b4fa) {
            if (_0x41b4fa && _0x41b4fa.txt) {
                this.drawMessageBar(_0x41b4fa.txt, _0x41b4fa.txt_size, _0x41b4fa.txt_alpha, _0x41b4fa.txt_color, _0x41b4fa.x, _0x41b4fa.y, _0x41b4fa.bg_w, _0x41b4fa.bg_h, _0x41b4fa.bg_color, _0x41b4fa.bg_alpha, _0x41b4fa.dur);
            }
        };
        _0x1f7918.prototype.drawMessageBar = function(_0x17d7d2, _0x252fe3, _0x4328a7, _0x1d243c, _0x58386b, _0x5056ab, _0x22106e, _0x119412, _0x582dcd, _0x3935d, _0x68d801) {
            var _0x6101ef = 1;
            {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = _0x3935d;
                _0x39e82d.fillStyle = _0x582dcd;
                _0x252fe3 = _0x252fe3 * _0x53a3ae;
                _0x39e82d.font = _0x252fe3 + "px Arial";
                var _0x4b7c6f = _0x58386b;
                var _0x2b322c = _0x5056ab;
                var _0x37a349 = _0x17d7d2.split("\n");
                var _0x9c8cf4 = _0x252fe3 * _0x37a349.length * 1.5 * _0x53a3ae;
                var _0x19bfdc = 0;
                for (var _0x466041 = 0; _0x466041 < _0x37a349.length; ++_0x466041) {
                    _0x19bfdc = Math.max(_0x19bfdc, _0x39e82d.measureText(_0x37a349[_0x466041]).width);
                }
                _0x19bfdc = _0x19bfdc * 1.5 * _0x53a3ae;
                _0x39e82d.fillRect(_0x4b7c6f - _0x19bfdc / 2, _0x2b322c - _0x9c8cf4 / 2, _0x19bfdc, _0x9c8cf4);
                _0x39e82d.globalAlpha = _0x4328a7;
                _0x39e82d.fillStyle = _0x1d243c;
                _0x39e82d.lineWidth = 1;
                _0x39e82d.textAlign = "center";
                _0x39e82d.textBaseline = "middle";
                _0x39e82d.shadowOffsetX = 1;
                _0x39e82d.shadowOffsetY = 1;
                _0x39e82d.shadowColor = "black";
                if (_0x37a349.length > 1) {
                    _0x2b322c -= _0x53a3ae * 10;
                } else {
                    _0x2b322c += _0x53a3ae * 5;
                }
                for (var _0x466041 = 0; _0x466041 < _0x37a349.length; _0x466041++) {
                    _0x39e82d.fillText(_0x37a349[_0x466041], _0x4b7c6f, _0x2b322c);
                    _0x2b322c += _0x252fe3 * (_0x466041 + 1);
                }
                _0x39e82d.restore();
            }
        };

        function _0x1f7918(_0x6e7965) {
            this.mode = _0x2f1da5;
            this.chatAllowed = true;
            this.createInterfaceButtons();
        }

        function _0x1d868c(_0x27f193) {
            this.options = _0x27f193;
            this.radius = _0x27f193.radius;
            this.pad = _0x27f193.pad;
            this.canvas = _0x27f193.canvas;
            this._ctx = this.canvas.getContext("2d");
            this.colors = _0x27f193.colors;
            this.radius = Math.min(this.canvas.width / 2, this.canvas.height / 2);
            this.draw = function() {
                var _0x56cb65 = 0;
                var _0x10bf14 = 0;
                this._ctx.save();
                this._ctx.globalAlpha = 0.3;
                this.drawCircle(this.canvas.width / 2 - this.pad / 2, this.canvas.height / 2 - this.pad / 2, this.radius - this.pad, "white");
                this._ctx.restore();
                for (var _0x34b329 in this.options.data) {
                    var _0x34206d = this.options.data[_0x34b329];
                    _0x56cb65 += _0x34206d;
                }
                var _0x5ce3b2 = 0;
                for (_0x34b329 in this.options.data) {
                    this._ctx.save();
                    this._ctx.lineWidth = 4;
                    this._ctx.strokeStyle = "white";
                    this._ctx.globalAlpha = 0.3;
                    var _0x1aaa44 = 0;
                    if (_0x18c43f == _0x34b329) {
                        this._ctx.globalAlpha = 0.6;
                        _0x1aaa44 = 8;
                    }
                    _0x34206d = this.options.data[_0x34b329];
                    var _0x5c38a2 = Math.PI * 2 * _0x34206d / _0x56cb65;
                    this.drawPieSlice(this.canvas.width / 2 - this.pad / 2, this.canvas.height / 2 - this.pad / 2, this.radius - this.pad, _0x5ce3b2, _0x5ce3b2 + _0x5c38a2, this.colors[_0x34b329], _0x1aaa44);
                    this._ctx.restore();
                    _0x5ce3b2 += _0x5c38a2;
                    _0x10bf14++;
                }
            };
            this.drawPieSlice = function(_0x2b3c52, _0x4da095, _0x23dc94, _0x2a4e0e, _0xbbb15e, _0x297bd5, _0x2a4aed) {
                this._ctx.fillStyle = _0x297bd5;
                this._ctx.beginPath();
                this._ctx.moveTo(_0x2b3c52, _0x4da095);
                this._ctx.arc(_0x2b3c52, _0x4da095, _0x23dc94 + _0x2a4aed, _0x2a4e0e, _0xbbb15e);
                this._ctx.closePath();
                this._ctx.fill();
                if (_0x2a4aed > 0) {
                    this._ctx.stroke();
                }
            };
            this.drawCircle = function(_0x3dd412, _0x323a04, _0x283435, _0x3c0e26) {
                this._ctx.fillStyle = _0x3c0e26;
                this._ctx.beginPath();
                this._ctx.moveTo(_0x3dd412, _0x323a04);
                this._ctx.arc(_0x3dd412, _0x323a04, _0x283435, 0, Math.PI * 2);
                this._ctx.closePath();
                this._ctx.fill();
            };
        }
        var _0x28c171 = _0x38881e;
        _0x40c1dd.prototype = Object.create(_0x28c171.prototype);
        _0x40c1dd.prototype.constructor = _0x40c1dd;
        _0x40c1dd.superClass = _0x28c171;
        _0x40c1dd.prototype.safeArea = null;
        _0x40c1dd.prototype.teamColors = {
            0: "#cccccc",
            1: "#ffff00",
            2: "#01effc",
            3: "#bb00ff"
        };

        function _0x40c1dd() {
            this.mode = _0x2530ce;
            this.createInterfaceButtons();
        }
        _0x40c1dd.prototype.wastedPopups = [];
        _0x40c1dd.prototype.playerDisplayNum = 0;
        _0x40c1dd.prototype.eventText = null;
        _0x40c1dd.prototype.setServerPlayerCount = function() {
            switch (this.playerDisplayNum) {
                case 1:
                case 2:
                    _0x469fbf.setText("On Server: " + _0x5461df(_0x3d8954) + " playing " + nPlayersUnique + " unqiue");
                    this.playerDisplayNum++;
                    break;
                case 3:
                case 4:
                    _0x469fbf.setText("Modes Total: " + gamemodes_alive + " playing, " + gamemodes_unique + " unique");
                    this.playerDisplayNum++;
                    break;
                case 5:
                    var _0x158c21 = gamemodes_unique / _0x170cf4 * 100;
                    _0x469fbf.setText("Milestone 2: " + _0x5461df(_0x158c21.toFixed(2)) + "% (" + gamemodes_unique + " of " + _0x170cf4 + ")");
                    this.playerDisplayNum++;
                    break;
                case 6:
                    this.playerDisplayNum = 0;
                    break;
                default:
                    _0x469fbf.setText(_0x5461df(_0x170cf4) + " across Mope!");
                    this.playerDisplayNum++;
                    break;
            }
            if (_0x596003) {
                _0x596003.setPlayersCount(_0x170cf4);
            }
        };
        const _0x162601 = 1;
        const _0x4d9068 = 2;
        const _0x382d58 = 3;
        const _0x590580 = 4;
        const _0x4556b4 = 5;
        const _0x4ad147 = 6;
        const _0x571380 = 7;
        _0x40c1dd.prototype.socketMessages = function(_0x2dbdcc) {
            var _0xe30575 = _0x2dbdcc.readUInt8();
            switch (_0xe30575) {
                case _0x162601: {
                    let _0x113e13 = _0x2dbdcc.readUInt8();
                    let _0x2e7ac2 = _0x2dbdcc.readString();
                    _0x2e7ac2 = "Nice, your team has unlocked '" + _0x2e7ac2 + "' buff.";
                    this.showBuffMessage("success", _0x2e7ac2, _0x113e13, 6);
                    break;
                }
                case _0x4d9068: {
                    let _0x4c967e = _0x2dbdcc.readUInt8();
                    let _0x259636 = _0x2dbdcc.readString();
                    _0x259636 = "Oh no, '" + _0x259636 + "' buff has been compromised!";
                    this.showBuffMessage("error", _0x259636, _0x4c967e, 6);
                    if (this.isApocalypseInprogress) {}
                    break;
                }
                case _0x382d58: {
                    console.log("APOCALYPSE_STARTED");
                    this.apocalypseType = _0x2dbdcc.readString();
                    this.triggeredByTeamID = _0x2dbdcc.readUInt8();
                    this.apocalypseStatus = _0x2dbdcc.readString();
                    this.timeLeft = _0x2dbdcc.readUInt16() / 100;
                    break;
                }
                case _0x590580: {
                    console.log("APOCALYPSE_ENDED");
                    this.apocalypseType = null;
                    this.triggeredByTeamID = 0;
                    this.apocalypseStatus = null;
                    this.timeLeft = 0;
                    _0x5338aa("Apocalypse is over. Now, you can go anywhere freely!", "success", 6);
                    break;
                }
                case _0x4556b4: {
                    this.isApocalypseInprogress = _0x2dbdcc.readUInt8() == 1;
                    if (this.isApocalypseInprogress) {
                        this.apocalypseType = _0x2dbdcc.readString();
                        this.triggeredByTeamID = _0x2dbdcc.readUInt8();
                        this.apocalypseStatus = _0x2dbdcc.readString();
                        this.timeLeft = _0x2dbdcc.readUInt16() / 100;
                    }
                    break;
                }
                case _0x4ad147: {
                    this.team1 = _0x2dbdcc.readUInt16();
                    this.team2 = _0x2dbdcc.readUInt16();
                    this.team3 = _0x2dbdcc.readUInt16();
                    this.updatePieChart({
                        1: this.team1,
                        2: this.team2,
                        3: this.team3
                    });
                    this.drawPieLeaderboard();
                    break;
                }
                case _0x571380: {
                    let _0x4505cc = _0x2dbdcc.readUInt8();
                    this.capturedStones = [];
                    for (var _0x4514fb = 0; _0x4514fb < _0x4505cc; _0x4514fb++) {
                        this.capturedStones.push({
                            stoneBuffID: _0x2dbdcc.readUInt8(),
                            hp: _0x2dbdcc.readUInt8() / 100
                        });
                    }
                    break;
                }
            }
        };
        _0x40c1dd.prototype.getStoneBuffIcon = function(_0x35efb8) {
            switch (_0x35efb8) {
                case 1:
                    return "/assets/s/2/gameobj/78/incentive/1.png";
                case 2:
                    return "/assets/s/2/gameobj/78/incentive/2.png";
                case 3:
                    return "/assets/s/2/gameobj/78/incentive/3.png";
                case 4:
                    return "/assets/s/2/gameobj/78/incentive/4.png";
                case 5:
                    return "/assets/s/2/gameobj/78/incentive/5.png";
                case 6:
                    return "/assets/s/2/gameobj/78/incentive/6.png";
                case 7:
                    return "/assets/s/2/gameobj/78/incentive/7.png";
                case 8:
                    return "/assets/s/2/gameobj/78/incentive/8.png";
                case 9:
                    return "/assets/s/2/gameobj/78/incentive/9.png";
                case 10:
                    return "/assets/s/2/gameobj/78/incentive/10.png";
                case 11:
                    return "/assets/s/2/gameobj/78/incentive/11.png";
                case 12:
                    return "/assets/s/2/gameobj/78/incentive/12.png";
                case 13:
                    return "/assets/s/2/gameobj/78/incentive/13.png";
            }
        };
        _0x40c1dd.prototype.showBuffMessage = function(_0x57797e, _0x58d697, _0x273637, _0x231ab1) {
            _0xb32151();
            var _0x3ff056 = document.getElementsByTagName("body")[0];
            if (_0x3ff056) {
                let _0x15c440 = document.getElementById("gameAreaWrapper");
                let _0x539b2b = _0x11d05e("mopeshop-popup");
                let _0x2fe85d = this.getStoneBuffIcon(_0x273637);
                let _0xd4cf07 = _0x11d05e("mopeshop-popup-icon", "");
                _0xd4cf07.innerHTML = "<img src='" + _0x2fe85d + "'/>";
                let _0x330f28 = _0x11d05e("msg", _0x57797e);
                let _0x4f9f49 = _0x11d05e("text");
                _0x4f9f49.innerHTML = _0x58d697;
                let _0x327db7 = _0x11d05e("closeMsg", "");
                _0x327db7.onclick = function() {
                    _0xb32151();
                };
                _0x330f28.appendChild(_0xd4cf07);
                _0x330f28.appendChild(_0x327db7);
                _0x330f28.appendChild(_0x4f9f49);
                _0x539b2b.appendChild(_0x330f28);
                _0x3ff056.insertBefore(_0x539b2b, _0x15c440);
                if (_0x231ab1 !== undefined && _0x231ab1 > 0) {
                    setTimeout(_0xb32151, _0x231ab1 * 1000);
                }
            }
        };
        _0x40c1dd.prototype.interface = function() {
            if (this.state == -1 || this.mode != _0x444fd7) {
                return;
            }
            if (_0x4c02d5) {
                if (this.pieChartCanvas != null) {
                    if (this.pieChartCanvas.width) {
                        _0x39e82d.drawImage(this.pieChartCanvas, 0, 0, this.pieChartCanvas.width, this.pieChartCanvas.height);
                    }
                }
            }
            this.drawInterfaceButtons();
        };
        _0x40c1dd.prototype.drawMap = function() {
            if (_0x4c02d5) {
                if (_0x1d523b) {
                    return;
                }
                this.drawPieLeaderboard();
                this.drawTeamPlayers();
                if (_0x596003) {
                    _0x596003.drawMap();
                }
                this.onApocalypseUpdated();
            }
        };
        _0x40c1dd.prototype.interfaceReset = function() {
            this.endScreenCanvas = null;
            this.dangerCircleMiniMapCanvas = null;
            this.wastedPopups = [];
            this.lastWastedPopupT = 0;
            this.playercount = 0;
            this.safeArea = null;
            if (this.interfaceButtons) {
                for (var _0x171868 = 0; _0x171868 < this.interfaceButtons.length; _0x171868++) {
                    var _0x2238dc = this.interfaceButtons[_0x171868];
                    _0x2238dc.onInterfaceReset();
                }
            }
            this.interfaceButtons = [];
        };
        _0x40c1dd.prototype.onInit = function() {};
        _0x40c1dd.prototype.playercount = 0;
        _0x40c1dd.prototype.setPlayerCount = function(_0x3dcf90) {
            this.playercount = _0x3dcf90;
        };
        _0x40c1dd.prototype.showPlayerCount = function() {
            _0x39e82d.save();
            var _0x31e2ab = _0x19e9b5 / 2;
            var _0x1cf38d = _0x53a3ae * 50;
            var _0x3bacbd = _0x53a3ae * 300;
            _0x39e82d.globalAlpha = 0.35;
            _0x39e82d.fillStyle = "black";
            var _0x4a7253 = _0x53a3ae * 30;
            _0x39e82d.fillRect(_0x31e2ab - _0x3bacbd / 2, _0x4a7253, _0x3bacbd, _0x1cf38d);
            _0x39e82d.globalAlpha = 1;
            _0x39e82d.fillStyle = "white";
            _0x39e82d.font = _0x53a3ae * 30 + "px Arial";
            _0x39e82d.lineWidth = 1;
            _0x39e82d.textAlign = "center";
            _0x39e82d.textBaseline = "middle";
            _0x39e82d.shadowOffsetX = 1;
            _0x39e82d.shadowOffsetY = 1;
            _0x39e82d.shadowColor = "black";
            _0x4a7253 += _0x53a3ae * 25;
            var _0x499a7f = " player";
            if (this.playercount > 1) {
                _0x499a7f += "s";
            }
            if (this.state == battleRoyal_inProgress) {
                _0x499a7f += " alive!";
            } else if (this.state == _0x5d13e3 || this.state == battleRoyal_ready) {
                _0x499a7f += " joined";
            }
            _0x39e82d.fillText(this.playercount + _0x499a7f, _0x31e2ab, _0x4a7253);
            _0x39e82d.restore();
        };
        _0x40c1dd.prototype.lbCanvas = null;
        _0x40c1dd.prototype.leaderboard = function(_0x23d4bc) {};
        _0x40c1dd.prototype.btnPlayAgain = null;
        _0x40c1dd.prototype.showStats = true;
        _0x40c1dd.prototype.interfaceButtons = [];
        _0x40c1dd.prototype.createInterfaceButtons = function() {
            this.interfaceButtons = [];
        };
        _0x40c1dd.prototype.drawInterfaceButtons = function() {
            if (this.interfaceButtons) {
                for (var _0x5428ff = 0; _0x5428ff < this.interfaceButtons.length; _0x5428ff++) {
                    var _0xd81a16 = this.interfaceButtons[_0x5428ff];
                    if (_0xd81a16.isVisible) {
                        _0xd81a16.draw();
                    }
                }
            }
        };
        _0x40c1dd.prototype.onResize = function() {
            this.drawInterfaceButtons();
        };
        _0x40c1dd.prototype.playerInfo = function(_0xfe25b6) {};
        _0x40c1dd.prototype.playerWorldUpdate = function(_0x111144) {
            return;
            this.team1 = _0x111144.readUInt16();
            this.team2 = _0x111144.readUInt16();
            this.team3 = _0x111144.readUInt16();
            this.isApocalypseInprogress = _0x111144.readUInt8() == 1;
            if (this.isApocalypseInprogress) {
                this.apocalypseType = _0x111144.readString();
                this.triggeredByTeamID = _0x111144.readUInt8();
                this.apocalypseStatus = _0x111144.readString();
                this.timeLeft = _0x111144.readUInt16() / 100;
            } else {}
            let _0x4e746b = _0x111144.readUInt8();
            this.capturedStones = [];
            for (var _0x5ae4c6 = 0; _0x5ae4c6 < _0x4e746b; _0x5ae4c6++) {
                this.capturedStones.push({
                    stoneBuffID: _0x111144.readUInt8(),
                    hp: _0x111144.readUInt8() / 100
                });
            }
        };
        _0x40c1dd.prototype.onApocalypseUpdated = function() {
            if (this.isApocalypseInprogress) {
                if (this.eventText == null) {
                    this.eventText = new _0x123582(20, "white");
                    this.eventText.setFontSize(_0x53a3ae * 28);
                }
                if (this.eventText) {
                    this.eventText.x = _0x19e9b5 / 2;
                    this.eventText.y = _0x1519a6 * 0.2;
                    this.eventText.draw();
                }
            }
        };
        _0x40c1dd.prototype.bonusRoundTimer = null;
        _0x40c1dd.prototype.pieChartCanvas = null;
        _0x40c1dd.prototype.setBonusRoundTimer = function(_0x4bd0ab) {
            var _0x400175 = "" + _0x4bd0ab;
            if (this.bonusRoundTimer == null) {
                this.bonusRoundTimer = new _0x123582(40, "#FFFFFF");
                this.bonusRoundTimer.strokeW = 2;
                this.bonusRoundTimer.multiLine = true;
                this.bonusRoundTimer.renderScale = 5;
                this.bonusRoundTimer.setText(_0x400175);
            } else {
                this.bonusRoundTimer.setFontSize(40);
                this.bonusRoundTimer.setText(_0x400175);
            }
        };
        _0x40c1dd.prototype.drawMiniMapObjects = function(_0x3f1072) {
            if (this.teamStones) {
                for (let _0x3d7a13 = 0; _0x3d7a13 < this.teamStones.length; _0x3d7a13++) {
                    let _0x31a6db = this.teamStones[_0x3d7a13];
                    if (_0x31a6db) {
                        _0x31a6db.c = "black";
                        _0x3f1072.drawCircle(_0x31a6db);
                    }
                }
                _0x3f1072.updateMapData();
            }
        };
        _0x40c1dd.prototype.teamStones = [];
        _0x40c1dd.prototype.teamModePieChart = null;
        _0x40c1dd.prototype.updatePieChart = function(_0x537927) {
            if (this.pieChartCanvas == null) {
                this.pieChartCanvas = document.createElement("canvas");
                this.teamModePieChart = new _0x1d868c({
                    pad: 30,
                    canvas: this.pieChartCanvas,
                    colors: this.teamColors
                });
            }
            if (this.teamModePieChart) {
                this.teamModePieChart.setData(_0x537927);
            }
        };
        _0x40c1dd.prototype.drawPieLeaderboard = function() {
            if (this.pieChartCanvas == null) {
                return;
            }
            var _0x233bf0 = this.pieChartCanvas.getContext("2d");
            var _0x38efbc = 5;
            var _0x4e9956 = 200;
            var _0x64f7d = 200;
            this.pieChartCanvas.width = _0x4e9956;
            this.pieChartCanvas.height = _0x64f7d + 20;
            this.teamModePieChart.draw();
            _0x233bf0.globalAlpha = 0.2;
            var _0x413581 = _0x38efbc;
            _0x233bf0.globalAlpha = 0.5;
            _0x233bf0.fillStyle = "white";
            _0x233bf0.font = "20px Arial";
            var _0x413581 = 210;
            str = _0x925cfa.name;
            _0x233bf0.fillText(str, this.pieChartCanvas.width / 2 - _0x233bf0.measureText(str).width / 2, _0x413581);
        };
        _0x40c1dd.prototype.inviteScreenCanvas = null;
        _0x40c1dd.prototype.endScreenCanvas = null;
        _0x40c1dd.prototype.endScreenDisplayed = false;

        function _0x1d868c(_0x5b64f1) {
            this.options = _0x5b64f1;
            this.radius = _0x5b64f1.radius;
            this.pad = _0x5b64f1.pad;
            this.canvas = _0x5b64f1.canvas;
            this._ctx = this.canvas.getContext("2d");
            this.colors = _0x5b64f1.colors;
            this.radius = Math.min(this.canvas.width / 2, this.canvas.height / 2);
            this.showBg = false;
            this.setData = function(_0x300780) {
                this.options.data = _0x300780;
            };
            this.draw = function() {
                var _0xacb825 = 0;
                var _0x4d2a2b = 0;
                if (this.showBg) {
                    this._ctx.save();
                    this._ctx.beginPath();
                    this._ctx.globalAlpha = 0.1;
                    this._ctx.fillStyle = "black";
                    this._ctx.rect(0, 0, this.canvas.width, this.canvas.height);
                    this._ctx.fill();
                    this._ctx.restore();
                }
                var _0xc9288f = this.canvas.width / 2;
                var _0x224c71 = this.canvas.height / 2;
                this._ctx.save();
                this._ctx.globalAlpha = 0.3;
                this.drawCircle(_0xc9288f, _0x224c71, this.radius, "white");
                this._ctx.restore();
                for (var _0x5bf236 in this.options.data) {
                    var _0x365ec0 = this.options.data[_0x5bf236];
                    _0xacb825 += _0x365ec0;
                }
                var _0x288852 = 0;
                for (_0x5bf236 in this.options.data) {
                    this._ctx.save();
                    this._ctx.lineWidth = 4;
                    this._ctx.strokeStyle = "white";
                    this._ctx.globalAlpha = 0.3;
                    var _0x3d3b02 = 0;
                    if (_0x18c43f == _0x5bf236) {
                        this._ctx.globalAlpha = 0.6;
                        _0x3d3b02 = 8;
                    }
                    _0x365ec0 = this.options.data[_0x5bf236];
                    var _0x436f71 = Math.PI * 2 * _0x365ec0 / _0xacb825;
                    this.drawPieSlice(_0xc9288f, _0x224c71, this.radius, _0x288852, _0x288852 + _0x436f71, this.colors[_0x5bf236], _0x3d3b02);
                    this._ctx.restore();
                    _0x288852 += _0x436f71;
                    _0x4d2a2b++;
                }
            };
            this.drawPieSlice = function(_0x95bf2e, _0x35a67f, _0x6aa608, _0x508095, _0x4574a6, _0x51c729, _0x32b89b) {
                this._ctx.fillStyle = _0x51c729;
                this._ctx.beginPath();
                this._ctx.moveTo(_0x95bf2e, _0x35a67f);
                this._ctx.arc(_0x95bf2e, _0x35a67f, _0x6aa608 + _0x32b89b, _0x508095, _0x4574a6);
                this._ctx.closePath();
                this._ctx.fill();
                if (_0x32b89b > 0) {
                    this._ctx.stroke();
                }
            };
            this.drawCircle = function(_0x295205, _0x1ea152, _0x1a8575, _0x4d45ff) {
                this._ctx.fillStyle = _0x4d45ff;
                this._ctx.beginPath();
                this._ctx.moveTo(_0x295205, _0x1ea152);
                this._ctx.arc(_0x295205, _0x1ea152, _0x1a8575, 0, Math.PI * 2);
                this._ctx.closePath();
                this._ctx.fill();
            };
        }
        _0x40c1dd.prototype.stonesCanvas = null;
        _0x40c1dd.prototype.getSkinImageObj = function(_0x3e321f) {
            var _0x2317e8 = "./assets/s/2/" + _0x3e321f;
            return _0x4172bb(_0x2317e8, function(_0x110c51) {});
        };
        _0x40c1dd.prototype.playerUI = [];
        _0x40c1dd.prototype.drawPlayerUI = function(_0x189c0c) {};
        _0x40c1dd.prototype.drawStoneCount = function(_0x1de20f, _0x76bf8b, _0x3e50b7, _0x570c7f) {
            _0x1de20f.save();
            _0x1de20f.globalAlpha = 0.5;
            let _0x57d949 = "./assets/s/2/gameobj/78/stone" + _0x76bf8b + ".png";
            let _0x354c6b = _0x4172bb(_0x57d949);
            if (_0x354c6b) {
                _0x1de20f.drawImage(_0x354c6b, 10, _0x570c7f, 40, 40);
                _0x570c7f += 50;
                _0x1de20f.fillStyle = "black";
                _0x1de20f.fillText(_0x3e50b7 + "", 60, _0x570c7f - 18);
            }
            _0x1de20f.restore();
        };
        _0x40c1dd.prototype.drawTeamPlayers = function() {
            if (this.teamPlayers) {
                var _0x272bb1 = this.teamColors[_0x18c43f];
                for (t = 0; t < this.teamPlayers.length; t++) {
                    _0x102c70(this.teamPlayers[t], _0x272bb1, 1);
                }
            }
        };
        _0x40c1dd.prototype.getTeamColor = function(_0x39905a) {
            switch (_0x39905a) {
                case 1:
                    return "yellow";
                case 2:
                    return "cyan";
                case 3:
                    return "purple";
            }
            return "gray";
        };
        _0x40c1dd.prototype.msgDisplayPumpkinsOnMiniMap = function(_0x368f14) {
            _0x2809d9 = [];
            var _0x3bf1d7 = _0x368f14.readUInt16();
            for (var _0x4323c2 = 0; _0x4323c2 < _0x3bf1d7; _0x4323c2++) {
                _0x2809d9.push({
                    x: _0x368f14.readUInt16() / 4,
                    y: _0x368f14.readUInt16() / 4,
                    type: 0,
                    rad: 2
                });
            }
        };
        _0x40c1dd.prototype.msgDisplayPlayersOnMiniMap = function(_0x4d8cdb) {
            _0x46a09d = [];
            var _0x10f996 = _0x4d8cdb.readUInt16();
            for (var _0x49a8a0 = 0; _0x49a8a0 < _0x10f996; _0x49a8a0++) {
                _0x46a09d.push({
                    teamID: _0x4d8cdb.readUInt16(),
                    x: _0x4d8cdb.readUInt32() / 100,
                    y: _0x4d8cdb.readUInt32() / 100,
                    rad: 3
                });
            }
        };
        _0x40c1dd.prototype.readGameRoomPropertyUpdate = function(_0x140146) {
            var _0x4afe42 = _0x140146.readUInt8();
            for (var _0x27aada = 0; _0x27aada < _0x4afe42; _0x27aada++) {
                var _0x597b61 = _0x140146.readUInt8();
                this.readUpdatedPropertyItem(_0x597b61, _0x140146);
            }
        };
        _0x40c1dd.prototype.readUpdatedPropertyItem = function(_0x5b9d31, _0x367083) {
            if (_0x5b9d31 == _0x14b97b) {
                console.log("TEAMMODE_APOCALYPSE_STARTED");
                this.isApocalypseInprogress = _0x367083.readUInt8() == 1;
            } else if (_0x5b9d31 == _0x5967e4) {
                console.log("TEAMMODE_APOCALYPSE_ENDED");
                this.isApocalypseInprogress = _0x367083.readUInt8() == 1;
            } else if (_0x5b9d31 == _0x14e75f) {
                console.log("TEAMMODE_APOCALYPSE_TIME_LEFT");
                let _0x15cff9 = _0x367083.readUInt16();
            }
        };
        var _0x28c171 = _0x38881e;
        _0x46c2db.prototype = Object.create(_0x28c171.prototype);
        _0x46c2db.prototype.constructor = _0x46c2db;
        _0x46c2db.superClass = _0x28c171;
        _0x46c2db.prototype.safeArea = null;

        function _0x46c2db(_0x4270c2) {
            this.mode = _0x4270c2;
            this.stamp = +new Date();
            this.chatAllowed = true;
            this.createInterfaceButtons();
        }
        _0x46c2db.prototype.wastedPopups = [];
        _0x46c2db.prototype.playerDisplayNum = 0;
        _0x46c2db.prototype.setServerPlayerCount = function() {
            _0x469fbf.setText(_0x5461df(_0x170cf4) + " online");
            if (_0x596003) {
                _0x596003.setPlayersCount(_0x170cf4);
            }
            this.playerDisplayNum = this.playerDisplayNum == 0 ? 1 : 0;
        };
        _0x46c2db.prototype.interface = function() {
            if (this.state == -1 || this.mode != _0x444fd7) {
                return;
            }
            if (_0x4c02d5) {
                for (var _0x38d55e = this.wastedPopups.length - 1; _0x38d55e >= 0; _0x38d55e--) {
                    var _0x44c1a6 = this.wastedPopups[_0x38d55e];
                    _0x44c1a6.draw();
                    if (_0x44c1a6.timedOut) {
                        this.wastedPopups.splice(_0x38d55e, 1);
                    }
                }
            }
            if (this.endScreenCanvas != null) {
                if (this.endScreenCanvas.width) {
                    _0x39e82d.drawImage(this.endScreenCanvas, _0x19e9b5 / 2 - this.endScreenCanvas.width / 2, _0x149ef1 * 15, this.endScreenCanvas.width, this.endScreenCanvas.height);
                }
                if (!_0x4c02d5 || isGhost) {
                    _0x3a369a(true);
                }
            }
            this.drawInterfaceButtons();
        };
        _0x46c2db.prototype.interfaceReset = function() {
            this.endScreenCanvas = null;
            this.dangerCircleMiniMapCanvas = null;
            this.wastedPopups = [];
            this.lastWastedPopupT = 0;
            this.playercount = 0;
            this.safeArea = null;
            if (this.interfaceButtons) {
                for (var _0x387293 = 0; _0x387293 < this.interfaceButtons.length; _0x387293++) {
                    var _0x37a2f8 = this.interfaceButtons[_0x387293];
                    _0x37a2f8.onInterfaceReset();
                }
            }
            this.interfaceButtons = [];
        };
        _0x46c2db.prototype.onInit = function() {};
        _0x46c2db.prototype.playercount = 0;
        _0x46c2db.prototype.setPlayerCount = function(_0x1036ce) {
            this.playercount = _0x1036ce;
        };
        _0x46c2db.prototype.showPlayerCount = function() {
            _0x39e82d.save();
            var _0x26ff6d = _0x19e9b5 / 2;
            var _0x22e55f = _0x53a3ae * 50;
            var _0x30514e = _0x53a3ae * 300;
            _0x39e82d.globalAlpha = 0.35;
            _0x39e82d.fillStyle = "black";
            var _0x3f7c62 = _0x53a3ae * 30;
            _0x39e82d.fillRect(_0x26ff6d - _0x30514e / 2, _0x3f7c62, _0x30514e, _0x22e55f);
            _0x39e82d.globalAlpha = 1;
            _0x39e82d.fillStyle = "white";
            _0x39e82d.font = _0x53a3ae * 30 + "px Arial";
            _0x39e82d.lineWidth = 1;
            _0x39e82d.textAlign = "center";
            _0x39e82d.textBaseline = "middle";
            _0x39e82d.shadowOffsetX = 1;
            _0x39e82d.shadowOffsetY = 1;
            _0x39e82d.shadowColor = "black";
            _0x3f7c62 += _0x53a3ae * 25;
            var _0x884a61 = " player";
            if (this.playercount > 1) {
                _0x884a61 += "s";
            }
            if (this.state == battleRoyal_inProgress) {
                _0x884a61 += " alive!";
            } else if (this.state == _0x5d13e3 || this.state == battleRoyal_ready) {
                _0x884a61 += " joined";
            }
            _0x39e82d.fillText(this.playercount + _0x884a61, _0x26ff6d, _0x3f7c62);
            _0x39e82d.restore();
        };
        _0x46c2db.prototype.lbCanvas = null;
        _0x46c2db.prototype.leaderboard = function(_0x9a97f1) {
            if (this.lbCanvas == null) {
                this.lbCanvas = document.createElement("canvas");
            }
            if (_0x9a97f1) {
                var _0x1a43c7 = this.lbCanvas.getContext("2d");
                var _0x4022e9 = 55;
                var _0x3ea27c = 22;
                _0x4022e9 = _0x4022e9 + _0x3ea27c * _0x9a97f1.length;
                this.lbCanvas.width = 270;
                this.lbCanvas.height = _0x4022e9;
                _0x1a43c7.globalAlpha = 0.2;
                _0x1a43c7.fillStyle = "#000000";
                _0x1a43c7.fillRect(0, 0, this.lbCanvas.width, this.lbCanvas.height);
                _0x1a43c7.globalAlpha = 1;
                _0x1a43c7.fillStyle = "#FFFFFF";
                var _0x25cff2 = _0x925cfa.name;
                _0x1a43c7.font = "24px Arial";
                if (_0x5981a2 != _0x4051d6) {
                    _0x1a43c7.shadowOffsetX = 1;
                    _0x1a43c7.shadowOffsetY = 1;
                }
                _0x1a43c7.shadowColor = "black";
                _0x1a43c7.fillText(_0x25cff2, this.lbCanvas.width / 2 - _0x1a43c7.measureText(_0x25cff2).width / 2, 40);
                var _0x2674e4;
                _0x1a43c7.textAlign = "left";
                _0x1a43c7.font = "17px Arial";
                _0x2674e4 = 0;
                for (; _0x2674e4 < _0x9a97f1.length; ++_0x2674e4) {
                    _0x25cff2 = _0x26aab4 ? "" : _0x9a97f1[_0x2674e4].name || "mope.io";
                    _0x25cff2 += " (" + _0x540660(_0x9a97f1[_0x2674e4].xp) + ")";
                    _0x1a43c7.fillStyle = "#FFFFFF";
                    _0x1a43c7.fillText(_0x25cff2, 15, 65 + _0x3ea27c * _0x2674e4);
                }
            }
        };
        _0x46c2db.prototype.drawLeaderboard = function() {
            if (_0x4c02d5) {
                if (!_0x33698e) {
                    if (_0x12b152) {
                        if (_0x12b152.width) {
                            _0x39e82d.drawImage(_0x12b152, _0x149ef1 * 10, _0x149ef1 * 10, _0x12b152.width * _0x53a3ae, _0x12b152.height * _0x53a3ae);
                        }
                    }
                }
            }
        };
        _0x46c2db.prototype.btnPlayAgain = null;
        _0x46c2db.prototype.showStats = true;
        _0x46c2db.prototype.interfaceButtons = [];
        _0x46c2db.prototype.createInterfaceButtons = function() {
            this.interfaceButtons = [];
        };
        _0x46c2db.prototype.drawInterfaceButtons = function() {
            if (this.interfaceButtons) {
                for (var _0x535e21 = 0; _0x535e21 < this.interfaceButtons.length; _0x535e21++) {
                    var _0x1b0bd0 = this.interfaceButtons[_0x535e21];
                    if (_0x1b0bd0.isVisible) {
                        _0x1b0bd0.draw();
                    }
                }
            }
        };
        _0x46c2db.prototype.onResize = function() {
            this.drawInterfaceButtons();
        };
        _0x46c2db.prototype.readPlayerStats = function(_0x2bbd7e) {
            var _0x340ed3 = [];
            _0x340ed3.rank = _0x2bbd7e.readUInt16();
            _0x340ed3.timeAlive = _0x2bbd7e.readUInt16();
            _0x340ed3.totalKills = _0x2bbd7e.readUInt16();
            _0x340ed3.topRank = _0x2bbd7e.readUInt16();
            _0x340ed3.maxXP = _0x2bbd7e.readUInt32();
            _0x340ed3.killedBy = _0x2bbd7e.readString();
            return _0x340ed3;
        };
        _0x46c2db.prototype.playerInfo = function(_0x3fa411) {
            if (isGhost && !_0x464637) {
                var _0x1cfb0c = this.readPlayerStats(_0x3fa411);
                this.buildEndScreenHTML(_0x1cfb0c);
            } else if (!isGhost) {
                this.endScreenCanvas = null;
            }
        };
        _0x46c2db.prototype.playerWorldUpdate = function(_0x4cae53) {};
        _0x46c2db.prototype.worldUpdate = function(_0x746ebb) {};
        _0x46c2db.prototype.drawMap = function() {
            if (_0x4c02d5) {
                if (_0x1d523b) {
                    return;
                }
                if (_0x596003) {
                    _0x596003.drawMap();
                }
                this.drawLeaderboard();
            }
        };
        _0x46c2db.prototype.pieChartCanvas = null;
        _0x46c2db.prototype.teamColors = {
            0: "white",
            1: "#B6CF40"
        };
        _0x46c2db.prototype.endScreenDisplayed = false;
        _0x46c2db.prototype.buildEndScreenHTML = function(_0x59bbba) {
            if (this.endScreenDisplayed) {
                return;
            }
            this.endScreenDisplayed = true;
            var _0x1ff23 = "";
            _0x1ff23 += "<div class='msg'>YOU WERE #" + _0x59bbba.rank + "</div>";
            _0x1ff23 += "<div class='row'>";
            _0x1ff23 += "<div class='label'>Killed by:</div>";
            _0x1ff23 += "<div class='value2'>" + _0x59bbba.killedBy + "</div>";
            _0x1ff23 += "</div>";
            _0x1ff23 += "<div class='row'>";
            _0x1ff23 += "<div class='col1'>";
            _0x1ff23 += "<div class='label'>Time alive:</div>";
            _0x1ff23 += "<div class='value'>" + _0x82cc9e(_0x59bbba.timeAlive) + "</div>";
            _0x1ff23 += "</div>";
            _0x1ff23 += "<div class='col2'>";
            _0x1ff23 += "<div class='label'>Total kills:</div>";
            _0x1ff23 += "<div class='value'>" + _0x59bbba.totalKills + "</div>";
            _0x1ff23 += "</div>";
            _0x1ff23 += "</div>";
            _0x1ff23 += "<div class='row'>";
            _0x1ff23 += "<div class='col1'>";
            _0x1ff23 += "<div class='label'>Top rank:</div>";
            _0x1ff23 += "<div class='value'>" + _0x59bbba.topRank + "</div>";
            _0x1ff23 += "</div>";
            _0x1ff23 += "<div class='col2'>";
            _0x1ff23 += "<div class='label'>Max xp:</div>";
            _0x1ff23 += "<div class='value'>" + _0x540660(_0x59bbba.maxXP) + "</div>";
            _0x1ff23 += "</div>";
            _0x1ff23 += "</div>";
            _0x1ff23 += "<div style='clear:both;'></div>";
            _0x1ff23 += "<div class='btnDiv'>";
            _0x1ff23 += "<button id='btnMopeOptions' class='btn'>      CONTINUE      </button>";
            _0x1ff23 += "</div>";
            _0x1ff23 += "<div style='clear:both;'></div>";
            var _0x3a5d99 = document.getElementById("endScreen");
            if (_0x3a5d99) {
                _0x3a5d99.innerHTML = _0x1ff23;
                _0x3a5d99.style.display = "block";
            }
            if (!_0x4c02d5 || isGhost) {
                _0x3d4608();
            }
        };
        _0x46c2db.prototype.endScreenCanvas = null;
        _0x46c2db.prototype.buildEndScreen = function(_0x4b051c, _0x311d7d) {
            if (this.endScreenCanvas == null) {
                this.endScreenCanvas = document.createElement("canvas");
            }
            if (this.endScreenCanvas == null) {
                return;
            }
            var _0x37f2d7 = this.endScreenCanvas.getContext("2d");
            var _0xb16b00 = 55;
            var _0x13a237 = 40;
            var _0x57866c = 5;
            var _0x3f9a6c = 240;
            var _0xcddfc4 = 420;
            _0xb16b00 = _0x3f9a6c + _0x57866c * 2;
            this.endScreenCanvas.width = _0xcddfc4 + _0x57866c * 2;
            this.endScreenCanvas.height = _0xb16b00;
            _0x37f2d7.globalAlpha = 0.2;
            _0x37f2d7.fillStyle = "#000000";
            _0x37f2d7.fillRect(0, 0, this.endScreenCanvas.width, this.endScreenCanvas.height);
            _0x37f2d7.fillStyle = "#000000";
            _0x37f2d7.fillRect(_0x57866c, _0x57866c, this.endScreenCanvas.width - _0x57866c * 2, this.endScreenCanvas.height - _0x57866c * 2);
            var _0x3ce4cf = _0x57866c;
            _0x37f2d7.globalAlpha = 1;
            _0x37f2d7.fillStyle = "#FFFFFF";
            _0x37f2d7.font = "30px Arial";
            _0x3ce4cf += 55;
            var _0x569550 = "Final Stats";
            _0x37f2d7.font = "30px Arial";
            _0x37f2d7.fillText(_0x569550, this.endScreenCanvas.width / 2 - _0x37f2d7.measureText(_0x569550).width / 2, _0x3ce4cf);
            _0x37f2d7.font = "20px Arial";
            _0x3ce4cf += 45;
            _0x569550 = "You were #" + _0x311d7d.rank;
            _0x37f2d7.fillText(_0x569550, this.endScreenCanvas.width / 2 - _0x37f2d7.measureText(_0x569550).width / 2, _0x3ce4cf);
            _0x3ce4cf += 40;
            var _0x14bffb = _0x82cc9e(_0x311d7d.timeAlive);
            var _0x6be502 = _0x57866c + 15;
            _0x501cf4(_0x37f2d7, "Killed by", _0x311d7d.killedBy, _0x6be502, _0x3ce4cf);
            _0x3ce4cf += 40;
            _0x501cf4(_0x37f2d7, "Time Alive", _0x82cc9e(_0x311d7d.timeAlive), _0x6be502, _0x3ce4cf);
            _0x6be502 += 210;
            _0x501cf4(_0x37f2d7, "Total Kills", _0x311d7d.totalKills, _0x6be502, _0x3ce4cf);
            _0x3ce4cf += 40;
            _0x6be502 = _0x57866c + 15;
            _0x501cf4(_0x37f2d7, "Top rank", _0x311d7d.topRank, _0x6be502, _0x3ce4cf);
            _0x6be502 += 210;
            _0x501cf4(_0x37f2d7, "Max XP", _0x540660(_0x311d7d.maxXP), _0x6be502, _0x3ce4cf);
            _0x3ce4cf += 50;
        };
        _0x46c2db.prototype.lastWastedPopupT = 0;
        _0x46c2db.prototype.onPlayerWasted = function(_0x731087) {
            if ((_0x4ec996 - this.lastWastedPopupT) / 1000 > 0.7) {
                this.lastWastedPopupT = _0x4ec996;
                var _0x208c3d = new _0x15cab0(_0x731087 + " wasted!", 40, "red", 1500);
                this.wastedPopups.push(_0x208c3d);
            }
        };
        _0x46c2db.prototype.lastWastedPopupT = 0;
        _0x46c2db.prototype.msgDisplayPumpkinsOnMiniMap = function(_0x41661b) {
            _0x2809d9 = [];
            var _0x321c5f = _0x41661b.readUInt16();
            for (var _0x3ef46c = 0; _0x3ef46c < _0x321c5f; _0x3ef46c++) {
                _0x2809d9.push({
                    x: _0x41661b.readUInt16() / 4,
                    y: _0x41661b.readUInt16() / 4,
                    type: 0,
                    rad: 2
                });
            }
        };
        _0x46c2db.prototype.msgDisplayPlayersOnMiniMap = function(_0x375a1e) {
            _0x46a09d = [];
            var _0x2244ba = _0x375a1e.readUInt16();
            for (var _0x1c9e86 = 0; _0x1c9e86 < _0x2244ba; _0x1c9e86++) {
                _0x46a09d.push({
                    id: _0x375a1e.readUInt32(),
                    x: _0x375a1e.readUInt32() / 100,
                    y: _0x375a1e.readUInt32() / 100,
                    rad: 3
                });
            }
        };
        const _0x4063ee = {
            [_0x473f55]: 1,
            [_0x4f884f]: 2,
            [_0x2bdc31]: 4,
            [_0x5e51a3]: 6,
            [_0x52cad3]: 5,
            [_0x56cf8f]: 3,
            [_0x2cd75a]: 7,
            [_0x3bf8ca]: 11,
            [_0x5a7f16]: 9,
            [_0x28396e]: 10,
            [_0xce5aa0]: 11,
            [_0x273128]: 12,
            [_0x478075]: 13,
            [_0x5642bc]: 15,
            [_0x27c6df]: 1,
            [_0x5767e8]: 2,
            [_0x9f0228]: 3,
            [_0x51851f]: 5,
            [_0x78a6fc]: 12,
            [_0x245c67]: 8,
            [_0x499275]: 7,
            [_0x32b37a]: 4,
            [_0x29d150]: 6,
            [_0x519f92]: 15,
            [_0x2b36cf]: 9,
            [_0x563e19]: 13,
            [_0x371ea0]: 10,
            [_0x4d8eda]: 9,
            [_0xbc1c26]: 11,
            [_0x57e1d4]: 10,
            [_0x5f399a]: 2,
            [_0x174cd3]: 15,
            [_0x5197c0]: 1,
            [_0x36539e]: 7,
            [_0x45fb63]: 3,
            [_0x3941c2]: 11,
            [_0x2e1cf4]: 4,
            [_0x125d8e]: 9,
            [_0x52eaad]: 8,
            [_0x1171ab]: 5,
            [_0x24396a]: 6,
            [_0x4372c1]: 12,
            [_0x145a21]: 14,
            [_0x2a825f]: 7,
            [_0x47e6fe]: 17,
            [_0x2ffcd2]: 13,
            [_0x1bba03]: 14,
            [_0x1d87e9]: 14,
            [_0x50e3b8]: 8,
            [_0x21b167]: 14,
            [_0x4a37d4]: 15,
            [_0x49687e]: 10,
            [_0x567082]: 8,
            [_0x50431e]: 15,
            [_0x1f5222]: 13,
            [_0x4c676b]: 11,
            [_0x57d22f]: 8,
            [_0x27033a]: 15,
            [_0x46adbf]: 16,
            [_0x5c13ab]: 16,
            [_0x31abda]: 16,
            [_0x504f20]: 16,
            [_0x2b4863]: 2,
            [_0x190fd6]: 9,
            [_0x4e8c9f]: 5,
            [_0x31189f]: 14,
            [_0x2be8a3]: 3,
            [_0x3afb27]: 4,
            [_0x8f4f69]: 6,
            [_0x7d036f]: 1,
            [_0x5c4842]: 2,
            [_0x28b669]: 3,
            [_0x5443af]: 5,
            [_0x3672b1]: 8,
            [_0x41ea0f]: 7,
            [_0x2bcad6]: 10,
            [_0x64c9a4]: 9,
            [_0x2e29dc]: 11,
            [_0x5ed5f7]: 12,
            [_0x4b4e53]: 13,
            [_0x3f71c6]: 16,
            [_0x5b6d09]: 15,
            [_0x2a7ad6]: 10,
            [_0x27689a]: 14,
            [_0x370aae]: 17,
            [_0x4d63e3]: 12,
            [a_birdMonster]: 16,
            [_0x471048]: 13,
            [_0x532f26]: 12,
            [_0x4abc25]: 6,
            [_0x3a5861]: 1,
            [_0x1c9f19]: 10,
            [_0x3adb75]: 7,
            [_0x2892bd]: 4,
            [_0x8a7dab]: 6,
            [_0x3d7ba]: 8,
            [_0x30aab5]: 4,
            [_0x89c4b3]: 9
        };
        var _0x194f0b = null;
        const _0x964768 = ["skin", "animal", "deal", "feature"];

        function _0x570b60() {
            if (_0x247e4a) {
                _0x247e4a.onLogon();
            }
        }

        function _0x25164f() {
            var _0x51f9db = document.getElementById("shop");
            if (_0x51f9db) {
                _0x51f9db.parentNode.removeChild(_0x51f9db);
                _0x55b75b();
            }
            _0x2708ab();
            var _0x4e225b = document.getElementById("shopbutton2");
            if (_0x4e225b) {
                _0x4e225b.disabled = false;
            }
            var _0x453478 = document.getElementById("shopbutton3");
            if (_0x453478) {
                _0x453478.disabled = false;
            }
            _0x247e4a.removeBlockOverlay();
            if (_0x194f0b) {
                _0x194f0b.style.display = "none";
            }
        }

        function _0x2708ab() {
            const _0x3c249e = _0x2a8248.prototype.changedWardrobeItems;
            const _0x47c7cc = Object.keys(_0x2a8248.prototype.wardrobeItems);
            const _0x369c02 = [];
            for (let _0x3c175c = 0; _0x3c175c < _0x47c7cc.length; _0x3c175c++) {
                const _0x343c26 = _0x47c7cc[_0x3c175c];
                const _0x30fb68 = _0x2a8248.prototype.wardrobeItems[_0x343c26].equippedSkin;
                const _0x492d57 = _0x3c249e[_0x343c26];
                if (_0x492d57 === undefined) {
                    continue;
                }
                if (_0x492d57 != _0x30fb68) {
                    _0x369c02.push({
                        id: _0x343c26,
                        changedSkin: _0x492d57
                    });
                }
            }
            _0x2a8248.prototype.changedWardrobeItems = {};
            if (_0x369c02.length <= 0) {
                return;
            }
            _0x5e37d3(_0x369c02, (_0x5817ed, _0x47599c) => {
                if (!_0x5817ed) {
                    _0x5338aa("AccountServer: Wardrobe: " + _0x47599c, "error", 10000);
                }
            });
        }

        function _0x20702c() {
            _0x25164f();
            _0x247e4a.load();
            _0x55b75b();
        }

        function _0x4e2f66() {
            var _0x3a1db5 = document.getElementById("shop_div");
            if (_0x3a1db5) {
                let _0x4c3ffc = 638;
                let _0x5343cd = 345;
                var _0x3d0837 = 0.9;
                var _0x2347f3 = Math.min(1, Math.min(_0x39cf91 * _0x3d0837, _0x4c3ffc) / _0x4c3ffc);
                var _0x222e21 = Math.min(1, Math.min(_0xbdc553 * _0x3d0837, _0x5343cd) / _0x5343cd);
                var _0x3aba4d = Math.min(_0x2347f3, _0x222e21);
                _0x3a1db5.style.transform = "scale(" + _0x3aba4d + ")";
                var _0x73f8d5 = Math.min(0, _0x39cf91 / 2 - _0x4c3ffc / 2) / _0x3d0837;
                _0x3a1db5.style.marginLeft = _0x73f8d5 != 0 ? _0x73f8d5 + "px" : "auto";
            }
        }

        function _0x5338aa(_0x1a4c3d, _0x5d04d0, _0xf39255) {
            _0xb32151();
            var _0x1c6f74 = document.getElementsByTagName("body")[0];
            if (_0x1c6f74) {
                var _0x45c6e3 = document.getElementById("gameAreaWrapper");
                var _0xb8502c = _0x11d05e("mopeshop-popup");
                var _0x1b957d = _0x11d05e("msg", _0x5d04d0);
                var _0x235d02 = _0x11d05e("text");
                _0x235d02.innerHTML = _0x1a4c3d;
                var _0x1f4872 = _0x11d05e("closeMsg", "");
                _0x1f4872.innerHTML = "X";
                _0x1f4872.onclick = function() {
                    _0xb32151();
                };
                _0x1b957d.appendChild(_0x1f4872);
                _0x1b957d.appendChild(_0x235d02);
                _0xb8502c.appendChild(_0x1b957d);
                _0x1c6f74.insertBefore(_0xb8502c, _0x45c6e3);
                if (_0xf39255 !== undefined && _0xf39255 > 0) {
                    setTimeout(_0xb32151, _0xf39255 * 1000);
                }
            }
        }

        function _0xb32151() {
            var _0x7468dc = document.getElementById("mopeshop-popup");
            if (_0x7468dc) {
                _0x7468dc.parentNode.removeChild(_0x7468dc);
            }
        }

        function _0x11d05e(_0x20e962, _0x2150cc) {
            var _0x51e613 = _0x3709bd("div", _0x20e962, _0x2150cc);
            return _0x51e613;
        }

        function _0x836120(_0x1f74d5, _0x2bd4be, _0x1a7455) {
            var _0x58029f = _0x3709bd("div", _0x1f74d5, _0x2bd4be);
            _0x58029f.innerHTML = _0x1a7455;
            return _0x58029f;
        }

        function _0x3709bd(_0x462002, _0x1471a4, _0x108720) {
            if (_0x462002 == undefined) {
                return null;
            }
            var _0x4978f9 = document.createElement(_0x462002);
            if (_0x1471a4 != undefined) {
                _0x4978f9.id = _0x1471a4;
            }
            if (_0x108720 != undefined) {
                _0x4978f9.className = _0x108720;
            }
            return _0x4978f9;
        }

        function _0x2d89d7() {
            var _0x9d5fea = _0x2b46b2.coins;
            if (_0x9d5fea > -1) {
                if (("" + _0x9d5fea).length > 10) {
                    return ("" + _0x9d5fea).substring(0, 4) + " PI.COINS";
                }
                return _0x9d5fea;
            } else {
                return "LOGIN";
            }
        }

        function _0x11704e() {
            var _0x8339b3 = _0x2b46b2.gems;
            if (_0x8339b3 > -1) {
                if (("" + _0x8339b3).length > 10) {
                    return ("" + _0x8339b3).substring(0, 4) + " PI.GEMS";
                }
                return _0x8339b3;
            } else {
                return 0;
            }
        }

        function _0x4b5557() {
            return _0x2b46b2.coins > -1;
        }

        function _0x4cdca5(_0x2e5c6c) {
            if (_0x2e5c6c && _0x247e4a) {
                _0x247e4a.load(_0x2e5c6c);
            } else {
                _0x25164f();
                _0x247e4a = new _0x2a8248();
                _0x247e4a.load();
            }
        }
        var _0x3e70c3 = {
            customClassesForOType: {},
            setCustomClassForShopItem: function(_0x3f4662, _0x1cf4d3, _0xc8f473) {
                if (!this.customClassesForOType[_0x1cf4d3]) {
                    this.customClassesForOType[_0x1cf4d3] = {
                        oTypeMainClass: null,
                        secondaryTypeClasses: {}
                    };
                }
                var _0x110bf8 = this.customClassesForOType[_0x1cf4d3];
                if (_0xc8f473 == null) {
                    if (_0x110bf8.oTypeMainClass != null) {
                        console.log("ERROR 'GameObjType.setCustomClassForGameObjType': a class (" + this.customClassesForOType[_0x1cf4d3] + ") is already set for oType " + _0x1cf4d3 + "! Check for duplicate calls!");
                    }
                    _0x110bf8.oTypeMainClass = _0x3f4662;
                } else {
                    if (_0xc8f473 in _0x110bf8.secondaryTypeClasses) {
                        console.log("ERROR 'GameObjType.setCustomClassForGameObjType': a class is already set for oType " + _0x1cf4d3 + " AND secondaryType (eg. animalType) " + _0xc8f473 + "! Check for duplicate calls!");
                    }
                    _0x110bf8.secondaryTypeClasses[_0xc8f473] = _0x3f4662;
                }
                this.onClassSet(_0x3f4662, _0x1cf4d3, _0xc8f473);
            },
            getClassForGameObjType: function(_0x3d2681, _0x2f501a) {
                if (_0x3d2681 in this.customClassesForOType) {
                    var _0x22ef79 = this.customClassesForOType[_0x3d2681];
                    if (_0x2f501a == null || _0x2f501a == 0) {
                        return _0x22ef79.oTypeMainClass;
                    } else if (_0x2f501a in _0x22ef79.secondaryTypeClasses) {
                        return _0x22ef79.secondaryTypeClasses[_0x2f501a];
                    } else {
                        return _0x22ef79.oTypeMainClass;
                    }
                } else {
                    return _0x184987;
                }
            },
            newlyVis_createGameObjFromMsg: function(_0x15bb64, _0x30ee8e) {
                var _0x499704 = _0x30ee8e.oType;
                var _0x41573b = null;
                if (_0x499704 == _0x48c056) {
                    _0x41573b = _0x30ee8e.animalType;
                }
                var _0xc02228 = _0x3e70c3.createGameObjOfOType(_0x499704, _0x41573b);
                _0xc02228.itemType = _0x15bb64;
                _0xc02228.worldUpd_readMsgNewlyVisible(_0x30ee8e, _0x499704, _0x41573b);
                return _0xc02228;
            },
            createGameObjOfOType: function(_0x4438b1, _0x52a480) {
                var _0x539be4 = this.getClassForGameObjType(_0x4438b1, _0x52a480);
                var _0x4de905 = new _0x539be4(_0x4438b1, _0x52a480);
                return _0x4de905;
            },
            onClassSet: function(_0x4ae085) {}
        };
        _0x184987.prototype = {
            id: 0,
            oType: 0,
            itemType: null
        };

        function _0x184987(_0x294382) {
            this.oType = _0x294382;
        }
        _0x184987.prototype.setObjTypes = function(_0xcd6521, _0x4266be) {
            this.oType = _0xcd6521;
        };
        _0x184987.prototype.loadShopData = function(_0xccd050) {
            this.data = _0xccd050;
            this.id = _0xccd050.id;
            this.itemType = _0xccd050.itemType;
            this.price = _0xccd050.price;
            this.onAfterLoad();
        };
        _0x184987.prototype.onAfterLoad = function() {
            this.btn = new _0x16e523(this);
        };
        _0x184987.prototype.worldUpd_readMsgNewlyVisible = function(_0x4afc2b, _0x37783b, _0x22b92e) {
            this.setObjTypes(_0x37783b, _0x22b92e);
            this.loadShopData(_0x4afc2b);
        };
        _0x184987.prototype.getImage = function() {
            return null;
        };
        _0x184987.prototype.generateHtml = function() {};
        _0x16e523.prototype = {
            itemID: 0,
            shopItem: null
        };

        function _0x16e523(_0x5becd4) {
            this.shopItem = _0x5becd4;
        }
        _0x16e523.prototype.generateHtml = function(_0x1b92e4) {
            var _0x2a7364 = _0x3709bd("div", "btn_" + this.shopItem.id, "buybutton");
            if (this.shopItem.price >= 0) {
                var _0x293ce8 = new Image();
                _0x293ce8.className = "buycoin-img";
                _0x293ce8.src = "shop/" + (this.shopItem.data.currencyType === 1 ? "gem" : "mopecoin") + ".png";
                _0x293ce8.loading = "lazy";
                var _0x2ed1e8 = _0x3709bd("span", "", "buycoin-price");
                var _0x1c2af8 = this.shopItem.price == 0 ? "FREE" : this.shopItem.price;
                if (this.shopItem.saleType == 2) {
                    _0x1c2af8 = this.shopItem.salePrice;
                }
                _0x2ed1e8.innerHTML = _0x1c2af8;
                _0x2a7364.appendChild(_0x293ce8);
                _0x2a7364.appendChild(_0x2ed1e8);
                var _0x22c599 = this;
                if (_0x1b92e4 == undefined || _0x1b92e4 == _0x265449) {
                    _0x2a7364.onclick = function() {
                        _0x22c599.onClick();
                    };
                }
            } else {
                _0x2a7364.innerHTML = "OWNED";
            }
            switch (this.shopItem.data.itemType) {
                case 0:
                    _0x2a7364.setAttribute("title", "Click to buy " + this.shopItem.data.skinName.replace("\n", " "));
                    break;
                case 2:
                    _0x2a7364.setAttribute("title", "Click to buy this deal");
                    break;
            }
            return _0x2a7364;
        };
        _0x16e523.prototype.onClick = function() {
            if (!_0x4b5557()) {
                _0x247e4a.showLoginScreen();
            } else {
                _0x247e4a.buyConfirmationOverlay(this.shopItem);
            }
            _0x3ca188();
        };
        var _0x5899d5 = _0x53a2f9;
        var _0x28c171 = _0x184987;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;

        function _0x53a2f9() {
            _0x53a2f9.superClass.call(this, 1000);
            this.oType = 1000;
            this.itemType = 1;
        }
        _0x53a2f9.prototype.prefix = null;
        _0x53a2f9.prototype.bonus = 0;
        _0x53a2f9.prototype.loadShopData = function(_0x2b9d76) {
            _0x53a2f9.superClass.prototype.loadShopData.call(this, _0x2b9d76);
            this.prefix = _0x2b9d76.prefix;
            this.bonus = _0x2b9d76.bonus;
            this.value = _0x2b9d76.value;
            this.onAfterLoad();
        };
        _0x53a2f9.prototype.worldUpd_readMsgNewlyVisible = function(_0xeef2fa, _0x558fad, _0x5ed9f6) {
            this.loadShopData(_0xeef2fa);
        };
        _0x53a2f9.prototype.generateHtml = function() {
            var _0x11246e = _0x3709bd("div", "", "coin-row");
            var _0x5599e3 = _0x3709bd("div", "", "coin-prefix");
            var _0x561ba3 = _0x3709bd("div", "", "coin-value");
            var _0x100066 = _0x3709bd("div", "", "coin-plus");
            var _0x8f4626 = _0x3709bd("div", "", "coin-bonus");
            var _0x2478cb = _0x3709bd("div", "", "coin-equ");
            var _0x205a34 = _0x3709bd("div", "", "coin-total");
            var _0x475022 = _0x3709bd("div", "", "coin-dollars");
            var _0x341773 = _0x3709bd("div", "", "coin-buy");
            var _0x2ba872 = _0x3709bd("div", "", "coin-img");
            var _0x108a37 = _0x3709bd("div", "", "coin-img");
            var _0xf1f137 = new Image();
            var _0x239947 = new Image();
            _0xf1f137.src = "shop/mopecoin.png";
            _0x239947.src = "shop/mopecoin.png";
            _0x2ba872.appendChild(_0xf1f137);
            _0x108a37.appendChild(_0x239947);
            _0x5599e3.innerHTML = "&nbsp;" + this.prefix;
            if (this.prefix != "") {
                _0x5599e3.className = _0x5599e3.className + " popular";
            } else {
                _0x8f4626.className = _0x8f4626.className + " nopopular";
            }
            _0x561ba3.innerHTML = "&nbsp;" + this.value;
            _0x100066.innerHTML = "+";
            _0x8f4626.innerHTML = "&nbsp;" + this.bonus + "%";
            _0x2478cb.innerHTML = "=";
            _0x341773.innerHTML = "BUY";
            _0x205a34.innerHTML = "&nbsp;" + Number(this.value) * (Number(this.bonus + 100) / 100);
            _0x475022.innerHTML = "$" + this.price;
            _0x11246e.appendChild(_0x5599e3);
            _0x11246e.appendChild(_0x2ba872);
            _0x11246e.appendChild(_0x561ba3);
            _0x11246e.appendChild(_0x100066);
            _0x11246e.appendChild(_0x8f4626);
            _0x11246e.appendChild(_0x2478cb);
            _0x11246e.appendChild(_0x108a37);
            _0x11246e.appendChild(_0x205a34);
            _0x11246e.appendChild(_0x475022);
            _0x11246e.appendChild(_0x341773);
            return _0x11246e;
        };
        _0x3e70c3.setCustomClassForShopItem(_0x53a2f9, 1000);
        var _0x5899d5 = _0x3e965b;
        var _0x28c171 = _0x184987;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;

        function _0x3e965b(_0xdea285, _0x2ae181) {
            _0x3e965b.superClass.call(this, _0x48c056);
            this.animalType = _0x2ae181;
            this.setBiome(this.animalType);
        }
        _0x3e965b.prototype.setBiome = function(_0x1bb2a4) {
            switch (_0x1bb2a4) {
                case _0x504f20:
                case _0x5642bc:
                case _0x4a37d4:
                case _0x21b167:
                case _0x31189f:
                case _0x1bba03:
                case _0x478075:
                case _0x471048:
                case _0x1f5222:
                    this.biome = _0x1ddf2f;
                    break;
                case _0x46adbf:
                case _0x50431e:
                case _0x519f92:
                case _0x1d87e9:
                case _0x563e19:
                    this.biome = _0x5d8525;
                    break;
                case _0x31abda:
                case _0x174cd3:
                case _0x145a21:
                case _0x2ffcd2:
                    this.biome = _0x16f106;
                    break;
                case _0x370aae:
                case _0x47e6fe:
                case _0x5c13ab:
                case _0x27033a:
                    this.biome = _0x47e33a;
                    break;
                case _0x3f71c6:
                case _0x5b6d09:
                case _0x27689a:
                case _0x4b4e53:
                    this.biome = _0x36f07b;
                    break;
                default:
                    break;
            }
        };
        _0x3e965b.prototype.loadShopData = function(_0x35ce67) {
            _0x3e965b.superClass.prototype.loadShopData.call(this, _0x35ce67);
            this.animalSpecies = _0x35ce67.animalSpecies;
            this.shopImg = "shop/" + _0x35ce67.shopImg;
            this.skinImage = _0x35ce67.skinImage;
            this.skinName = _0x35ce67.skinName;
            this.saleType = _0x35ce67.saleType;
            this.salePrice = _0x35ce67.salePrice;
        };
        _0x3e965b.prototype.setObjTypes = function(_0x41bd2e, _0x4a7236) {
            this.animalType = _0x4a7236;
        };
        _0x3e965b.prototype.getAnimalName = function() {
            switch (this.animalType) {
                case _0x4f884f:
                    return "rabbit";
                case _0x2bdc31:
                    return "pig";
                case _0x5e51a3:
                    return "fox";
                case _0x52cad3:
                    return "deer";
                case _0x56cf8f:
                    return "mole";
                case _0x2cd75a:
                    return "zebra";
                case _0x3bf8ca:
                    return "lion";
                case _0x5a7f16:
                    return "bigcat";
                case _0x28396e:
                    return "bear";
                case _0xce5aa0:
                    return "croc";
                case _0x273128:
                    return "rhino";
                case _0x478075:
                    return "hippo";
                case _0x5642bc:
                    return "dragon";
                case _0x27c6df:
                    return "shrimp";
                case _0x5767e8:
                    return "trout";
                case _0x9f0228:
                    return "crab";
                case _0x51851f:
                    return "squid";
                case _0x78a6fc:
                    return "shark";
                case _0x245c67:
                    return "stingray";
                case _0x499275:
                    return "turtle";
                case _0x32b37a:
                    return "seahorse";
                case _0x29d150:
                    return "jellyfish";
                case _0x519f92:
                    return "kraken";
                case _0x2b36cf:
                    return "pufferfish";
                case _0x563e19:
                    return "killerwhale";
                case _0x371ea0:
                    return "swordfish";
                case _0x4d8eda:
                    return "gorilla";
                case _0xbc1c26:
                    return "octopus";
                case _0x57e1d4:
                    return "wolf";
                case _0x5f399a:
                    return "arctichare";
                case _0x174cd3:
                    return "yeti";
                case _0x5197c0:
                    return "chipmunk";
                case _0x36539e:
                    return "muskox";
                case _0x45fb63:
                    return "penguin";
                case _0x3941c2:
                    return "polarbear";
                case _0x2e1cf4:
                    return "seal";
                case _0x125d8e:
                    return "snowleopard";
                case _0x52eaad:
                    return "walrus";
                case _0x1171ab:
                    return "reindeer";
                case _0x24396a:
                    return "arcticfox";
                case _0x4372c1:
                    return "wolverine";
                case _0x145a21:
                    return "mammoth";
                case _0x2a825f:
                    return "donkey";
                case _0x346a56:
                    return "snail";
                case _0x47e6fe:
                    return "blackdragon";
                case _0x2ffcd2:
                    return "sabertoothtiger";
                case _0x1bba03:
                    return "elephant";
                case _0x1d87e9:
                    return "bluewhale";
                case _0x50e3b8:
                    return "cobra";
                case _0x471048:
                    return "boaconstrictor";
                case _0x21b167:
                    return "giantspider";
                case _0x4a37d4:
                    return "trex";
                case _0x49687e:
                    return "tiger";
                case _0x567082:
                    return "giraffe";
                case _0x532f26:
                    return "eagle";
                case _0x4abc25:
                    return "hedgehog";
                case _0xcd3c11:
                    return "duck";
                case _0x1c45fa:
                    return "duckling";
                case _0x3a5861:
                    return "lemming";
                case _0x50431e:
                    return "kingcrab";
                case _0x2fab82:
                    return "frog";
                case _0x1f5222:
                    return "ostrich";
                case _0x1c9f19:
                    return "pelican";
                case _0x4c676b:
                    return "falcon";
                case _0x57d22f:
                    return "snowyowl";
                case _0x438400:
                    return "honeybee";
                case _0x27033a:
                    return "phoenix";
                case _0x49b249:
                    return "ostrichbaby";
                case _0x46adbf:
                    return "seamonster";
                case _0x5c13ab:
                    return "landmonster";
                case _0x31abda:
                    return "icemonster";
                case _0x504f20:
                    return "dinomonster";
                case _0x2b4863:
                    return "pigeon";
                case _0x190fd6:
                    return "toucan";
                case _0x3adb75:
                    return "macaw";
                case _0x4e8c9f:
                    return "flamingo";
                case _0x31189f:
                    return "cassowary";
                case _0x2be8a3:
                    return "chicken";
                case _0x3afb27:
                    return "woodpecker";
                case _0x8f4f69:
                    return "peacock";
                case _0x7d036f:
                    return "kangaroorat";
                case _0x5c4842:
                    return "desertchipmunk";
                case _0x28b669:
                    return "meerkat";
                case _0x5443af:
                    return "gazelle";
                case _0x2892bd:
                    return "armadillo";
                case _0x8a7dab:
                    return "fennecfox";
                case _0x3672b1:
                    return "camel";
                case _0x41ea0f:
                    return "warthog";
                case _0x2bcad6:
                    return "hyena";
                case _0x64c9a4:
                    return "rattlesnake";
                case _0x2e29dc:
                    return "vulture";
                case _0x5ed5f7:
                    return "bison";
                case _0x4b4e53:
                    return "komododragon";
                case _0x3f71c6:
                    return "giantscorpion";
                case _0x5b6d09:
                    return "pterodactyl";
                case _0x2a7ad6:
                    return "gobibear";
                case _0x27689a:
                    return "blackwidow";
                case _0x13312d:
                    return "bulletant";
                case _0x4d63e3:
                    return "markhor";
            }
        };
        _0x3e965b.prototype.getSkinPath = function(_0x4e0618) {
            var _0x15d642 = this.animalSpecies > 0 ? this.animalSpecies : "";
            var _0xcdd772 = _0x247e4a.ifMultiAssetSkin(this.animalType, this.skinImage);
            var _0x2aeeb5 = this.skinImage == undefined ? this.shopImg : "skins/" + _0xcdd772;
            if (_0x4e0618) {
                _0x2aeeb5 += _0x4e0618;
            }
            return _0x2aeeb5 + ".png";
        };
        _0x3e965b.prototype.getImage = function(_0x27ee25 = false) {
            const _0x515783 = "assets/s/" + this.data.season + "/" + this.getSkinPath();
            if (!_0x27ee25 && _0x2e23fc[_0x515783]) {
                return _0x2e23fc[_0x515783];
            }
            var _0x55e06d = new Image();
            _0x55e06d.className = "animalSkin_" + this.animalType;
            _0x55e06d.src = _0x515783;
            _0x55e06d.loading = "lazy";
            _0x2e23fc[_0x515783] = _0x55e06d;
            return _0x55e06d;
        };
        _0x3e965b.prototype.getImagePromo = function(_0x5b56fb) {
            const _0x42b252 = "assets/s/" + this.data.season + "/" + this.getSkinPath(_0x5b56fb);
            if (_0x2e23fc[_0x42b252]) {
                return _0x2e23fc[_0x42b252];
            }
            var _0x3f07b2 = new Image();
            _0x3f07b2.className = "animalSkin_" + this.animalType;
            _0x3f07b2.src = _0x42b252;
            _0x3f07b2.loading = "lazy";
            _0x2e23fc[_0x42b252] = _0x3f07b2;
            return _0x3f07b2;
        };
        _0x3e965b.prototype.getSkinName = function() {
            var _0x49e2a2 = this.skinName;
            return _0x49e2a2.replace("\n", "<br>");
        };
        _0x3e965b.prototype.generateHtml = function(_0x5f1788) {
            var _0x478824 = "item skin " + (this.price == -1 ? " itemOwned" : " buyItem") + " aniItem_" + this.animalType;
            if (_0x5f1788 == _0x8505df) {
                _0x478824 = _0x478824 + " confirm_item";
            }
            var _0x35f131 = _0x11d05e("", _0x478824);
            var _0x1ddf93 = _0x11d05e("", "image biome_" + this.biome);
            var _0x3144e0 = _0x11d05e("", "price");
            _0x1ddf93.setAttribute("title", this.getSkinName().replace("<br>", " "));
            _0x3144e0.innerHTML = this.getSkinName();
            var _0x501d9c = this.getImage(_0x5f1788 == _0x8505df);
            _0x1ddf93.appendChild(_0x501d9c);
            if (this.price > 0) {
                var _0x3a472c = "";
                if (this.saleType == 1) {
                    _0x3a472c = "NEW";
                } else if (this.saleType == 2) {
                    _0x3a472c = "SALE";
                }
                if (this.salePrice != this.price && this.saleType > 0) {
                    _0x3a472c += " -" + Math.floor((1 - this.salePrice / this.price) * 100) + "%";
                }
                if (_0x3a472c != "") {
                    var _0x3418eb = _0x11d05e("newItem_" + this.animalType, "newItem");
                    _0x3418eb.innerHTML = _0x3a472c;
                    _0x35f131.appendChild(_0x3418eb);
                }
            }
            if (this.data.tier !== undefined) {
                var _0x3f4452 = _0x11d05e("tier", "tier");
                _0x3f4452.innerHTML = "T" + this.data.tier;
                _0x3f4452.title = "Animal Tier: " + this.data.tier;
                _0x1ddf93.appendChild(_0x3f4452);
            }
            if (_0x247e4a.showSeason) {
                if (this.data.season !== undefined) {
                    var _0x86ce0b = _0x11d05e("season", "season");
                    _0x86ce0b.innerHTML = "S" + this.data.season;
                    _0x86ce0b.title = "Released in Mopeio Season " + this.data.season;
                    _0x1ddf93.appendChild(_0x86ce0b);
                }
            }
            _0x35f131.appendChild(_0x1ddf93);
            _0x35f131.appendChild(_0x3144e0);
            if (this.price >= 0) {
                _0x35f131.appendChild(this.btn.generateHtml(_0x5f1788));
            } else if (_0x5f1788 != _0x12994c) {
                var _0x5d7d3e = this;
            }
            return _0x35f131;
        };
        _0x3e70c3.setCustomClassForShopItem(_0x3e965b, _0x48c056);
        _0x3e965b.prototype.generateHtml = function(_0x2e7d06) {
            var _0x2b8cea = "item skin " + (this.price == -1 ? " itemOwned" : " buyItem") + " aniItem_" + this.animalType;
            if (_0x2e7d06 == _0x8505df) {
                _0x2b8cea = _0x2b8cea + " confirm_item";
            }
            var _0x11c0a1 = _0x11d05e("", _0x2b8cea);
            var _0x3d40a4 = _0x11d05e("", "image biome_" + this.biome);
            var _0x4143bc = _0x11d05e("", "price");
            _0x3d40a4.setAttribute("title", this.getSkinName().replace("<br>", " "));
            _0x4143bc.innerHTML = this.getSkinName();
            var _0xc19eff = this.getImage(_0x2e7d06 == _0x8505df);
            _0x3d40a4.appendChild(_0xc19eff);
            if (this.price > 0) {
                var _0x2b65c6 = "";
                if (this.saleType == 1) {
                    _0x2b65c6 = "NEW";
                } else if (this.saleType == 2) {
                    _0x2b65c6 = "SALE";
                }
                if (this.salePrice != this.price && this.saleType > 0) {
                    _0x2b65c6 += " -" + Math.floor((1 - this.salePrice / this.price) * 100) + "%";
                }
                if (_0x2b65c6 != "") {
                    var _0x25746a = _0x11d05e("newItem_" + this.animalType, "newItem");
                    _0x25746a.innerHTML = _0x2b65c6;
                    _0x11c0a1.appendChild(_0x25746a);
                }
            }
            if (this.data.tier !== undefined) {
                var _0x1f7d25 = _0x11d05e("tier", "tier");
                _0x1f7d25.innerHTML = "T" + this.data.tier;
                _0x1f7d25.title = "Animal Tier: " + this.data.tier;
                _0x3d40a4.appendChild(_0x1f7d25);
            }
            if (_0x247e4a.showSeason) {
                if (this.data.season !== undefined) {
                    var _0x1e4aea = _0x11d05e("season", "season");
                    _0x1e4aea.innerHTML = "S" + this.data.season;
                    _0x1e4aea.title = "Released in Mopeio Season " + this.data.season;
                    _0x3d40a4.appendChild(_0x1e4aea);
                }
            }
            _0x11c0a1.appendChild(_0x3d40a4);
            _0x11c0a1.appendChild(_0x4143bc);
            if (this.price >= 0) {
                _0x11c0a1.appendChild(this.btn.generateHtml(_0x2e7d06));
            } else if (_0x2e7d06 != _0x12994c) {
                var _0x32e8ab = this;
            }
            return _0x11c0a1;
        };

        function _0x2a8248() {
            if (_0x4b5557()) {
                var _0x1d810b = document.getElementById("divButtons");
                _0x1d810b.style.display = "none";
            }
            console.log("@@@@ Mopeio Shop: v 1.0 b @@@@");
            var _0x15008a = document.getElementById("shopbutton2");
            var _0x461fb6 = document.getElementById("shopbutton3");
            var _0x5c89cf = document.getElementById("btnLogin");
            var _0x486d75 = document.getElementById("btnLogout2");
            _0x5c89cf.onclick = function() {
                _0x145787("login");
            };
            _0x486d75.onclick = function() {
                _0x139562();
            };
            _0x15008a.onclick = function() {
                this.disabled = true;
                _0x145787();
            };
            _0x461fb6.onclick = function() {
                this.disabled = true;
                _0x145787();
            };
            var _0x268cde = document.getElementById("onconnectDiv");
            if (_0x268cde) {}
        }
        _0x2a8248.prototype.items = [];
        _0x2a8248.prototype.datatab = [];
        _0x2a8248.prototype.showSeason = true;
        _0x2a8248.prototype.getPackageInfo = function(_0x285581) {};
        _0x2a8248.prototype.itemIdToItem = {};
        _0x2a8248.prototype.purchasedItems = [];
        _0x2a8248.prototype.changedWardrobeItems = {};
        _0x2a8248.prototype.generateXsollaItem = function(_0x232544, _0xae4009) {
            var _0x5b739e = "item skin buyItem";
            if (_0xae4009 == _0x8505df) {
                _0x5b739e = _0x5b739e + " confirm_item";
            }
            var _0x2c373c = _0x11d05e("", _0x5b739e);
            var _0x285337 = _0x11d05e("", "image biome_land");
            var _0x2664e6 = _0x11d05e("", "price");
            _0x285337.setAttribute("title", _0x232544.description);
            var _0x2ac5b0 = new Image();
            let _0x54e157;
            switch (_0x232544.name) {
                case "Mopecoins":
                    _0x54e157 = "shop/mopecoin.png";
                    _0x2664e6.innerHTML = _0x232544.amount + " Mopecoins";
                    break;
                case "Gems":
                    _0x54e157 = "shop/gem.png";
                    _0x2664e6.innerHTML = _0x232544.amount + " Gems";
                    break;
                case "VIP":
                    _0x54e157 = "shop/VIP_Pass.png";
                    _0x2664e6.innerHTML = "VIP Pass";
                    _0x2c373c.classList.add("vipPass");
                    _0x2c373c.classList.add("deal");
                    _0x2ac5b0.className = "shopdeal";
                    _0x2ac5b0.style.width = "auto";
                    break;
            }
            _0x2ac5b0.src = _0x54e157;
            _0x285337.appendChild(_0x2ac5b0);
            _0x2c373c.appendChild(_0x285337);
            _0x2c373c.appendChild(_0x2664e6);
            const _0x50efad = _0x3709bd("div", "btn_" + _0x232544.name, "buybutton");
            var _0x2ac5b0 = new Image();
            _0x2ac5b0.className = "buycoin-img";
            _0x2ac5b0.style.width = 0;
            _0x2ac5b0.loading = "lazy";
            var _0x2664e6 = _0x3709bd("span", "", "buycoin-price");
            var _0x154796 = "$" + _0x232544.price;
            _0x2664e6.innerHTML = _0x154796;
            _0x50efad.appendChild(_0x2ac5b0);
            _0x50efad.appendChild(_0x2664e6);
            _0x50efad.addEventListener("click", () => {
                _0x528677(_0x232544.id);
            });
            if (_0x232544.name === "VIP") {
                _0x50efad.classList.add("vipPass");
                if (_0x2b46b2.hasVip) {
                    _0x50efad.style.display = "none";
                }
            }
            _0x50efad.setAttribute("title", "Click to buy this pack");
            _0x2c373c.appendChild(_0x50efad);
            if (_0x232544.name === "VIP") {
                const _0x1424ad = _0x3709bd("div", "btn_" + _0x232544.name, "buybutton");
                var _0x2ac5b0 = new Image();
                _0x2ac5b0.className = "buycoin-img";
                _0x2ac5b0.style.width = 0;
                _0x2ac5b0.loading = "lazy";
                var _0x2664e6 = _0x3709bd("span", "", "buycoin-price");
                _0x2664e6.innerHTML = "Cancel autorenew";
                _0x2664e6.style.left = "150px";
                _0x1424ad.appendChild(_0x2ac5b0);
                _0x1424ad.appendChild(_0x2664e6);
                _0x1424ad.style.backgroundColor = "rgba(255, 0, 0, 0.75)";
                _0x1424ad.addEventListener("click", () => {
                    _0xef105e();
                });
                _0x1424ad.setAttribute("title", "Click to cancel autorenew");
                _0x1424ad.classList.add("vipPass");
                if (_0x2b46b2.hasVip && _0x2b46b2.hasAutoRenew) {
                    _0x2c373c.appendChild(_0x1424ad);
                }
            }
            return _0x2c373c;
        };
        _0x2a8248.prototype.load = function(_0xfdba08) {
            var _0x1362b4 = this;
            if (_0x1c0f11) {
                var _0x16ab73 = document.getElementById("divButtons");
                _0x16ab73.style.display = "none";
            }
            var _0x5ab74a = {
                shopItems: [],
                settings: []
            };
            _0x313e53(function(_0x38a2dd, _0x361d80) {
                if (!_0x38a2dd) {
                    _0x5338aa("Could not connect to AccountServer!", "itemDoesntExist", 5);
                    var _0x28b815 = document.getElementById("shopOverlay");
                    if (_0x28b815) {
                        _0x28b815.parentNode.removeChild(_0x28b815);
                    }
                    return;
                }
                if (_0x361d80) {
                    for (var _0x56894b = 0; _0x56894b < _0x361d80.items.length; _0x56894b++) {
                        var _0x588cda = _0x361d80.items[_0x56894b];
                        _0x5ab74a.shopItems.push(_0x588cda);
                    }
                    if (_0x361d80.settings) {
                        for (var _0x56894b = 0; _0x56894b < _0x361d80.settings.length; _0x56894b++) {
                            _0x5ab74a.settings.push(_0x361d80.settings[_0x56894b]);
                        }
                    }
                    _0x5ab74a.shopItems.sort((_0x1852a6, _0x33c9ea) => {
                        return _0x33c9ea.currencyType - _0x1852a6.currencyType;
                    });
                }
                var _0x3b300f = {
                    tab: "Skins",
                    shopItems: []
                };
                var _0x30db41 = {
                    tab: "Deals",
                    shopItems: []
                };
                var _0x34fef2 = {
                    tab: "Features",
                    shopItems: []
                };
                const _0x1b8aa5 = {
                    tab: "Coins",
                    shopItems: []
                };
                const _0x53bc0f = {
                    tab: "Gems",
                    shopItems: []
                };
                const _0x28e30c = {
                    tab: "VIP Pass",
                    shopItems: []
                };
                var _0x3cadac = [];
                var _0x547803 = [_0x3b300f, _0x34fef2, _0x30db41, _0x1b8aa5, _0x53bc0f];
                if (_0x5d3cc4 && _0x5d3cc4.success) {
                    _0x547803.push(_0x28e30c);
                }
                for (_0x56894b = 0; _0x56894b < _0x5ab74a.shopItems.length; _0x56894b++) {
                    var _0x24533c = _0x5ab74a.shopItems[_0x56894b];
                    switch (_0x24533c.shopCategory) {
                        case 0: {
                            var _0x3795b3 = _0xa9548b({
                                animalType: _0x24533c.animalType,
                                animalSpecies: _0x24533c.animalSpecies,
                                animalSubSpecies: _0x24533c.animalSubSpecies,
                                mopeSeasonID: _0x24533c.season
                            });
                            if (_0x3795b3) {
                                _0x24533c.id = _0x24533c.itemId;
                                _0x24533c.oType = _0x48c056;
                                _0x24533c.skinName = _0x3795b3.aniName || _0x24533c.itemId;
                                _0x24533c.skinImage = _0x3795b3.skinName + ".ui";
                                _0x3b300f.shopItems.push(_0x24533c);
                            } else {
                                console.log("No animal type data for shop item " + _0x24533c.itemId);
                            }
                        }
                        break;
                        case 1: {
                            if (_0x24533c.itemType == 1) {
                                var _0x3795b3 = _0xa9548b({
                                    animalType: _0x24533c.animalType,
                                    animalSpecies: _0x24533c.animalSpecies,
                                    animalSubSpecies: _0x24533c.animalSubSpecies,
                                    mopeSeasonID: _0x24533c.season
                                });
                                if (_0x3795b3) {
                                    _0x24533c.id = _0x24533c.itemId;
                                    _0x24533c.oType = _0x48c056;
                                    _0x24533c.skinName = _0x3795b3.aniName || _0x24533c.itemId;
                                    _0x24533c.skinImage = _0x3795b3.skinName + ".ui";
                                    _0x34fef2.shopItems.push(_0x24533c);
                                } else {
                                    console.log("No animal type data for shop item " + _0x24533c.itemId);
                                }
                            } else if (_0x24533c.itemType == 3) {
                                _0x24533c.id = _0x24533c.itemId;
                                _0x24533c.oType = _0x512230;
                                _0x34fef2.shopItems.push(_0x24533c);
                            }
                        }
                        break;
                        case 2: {
                            _0x24533c.id = _0x24533c.itemId;
                            _0x24533c.oType = _0x1aa977;
                            _0x30db41.shopItems.push(_0x24533c);
                        }
                        break;
                        break;
                        default:
                    }
                }
                var _0x49c08a = {
                    skins: _0x547803
                };
                _0x2a8248.prototype.itemIdToItem = {};
                _0x2a8248.prototype.shop = {
                    ownedSkins: [],
                    ownedAnimals: [],
                    ownedDeals: [],
                    ownedProps: [],
                    settings: [],
                    skins: [],
                    props: [],
                    banners: _0x5ab74a.banners
                };
                var _0x1105bd = [];
                for (t = 0; t < _0x49c08a.skins.length; t++) {
                    var _0x112d20 = _0x49c08a.skins[t];
                    for (_0x56894b = 0; _0x56894b < _0x112d20.shopItems.length; _0x56894b++) {
                        var _0x6edead = _0x112d20.shopItems[_0x56894b];
                        var _0x174d6b = _0x3e70c3.newlyVis_createGameObjFromMsg(_0x6edead.itemType, _0x6edead);
                        if (_0x174d6b.price == -1 && _0x174d6b.data.itemType == 0) {
                            if (!_0x2a8248.prototype.shop.ownedSkins[_0x6edead.itemId]) {
                                _0x2a8248.prototype.shop.ownedSkins[_0x6edead.itemId] = _0x174d6b;
                                _0x2a8248.prototype.shop.ownedSkins.push(_0x174d6b);
                            }
                        } else if (_0x174d6b.price == -1 && _0x174d6b.data.itemType == 1) {
                            if (!_0x2a8248.prototype.shop.ownedAnimals[_0x6edead.itemId]) {
                                _0x2a8248.prototype.shop.ownedAnimals[_0x6edead.itemId] = _0x174d6b;
                                _0x2a8248.prototype.shop.ownedAnimals.push(_0x174d6b);
                            }
                        } else if (_0x174d6b.price == -1 && _0x174d6b.data.itemType == 2) {
                            _0x2a8248.prototype.shop.ownedDeals.push(_0x174d6b);
                        }
                        _0x2a8248.prototype.itemIdToItem[_0x6edead.itemId] = _0x6edead;
                        _0x1105bd.push(_0x174d6b);
                    }
                }
                _0x2a8248.prototype.shop.allItems = _0x1105bd;
                for (d = 0; d < _0x2a8248.prototype.shop.ownedDeals.length; d++) {
                    var _0x3bfaea = _0x2a8248.prototype.shop.ownedDeals[d];
                    for (s = 0; s < _0x1105bd.length; s++) {
                        var _0x6edead = _0x1105bd[s];
                        if (_0x6edead.data.promotions && _0x6edead.data.promotions.indexOf(_0x3bfaea.itemId) > -1) {
                            _0x6edead.price = -1;
                            if (!_0x2a8248.prototype.shop.ownedSkins[_0x6edead.data.itemId]) {
                                _0x2a8248.prototype.shop.ownedSkins.push(_0x6edead);
                            }
                        }
                    }
                }
                for (_0x56894b = 0; _0x56894b < _0x2a8248.prototype.shop.allItems.length; _0x56894b++) {
                    _0x2a8248.prototype.shop.allItems[_0x2a8248.prototype.shop.allItems[_0x56894b].data.itemId] = _0x2a8248.prototype.shop.allItems[_0x56894b];
                }
                for (t = 0; t < _0x49c08a.skins.length; t++) {
                    var _0x112d20 = _0x49c08a.skins[t];
                    var _0x31031e = _0x112d20.tab;
                    var _0x306eda = {
                        name: _0x31031e,
                        items: []
                    };
                    _0x2a8248.prototype.shop.skins.push(_0x306eda);
                    _0x2a8248.prototype.shop.skins[_0x31031e] = _0x306eda;
                    for (_0x56894b = 0; _0x56894b < _0x112d20.shopItems.length; _0x56894b++) {
                        var _0x6edead = _0x112d20.shopItems[_0x56894b];
                        for (let _0x31351b = 0; _0x31351b < _0x1105bd.length; _0x31351b++) {
                            var _0x31bcd2 = _0x1105bd[_0x31351b];
                            if (_0x6edead.id == _0x31bcd2.id && _0x31bcd2.price > -1) {
                                _0x306eda.items.push(_0x31bcd2);
                            }
                        }
                    }
                }
                if (_0x4f90e1) {
                    _0x3f8c4d((_0x5040ca, _0xcf7a8b) => {
                        if (!_0x5040ca) {
                            _0x5338aa("AccountServer: Failed to load your purchases: " + _0xcf7a8b, "error", 10000);
                        } else {
                            _0x2a8248.prototype.shop.settings = _0xcf7a8b.settings;
                            _0x2a8248.prototype.purchasedItems = _0xcf7a8b.purchases;
                            _0x2a8248.prototype.wardrobeItems = _0xcf7a8b.wardrobe;
                            _0x2a8248.prototype.createPurchases();
                        }
                        if (_0xfdba08) {
                            _0x247e4a.updateshop_div();
                        } else {
                            _0x2a8248.prototype.buildInterface(false);
                        }
                        _0x247e4a.onShopLoaded();
                    });
                } else {
                    if (_0xfdba08) {
                        _0x247e4a.updateshop_div();
                    } else {
                        _0x2a8248.prototype.buildInterface(false);
                    }
                    _0x247e4a.onShopLoaded();
                }
            });
        };
        _0x2a8248.prototype.loadData = function() {
            var _0x52d436 = {
                shopItems: [],
                settings: []
            };
            _0x313e53(function(_0x3397e1, _0x47a3e9) {
                if (!_0x3397e1) {
                    _0x5338aa("Could not connect to AccountServer!", "itemDoesntExist", 5);
                    var _0x5a2716 = document.getElementById("shopOverlay");
                    if (_0x5a2716) {
                        _0x5a2716.parentNode.removeChild(_0x5a2716);
                    }
                    return;
                }
                if (_0x47a3e9) {
                    for (var _0xe43373 = 0; _0xe43373 < _0x47a3e9.items.length; _0xe43373++) {
                        var _0x9f3db0 = _0x47a3e9.items[_0xe43373];
                        _0x52d436.shopItems.push(_0x9f3db0);
                    }
                    if (_0x47a3e9.settings) {
                        for (var _0xe43373 = 0; _0xe43373 < _0x47a3e9.settings.length; _0xe43373++) {
                            _0x52d436.settings.push(_0x47a3e9.settings[_0xe43373]);
                        }
                    }
                }
                var _0x2df305 = {
                    tab: "Skins",
                    shopItems: []
                };
                var _0x1dcf1c = {
                    tab: "Features",
                    shopItems: []
                };
                var _0x4c2dea = {
                    tab: "Deals",
                    shopItems: []
                };
                const _0x3473ec = {
                    tab: "Coins",
                    shopItems: [{}]
                };
                const _0x2e9511 = {
                    tab: "Gems",
                    shopItems: [{}]
                };
                const _0x40e19d = {
                    tab: "VIP Pass",
                    shopItems: [{}]
                };
                var _0x5e26a2 = [_0x2df305, _0x1dcf1c, _0x4c2dea, _0x3473ec, _0x2e9511];
                if (_0x5d3cc4 && _0x5d3cc4.success) {
                    _0x5e26a2.push(_0x40e19d);
                }
                for (_0xe43373 = 0; _0xe43373 < _0x52d436.shopItems.length; _0xe43373++) {
                    var _0x374467 = _0x52d436.shopItems[_0xe43373];
                    switch (_0x374467.shopCategory) {
                        case 0: {
                            var _0x19b156 = _0xa9548b({
                                animalType: _0x374467.animalType,
                                animalSpecies: _0x374467.animalSpecies,
                                animalSubSpecies: _0x374467.animalSubSpecies,
                                mopeSeasonID: _0x374467.season
                            });
                            if (_0x19b156) {
                                _0x374467.id = _0x374467.itemId;
                                _0x374467.oType = _0x48c056;
                                _0x374467.skinName = _0x19b156.aniName || _0x374467.itemId;
                                _0x374467.skinImage = _0x19b156.skinName + ".ui";
                                _0x2df305.shopItems.push(_0x374467);
                            } else {}
                            break;
                        }
                        case 2: {
                            _0x374467.id = _0x374467.itemId;
                            _0x374467.oType = _0x1aa977;
                            _0x4c2dea.shopItems.push(_0x374467);
                        }
                        break;
                        break;
                        default:
                    }
                }
                var _0x59ca8b = {
                    skins: _0x5e26a2
                };
                _0x2a8248.prototype.itemIdToItem = {};
                _0x2a8248.prototype.shop = {
                    ownedSkins: [],
                    ownedDeals: [],
                    ownedProps: [],
                    settings: [],
                    skins: [],
                    props: [],
                    banners: _0x52d436.banners
                };
                var _0x2fc885 = [];
                for (t = 0; t < _0x59ca8b.skins.length; t++) {
                    var _0x5326d5 = _0x59ca8b.skins[t];
                    for (_0xe43373 = 0; _0xe43373 < _0x5326d5.shopItems.length; _0xe43373++) {
                        var _0x1bef5d = _0x5326d5.shopItems[_0xe43373];
                        var _0x11210f = _0x3e70c3.newlyVis_createGameObjFromMsg(_0x1bef5d.itemType, _0x1bef5d);
                        if (_0x11210f.price == -1 && _0x11210f.data.itemType == 0) {
                            if (!_0x2a8248.prototype.shop.ownedSkins[_0x1bef5d.itemId]) {
                                _0x2a8248.prototype.shop.ownedSkins[_0x1bef5d.itemId] = _0x11210f;
                                _0x2a8248.prototype.shop.ownedSkins.push(_0x11210f);
                            }
                        } else if (_0x11210f.price == -1 && _0x11210f.data.itemType == 2) {
                            _0x2a8248.prototype.shop.ownedDeals.push(_0x11210f);
                        }
                        _0x2a8248.prototype.itemIdToItem[_0x1bef5d.itemId] = _0x1bef5d;
                        _0x2fc885.push(_0x11210f);
                    }
                }
                _0x2a8248.prototype.shop.allItems = _0x2fc885;
                for (d = 0; d < _0x2a8248.prototype.shop.ownedDeals.length; d++) {
                    var _0x37fa07 = _0x2a8248.prototype.shop.ownedDeals[d];
                    for (s = 0; s < _0x2fc885.length; s++) {
                        var _0x1bef5d = _0x2fc885[s];
                        if (_0x1bef5d.data.promotions && _0x1bef5d.data.promotions.indexOf(_0x37fa07.itemId) > -1) {
                            _0x1bef5d.price = -1;
                            if (!_0x2a8248.prototype.shop.ownedSkins[_0x1bef5d.data.itemId]) {
                                _0x2a8248.prototype.shop.ownedSkins.push(_0x1bef5d);
                            }
                        }
                    }
                }
                for (_0xe43373 = 0; _0xe43373 < _0x2a8248.prototype.shop.allItems.length; _0xe43373++) {
                    _0x2a8248.prototype.shop.allItems[_0x2a8248.prototype.shop.allItems[_0xe43373].data.itemId] = _0x2a8248.prototype.shop.allItems[_0xe43373];
                }
                for (t = 0; t < _0x59ca8b.skins.length; t++) {
                    var _0x5326d5 = _0x59ca8b.skins[t];
                    var _0x438e95 = _0x5326d5.tab;
                    var _0x342135 = {
                        name: _0x438e95,
                        items: []
                    };
                    _0x2a8248.prototype.shop.skins.push(_0x342135);
                    _0x2a8248.prototype.shop.skins[_0x438e95] = _0x342135;
                    for (_0xe43373 = 0; _0xe43373 < _0x5326d5.shopItems.length; _0xe43373++) {
                        var _0x1bef5d = _0x5326d5.shopItems[_0xe43373];
                        for (let _0x160eeb = 0; _0x160eeb < _0x2fc885.length; _0x160eeb++) {
                            var _0x5e55a5 = _0x2fc885[_0x160eeb];
                            if (_0x1bef5d.id == _0x5e55a5.id && _0x5e55a5.price > -1) {
                                _0x342135.items.push(_0x5e55a5);
                            }
                        }
                    }
                }
                if (!_0x4f90e1) {
                    return;
                }
                _0x3f8c4d((_0x2aa467, _0xdd4230) => {
                    if (!_0x2aa467) {
                        _0x5338aa("AccountServer: Failed to load your purchases: " + _0xdd4230, "error", 10000);
                    } else {
                        _0x2a8248.prototype.shop.settings = _0xdd4230.settings;
                        _0x2a8248.prototype.purchasedItems = _0xdd4230.purchases;
                        _0x2a8248.prototype.wardrobeItems = _0xdd4230.wardrobe;
                        _0x2a8248.prototype.createPurchases();
                    }
                });
            });
        };
        _0x2a8248.prototype.createPurchases = () => {
            const _0x40eefb = _0x2a8248.prototype;
            _0x40eefb.shop.ownedSkins = [];
            _0x40eefb.shop.ownedAnimals = [];
            _0x40eefb.shop.ownedDeals = [];
            for (let _0x46a9a1 = 0; _0x46a9a1 < _0x40eefb.shop.allItems.length; _0x46a9a1++) {
                const _0x2e1b0f = _0x40eefb.shop.allItems[_0x46a9a1];
                if (_0x40eefb.purchasedItems.includes(_0x2e1b0f.id)) {
                    _0x2e1b0f.price = -1;
                    switch (_0x2e1b0f.data.shopCategory) {
                        case 0:
                            _0x40eefb.shop.ownedSkins[_0x2e1b0f.id] = _0x2e1b0f;
                            _0x40eefb.shop.ownedSkins.push(_0x2e1b0f);
                            break;
                        case 1:
                            _0x40eefb.shop.ownedAnimals[_0x2e1b0f.id] = _0x2e1b0f;
                            _0x40eefb.shop.ownedAnimals.push(_0x2e1b0f);
                            break;
                        case 2:
                            _0x40eefb.shop.ownedDeals.push(_0x2e1b0f);
                            break;
                    }
                }
            }
            if (_0x40eefb.purchasedItems.length > 0 && Object.values(_0x40eefb.wardrobeItems).every(_0x33b944 => !_0x33b944.alreadySet)) {
                _0x5338aa("It looks like you have skins purchased, but didn't setup them. Please navigate to the Shop and go into the Wardrobe tab to set them up!", "warn", 10);
            }
        };
        _0x2a8248.prototype.ownedItems = new Array();
        _0x2a8248.prototype.setFilter = function(_0x3d2a31) {
            this.item_filter = _0x3d2a31;
        };
        _0x2a8248.prototype.setFilterCat = function(_0x27d4b5) {
            this.item_filter_cat = _0x27d4b5;
        };
        _0x2a8248.prototype.setPriceFilter = function(_0x3f1066) {
            this.item_pricefilter = _0x3f1066;
        };
        _0x2a8248.prototype.showTab = function(_0x4bedfd) {
            if (this.tabId != this.selectedTab) {
                this.setFilter("all");
            } else {
                this.setFilter(this.item_filter);
            }
            this.textFilter = "";
            this.textFilterWardrobe = "";
            var _0x335b99 = document.getElementsByClassName("tab");
            var _0x3ad14e = document.getElementsByClassName("title");
            for (i = 0; i < _0x3ad14e.length; i++) {
                if (_0x3ad14e[i].id == "" + _0x4bedfd) {
                    _0x3ad14e[i].className = "title selected";
                } else {
                    _0x3ad14e[i].className = "title notselected";
                }
            }
            for (i = 0; i < _0x335b99.length; i++) {
                if (_0x335b99[i].id == "tab-" + _0x4bedfd) {
                    _0x335b99[i].className = "tab selected";
                } else {
                    _0x335b99[i].className = "tab notselected";
                }
            }
            this.selectedTab = _0x4bedfd;
            if (_0x4bedfd != "MopeShop" && _0x4bedfd != "Coins" && _0x4bedfd != "CLOTHING") {
                this.setVisiblePage(_0x4bedfd, this.curTabPage);
            }
        };
        _0x2a8248.prototype.shop = null;
        _0x2a8248.prototype.shopDiv = null;
        _0x2a8248.prototype.buildInterface = function(_0x4f6f64) {
            var _0x13a53d = document.getElementById("shopOverlay");
            if (_0x13a53d) {
                _0x13a53d.parentNode.removeChild(_0x13a53d);
            }
            this.shopDiv = document.createElement("div");
            this.shopDiv.id = "shop";
            this.shopDiv.className = "shop center";
            var _0x2de98d = document.getElementsByTagName("body")[0];
            _0x2de98d.prepend(this.shopDiv);
            this.showShopButtons();
            if (this.callback) {
                this.callback();
                this.callback = null;
            }
            _0x4e2f66();
        };
        _0x2a8248.prototype.wardrobeItems = {};
        _0x2a8248.prototype.onShopLoaded = function() {
            if (_0x1c0f11) {
                var _0x5ce13f = document.getElementById("divButtons");
                _0x5ce13f.style.display = "none";
                if (this.actionBtn) {
                    if (this.actionBtn == "login") {
                        this.showLoginScreen();
                    } else if (this.actionBtn == "reg") {
                        this.showLoginScreen(true);
                    }
                } else if (this.upgradeMenu_callback != null) {
                    this.upgradeMenu_callback();
                }
            } else {
                this.showLoginScreen();
            }
            this.actionBtn = null;
        };
        _0x2a8248.prototype.callback = null;
        _0x2a8248.prototype.updateshop_div = function() {
            console.log("--- update shop_div ---");
            console.log("this.selectedTab: " + this.selectedTab);
            if (this.selectedTab == "mySettings") {
                this.showShopButtons();
                this.selectedTab = "mySettings";
                this.showTab(this.selectedTab);
            } else {
                this.buildInterface(false);
                this.skinsInterface();
                this.showTab(this.selectedTab);
            }
        };
        _0x2a8248.prototype.removeBlockOverlay = function(_0x4e3420, _0x184016) {
            var _0x3e9554 = document.getElementById("blockOverlay");
            if (_0x3e9554) {
                _0x3e9554.parentNode.removeChild(_0x3e9554);
            }
        };
        _0x2a8248.prototype.blockOverlay = function(_0x2f4e42, _0x21ed11) {
            var _0x58fd5e = document.getElementById("shop_div");
            if (_0x58fd5e) {
                var _0x145681 = _0x11d05e("blockOverlay", "");
                var _0x178119 = _0x11d05e("plzwait", "");
                _0x178119.innerHTML = "PLEASE WAIT...";
                _0x145681.appendChild(_0x178119);
                _0x58fd5e.prepend(_0x145681);
            }
        };
        var _0x265449 = 0;
        var _0x8505df = 1;
        var _0x12994c = 2;
        _0x2a8248.prototype.upgradeMenu_callback = null;
        _0x2a8248.prototype.buyConfirmationOverlay = function(_0x2456c6, _0x3b7b56) {
            var _0x496729 = document.getElementById("shop_div");
            if (_0x496729) {
                var _0x3cce0f = _0x11d05e("blockOverlay", "confirmPurchase " + _0x964768[_0x2456c6.itemType]);
                var _0x449e94 = _0x11d05e("purchaseItemInfo", "purchaseItemInfo");
                _0x3cce0f.appendChild(_0x449e94);
                var _0x423d45 = _0x2456c6.generateHtml(_0x8505df);
                _0x449e94.appendChild(_0x423d45);
                var _0x53074d = _0x11d05e("itemDetail", "itemDetail");
                _0x449e94.appendChild(_0x53074d);
                if (_0x2456c6.data.info != undefined) {
                    var _0x320767 = _0x11d05e("itemInfoText", "");
                    _0x320767.innerHTML = _0x2456c6.data.info;
                    _0x53074d.appendChild(_0x320767);
                }
                var _0x24428e = _0x11d05e("areyousure", "");
                _0x24428e.innerHTML = "ARE YOU SURE YOU WANT TO PURCHASE THIS ITEM?";
                _0x53074d.appendChild(_0x24428e);
                if (_0x2456c6.data.itemType == 2) {
                    _0x423d45.onmousemove = function() {
                        $(".bundleSkins_" + _0x2456c6.itemId).css("display", "block");
                    };
                    _0x423d45.onmouseout = function() {
                        $(".bundleSkins_" + _0x2456c6.itemId).css("display", "none");
                    };
                }
                var _0x5f258a = _0x3709bd("div", "btn_confirmBuy", "confirmBuybutton");
                _0x5f258a.innerHTML = "CONFIRM";
                var _0x3e37a6 = _0x2456c6.id;
                _0x5f258a.onclick = function() {
                    _0x247e4a.removeBlockOverlay();
                    _0x247e4a.blockOverlay();
                    _0x1ef637(_0x3e37a6, function(_0x30f366, _0xf4c231) {
                        if (_0x30f366) {
                            _0x5338aa("Purchase successful!", "success", 5);
                            _0x2709e4();
                            _0x4cdca5();
                        } else {
                            _0x5338aa("AccountServer: " + _0xf4c231, "error", 15);
                        }
                        _0x247e4a.removeBlockOverlay();
                    });
                };
                _0x53074d.appendChild(_0x5f258a);
                var _0x3a599c = _0x3709bd("div", "btn_cancelBuy", "cancelBuybutton");
                _0x3a599c.innerHTML = "CANCEL";
                _0x3a599c.onclick = function() {
                    _0x247e4a.removeBlockOverlay();
                };
                _0x53074d.appendChild(_0x3a599c);
                if (_0x2456c6.data.itemType == 2 || _0x2456c6.data.itemType == 3) {
                    _0x2456c6.fillItemDetails(_0x53074d);
                }
                _0x496729.prepend(_0x3cce0f);
            } else {
                console.log("shop div not found...");
            }
        };
        _0x2a8248.prototype.isSkinAlreadyOwned = function() {};
        _0x2a8248.prototype.itemDetailsOverlay = function(_0x3f4cde, _0x1514ad) {
            console.log("@@@@@@@@@@@@ itemDetailsOverlay");
            var _0x52763f = document.getElementById("shop_div");
            if (_0x52763f) {
                var _0x48eb52 = _0x11d05e("blockOverlay", "confirmPurchase item-details " + _0x964768[_0x3f4cde.shopItem.itemType]);
                var _0x454580 = _0x11d05e("purchaseItemInfo", "purchaseItemInfo ");
                _0x48eb52.appendChild(_0x454580);
                var _0x149c7a = _0x3f4cde.shopItem.generateHtml(_0x1514ad);
                _0x454580.appendChild(_0x149c7a);
                var _0xd31759 = _0x11d05e("itemDetail", "itemDetail " + _0x3f4cde.shopItem.data.itemType);
                _0x454580.appendChild(_0xd31759);
                if (_0x3f4cde.shopItem.data.itemType == 2) {
                    _0x149c7a.onmousemove = function() {
                        $(".bundleSkins_" + _0x3f4cde.shopItem.itemId).css("display", "block");
                    };
                    _0x149c7a.onmouseout = function() {
                        $(".bundleSkins_" + _0x3f4cde.shopItem.itemId).css("display", "none");
                    };
                }
                var _0x25eaae = _0x3709bd("div", "btn_cancelBuy", "cancelBuybutton");
                _0x25eaae.innerHTML = "CLOSE";
                _0x25eaae.onclick = function() {
                    _0x247e4a.removeBlockOverlay();
                };
                _0xd31759.appendChild(_0x25eaae);
                if (_0x3f4cde.shopItem.data.itemType == 2) {
                    var _0x2eb0b9 = _0x11d05e("bundleSkins", "bundleSkins_" + _0x3f4cde.shopItem.itemId);
                    _0xd31759.appendChild(_0x2eb0b9);
                    console.log("############### dislay deal info");
                    console.log(_0x3f4cde.shopItem.data);
                    if (_0x3f4cde.shopItem.data.aniTypes === undefined) {
                        for (i = 0; i < _0x247e4a.shop.allItems.length; i++) {
                            var _0x671e0f = _0x247e4a.shop.allItems[i];
                            if (_0x671e0f && _0x671e0f.data.promotions && _0x671e0f.data.promotions.toLowerCase().indexOf(_0x3f4cde.shopItem.itemId.toLowerCase()) > -1) {
                                var _0x1d5011 = this.getPostFixForItem(_0x3f4cde.shopItem.itemId);
                                var _0x36a620 = _0x671e0f.getImagePromo(_0x1d5011);
                                _0x36a620.className = "bundleSkinImg";
                                _0x36a620.width = "40px";
                                _0x2eb0b9.appendChild(_0x36a620);
                            }
                        }
                    } else if (this.data.aniTypes) {
                        for (i = 0; i < this.data.aniTypes.length; i++) {
                            var _0x167be0 = _0x247e4a.getSkinPath(this.data.aniTypes[i], this.data.theme);
                            if (_0x167be0 !== undefined) {
                                var _0x36a620 = null;
                                if (_0x2e23fc[_0x167be0]) {
                                    _0x36a620 = _0x2e23fc[_0x167be0];
                                } else {
                                    _0x36a620 = new Image();
                                    _0x36a620.src = _0x167be0;
                                    _0x36a620.loading = "lazy";
                                    _0x36a620.className = "bundleSkinImg";
                                    _0x36a620.width = "40px";
                                    _0x2e23fc[_0x167be0] = _0x36a620;
                                }
                                _0x2eb0b9.appendChild(_0x36a620);
                            }
                        }
                    }
                } else if (_0x3f4cde.shopItem.data.itemType == 0) {
                    var _0x37ac04 = _0x11d05e("skinInfo", "skin-info");
                    _0xd31759.appendChild(_0x37ac04);
                    _0x37ac04.appendChild(this.createField("filed1", "value1", "skin-info-field", "skin-info-label", "skin-info-value"));
                    _0x37ac04.appendChild(this.createField("filed2", "value2", "skin-info-field", "skin-info-label", "skin-info-value"));
                    _0x37ac04.appendChild(this.createField("filed3", "value3", "skin-info-field", "skin-info-label", "skin-info-value"));
                    _0x37ac04.appendChild(this.createField("filed4", "value4", "skin-info-field", "skin-info-label", "skin-info-value"));
                    _0x37ac04.appendChild(this.createField("filed5", "value5", "skin-info-field", "skin-info-label", "skin-info-value"));
                }
                _0x52763f.prepend(_0x48eb52);
            }
        };
        _0x2a8248.prototype.showLoginScreen = function(_0x339583) {
            var _0x389f13 = document.getElementById("shop_div");
            if (_0x389f13) {
                var _0x159fd4 = _0x11d05e("blockOverlay", "confirmPurchase item-details ");
                var _0x1db351 = _0x11d05e("purchaseItemInfo", "purchaseItemInfo ");
                _0x159fd4.appendChild(_0x1db351);
                var _0x1261f0 = _0x11d05e("itemDetail2", "itemDetail2 ");
                _0x1db351.appendChild(_0x1261f0);
                var _0x48a7c3 = _0x11d05e("mobilelogininfo", "");
                _0x1261f0.appendChild(_0x48a7c3);
                var _0x7b245a = _0x3709bd("div", "btn_cancelBuy", "cancelBuybutton");
                _0x48a7c3.innerHTML = "LOGIN INTO YOUR ACCOUNT";
                _0x194f0b = document.getElementById("loginButtons");
                if (_0x194f0b) {
                    _0x194f0b.style.display = "block";
                }
                _0x7b245a.innerHTML = "CLOSE";
                _0x7b245a.onclick = function() {
                    _0x247e4a.removeBlockOverlay();
                    if (_0x194f0b) {
                        _0x194f0b.style.display = "none";
                    }
                    _0x25164f();
                };
                _0x1261f0.appendChild(_0x7b245a);
                _0x389f13.prepend(_0x159fd4);
            }
            _0x3ca188();
        };
        _0x2a8248.prototype.getSkinPath = function(_0x1d2ac6, _0xbf8154) {
            var _0x3d4c49 = _0x35d268.createGameObjOfOType(_0x48c056, _0x1d2ac6);
            _0x3d4c49.animalType = _0x1d2ac6;
            _0x3d4c49.animalSpecies = 0;
            _0x3d4c49.animalSubSpecies = 0;
            _0x3d4c49.animalPremiumSkin = 0;
            _0x3d4c49.curBiome = 0;
            _0x3d4c49.lava = 100;
            _0x3d4c49.mopeSeasonID = 0;
            _0x3d4c49.skinThemeID = _0xbf8154;
            var _0x4b60cd = _0x3d4c49.animalInfo();
            var _0x3e4fc1 = _0x3d4c49.getSkinImagePathForShop(_0x4b60cd.skinName);
            _0x3e4fc1 = this.ifMultiAssetSkin(_0x1d2ac6, _0x3e4fc1);
            return _0x3e4fc1 + ".ui.png";
        };
        _0x2a8248.prototype.ifMultiAssetSkin = function(_0x45585c, _0x4c0735) {
            return _0x4c0735;
        };
        _0x2a8248.prototype.getPostFixForItem = function(_0x66722c) {
            switch (_0x66722c) {
                case "halloween_pufferMace":
                    return "1";
            }
            return null;
        };
        _0x2a8248.prototype.createField = function(_0x28ef27, _0x2535ea, _0x1aba34, _0x4d9dde, _0x1c496f) {
            var _0x13d102 = _0x11d05e("", _0x1aba34);
            var _0x28ef27 = _0x11d05e("", _0x4d9dde);
            var _0x2535ea = _0x11d05e("", _0x1c496f);
            _0x13d102.appendChild(_0x28ef27);
            _0x13d102.appendChild(_0x2535ea);
            return _0x13d102;
        };
        _0x2a8248.prototype.addCloseButton = function(_0x5cc177) {
            var _0x35850e = _0x3709bd("div", "close-shop");
            _0x35850e.onclick = function() {
                _0x25164f();
            };
            _0x35850e.innerHTML = "X";
            _0x5cc177.appendChild(_0x35850e);
        };
        _0x2a8248.prototype.updateCoinsBalance = function() {
            var _0x267518 = _0x2b46b2;
            _0x267518.level = Math.round(_0x14db03(1, 10));
            _0x267518.xp = 50;
            _0x267518.xpNextLvl = _0x267518.xp + 300;
            var _0xf6e627 = Math.round(_0x267518.xp);
            var _0x49481a = document.getElementById("coins");
            if (_0x49481a) {
                _0x49481a.innerHTML = this.coinsFormat(_0x2d89d7());
                var _0x44a532 = document.getElementById("userxp-barbar");
                var _0x2f3246 = document.getElementById("userxp-val");
                var _0x4fb046 = document.getElementById("userxp-star");
                _0x2f3246.innerHTML = _0xf6e627 + " / " + _0x267518.xpNextLvl;
                _0xf6e627 = _0xf6e627 / _0x267518.xpNextLvl * 100;
                _0x44a532.style.width = _0xf6e627 + "px";
                _0x4fb046.innerHTML = _0x267518.level;
            }
            var _0x4b9e1b = document.getElementById("coins2");
            if (_0x4b9e1b) {
                _0x4b9e1b.innerHTML = _0x2d89d7();
                var _0x44a532 = document.getElementById("userxp-barbar2");
                var _0x2f3246 = document.getElementById("userxp-val2");
                var _0x4fb046 = document.getElementById("userxp-star2");
                _0x2f3246.innerHTML = _0xf6e627 + " / " + _0x267518.xpNextLvl;
                _0xf6e627 = _0xf6e627 / _0x267518.xpNextLvl * 100;
                _0x44a532.style.width = _0xf6e627 + "px";
                _0x4fb046.innerHTML = _0x267518.level;
            }
        };
        _0x2a8248.prototype.coinsFormat = function(_0x51063f) {
            var _0x21372d = "" + _0x51063f;
            if (_0x51063f == 0) {
                return _0x51063f;
            }
            _0x21372d = _0x21372d.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            return _0x21372d;
        };
        _0x2a8248.prototype.showUserExpBarAndCoinsBalance = function(_0x2694db) {
            var _0x4794f5 = _0x3709bd("li", "user-exp", "user-exp");
            var _0x128b13 = _0x3709bd("div", "userxp-bar", "userxp-bar");
            var _0x304960 = _0x3709bd("div", "userxp-barbar", "userxp-barbar");
            var _0x2010e6 = _0x3709bd("div", "userxp-val", "userxp-val");
            var _0x5d5be4 = _0x3709bd("div", "userxp-star", "userxp-star");
            var _0x2a813b = _0x2b46b2;
            const _0x4b10a3 = _0x3709bd("li", "coins-balance", "coins-balance");
            _0x4b10a3.setAttribute("title", "add more gems");
            _0x2694db.appendChild(_0x4b10a3);
            _0x4b10a3.addEventListener("click", function() {
                _0x247e4a.selectedTab = "Gems";
                _0x247e4a.skinsInterface();
            });
            const _0x14aad7 = new Image();
            _0x14aad7.src = "shop/gem.png";
            _0x14aad7.className = "buycoin-img";
            if (_0x4b5557()) {
                _0x4b10a3.appendChild(_0x14aad7);
            }
            const _0x44da95 = _0x3709bd("span", "coins", "coins");
            _0x44da95.innerText = _0x11704e();
            _0x4b10a3.appendChild(_0x44da95);
            var _0x1b78f0 = _0x3709bd("li", "coins-balance", "coins-balance");
            var _0x761d28 = new Image();
            _0x761d28.src = "shop/mopecoin.png";
            _0x761d28.className = "buycoin-img";
            if (_0x4b5557()) {
                _0x1b78f0.appendChild(_0x761d28);
            }
            var _0x2293da = _0x3709bd("span", "coins", "coins");
            _0x2293da.innerHTML = _0x2d89d7();
            _0x1b78f0.appendChild(_0x2293da);
            _0x1b78f0.setAttribute("title", "add more coins");
            _0x2694db.appendChild(_0x1b78f0);
            _0x1b78f0.onclick = function() {
                if (_0x4b5557()) {
                    _0x247e4a.selectedTab = "Coins";
                    _0x247e4a.skinsInterface();
                } else {
                    _0x247e4a.showLoginScreen();
                }
                _0x55b75b();
            };
        };
        _0x2a8248.prototype.enableClothingShop = false;
        _0x2a8248.prototype.showShopButtons = function() {
            this.deleteTab();
            var _0x59de08 = _0x11d05e("shop_div", "");
            var _0xcf445e = _0x3709bd("ul");
            this.addCloseButton2(_0xcf445e);
            _0x59de08.appendChild(_0xcf445e);
            var _0x2d1ef4 = {
                name: "MopeShop"
            };
            var _0xcb2f6e = _0x3709bd("li", _0x2d1ef4.name, "title");
            _0xcb2f6e.innerHTML = "SHOP";
            _0xcb2f6e.onclick = function() {
                _0x247e4a.showTab(this.id);
            };
            _0xcf445e.appendChild(_0xcb2f6e);
            var _0x14c317 = _0x3709bd("div", "tab-" + _0x2d1ef4.name, "tab");
            var _0x545188 = _0x3709bd("div", undefined, "content");
            var _0x37a778 = _0x3709bd("div", undefined, "content-inner");
            var _0x5d7b72 = _0x3709bd("div", "content-items-" + _0x2d1ef4.name, "content-items");
            _0x37a778.append(_0x5d7b72);
            _0x5d7b72.style.width = "100%";
            var _0x27f1a5 = _0x3709bd("div", undefined, "box coinsBox");
            const _0x2c62bd = _0x3709bd("div", undefined, "box coinsBox");
            const _0x396c96 = _0x3709bd("div", undefined, "box coinsBox");
            var _0x2554b8 = _0x3709bd("div", undefined, "box skinsBox");
            var _0x35453d = _0x3709bd("div", undefined, "box skinsBox");
            var _0x43f2c6 = _0x3709bd("div", undefined, "box dealsBox");
            _0x2554b8.onclick = function() {
                _0x247e4a.selectedTab = "Skins";
                _0x247e4a.skinsInterface();
                _0x55b75b();
            };
            _0x35453d.onclick = function() {
                _0x247e4a.selectedTab = "Features";
                _0x247e4a.skinsInterface();
                _0x55b75b();
            };
            _0x43f2c6.onclick = function() {
                _0x247e4a.selectedTab = "Deals";
                _0x247e4a.skinsInterface();
                _0x55b75b();
            };
            _0x27f1a5.onclick = function() {
                _0x247e4a.selectedTab = "Coins";
                _0x247e4a.skinsInterface();
                _0x55b75b();
            };
            var _0x298610 = _0x3709bd("div", undefined, "title");
            var _0x335ef2 = _0x3709bd("div", undefined, "img");
            var _0x2f7615 = new Image();
            _0x2f7615.src = "shop/coins.png";
            _0x335ef2.appendChild(_0x2f7615);
            _0x298610.innerHTML = "COINS";
            _0x27f1a5.appendChild(_0x335ef2);
            _0x27f1a5.appendChild(_0x298610);
            _0x2c62bd.onclick = function() {
                _0x247e4a.selectedTab = "Gems";
                _0x247e4a.skinsInterface();
                _0x55b75b();
            };
            const _0x4ab474 = _0x3709bd("div", undefined, "title");
            const _0x5a071a = _0x3709bd("div", undefined, "img");
            const _0x1df97d = new Image();
            _0x1df97d.src = "shop/gem.png";
            _0x5a071a.appendChild(_0x1df97d);
            _0x4ab474.innerHTML = "GEMS";
            _0x2c62bd.appendChild(_0x5a071a);
            _0x2c62bd.appendChild(_0x4ab474);
            _0x396c96.onclick = function() {
                _0x247e4a.selectedTab = "VIP Pass";
                _0x247e4a.skinsInterface();
                _0x55b75b();
            };
            const _0x7c1190 = _0x3709bd("div", undefined, "title");
            const _0x3f3e2f = _0x3709bd("div", undefined, "img");
            const _0x1eb36d = new Image();
            _0x1eb36d.src = "shop/VIP_Button.png";
            _0x3f3e2f.appendChild(_0x1eb36d);
            _0x7c1190.innerHTML = "VIP PASS";
            _0x396c96.appendChild(_0x3f3e2f);
            _0x396c96.appendChild(_0x7c1190);
            var _0x284d10 = _0x3709bd("div", undefined, "title");
            var _0x5b6512 = _0x3709bd("div", undefined, "img");
            var _0x9ee00a = new Image();
            _0x9ee00a.src = "shop/skins.png";
            _0x5b6512.appendChild(_0x9ee00a);
            _0x284d10.innerHTML = "SKINS";
            _0x2554b8.appendChild(_0x5b6512);
            _0x2554b8.appendChild(_0x284d10);
            var _0x13bae1 = _0x3709bd("div", undefined, "title");
            var _0x475e22 = _0x3709bd("div", undefined, "img");
            var _0x9ee00a = new Image();
            _0x9ee00a.src = "shop/features.png";
            _0x475e22.appendChild(_0x9ee00a);
            _0x13bae1.innerHTML = "FEATURES";
            _0x35453d.appendChild(_0x475e22);
            _0x35453d.appendChild(_0x13bae1);
            var _0x435c02 = _0x3709bd("div", undefined, "title");
            var _0x11c541 = _0x3709bd("div", undefined, "img");
            var _0x4451d0 = new Image();
            _0x4451d0.src = "shop/deals/deals.png";
            _0x11c541.appendChild(_0x4451d0);
            _0x435c02.innerHTML = "DEALS";
            _0x43f2c6.appendChild(_0x11c541);
            _0x43f2c6.appendChild(_0x435c02);
            _0x5d7b72.appendChild(_0x2554b8);
            _0x5d7b72.appendChild(_0x35453d);
            _0x5d7b72.appendChild(_0x43f2c6);
            _0x5d7b72.appendChild(_0x27f1a5);
            _0x5d7b72.appendChild(_0x2c62bd);
            if (_0x5d3cc4 && _0x5d3cc4.success) {
                _0x5d7b72.appendChild(_0x396c96);
            }
            if (this.enableClothingShop) {
                var _0x3d13f8 = _0x3709bd("div", undefined, "box clothsBox");
                _0x3d13f8.onclick = function() {
                    _0x247e4a.clothsInterface();
                    _0x55b75b();
                };
                var _0x3e342f = _0x3709bd("div", undefined, "title");
                var _0x8cd9bc = _0x3709bd("div", undefined, "img");
                var _0x5d65a1 = new Image();
                _0x5d65a1.src = "shop/clothing.png";
                _0x8cd9bc.appendChild(_0x5d65a1);
                _0x3e342f.innerHTML = "CLOTHING";
                _0x3d13f8.appendChild(_0x8cd9bc);
                _0x3d13f8.appendChild(_0x3e342f);
                _0x5d7b72.appendChild(_0x3d13f8);
            }
            _0x545188.append(_0x37a778);
            _0x545188.append(_0x3709bd("div", "", "separator"));
            _0x37a778.append(_0x3709bd("div", "", "separator"));
            _0x5d7b72.append(_0x3709bd("div", "", "separator"));
            _0x14c317.append(_0x545188);
            _0x14c317.append(_0x3709bd("div", "", "separator"));
            _0x59de08.appendChild(_0x14c317);
            this.createMyPurchasesTab(_0xcf445e, _0x59de08, [..._0x247e4a.shop.ownedSkins, ..._0x247e4a.shop.ownedAnimals]);
            this.createMyDealsTab(_0xcf445e, _0x59de08, _0x247e4a.shop.ownedDeals);
            this.createWardrobeTab(_0xcf445e, _0x59de08, []);
            this.createMySettingsTab(_0xcf445e, _0x59de08, _0x247e4a.shop.settings);
            this.showUserExpBarAndCoinsBalance(_0xcf445e);
            _0x59de08.append(_0x3709bd("div", "", "separator"));
            this.shopDiv.appendChild(_0x59de08);
            this.showTab("MopeShop");
            _0x4e2f66();
        };
        _0x2a8248.prototype.createLogoutBtn = function(_0x217ac9) {
            var _0x43da7d = _0x3709bd("div", "divLogoutBtn", _0x4b5557() ? "logout" : "login");
            _0x43da7d.innerHTML = _0x4b5557() ? "LOGOUT" : "LOGIN";
            _0x43da7d.onclick = function() {
                if (_0x4b5557()) {
                    _0x139562();
                } else {
                    _0x247e4a.showLoginScreen();
                }
            };
            _0x217ac9.append(_0x43da7d);
        };
        _0x2a8248.prototype.getSkinDataById = function(_0x2b1b5f) {
            return _0x2a8248.prototype.itemIdToItem[_0x2b1b5f];
        };
        _0x2a8248.prototype.applyWardrobeFilter = function(_0x219efb) {
            let _0x18f69c = null;
            let _0x4570bb = false;
            for (let _0x4187ac = 0; _0x4187ac < _0x219efb.children.length; _0x4187ac++) {
                const _0x3da4f1 = _0x219efb.children[_0x4187ac];
                if (_0x3da4f1.className == "wardrobe-tier") {
                    if (_0x18f69c != null) {
                        _0x18f69c.style.display = _0x4570bb ? "block" : "none";
                    }
                    _0x4570bb = false;
                    _0x18f69c = _0x3da4f1;
                    continue;
                }
                const _0x53f138 = _0x3da4f1.children[1].innerText.toLowerCase().includes(_0x247e4a.textFilterWardrobe.toLowerCase()) ? "block" : "none";
                _0x3da4f1.style.display = _0x53f138;
                if (!_0x4570bb && _0x53f138 == "block") {
                    _0x4570bb = true;
                }
            }
            if (_0x18f69c != null) {
                _0x18f69c.style.display = _0x4570bb ? "block" : "none";
            }
        };
        _0x2a8248.prototype.createWardrobeTab = function(_0x559656, _0x9fc04b, _0x3f658f) {
            var _0x418425 = {
                name: "mopeWardrobe"
            };
            var _0x34bb4a = _0x3709bd("li", _0x418425.name, "title");
            _0x34bb4a.innerHTML = "WARDROBE";
            _0x34bb4a.onclick = function() {
                _0x247e4a.curTabPage = 0;
                if (!_0x4b5557()) {
                    _0x247e4a.showLoginScreen();
                    return;
                }
                _0x247e4a.showTab(this.id);
            };
            _0x559656.appendChild(_0x34bb4a);
            if (!this.item_filter) {
                this.item_filter = "all";
            }
            var _0x579e92 = _0x3709bd("div", "tab-" + _0x418425.name, "tab");
            var _0x4df7f6 = _0x3709bd("div", undefined, "content content-wardrobe");
            var _0x50753b = _0x3709bd("div", undefined, "content-inner");
            var _0x299b3a = _0x3709bd("div", "content-items-" + _0x418425.name, "content-items");
            var _0x5a21df = _0x3709bd("div", "item-filters", "item-filters-wardrobe");
            var _0x349ea3 = _0x3709bd("span", undefined, "filter-label-wardrobe");
            _0x349ea3.innerHTML = "Tiers: ";
            _0x5a21df.appendChild(_0x349ea3);
            const _0xc039fd = _0x3709bd("span");
            for (let _0x250860 = 1; _0x250860 <= 17; _0x250860++) {
                const _0x485dfe = _0x3709bd("a", null, "tier-button");
                _0x485dfe.innerText = _0x250860;
                _0x485dfe.onclick = () => {
                    const _0x37fb2e = document.querySelector("#wardrobe-tier-section-" + _0x250860);
                    if (_0x37fb2e == null) {
                        return;
                    }
                    _0x37fb2e.scrollIntoView({
                        behavior: "smooth",
                        block: "end",
                        inline: "nearest"
                    });
                };
                _0xc039fd.appendChild(_0x485dfe);
            }
            _0x349ea3.appendChild(_0xc039fd);
            const _0x2e7353 = _0x3709bd("input", "", "filter");
            _0x2e7353.type = "text";
            _0x2e7353.placeholder = "Search...";
            const _0x48cd27 = _0x3709bd("div", null, "mopeWardrobeGrid");
            _0x299b3a.appendChild(_0x48cd27);
            _0x2e7353.oninput = function(_0x3dd91e) {
                _0x247e4a.textFilterWardrobe = _0x3dd91e.target.value;
                _0x2a8248.prototype.applyWardrobeFilter(_0x48cd27);
            };
            _0x5a21df.appendChild(_0x2e7353);
            _0x50753b.append(_0x299b3a);
            _0x299b3a.style.maxWidth = "100%";
            _0x4df7f6.appendChild(_0x5a21df);
            _0x4df7f6.append(_0x50753b);
            _0x4df7f6.append(_0x3709bd("div", "", "separator"));
            _0x50753b.append(_0x3709bd("div", "", "separator"));
            _0x299b3a.append(_0x3709bd("div", "", "separator"));
            _0x579e92.append(_0x4df7f6);
            _0x579e92.append(_0x3709bd("div", "", "separator"));
            _0x9fc04b.appendChild(_0x579e92);
            if (!_0x1c0f11) {
                return;
            }
            const _0x433786 = Object.keys(_0x2a8248.prototype.wardrobeItems).sort((_0x36124d, _0x38c67c) => _0x4063ee[_0x36124d] - _0x4063ee[_0x38c67c]);
            let _0x26645c = 0;
            for (let _0x9dc734 = 0; _0x9dc734 < _0x433786.length; _0x9dc734++) {
                const _0x10c70b = _0x433786[_0x9dc734];
                const _0x689382 = _0x35d268.createGameObjOfOType(_0x48c056, _0x10c70b);
                _0x689382.animalType = _0x10c70b;
                const _0x3c3baf = _0x689382.animalInfo().aniName;
                _0x689382.animalSpecies = 0;
                _0x689382.animalSubSpecies = 0;
                _0x689382.mopeSeasonID = 1;
                _0x689382.animalPremiumSkin = 0;
                _0x689382.skinThemeID = 0;
                const _0x8dd025 = _0x2a8248.prototype.changedWardrobeItems[_0x10c70b] ? _0x2a8248.prototype.changedWardrobeItems[_0x10c70b] : _0x2a8248.prototype.wardrobeItems[_0x10c70b].equippedSkin;
                if (_0x8dd025 && _0x8dd025 != "RANDOM") {
                    const _0x18d8dd = _0x2a8248.prototype.getSkinDataById(_0x8dd025);
                    if (_0x18d8dd) {
                        _0x689382.animalSpecies = _0x18d8dd.animalSpecies;
                        _0x689382.animalSubSpecies = _0x18d8dd.animalSubSpecies;
                        _0x689382.mopeSeasonID = _0x18d8dd.season;
                    }
                }
                let _0x9b3b63 = _0x4063ee[_0x10c70b];
                if (_0x9b3b63 != _0x26645c) {
                    _0x26645c = _0x9b3b63;
                    const _0x3f57db = document.createElement("div");
                    _0x3f57db.className = "wardrobe-tier";
                    _0x3f57db.id = "wardrobe-tier-section-" + _0x9b3b63;
                    _0x3f57db.innerText = "Tier " + _0x9b3b63;
                    _0x48cd27.appendChild(_0x3f57db);
                }
                _0x2a8248.prototype.createWardrobeItem(_0x48cd27, _0x689382, _0x3c3baf);
            }
        };
        _0x2a8248.prototype.createWardrobeItem = function(_0x3cb7bf, _0x3ec087, _0x89d2f0) {
            const _0x2df59d = _0x11d05e(null, "mopeWardrobeItemContainer");
            const _0xd4a708 = _0x11d05e(null, "mopeWardrobeImgOuter");
            const _0x547155 = _0x11d05e(null, "mopeWardrobeItemTitle");
            const _0x327d2b = _0x3709bd("select", null, "mopeWardrobeItemSelect");
            _0x547155.innerText = _0x89d2f0.replace("!", "");
            const _0x344acc = "assets/s/" + _0x3ec087.mopeSeasonID + "/skins/" + _0x3ec087.getSkinName() + ".ui.png?w=1&v=" + _0x3fce30;
            const _0x2194f5 = _0x2e23fc[_0x344acc];
            const _0x16e3ab = _0x2194f5 ? _0x2194f5 : _0x3709bd("img", null, null);
            if (!_0x2194f5) {
                _0x16e3ab.src = _0x344acc;
                _0x16e3ab.loading = "lazy";
                _0x2e23fc[_0x344acc] = _0x16e3ab;
            }
            _0xd4a708.append(_0x16e3ab);
            _0x2df59d.append(_0xd4a708, _0x547155, _0x327d2b);
            _0x3cb7bf.append(_0x2df59d);
            const _0x38ab6c = _0x2a8248.prototype.wardrobeItems[_0x3ec087.animalType].available;
            const _0x59093a = _0x2a8248.prototype.changedWardrobeItems[_0x3ec087.animalType] ? _0x2a8248.prototype.changedWardrobeItems[_0x3ec087.animalType] : _0x2a8248.prototype.wardrobeItems[_0x3ec087.animalType].equippedSkin;
            for (let _0x3e2361 = 0; _0x3e2361 < _0x38ab6c.length; _0x3e2361++) {
                const _0x6b1677 = _0x38ab6c[_0x3e2361];
                const _0x1937ee = _0x2a8248.prototype.getSkinDataById(_0x6b1677);
                let _0x25f922 = _0x6b1677 == null || _0x6b1677 === "RANDOM" ? _0x89d2f0 : _0x6b1677;
                if (_0x1937ee) {
                    _0x3ec087.animalSpecies = _0x1937ee.animalSpecies;
                    _0x3ec087.animalSubSpecies = _0x1937ee.animalSubSpecies;
                    _0x3ec087.mopeSeasonID = _0x1937ee.season;
                    _0x25f922 = _0x3ec087.animalInfo().aniName || _0x6b1677;
                }
                if (_0x25f922 == _0x6b1677) {
                    console.error("Missing name declaration for: " + _0x6b1677);
                }
                _0x25f922 = _0x25f922.replace("!", "");
                const _0x415a2a = _0x3709bd("option");
                _0x415a2a.innerText = _0x6b1677 == "RANDOM" ? "Random" : _0x25f922.replace("\n", " ");
                _0x327d2b.appendChild(_0x415a2a);
                _0x415a2a.dataset.aniType = _0x3ec087.animalType;
                _0x415a2a.dataset.skinType = _0x6b1677;
                if (_0x6b1677 == _0x59093a) {
                    _0x327d2b.selectedIndex = _0x3e2361;
                }
            }
            _0x327d2b.oninput = () => {
                const _0x263667 = _0x38ab6c[_0x327d2b.selectedIndex];
                _0x2a8248.prototype.changedWardrobeItems[_0x3ec087.animalType] = _0x263667;
                const _0x66a112 = _0x2a8248.prototype.getSkinDataById(_0x263667);
                if (_0x66a112) {
                    _0x3ec087.animalSpecies = _0x66a112.animalSpecies;
                    _0x3ec087.animalSubSpecies = _0x66a112.animalSubSpecies;
                    _0x3ec087.mopeSeasonID = _0x66a112.season;
                } else {
                    _0x3ec087.animalSpecies = 0;
                    _0x3ec087.animalSubSpecies = 0;
                    _0x3ec087.mopeSeasonID = 1;
                }
                _0x3ec087.animalInfo();
                const _0x472d98 = "assets/s/" + _0x3ec087.mopeSeasonID + "/skins/" + _0x3ec087.getSkinName() + ".ui.png?w=1&v=" + _0x3fce30;
                const _0x5940f8 = _0x2e23fc[_0x472d98];
                const _0x42ae0e = _0x5940f8 ? _0x5940f8 : _0x3709bd("img", null, null);
                if (!_0x5940f8) {
                    _0x42ae0e.src = _0x472d98;
                    _0x42ae0e.loading = "lazy";
                    _0x2e23fc[_0x472d98] = _0x42ae0e;
                }
                if (_0xd4a708.lastChild) {
                    _0xd4a708.lastChild.remove();
                }
                _0xd4a708.append(_0x42ae0e);
            };
        };
        _0x2a8248.prototype.textFilter = "";
        _0x2a8248.prototype.createMyPurchasesTab = function(_0x3e6ad1, _0x23cf04, _0xe66e0d) {
            var _0x55747c = {
                name: "myPurchases"
            };
            var _0x23b2df = _0x3709bd("li", _0x55747c.name, "title");
            _0x23b2df.innerHTML = "PURCHASES";
            _0x23b2df.onclick = function() {
                _0x247e4a.curTabPage = 0;
                if (!_0x4b5557()) {
                    _0x247e4a.showLoginScreen();
                    return;
                }
                _0x247e4a.showTab(this.id);
            };
            _0x3e6ad1.appendChild(_0x23b2df);
            if (!this.item_filter) {
                this.item_filter = "all";
            }
            var _0x402078 = _0x3709bd("div", "tab-" + _0x55747c.name, "tab");
            var _0x3d4c81 = _0x3709bd("div", undefined, "content");
            var _0x4dadd2 = _0x3709bd("div", undefined, "content-inner");
            var _0x2bfd45 = _0x3709bd("div", "content-items-" + _0x55747c.name, "content-items");
            var _0x52bacb = _0x3709bd("div", "item-filters", "item-filters");
            var _0x1af76c = ["all", "skins", "animals"];
            var _0x26d755 = _0x3709bd("span", undefined, "filter-label");
            _0x26d755.innerHTML = "Filter: ";
            _0x52bacb.appendChild(_0x26d755);
            _0x4dadd2.append(_0x2bfd45);
            if (_0x55747c.name == "Coins") {
                _0x2bfd45.style.width = "615px";
            } else {
                _0x2bfd45.style.width = "662px";
            }
            _0x3d4c81.append(_0x4dadd2);
            _0x3d4c81.append(_0x3709bd("div", "", "separator"));
            _0x4dadd2.append(_0x3709bd("div", "", "separator"));
            _0x2bfd45.append(_0x3709bd("div", "", "separator"));
            _0x402078.append(_0x3d4c81);
            _0x402078.append(_0x3709bd("div", "", "separator"));
            _0x23cf04.appendChild(_0x402078);
            var _0x23baf0 = _0x3709bd("div", "pages-" + _0x55747c.name, "content-items-pages");
            let _0x24961b = null;
            for (i = 0; i < _0x1af76c.length; i++) {
                let _0x4a4a28 = _0x3709bd("span", undefined, "filter " + (this.item_filter == _0x1af76c[i] ? "selected" : "") + " filter-" + _0x1af76c[i]);
                if (this.item_filter == _0x1af76c[i]) {
                    _0x24961b = _0x4a4a28;
                }
                _0x4a4a28.setAttribute("data-filter", _0x1af76c[i]);
                _0x4a4a28.setAttribute("data-tab", _0x55747c.name);
                _0x4a4a28.innerHTML = _0x1af76c[i];
                _0x4a4a28.onclick = function() {
                    _0x24961b.classList.remove("selected");
                    _0x4a4a28.classList.add("selected");
                    _0x24961b = _0x4a4a28;
                    _0x247e4a.item_filter = $(_0x4a4a28).data("filter");
                    _0x247e4a.selectedTab = $(_0x4a4a28).data("tab");
                    _0x2a8248.prototype.applyFilter(_0x2bfd45, _0x23baf0, _0xe66e0d);
                };
                _0x52bacb.appendChild(_0x4a4a28);
            }
            const _0x4b4a4c = _0x3709bd("input", "", "filter");
            _0x4b4a4c.type = "text";
            _0x4b4a4c.placeholder = "Search...";
            _0x4b4a4c.oninput = function(_0x22fffb) {
                _0x247e4a.textFilter = _0x22fffb.target.value;
                _0x2a8248.prototype.applyFilter(_0x2bfd45, _0x23baf0, _0xe66e0d);
            };
            _0x52bacb.appendChild(_0x4b4a4c);
            var _0x3af57f = _0x3709bd("div", "left-" + _0x55747c.name, "left");
            var _0x4f8e3a = _0x3709bd("div", "right-" + _0x55747c.name, "right");
            _0x4f8e3a.onclick = function() {
                _0x247e4a.scrollItems(this, true);
            };
            _0x3af57f.onclick = function() {
                _0x247e4a.scrollItems(this, false);
            };
            _0x4dadd2.append(_0x2bfd45);
            if (_0xe66e0d.length > 0) {
                _0x3d4c81.appendChild(_0x52bacb);
                _0x4dadd2.className += " w662";
                _0x2a8248.prototype.updatePurchasesFilter(_0x2bfd45, _0x23baf0, _0xe66e0d, _0xe66e0d);
                for (i = 0; i < _0xe66e0d.length; i++) {
                    var _0x9779c8 = _0xe66e0d[i];
                    var _0x33a73a = _0x9779c8.generateHtml();
                    _0x33a73a.classList.add("data-index-" + i);
                    _0x2bfd45.appendChild(_0x33a73a);
                }
                _0x3d4c81.append(_0x3af57f);
                _0x3d4c81.append(_0x4dadd2);
                _0x3d4c81.append(_0x4f8e3a);
                _0x3d4c81.append(_0x23baf0);
            } else {
                var _0x374c2f = _0x11d05e("div", "nopurchases");
                _0x374c2f.innerHTML = "You don't have any item to show here!";
                _0x4dadd2.append(_0x374c2f);
                _0x3d4c81.append(_0x4dadd2);
            }
        };
        _0x2a8248.prototype.applyFilter = function(_0x48fcc8, _0xfca883, _0x54be71) {
            let _0x2db0c8 = _0x54be71;
            switch (_0x247e4a.item_filter) {
                case "all":
                    _0x2db0c8 = _0x54be71;
                    break;
                case "skins":
                    _0x2db0c8 = _0x54be71.filter(_0x5a564f => _0x5a564f.itemType == 0);
                    break;
                case "animals":
                    _0x2db0c8 = _0x54be71.filter(_0x4c17cf => _0x4c17cf.itemType == 1);
                    break;
                case "deals":
                    _0x2db0c8 = _0x54be71.filter(_0x1586b1 => _0x1586b1.itemType == 2);
                    break;
            }
            _0x2db0c8 = _0x2db0c8.filter(_0xf0a87e => _0xf0a87e.skinName.toLowerCase().replace("\n", " ").includes(_0x247e4a.textFilter.toLowerCase()));
            _0x2a8248.prototype.updatePurchasesFilter(_0x48fcc8, _0xfca883, _0x2db0c8, _0x54be71);
        };
        _0x2a8248.prototype.updatePurchasesFilter = function(_0x1a5925, _0x153a27, _0x5ef824, _0x1ed03e) {
            _0x2a8248.prototype.setVisiblePage("myPurchases", 0);
            var _0x3b6b04 = Math.ceil(_0x5ef824.length / 5);
            _0x1a5925.setAttribute("data-pages", _0x3b6b04);
            _0x1a5925.setAttribute("data-curPage", 0);
            _0x1a5925.style.width = _0x3b6b04 * 662 + "px";
            _0x153a27.innerHTML = "Page: 1 of " + _0x3b6b04;
            for (let _0xb4a46b = 0; _0xb4a46b < _0x1ed03e.length; _0xb4a46b++) {
                const _0x3135cb = _0x1ed03e[_0xb4a46b];
                const _0xf894bd = _0x5ef824.includes(_0x3135cb);
                const _0x2d3693 = _0x1a5925.querySelector(".data-index-" + _0xb4a46b);
                if (_0x2d3693) {
                    _0x2d3693.style.display = _0xf894bd ? "block" : "none";
                }
            }
        };
        _0x2a8248.prototype.createMyAnimalsTab = function(_0x5bf2b0, _0x53e8b7, _0x464f99) {
            var _0x1e87d9 = {
                name: "myAnimals"
            };
            var _0x57ebf9 = _0x3709bd("li", _0x1e87d9.name, "title");
            _0x57ebf9.innerHTML = "MY FEATURES";
            _0x57ebf9.onclick = function() {
                _0x247e4a.curTabPage = 0;
                if (!_0x4b5557()) {
                    _0x247e4a.showLoginScreen();
                    return;
                }
                _0x247e4a.showTab(this.id);
            };
            _0x5bf2b0.appendChild(_0x57ebf9);
            var _0x4cd6ac = _0x3709bd("div", "tab-" + _0x1e87d9.name, "tab");
            var _0x326c1d = _0x3709bd("div", undefined, "content");
            var _0x5b98dd = _0x3709bd("div", undefined, "content-inner");
            var _0x1618a3 = _0x3709bd("div", "content-items-" + _0x1e87d9.name, "content-items");
            _0x5b98dd.append(_0x1618a3);
            if (_0x1e87d9.name == "Coins") {
                _0x1618a3.style.width = "615px";
            } else {
                _0x1618a3.style.width = "662px";
            }
            _0x326c1d.append(_0x5b98dd);
            _0x326c1d.append(_0x3709bd("div", "", "separator"));
            _0x5b98dd.append(_0x3709bd("div", "", "separator"));
            _0x1618a3.append(_0x3709bd("div", "", "separator"));
            _0x4cd6ac.append(_0x326c1d);
            _0x4cd6ac.append(_0x3709bd("div", "", "separator"));
            _0x53e8b7.appendChild(_0x4cd6ac);
            var _0x1adc9d = _0x3709bd("div", "left-" + _0x1e87d9.name, "left");
            var _0x592d3f = _0x3709bd("div", "pages-" + _0x1e87d9.name, "content-items-pages");
            var _0x25a84f = _0x3709bd("div", "right-" + _0x1e87d9.name, "right");
            _0x25a84f.onclick = function() {
                _0x247e4a.scrollItems(this, true);
            };
            _0x1adc9d.onclick = function() {
                _0x247e4a.scrollItems(this, false);
            };
            _0x5b98dd.append(_0x1618a3);
            if (_0x464f99.length > 0) {
                _0x5b98dd.className += " w662";
                var _0x36a4dd = Math.ceil(_0x464f99.length / 5);
                _0x1618a3.setAttribute("data-pages", _0x36a4dd);
                _0x1618a3.setAttribute("data-curPage", 0);
                _0x1618a3.style.width = _0x36a4dd * 662 + "px";
                _0x592d3f.innerHTML = "Page: 1 of " + _0x36a4dd;
                for (i = 0; i < _0x464f99.length; i++) {
                    var _0x512cdc = _0x464f99[i];
                    _0x1618a3.appendChild(_0x512cdc.generateHtml());
                }
                _0x326c1d.append(_0x1adc9d);
                _0x326c1d.append(_0x5b98dd);
                _0x326c1d.append(_0x25a84f);
                _0x326c1d.append(_0x592d3f);
            } else {
                var _0x42814f = _0x11d05e("div", "nopurchases");
                _0x42814f.innerHTML = "You don't have any item to show here!";
                _0x5b98dd.append(_0x42814f);
                _0x326c1d.append(_0x5b98dd);
            }
        };
        _0x2a8248.prototype.createMyDealsTab = function(_0x13f5b4, _0x49b6d0, _0x2b1988) {
            var _0x4cede2 = {
                name: "myDeals"
            };
            var _0x3a64a1 = _0x3709bd("li", _0x4cede2.name, "title");
            _0x3a64a1.innerHTML = "MY DEALS";
            _0x3a64a1.onclick = function() {
                _0x247e4a.curTabPage = 0;
                if (!_0x4b5557()) {
                    _0x247e4a.showLoginScreen();
                    return;
                }
                _0x247e4a.showTab(this.id);
            };
            _0x13f5b4.appendChild(_0x3a64a1);
            var _0x5c6716 = _0x3709bd("div", "tab-" + _0x4cede2.name, "tab");
            var _0x4838c9 = _0x3709bd("div", undefined, "content");
            var _0x4ee3eb = _0x3709bd("div", undefined, "content-inner");
            var _0xcb98f0 = _0x3709bd("div", "content-items-" + _0x4cede2.name, "content-items");
            _0x4ee3eb.append(_0xcb98f0);
            if (_0x4cede2.name == "Coins") {
                _0xcb98f0.style.width = "615px";
            } else {
                _0xcb98f0.style.width = "662px";
            }
            _0x4838c9.append(_0x4ee3eb);
            _0x4838c9.append(_0x3709bd("div", "", "separator"));
            _0x4ee3eb.append(_0x3709bd("div", "", "separator"));
            _0xcb98f0.append(_0x3709bd("div", "", "separator"));
            _0x5c6716.append(_0x4838c9);
            _0x5c6716.append(_0x3709bd("div", "", "separator"));
            _0x49b6d0.appendChild(_0x5c6716);
            var _0x18640d = _0x3709bd("div", "left-" + _0x4cede2.name, "left");
            var _0x20ad04 = _0x3709bd("div", "pages-" + _0x4cede2.name, "content-items-pages");
            var _0x3635c6 = _0x3709bd("div", "right-" + _0x4cede2.name, "right");
            _0x3635c6.onclick = function() {
                _0x247e4a.scrollItems(this, true);
            };
            _0x18640d.onclick = function() {
                _0x247e4a.scrollItems(this, false);
            };
            _0x4ee3eb.append(_0xcb98f0);
            if (_0x2b1988.length > 0) {
                _0x4ee3eb.className += " w662";
                var _0x338648 = Math.ceil(_0x2b1988.length / 2);
                _0xcb98f0.setAttribute("data-pages", _0x338648);
                _0xcb98f0.setAttribute("data-curPage", 0);
                _0xcb98f0.style.width = _0x338648 * 662 + "px";
                _0x20ad04.innerHTML = "Page: 1 of " + _0x338648;
                for (i = 0; i < _0x2b1988.length; i++) {
                    var _0x384886 = _0x2b1988[i];
                    _0xcb98f0.appendChild(_0x384886.generateHtml());
                }
                _0x4838c9.append(_0x18640d);
                _0x4838c9.append(_0x4ee3eb);
                _0x4838c9.append(_0x3635c6);
                _0x4838c9.append(_0x20ad04);
            } else {
                var _0x172727 = _0x11d05e("div", "nopurchases");
                _0x172727.innerHTML = "You don't have any item to show here!";
                _0x4ee3eb.append(_0x172727);
                _0x4838c9.append(_0x4ee3eb);
            }
        };
        _0x2a8248.prototype.createMySettingsTab = function(_0x3c226a, _0x5536f7, _0x5a8b7f) {
            var _0x52453a = {
                name: "mySettings"
            };
            var _0x498d10 = _0x3709bd("li", _0x52453a.name, "title");
            _0x498d10.innerHTML = "SETTINGS";
            _0x498d10.onclick = function() {
                _0x247e4a.curTabPage = 0;
                if (!_0x4b5557()) {
                    _0x247e4a.showLoginScreen();
                    return;
                }
                _0x247e4a.showTab(this.id);
            };
            _0x3c226a.appendChild(_0x498d10);
            var _0x2c19db = _0x3709bd("div", "tab-" + _0x52453a.name, "tab");
            var _0x30f9fc = _0x3709bd("div", undefined, "content");
            var _0x329525 = _0x3709bd("div", undefined, "content-inner");
            var _0x350496 = _0x3709bd("div", "content-items-" + _0x52453a.name, "content-items");
            _0x329525.append(_0x350496);
            _0x30f9fc.append(_0x329525);
            _0x30f9fc.append(_0x3709bd("div", "", "separator"));
            _0x329525.append(_0x3709bd("div", "", "separator"));
            _0x350496.append(_0x3709bd("div", "", "separator"));
            _0x2c19db.append(_0x30f9fc);
            _0x2c19db.append(_0x3709bd("div", "", "separator"));
            _0x5536f7.appendChild(_0x2c19db);
            _0x329525.append(_0x350496);
            if (_0x5a8b7f && _0x5a8b7f.length > 0) {
                for (i = 0; i < _0x5a8b7f.length; i++) {
                    var _0x456ad6 = _0x5a8b7f[i];
                    var _0x28a803 = _0x3709bd("div", undefined, "fileddiv");
                    var _0x353ce6 = _0x3709bd("div", undefined, "field-label");
                    var _0x1b527c = _0x3709bd("div", undefined, "field-value");
                    var _0x4a1681 = _0x456ad6.value == -1 ? "BUY" : _0x456ad6.value == 0 ? "EQUIP" : "UNEQUIP";
                    var _0x597928 = _0x3709bd("div", "action_" + _0x456ad6.handle, "field-action " + _0x4a1681);
                    _0x597928.setAttribute("data-actionid", "action_" + _0x456ad6.handle);
                    _0x597928.setAttribute("data-handle", _0x456ad6.handle);
                    if (_0x456ad6.value == -1) {
                        _0x597928.onclick = function() {
                            if (!_0x4b5557()) {
                                _0x247e4a.showLoginScreen();
                            } else {
                                var _0x1cebbc = _0x247e4a.getItemByName($(this).data("handle"));
                                if (_0x1cebbc != null) {
                                    _0x247e4a.buyConfirmationOverlay(_0x1cebbc);
                                }
                            }
                        };
                        _0x1b527c.setAttribute("width", "300px");
                        _0x597928.title = _0x597928.innerHTML = "CLICK HERE TO BUY THIS ITEM";
                    } else if (_0x456ad6.type == "clicktoview") {
                        _0x597928.innerHTML = !_0x456ad6.visible ? "*******" : _0x456ad6.value;
                        _0x597928.title = !_0x456ad6.visible ? "CLICK TO VIEW" : "CLICK TO HIDE";
                        _0x597928.setAttribute("data-value", _0x456ad6.value);
                        _0x597928.setAttribute("data-visible", _0x456ad6.visible == true);
                        _0x597928.onclick = function() {
                            var _0xd2215f = $(this).data("visible");
                            if (!_0xd2215f) {
                                $(this).html($(this).data("value"));
                                $(this).data("visible", true);
                            } else {
                                $(this).html("*******");
                                $(this).data("visible", false);
                            }
                        };
                    } else if (_0x456ad6.type == "action") {
                        _0x597928.onclick = function() {
                            _0x247e4a.playerSettings_update($(this).data("handle"));
                        };
                        _0x597928.innerHTML = _0x456ad6.value == 0 ? "EQUIP" : "UNEQUIP";
                        _0x597928.title = _0x456ad6.value == 0 ? "CLICK TO EQUIP" : "CLICK TO UNEQUIP";
                    } else if (_0x456ad6.type == "display") {
                        var _0x1611a7 = "" + _0x456ad6.value;
                        _0x597928.innerHTML = _0x1611a7 == "null" ? 0 : _0x1611a7;
                    }
                    _0x353ce6.innerHTML = _0x456ad6.label;
                    _0x1b527c.appendChild(_0x597928);
                    _0x28a803.appendChild(_0x353ce6);
                    _0x28a803.appendChild(_0x1b527c);
                    _0x350496.appendChild(_0x28a803);
                }
                _0x350496.style.width = "662px";
            } else {
                var _0x2f1463 = _0x11d05e("div", "nopurchases");
                _0x2f1463.innerHTML = "You don't have any item to show here!";
                _0x329525.append(_0x2f1463);
                _0x30f9fc.append(_0x329525);
            }
        };
        _0x2a8248.prototype.getItemByName = function(_0x255dd5) {
            if (this.shop.allItems) {
                for (i = 0; i < this.shop.allItems.length; i++) {
                    if (this.shop.allItems[i].itemId == _0x255dd5) {
                        return this.shop.allItems[i];
                    }
                }
            }
            return null;
        };
        _0x2a8248.prototype.deleteTab = function() {
            var _0x4c7c3d = document.getElementById("shop_div");
            if (_0x4c7c3d) {
                _0x4c7c3d.parentNode.removeChild(_0x4c7c3d);
            }
        };
        _0x2a8248.prototype.getShopFilters = function() {};
        _0x2a8248.prototype.skinsInterface = function() {
            this.deleteTab();
            var _0x1cba7a = _0x11d05e("shop_div", "");
            var _0x13d1c3 = _0x3709bd("ul");
            _0x1cba7a.appendChild(_0x13d1c3);
            this.addCloseButton2(_0x13d1c3);
            this.addBackButton(_0x13d1c3);
            for (t = 0; t < this.shop.skins.length; t++) {
                var _0x18d212 = this.shop.skins[t];
                var _0xaf4912 = _0x3709bd("li", _0x18d212.name, "title");
                var _0x3ffcad = _0x3709bd("a");
                _0xaf4912.innerHTML = _0x18d212.name;
                _0x3ffcad.setAttribute("href", "#tab-" + _0x18d212.name);
                _0xaf4912.onclick = function() {
                    _0x247e4a.curTabPage = 0;
                    _0x247e4a.showTab(this.id);
                    _0x55b75b();
                };
                _0x13d1c3.appendChild(_0xaf4912);
                var _0x3dce3c = _0x3709bd("div", "tab-" + _0x18d212.name, "tab");
                var _0x455656 = _0x3709bd("div", undefined, "content");
                var _0x578d6c = _0x3709bd("div", undefined, "content-inner w662");
                var _0x5e6770 = _0x3709bd("div", "item-filters", "item-filters");
                var _0x5794aa = _0x3709bd("div", "content-items-" + _0x18d212.name, "content-items");
                var _0x232e9d = _0x3709bd("div", "left-" + _0x18d212.name, "left");
                var _0x1e8856 = _0x3709bd("div", "left-" + _0x18d212.name, "right");
                var _0x1c745f = _0x3709bd("div", "pages-" + _0x18d212.name, "content-items-pages");
                if (this.item_filter == undefined) {
                    this.item_filter = "all";
                }
                var _0x2a5f94 = ["all", "new", "sale", "normal", "high-price", "low-price"];
                var _0x45cb56 = _0x3709bd("span", undefined, "filter-label");
                _0x45cb56.innerHTML = "Filter: ";
                _0x5e6770.appendChild(_0x45cb56);
                var _0x3eac44 = [];
                for (i = 0; i < _0x18d212.items.length; i++) {
                    var _0x530934 = _0x18d212.items[i];
                    if (!_0x530934.data.canBuy) {
                        continue;
                    }
                    if (_0x2a8248.prototype.shop.ownedSkins[_0x530934.id]) {
                        continue;
                    }
                    if (_0x2a8248.prototype.shop.ownedAnimals[_0x530934.id]) {
                        continue;
                    }
                    if (_0x2a8248.prototype.shop.ownedDeals[_0x530934.id]) {
                        continue;
                    }
                    if (this.item_filter == "all") {
                        _0x3eac44.push(_0x530934);
                    } else if (this.item_filter == "new" && _0x530934.saleType == 1) {
                        _0x3eac44.push(_0x530934);
                    } else if (this.item_filter == "sale" && _0x530934.saleType == 2) {
                        _0x3eac44.push(_0x530934);
                    } else if (this.item_filter == "normal" && _0x530934.saleType == 0) {
                        _0x3eac44.push(_0x530934);
                    } else if (this.item_filter == "high-price" || this.item_filter == "low-price") {
                        _0x3eac44.push(_0x530934);
                    }
                }
                if (this.item_filter == "low-price") {
                    var _0x59c02a = _0x3eac44.slice(0);
                    _0x59c02a.sort(function(_0x4603cd, _0x228d07) {
                        return _0x4603cd.price - _0x228d07.price;
                    });
                    _0x3eac44 = _0x59c02a;
                } else if (this.item_filter == "high-price") {
                    var _0x332205 = _0x3eac44.slice(0);
                    _0x332205.sort(function(_0x1eee71, _0x25b037) {
                        return _0x25b037.price - _0x1eee71.price;
                    });
                    _0x3eac44 = _0x332205;
                }
                _0x578d6c.append(_0x5794aa);
                var _0x469a54 = 5;
                if (_0x18d212.name == "Deals") {
                    _0x469a54 = 2;
                }
                var _0x3e4680 = Math.ceil(_0x3eac44.length / _0x469a54);
                if (["Coins", "Gems", "VIP Pass"].includes(_0x18d212.name)) {
                    _0x3e4680 = Math.ceil(_0x4386b9.filter(function(_0x56e0c7) {
                        if (_0x56e0c7.name === "Mopecoins" && _0x18d212.name === "Coins" || _0x56e0c7.name === "Gems" && _0x18d212.name === "Gems" || _0x56e0c7.name === "VIP" && _0x18d212.name === "VIP Pass") {
                            return true;
                        }
                    }).length / _0x469a54);
                }
                for (i = 0; i < _0x2a5f94.length; i++) {
                    var _0x45cb56 = _0x3709bd("span", undefined, "filter " + (this.item_filter == _0x2a5f94[i] ? "selected" : "") + " filter-" + _0x2a5f94[i]);
                    _0x45cb56.setAttribute("data-filter", _0x2a5f94[i]);
                    _0x45cb56.setAttribute("data-tab", _0x18d212.name);
                    _0x45cb56.innerHTML = _0x2a5f94[i];
                    _0x45cb56.onclick = function() {
                        _0x247e4a.item_filter = $(this).data("filter");
                        _0x247e4a.selectedTab = $(this).data("tab");
                        _0x247e4a.skinsInterface();
                        _0x247e4a.setVisiblePage(_0x247e4a.selectedTab, 0);
                        _0x247e4a.showTab(_0x247e4a.selectedTab);
                    };
                    _0x5e6770.appendChild(_0x45cb56);
                }
                _0x1e8856.onclick = function() {
                    _0x247e4a.scrollItems(this, true);
                };
                _0x232e9d.onclick = function() {
                    _0x247e4a.scrollItems(this, false);
                };
                _0x5794aa.setAttribute("data-pages", _0x3e4680);
                _0x5794aa.setAttribute("data-curPage", 0);
                _0x5794aa.style.width = _0x3e4680 * 662 + "px";
                _0x1c745f.innerHTML = "Page: 1 of " + _0x3e4680;
                if (_0x18d212.items.length > 0 || ["Coins", "Gems", "VIP Pass"].includes(_0x18d212.name)) {
                    _0x455656.append(_0x5e6770);
                    if (_0x18d212.name === "Coins" || _0x18d212.name === "Gems" || _0x18d212.name === "VIP Pass") {
                        _0x5e6770.style.visibility = "hidden";
                    }
                    for (i = 0; i < _0x3eac44.length; i++) {
                        var _0x530934 = _0x3eac44[i];
                        _0x5794aa.appendChild(_0x530934.generateHtml());
                    }
                    for (const _0x14e254 of _0x4386b9) {
                        if (_0x14e254.name === "Mopecoins" && _0x18d212.name === "Coins" || _0x14e254.name === "Gems" && _0x18d212.name === "Gems" || _0x14e254.name === "VIP" && _0x18d212.name === "VIP Pass") {
                            _0x5794aa.appendChild(this.generateXsollaItem(_0x14e254));
                        }
                    }
                    if (_0x18d212.name === "VIP Pass") {
                        this.vipInterface(_0x5794aa);
                    }
                    _0x455656.append(_0x232e9d);
                    _0x455656.append(_0x578d6c);
                    _0x455656.append(_0x1e8856);
                    _0x455656.append(_0x1c745f);
                } else {
                    var _0x4bd4a1 = _0x11d05e("div", "nopurchases");
                    _0x4bd4a1.innerHTML = "You don't have any item to show here!";
                    _0x578d6c.append(_0x4bd4a1);
                    _0x455656.append(_0x578d6c);
                }
                _0x455656.append(_0x3709bd("div", "", "separator"));
                _0x578d6c.append(_0x3709bd("div", "", "separator"));
                _0x5794aa.append(_0x3709bd("div", "", "separator"));
                _0x3dce3c.append(_0x455656);
                _0x3dce3c.append(_0x3709bd("div", "", "separator"));
                _0x1cba7a.appendChild(_0x3dce3c);
            }
            this.showUserExpBarAndCoinsBalance(_0x13d1c3);
            _0x1cba7a.append(_0x3709bd("div", "", "separator"));
            this.shopDiv.appendChild(_0x1cba7a);
            this.showTab(this.selectedTab);
        };
        _0x2a8248.prototype.vipInterface = function(_0x5cfdce) {
            if (!_0x5d3cc4) {
                _0x5cfdce.innerHTML = "Sync Issue Please Refresh The Page";
                return;
            }
            if (!_0x5d3cc4.success) {
                _0x5cfdce.innerHTML = _0x5d3cc4.error;
                return;
            }
            const _0x31740f = this.getSkinDataById(_0x5d3cc4.data.skinId1);
            const _0x5d69d2 = this.getSkinDataById(_0x5d3cc4.data.skinId2);
            const _0xaaf7b0 = _0xa9548b({
                animalType: _0x31740f.animalType,
                animalSpecies: _0x31740f.animalSpecies,
                animalSubSpecies: _0x31740f.animalSubSpecies,
                mopeSeasonID: _0x31740f.season
            });
            if (_0xaaf7b0) {
                _0x31740f.id = _0x31740f.itemId;
                _0x31740f.oType = _0x48c056;
                _0x31740f.skinName = _0xaaf7b0.aniName || _0x31740f.itemId;
                _0x31740f.skinImage = _0xaaf7b0.skinName + ".ui";
            }
            const _0x5b64c8 = _0x3e70c3.newlyVis_createGameObjFromMsg(_0x31740f.itemType, _0x31740f);
            const _0x1eed12 = _0xa9548b({
                animalType: _0x5d69d2.animalType,
                animalSpecies: _0x5d69d2.animalSpecies,
                animalSubSpecies: _0x5d69d2.animalSubSpecies,
                mopeSeasonID: _0x5d69d2.season
            });
            if (_0x1eed12) {
                _0x5d69d2.id = _0x5d69d2.itemId;
                _0x5d69d2.oType = _0x48c056;
                _0x5d69d2.skinName = _0x1eed12.aniName || _0x5d69d2.itemId;
                _0x5d69d2.skinImage = _0x1eed12.skinName + ".ui";
            }
            const _0x368a14 = _0x3e70c3.newlyVis_createGameObjFromMsg(_0x5d69d2.itemType, _0x5d69d2);
            _0x5cfdce.appendChild(_0x5b64c8.generateHtml());
            _0x5cfdce.appendChild(_0x368a14.generateHtml());
        };
        _0x2a8248.prototype.dealsInterface = function() {
            this.deleteTab();
            var _0x192f69 = _0x11d05e("shop_div", "boxshadow");
            var _0x17a98c = _0x3709bd("ul");
            _0x192f69.appendChild(_0x17a98c);
            this.addCloseButton2(_0x17a98c);
            this.addBackButton(_0x17a98c);
            for (t = 0; t < this.shop.skins.length; t++) {
                var _0x45f9b7 = this.shop.skins[t];
                var _0x8fe322 = _0x3709bd("li", _0x45f9b7.name, "title");
                var _0xce65af = _0x3709bd("a");
                _0x8fe322.innerHTML = _0x45f9b7.name;
                _0xce65af.setAttribute("href", "#tab-" + _0x45f9b7.name);
                _0x8fe322.onclick = function() {
                    _0x247e4a.curTabPage = 0;
                    _0x247e4a.showTab(this.id);
                    _0x55b75b();
                };
                _0x17a98c.appendChild(_0x8fe322);
                var _0x3a127d = _0x3709bd("div", "tab-" + _0x45f9b7.name, "tab");
                var _0x4195de = _0x3709bd("div", undefined, "content");
                var _0xe5ddec = _0x3709bd("div", undefined, "content-inner w662");
                var _0x5b149f = _0x3709bd("div", "content-items-" + _0x45f9b7.name, "content-items");
                var _0x1ff402 = _0x3709bd("div", "left-" + _0x45f9b7.name, "left");
                var _0x4a3c09 = _0x3709bd("div", "pages-" + _0x45f9b7.name, "content-items-pages");
                var _0x4fd473 = _0x3709bd("div", "left-" + _0x45f9b7.name, "right");
                _0x4fd473.onclick = function() {
                    _0x247e4a.scrollItems(this, true);
                };
                _0x1ff402.onclick = function() {
                    _0x247e4a.scrollItems(this, false);
                };
                _0xe5ddec.append(_0x5b149f);
                var _0x30d520 = Math.ceil(_0x45f9b7.items.length / 2);
                _0x5b149f.setAttribute("data-pages", _0x30d520);
                _0x5b149f.setAttribute("data-curPage", 0);
                if (_0x45f9b7.name == "Coins") {
                    _0x5b149f.style.width = "615px";
                } else {
                    _0x5b149f.style.width = _0x30d520 * 662 + "px";
                }
                _0x4a3c09.innerHTML = "Page: 1 of " + _0x30d520;
                for (i = 0; i < _0x45f9b7.items.length; i++) {
                    var _0xbcbd7c = _0x45f9b7.items[i];
                    _0x5b149f.appendChild(_0xbcbd7c.generateHtml());
                }
                _0x4195de.append(_0x1ff402);
                _0x4195de.append(_0xe5ddec);
                _0x4195de.append(_0x4fd473);
                _0x4195de.append(_0x4a3c09);
                _0x4195de.append(_0x3709bd("div", "", "separator"));
                _0xe5ddec.append(_0x3709bd("div", "", "separator"));
                _0x5b149f.append(_0x3709bd("div", "", "separator"));
                _0x3a127d.append(_0x4195de);
                _0x3a127d.append(_0x3709bd("div", "", "separator"));
                _0x192f69.appendChild(_0x3a127d);
            }
            this.showUserExpBarAndCoinsBalance(_0x17a98c);
            _0x192f69.append(_0x3709bd("div", "", "separator"));
            this.shopDiv.appendChild(_0x192f69);
            this.showTab(this.selectedTab);
        };
        _0x2a8248.prototype.props = {
            hatsColor: "",
            beardsColor: "",
            glassesColor: "",
            scarfsColor: ""
        };
        _0x2a8248.prototype.propBought = {
            hats: {
                white: 1,
                red: 0,
                green: 0,
                blue: 1,
                pink: 0,
                gold: 0
            },
            beards: {
                white: 0,
                red: 1,
                green: 0,
                blue: 0,
                pink: 0,
                gold: 1
            },
            glasses: {
                white: 0,
                red: 1,
                green: 1,
                blue: 0,
                pink: 0,
                gold: 0
            },
            scarfs: {
                white: 0,
                red: 1,
                green: 0,
                blue: 1,
                pink: 0,
                gold: 1
            }
        };
        _0x2a8248.prototype.hasBoughtProp = function(_0x5700d9, _0x74c9d) {
            var _0x31a473 = this.propBought[_0x5700d9][_0x74c9d];
            if (_0x31a473 === 1) {
                return true;
            }
            return false;
        };
        _0x2a8248.prototype.isPropSelected = function(_0x3d3fb3, _0x382cac) {
            var _0x494682 = this.getPropColorNum(_0x382cac);
            var _0xd21f76 = this.props[_0x3d3fb3 + "Color"];
            return _0xd21f76 === _0x494682;
        };
        _0x2a8248.prototype.showProp = function(_0x36a261) {
            var _0x839808 = document.getElementById("propDisplay");
            _0x839808.style.display = "block";
            var _0x267237 = document.getElementById("btn-" + _0x36a261);
            if (_0x267237) {
                var _0x12e3b5 = document.getElementById("btn-hats");
                var _0xa933ed = document.getElementById("btn-glasses");
                var _0x4c4d8f = document.getElementById("btn-beards");
                var _0x28b407 = document.getElementById("btn-scarfs");
                _0x12e3b5.className = "clothingbtn";
                _0xa933ed.className = "clothingbtn";
                _0x4c4d8f.className = "clothingbtn";
                _0x28b407.className = "clothingbtn";
                _0x267237.className = "clothingbtn selected";
                var _0x164430 = document.getElementById("propColors");
                _0x164430.innerHTML = "";
                var _0x18dbb4 = _0x3709bd("div", "propColor-white", "propColor propColor-white" + (this.isPropSelected(_0x36a261, "white") ? " selected" : "") + (this.hasBoughtProp(_0x36a261, "white") ? " bought" : ""));
                var _0x2533de = _0x3709bd("div", "propColor-red", "propColor propColor-red" + (this.isPropSelected(_0x36a261, "red") ? " selected" : "") + (this.hasBoughtProp(_0x36a261, "red") ? " bought" : ""));
                var _0x3c9966 = _0x3709bd("div", "propColor-green", "propColor propColor-green" + (this.isPropSelected(_0x36a261, "green") ? " selected" : "") + (this.hasBoughtProp(_0x36a261, "green") ? " bought" : ""));
                var _0x41f10b = _0x3709bd("div", "propColor-blue", "propColor propColor-blue" + (this.isPropSelected(_0x36a261, "blue") ? " selected" : "") + (this.hasBoughtProp(_0x36a261, "blue") ? " bought" : ""));
                var _0x1285ab = _0x3709bd("div", "propColor-pink", "propColor propColor-pink" + (this.isPropSelected(_0x36a261, "pink") ? " selected" : "") + (this.hasBoughtProp(_0x36a261, "pink") ? " bought" : ""));
                var _0x2dc843 = _0x3709bd("div", "propColor-gold", "propColor propColor-gold" + (this.isPropSelected(_0x36a261, "gold") ? " selected" : "") + (this.hasBoughtProp(_0x36a261, "gold") ? " bought" : ""));
                _0x18dbb4.appendChild(_0x3709bd("div", "", "color"));
                _0x2533de.appendChild(_0x3709bd("div", "", "color"));
                _0x3c9966.appendChild(_0x3709bd("div", "", "color"));
                _0x41f10b.appendChild(_0x3709bd("div", "", "color"));
                _0x1285ab.appendChild(_0x3709bd("div", "", "color"));
                _0x2dc843.appendChild(_0x3709bd("div", "", "color"));
                _0x18dbb4.onclick = function() {
                    _0x247e4a.setPropColor(_0x36a261, "white");
                };
                _0x2533de.onclick = function() {
                    _0x247e4a.setPropColor(_0x36a261, "red");
                };
                _0x3c9966.onclick = function() {
                    _0x247e4a.setPropColor(_0x36a261, "green");
                };
                _0x41f10b.onclick = function() {
                    _0x247e4a.setPropColor(_0x36a261, "blue");
                };
                _0x1285ab.onclick = function() {
                    _0x247e4a.setPropColor(_0x36a261, "pink");
                };
                _0x2dc843.onclick = function() {
                    _0x247e4a.setPropColor(_0x36a261, "gold");
                };
                _0x164430.appendChild(_0x18dbb4);
                _0x164430.appendChild(_0x2533de);
                _0x164430.appendChild(_0x3c9966);
                _0x164430.appendChild(_0x41f10b);
                _0x164430.appendChild(_0x1285ab);
                _0x164430.appendChild(_0x2dc843);
                var _0x452bca = document.getElementById("propBuyDiv");
                _0x452bca.innerHTML = "";
            }
        };
        _0x2a8248.prototype.propAnimal = null;
        _0x2a8248.prototype.updatePropsForAnimal = function() {
            console.log(this.props);
            var _0x48049f = _0x473f55;
            var _0xd2dfe0 = _0x35d268.createGameObjOfOType(_0x48c056, _0x48049f);
            _0xd2dfe0.animalType = _0x48049f;
            _0xd2dfe0.animalSpecies = 0;
            _0xd2dfe0.animalSubSpecies = 0;
            _0xd2dfe0.animalPremiumSkin = 0;
            var _0x20a486 = _0x11d05e("", "propimg");
            var _0x3531a4 = _0x11d05e("", "propimg");
            var _0x38551e = _0x11d05e("", "propimg");
            var _0x3731cc = _0x11d05e("", "propimg");
            var _0x5e242e = _0x11d05e("", "propimg");
            var _0x2aafcf = document.getElementById("propAnimal");
            _0x2aafcf.innerHTML = "";
            var _0x2fbb08 = "skins/" + _0xd2dfe0.animalInfo().skinName + ".png";
            var _0x54cf54 = "/props/" + _0x48049f + "/beards/" + this.props.beardsColor + ".png";
            var _0x19aea0 = "/props/" + _0x48049f + "/hats/" + this.props.hatsColor + ".png";
            var _0x53124b = "/props/" + _0x48049f + "/scarfs/" + this.props.scarfsColor + ".png";
            var _0x134019 = "/props/" + _0x48049f + "/glasses/" + this.props.glassesColor + ".png";
            console.log(_0x54cf54);
            _0x3531a4.style.backgroundImage = "url(" + _0x54cf54 + ")";
            _0x20a486.style.backgroundImage = "url(" + _0x2fbb08 + ")";
            _0x38551e.style.backgroundImage = "url(" + _0x19aea0 + ")";
            _0x3731cc.style.backgroundImage = "url(" + _0x53124b + ")";
            _0x5e242e.style.backgroundImage = "url(" + _0x134019 + ")";
            _0x2aafcf.appendChild(_0x3531a4);
            _0x2aafcf.appendChild(_0x20a486);
            _0x2aafcf.appendChild(_0x3731cc);
            _0x2aafcf.appendChild(_0x5e242e);
            _0x2aafcf.appendChild(_0x38551e);
        };
        _0x2a8248.prototype.getPropColorNum = function(_0x377204) {
            switch (_0x377204) {
                case "white":
                    return 0;
                case "red":
                    return 1;
                case "green":
                    return 2;
                case "blue":
                    return 3;
                case "pink":
                    return 4;
                case "gold":
                    return 5;
            }
        };
        _0x2a8248.prototype.setPropColor = function(_0x9ce644, _0x52281f) {
            var _0x40850e = _0x9ce644 + "Color";
            var _0x3c1002 = document.getElementById("propColor-" + _0x52281f);
            var _0x5a618b = document.getElementById("propColor-red");
            var _0x12201a = document.getElementById("propColor-green");
            var _0x5649ab = document.getElementById("propColor-blue");
            var _0x52c9fe = document.getElementById("propColor-pink");
            var _0x1b2996 = document.getElementById("propColor-white");
            var _0x2de6c9 = document.getElementById("propColor-gold");
            _0x5a618b.className = "propColor propColor-red" + (this.hasBoughtProp(_0x9ce644, "red") ? " bought" : "");
            _0x12201a.className = "propColor propColor-green" + (this.hasBoughtProp(_0x9ce644, "green") ? " bought" : "");
            _0x5649ab.className = "propColor propColor-blue" + (this.hasBoughtProp(_0x9ce644, "blue") ? " bought" : "");
            _0x52c9fe.className = "propColor propColor-pink" + (this.hasBoughtProp(_0x9ce644, "pink") ? " bought" : "");
            _0x1b2996.className = "propColor propColor-white" + (this.hasBoughtProp(_0x9ce644, "white") ? " bought" : "");
            _0x2de6c9.className = "propColor propColor-gold" + (this.hasBoughtProp(_0x9ce644, "gold") ? " bought" : "");
            var _0x515a01 = document.getElementById("propBuyDiv");
            _0x515a01.innerHTML = "";
            var _0x244794 = _0x3709bd("div", "propBuyBtn", "buybutton");
            _0x244794.onclick = function() {
                alert("buy prop: " + _0x9ce644 + " color: " + _0x52281f);
            };
            if (this.isPropSelected(_0x9ce644, _0x52281f)) {
                this.props[_0x40850e] = "";
                _0x3c1002.className = "propColor propColor-" + _0x52281f;
            } else {
                this.props[_0x40850e] = this.getPropColorNum(_0x52281f);
                _0x3c1002.className = "propColor propColor-" + _0x52281f + " selected";
                if (!this.hasBoughtProp(_0x9ce644, _0x52281f)) {
                    var _0x52c95f = new Image();
                    _0x52c95f.className = "buycoin-img";
                    _0x52c95f.src = "shop/mopecoin.png";
                    var _0x5c304f = _0x3709bd("span", "", "buycoin-price");
                    _0x5c304f.innerHTML = 100 + this.getPropColorNum(_0x52281f) * 100;
                    _0x244794.appendChild(_0x52c95f);
                    _0x244794.appendChild(_0x5c304f);
                    _0x515a01.appendChild(_0x244794);
                }
            }
            this.updatePropsForAnimal();
        };
        _0x2a8248.prototype.addBackButton = function(_0x4f98fc) {
            var _0x1967af = _0x3709bd("li", "back", "title ");
            var _0x5deb92 = new Image();
            _0x5deb92.src = "shop/back.png";
            _0x1967af.appendChild(_0x5deb92);
            _0x1967af.onclick = function() {
                _0x247e4a.showShopButtons();
            };
            _0x4f98fc.appendChild(_0x1967af);
        };
        _0x2a8248.prototype.addCloseButton2 = function(_0x5c48eb) {
            var _0xf69928 = _0x3709bd("li", "closebtn", "title ");
            var _0x2aed79 = new Image();
            _0x2aed79.src = "shop/close.png";
            _0xf69928.appendChild(_0x2aed79);
            _0xf69928.onclick = function() {
                _0x25164f();
            };
            _0x5c48eb.appendChild(_0xf69928);
        };
        _0x2a8248.prototype.coinsInterface = function() {
            this.deleteTab();
            var _0x3a4fd8 = _0x11d05e("shop_div", "");
            var _0x54c2cd = _0x3709bd("ul");
            _0x3a4fd8.appendChild(_0x54c2cd);
            this.addCloseButton2(_0x54c2cd);
            this.addBackButton(_0x54c2cd);
            this.showUserExpBarAndCoinsBalance(_0x54c2cd);
            _0x3a4fd8.append(_0x3709bd("div", "", "separator"));
            this.shopDiv.appendChild(_0x3a4fd8);
            this.showTab("Coins");
        };
        _0x2a8248.prototype.curTabPage = 0;
        _0x2a8248.prototype.setVisiblePage = function(_0x182e56, _0x13277a) {
            var _0x30250e = document.getElementById("pages-" + _0x182e56);
            if (!_0x30250e) {
                return;
            }
            var _0x4da5f8 = "content-items-" + _0x182e56;
            var _0x4614fa = document.getElementById(_0x4da5f8);
            if (_0x4614fa) {
                var _0xf078f2 = _0x4614fa.getAttribute("data-pages");
                _0x4614fa.setAttribute("data-curPage", _0x13277a);
                this.curTabPage = _0x13277a;
                _0x30250e.innerHTML = "Page: " + (_0x13277a + 1) + " of " + _0xf078f2;
                var _0xe25966 = _0x13277a * -660;
                _0x4614fa.style.left = _0xe25966 + "px";
                _0x4614fa.style.webkitAnimation = "";
            }
        };
        _0x2a8248.prototype.scrollItems = function(_0x5b6fa6, _0x471457) {
            var _0x423eb4 = _0x5b6fa6.id.split("-")[1];
            var _0x1a9c7c = "content-items-" + _0x423eb4;
            var _0x28cb2c = document.getElementById(_0x1a9c7c);
            var _0x23593d = _0x28cb2c.getAttribute("data-pages");
            var _0x2199e3 = Number(_0x28cb2c.getAttribute("data-curPage"));
            if (_0x2199e3 < _0x23593d - 1 && _0x471457) {
                _0x2199e3++;
            } else if (_0x2199e3 > 0 && !_0x471457) {
                _0x2199e3--;
            }
            this.setVisiblePage(_0x423eb4, _0x2199e3);
        };
        _0x2a8248.prototype.version = 0.2;
        _0x2a8248.prototype.onLogon = function() {
            console.log("MopeShop " + this.version + " onLogon");
            if (_0x1c0f11) {
                var _0x1fe84e = document.getElementById("accountsDiv");
                if (_0x1fe84e) {
                    var _0xe1ab1 = _0x11d05e("profilePic", "profilePic");
                    var _0xda44bc = new Image();
                    var _0x49770a = _0x11d05e("profileName", "profileName");
                    _0xe1ab1.appendChild(_0xda44bc);
                    if (_0x10d372) {
                        _0xda44bc.src = _0x10d372;
                    }
                    _0x49770a.innerHTML = _0x3b3392;
                    _0x1fe84e.appendChild(_0xe1ab1);
                    var _0x3ca4b4 = _0x2b46b2;
                    var _0x3e2847 = _0x3709bd("div", "user-exp2", "user-exp");
                    var _0x16da13 = _0x3709bd("div", "userxp-bar2", "userxp-bar");
                    var _0x5957b6 = _0x3709bd("div", "userxp-barbar2", "userxp-barbar");
                    var _0x48a922 = _0x3709bd("div", "userxp-val2", "userxp-val");
                    var _0x3ebef7 = _0x3709bd("div", "userxp-star2", "userxp-star");
                    var _0x576859 = 100;
                    _0x48a922.innerHTML = _0x576859 + " / " + _0x3ca4b4.xpNextLvl;
                    _0x576859 = _0x576859 / _0x3ca4b4.xpNextLvl * 100;
                    _0x5957b6.style.width = _0x576859 + "px";
                    _0x3ebef7.innerHTML = _0x3ca4b4.level;
                    _0x16da13.appendChild(_0x5957b6);
                    _0x3e2847.appendChild(_0x16da13);
                    _0x3e2847.appendChild(_0x48a922);
                    _0x3e2847.appendChild(_0x3ebef7);
                    var _0x2ead52 = _0x3709bd("div", "coins-balance2", "coins-balance");
                    var _0x458ff0 = new Image();
                    _0x458ff0.src = "shop/mopecoin.png";
                    _0x458ff0.className = "buycoin-img";
                    _0x2ead52.appendChild(_0x458ff0);
                    var _0x5cdd52 = _0x3709bd("div", "coins2", "coins");
                    _0x5cdd52.innerHTML = _0x2d89d7();
                    _0x2ead52.appendChild(_0x5cdd52);
                    _0x2ead52.setAttribute("title", "add more coins");
                    _0x2ead52.onclick = function() {
                        _0x25164f();
                        _0x247e4a = new _0x2a8248();
                        _0x2a8248.prototype.callback = function() {
                            this.coinsInterface();
                            _0x2a8248.prototype.callback = null;
                        };
                        _0x247e4a.load();
                    };
                    var _0x58e1c6 = _0x11d05e("userNameExpDiv", "userNameExpDiv");
                    _0x58e1c6.appendChild(_0x49770a);
                    _0x58e1c6.appendChild(_0x11d05e(undefined, "clear"));
                    _0x58e1c6.appendChild(_0x3e2847);
                    _0x58e1c6.appendChild(_0x11d05e(undefined, "clear"));
                    _0x58e1c6.appendChild(_0x2ead52);
                    _0x1fe84e.appendChild(_0x58e1c6);
                    _0x1fe84e.appendChild(_0x11d05e(undefined, "clear"));
                }
            }
        };
        _0x2a8248.prototype.playerSettings_update = function(_0x3f5950) {
            console.log("update: " + _0x3f5950);
            _0x247e4a.removeBlockOverlay();
            _0x247e4a.blockOverlay();
            _0x436fa7(_0x3f5950, function(_0x2ce92b, _0x21cd1b) {
                if (_0x2ce92b) {
                    _0x5338aa("Settings updated successfully!", "success", 5);
                    var _0x3962a4 = 1;
                    _0x3962a4 += 1;
                    if (_0x1c0f11) {
                        _0x3962a4 += _0x31205b(_0x4f90e1).length + 2;
                        _0x3962a4 += _0x31205b(_0x28cec6).length + 2;
                    }
                    var _0x44b6b6 = new _0x1f27e2(_0x3962a4);
                    _0x44b6b6.writeUInt8(71);
                    _0x44b6b6.writeUInt8(_0x1c0f11 ? 1 : 0);
                    if (_0x1c0f11) {
                        _0x44b6b6.writeString(_0x4f90e1);
                        _0x44b6b6.writeString(_0x28cec6);
                    }
                    _0x80c20b(_0x44b6b6);
                    _0x4cdca5(true);
                    _0x2709e4();
                } else {
                    switch (_0x21cd1b) {
                        case "alreadyowned":
                            _0x5338aa("AccountServer: item already purchased!", _0x21cd1b, 15);
                            break;
                        case "cantafford":
                            _0x5338aa("AccountServer: not enough coins to buy this!", _0x21cd1b, 15);
                            break;
                        case "urlnotfound":
                            _0x5338aa("AccountServer: Can't reach server at this moment!", "itemDoesntExist", 15);
                            break;
                    }
                }
                _0x247e4a.removeBlockOverlay();
            });
        };
        var _0x247e4a = new _0x2a8248();
        var _0xb503ca = document.getElementById("divButtons");
        if (_0x1c0f11) {
            _0xb503ca.style.display = "none";
        } else {
            _0xb503ca.style.display = "block";
        }

        function _0x145787(_0x356b4f) {
            var _0x3e3ac2 = document.createElement("div");
            _0x3e3ac2.id = "shopOverlay";
            _0x3e3ac2.className = "shopOverlay center";
            var _0x533f39 = document.createElement("div");
            _0x533f39.className = "shopOverlay_plzwait";
            _0x533f39.innerHTML = "Please wait...";
            _0x3e3ac2.appendChild(_0x533f39);
            var _0x8e7e7e = document.getElementsByTagName("body")[0];
            _0x8e7e7e.prepend(_0x3e3ac2);
            if (_0x356b4f) {
                _0x247e4a.actionBtn = _0x356b4f;
            }
            _0x20702c();
        }

        function _0x120c0f(_0x301946) {
            var _0x5013b6 = _0x3709bd("input", "txtCopy");
            _0x5013b6.setAttribute("type", "text");
            _0x5013b6.setAttribute("value", _0x301946);
            console.log(_0x5013b6);
            _0x5013b6.select();
            _0x5013b6.setSelectionRange(0, 99999);
            document.execCommand("copy");
            alert("Copied the text: " + _0x5013b6.value);
        }
        _0x247e4a.loadData();
        _0x2a8248.prototype.getAnimalInfo = function(_0x493135, _0x34e639) {
            switch (_0x493135) {
                case "sampleTestSkin":
                    return [_0x473f55, 250, "Sample Mouse", "land/mouse/250/mouse"];
                case "summer21_seamonster":
                    return [_0x46adbf, 201, "Ancient Tortoise", "ocean/seamonster/201/seamonster"];
                case "summer21_puffer":
                    return [_0x2b36cf, 201, "Omniball Puffer", "ocean/pufferfish/201/pufferfish"];
                case "summer21_turtle":
                    return [_0x499275, 201, "Kiwi Turtle", "ocean/turtle/201/turtle"];
                case "summer21_octopus":
                    return [_0xbc1c26, 201, "Fuchsia Tiger", "ocean/octopus/201/octopus.ui"];
                case "summer21_orca":
                    return [_0x563e19, 201, "Lifeguard Orca", "ocean/killerwhale/201/killerwhale"];
                case "summer21_iceMonster":
                    return [_0x31abda, 201, "Cryo Coach Monster", "arctic/icemonster/201/icemonster"];
                case "summer21_mammoth":
                    return [_0x145a21, 201, "Lost Tourist", "arctic/mammoth/201/mammoth"];
                case "summer21_crab":
                    return [_0x9f0228, 201, "Coconut Crab", "ocean/crab/201/crab"];
                case "summer21_hare":
                    return [_0x5f399a, 201, "Snow Cone Hare", "arctic/arctichare/201/arctichare"];
                case "summer21_shrimp":
                    return [_0x27c6df, 201, "Chef Shrimp", "ocean/shrimp/201/shrimp"];
                case "summer21_walrus":
                    return [_0x52eaad, 201, "Walrusmelon", "arctic/walrus/201/walrus"];
                case "summer21_squid":
                    return [_0x51851f, 201, "Seacoast Squid", "ocean/squid/201/squid.ui"];
                case "summer21_fox":
                    return [_0x5e51a3, 201, "Forest Sprit Fox", "arctic/arcticfox/201/arcticfox"];
                case "summer21_seal":
                    return [_0x2e1cf4, 201, "Hawaiian Monk", "arctic/seal/201/seal"];
                case "summer21_wolf":
                    return [_0x57e1d4, 201, "Pineapple Wolf", "arctic/wolf/201/wolf"];
                case "summer21_markhor":
                    return [_0x4d63e3, 201, "Fruity Ice Markhor", "arctic/markhor/201/1/markhor"];
                case "summer21_warthog":
                    return [_0x41ea0f, 201, "Flame Tiki", "desert/warthog/201/warthog"];
                case "summer21_chicken":
                    return [_0x2be8a3, 201, "Countryside Chick", "land/chicken/201/chicken"];
                case "summer21_owl":
                    return [_0x57d22f, 201, "Snowy Owrigami", "arctic/snowyowl/201/snowyowl"];
                case "summer21_zebra":
                    return [_0x2cd75a, 201, "Playground Zebra", "land/zebra/201/zebra"];
                case "summer21_croc":
                    return [_0xce5aa0, 201, "Big Hoss", "land/croc/0/201/croc"];
                case "summer21_meerkat":
                    return [_0x28b669, 201, "Scubakat", "desert/meerkat/201/meerkat"];
                case "summer21_rhino":
                    return [_0x273128, 201, "Shrub Rhino", "land/rhino/201/rhino"];
                case "summer21_elephant":
                    return [_0x1bba03, 201, "Leiphant", "land/elephant/0/201/elephant"];
                case "summer21_pig":
                    return [_0x2bdc31, 201, "Floaty Pig", "land/pig/201/pig"];
                case "summer21_camel":
                    return [_0x3672b1, 201, "Balloon Warrior", "desert/camel/201/camel"];
                case "summer21_hyena":
                    return [_0x2bcad6, 201, "DJ Hyena", "desert/hyena/201/hyena"];
                case "summer21_gorilla":
                    return [_0x4d8eda, 201, "Explorer Ape", "land/gorilla/0/201/gorilla"];
                case "summer21_squishyYeti":
                    return [_0x174cd3, 201, "Squishy Yeti", "arctic/yeti/201/yeti"];
                case "summer21_squishyKraken":
                    return [_0x519f92, 201, "Squishy Kraken", "ocean/kraken/201/kraken"];
                case "summer21_squishyDragon":
                    return [_0x5642bc, 201, "Squishy Dragon", "land/dragon/0/201/dragon"];
                case "summer21_mermaidWhale":
                    return [_0x1d87e9, 201, "Mermaid Whale", "ocean/bluewhale/0/201/bluewhale"];
                case "summer21_seafoamJellyfish":
                    return [_0x29d150, 201, "Seafoam Jellyfish", "ocean/jellyfish/201/jellyfish"];
                case "summer21_bubblyMouse":
                    return [_0x473f55, 201, "Bubbly Mouse", "land/mouse/201/mouse"];
                case "summer21_surfboardChomper":
                    return [_0x78a6fc, 201, "Surfboard Chomper", "ocean/shark/201/shark"];
                case "summer21_surferPenguin":
                    return [_0x45fb63, 201, "Surfer Penguin", "arctic/penguin/201/penguin"];
                case "summer21_waterGunHorse":
                    return [_0x32b37a, 201, "Water Gun Horse", "ocean/seahorse/201/seahorse"];
                case "summer21_sunburnReindeer":
                    return [_0x1171ab, 201, "Sunburn Reindeer", "arctic/reindeer/201/reindeer"];
                case "summer21_surfboardSwordfish":
                    return [_0x371ea0, 201, "Surfboardfish", "ocean/swordfish/0/201/swordfish"];
                case "summer21_popsicleTrout":
                    return [_0x5767e8, 201, "Popsicle Trout", "ocean/trout/0/201/trout"];
                case "summer21_playfulChipmunk":
                    return [_0x5197c0, 201, "Playful Munk", "arctic/chipmunk/201/chipmunk"];
                case "summer21_fireworkOx":
                    return [_0x36539e, 201, "Fireworks Ox", "arctic/muskox/201/muskox"];
                case "summer21_chocolateStingray":
                    return [_0x245c67, 201, "Chocolate Ray", "ocean/stingray/201/stingray.ui"];
                case "summer21_connoisseurBear":
                    return [_0x3941c2, 201, "Cola Connoisseur", "arctic/bear/201/bear"];
                case "summer21_coralQueen":
                    return [_0x125d8e, 201, "Coral Queen", "arctic/snowleopard/201/snowleopard"];
                case "summer21_strawbertoothTiger":
                    return [_0x2ffcd2, 201, "Strawbertooth", "arctic/sabertooth/201/sabertooth"];
                case "skin_leatherBackTurtle":
                    return [_0x499275, 200, "Leather Back\nTurtle", "ocean/turtle/200/turtle"];
                case "skin_celestialCobra":
                    return [_0x50e3b8, 200, "Celestial Cobra", "land/cobra/200/cobra"];
                case "skin_brazenBull":
                    return [_0x36539e, 200, "Brazen Bull", "arctic/muskox/200/muskox"];
                case "skin_luckyCharmMonster":
                    return [_0x46adbf, 200, "Luckycharm Monster", "ocean/seamonster/200/seamonster"];
                case "skin_iceToucan":
                    return [_0x190fd6, 200, "Ice Toucan", "land/toucan/200/toucan"];
                case "skin_clowoudLion":
                    return [_0x3bf8ca, 200, "Clowoud Lion", "land/lion/200/0/lion"];
                case "skin_sunsetClowoudLion":
                    return [_0x3bf8ca, 200, "Sunset\nClowoud Lion", "land/lion/200/1/lion"];
                case "skin_stormClowoudLion":
                    return [_0x3bf8ca, 200, "Storm\nClowoud Lion", "land/lion/200/2/lion"];
                case "skin_kaijuRex":
                    return [_0x4a37d4, 200, "Kaiju Rex", "land/trex/200/trex"];
                case "skin_warTHog":
                    return [_0x41ea0f, 200, "WarT. Hog", "desert/warthog/200/warthog"];
                case "skin_velvetChimp":
                    return [_0x5c4842, 200, "Velvet\nChipmunk", "desert/chipmunk/200/chipmunk"];
                case "skin_aquaPhoenix":
                    return [_0x27033a, 200, "Aqua Phoenix", "volcano/phoenix/200/0/phoenix"];
                case "skin_icePhoenix":
                    return [_0x27033a, 200, "Ice Phoenix", "volcano/phoenix/200/1/phoenix"];
                case "skin_ashPhoenix":
                    return [_0x27033a, 200, "Ash Phoenix", "volcano/phoenix/200/2/phoenix"];
                case "skin_redGiantPhoenix":
                    return [_0x27033a, 200, "Red Giant\nPhoenix", "volcano/phoenix/200/3/phoenix"];
                case "skin_goofyDragon":
                    return [_0x5642bc, 200, "Goofy Dragon", "land/dragon/0/101/dragon"];
                case "skin_desertDragon":
                    return [_0x5642bc, 200, "Desert Dragon", "land/dragon/0/102/dragon"];
                case "skin_forgeDragon":
                    return [_0x5642bc, 200, "Forge Dragon", "land/dragon/0/103/dragon"];
                case "skin_mythicalSerpent":
                    return [_0x5642bc, 200, "Mythical Serpent", "land/dragon/0/104/dragon"];
                case "skin_fireyDragon":
                    return [_0x5642bc, 200, "Firey Dragon", "land/dragon/0/105/dragon"];
                case "skin_technoSaber":
                    return [_0x2ffcd2, 200, "Techno\nSabertooth", "arctic/sabertooth/200/sabertooth"];
                case "skin_iceFox":
                    return [_0x24396a, 200, "Ice Fox", "arctic/arcticfox/200/arcticfox"];
                case "skin_clownfish":
                    return [_0x5767e8, 200, "Clownfish", "ocean/trout/0/200/trout"];
                case "skin_tullyMonster":
                    return [_0x32b37a, 200, "Tully\nMonster", "ocean/seahorse/200/seahorse"];
                case "skin_vampireSquid":
                    return [_0xbc1c26, 200, "Vampire\nSquid", "ocean/octopus/200/octopus"];
                case "skin_cuttlefish":
                    return [_0x51851f, 200, "Cuttle Fish", "ocean/squid/200/squid"];
                case "skin_deluxeShrimp":
                    return [_0x27c6df, 200, "Deluxe\nShrimp", "ocean/shrimp/200/shrimp"];
                case "skin_monochromeRabbit":
                    return [_0x4f884f, 200, "Monochrome\nRabbit", "land/rabbit/200/rabbit"];
                case "skin_nightFox":
                    return [_0x5e51a3, 200, "Thief of\nThe Night", "land/fox/200/fox"];
                case "skin_plagueRaptor":
                    return [_0x8f4f69, 200, "Plague\nRaptor", "land/peacock/200/peacock.ui"];
                case "skin_titanBison":
                    return [_0x5ed5f7, 200, "Titan Bison", "desert/bison/200/bison"];
                case "skin_dowagerVarande":
                    return [_0x4b4e53, 200, "Dowager Varande", "desert/komododragon/200/0/komodo"];
                case "skin_emeprorVarande":
                    return [_0x4b4e53, 200, "Emepror Varande", "desert/komododragon/200/1/komodo"];
                case "skin_rubyDevil":
                    return [_0x504f20, 200, "Ruby Devil", "land/dinomonster/200/dinomonster"];
                case "skin_metalicCrab":
                    return [_0x9f0228, 200, "Metallic Crab", "ocean/crab/200/crab"];
                case "skin_queenFlame":
                    return [_0x370aae, 200, "Queen Flame", "volcano/kingdragon/200/kingdragon"];
                case "halloween_wyrmous":
                    return [_0x50e3b8, 100, "Wyrmous", "land/cobra/100/cobra"];
                case "halloween_equusthulhu":
                    return [_0x2a825f, 100, "Equusthulhu", "land/donkey/100/donkey"];
                case "halloween_frostaline":
                    return [_0x125d8e, 100, "Frostaline", "arctic/snowleopard/100/snowleopard"];
                case "halloween_pufferMace":
                    return [_0x2b36cf, 100, "Puffermace", "ocean/pufferfish/100/pufferfish"];
                case "halloween_carnageodactyl":
                    return [_0x5b6d09, 100, "Carnageodactyl", "desert/pterodactyl/100/pterodactyl_ability"];
                case "halloween_mrDollar":
                    return [_0x4a37d4, 100, "Mr. Dollar", "land/trex/100/trex"];
                case "halloween_wendigoDeer":
                    return [_0x52cad3, 100, "The Wendigo", "land/deer/100/deer"];
                case "halloween_cactiRat":
                    return [_0x7d036f, 100, "Cacti Rat", "desert/kangaroorat/100/kangaroorat"];
                case "halloween_hiPower":
                    return [_0x478075, 100, "Swampster", "land/hippo/100/hippo"];
                case "halloween_puumpkat":
                    return [_0x28b669, 100, "Puumpkat", "desert/meerkat/100/meerkat"];
                case "halloween_doomedarius":
                    return [_0x3672b1, 100, "The Doomedarius", "desert/camel/100/camel"];
                case "halloween_roboMouse":
                    return [_0x473f55, 100, "Robo Mouse", "land/mouse/100/mouse"];
                case "halloween_uncleSam":
                    return [_0xce5aa0, 100, "Uncle Sam", "land/croc/0/100/croc"];
                case "halloween_zombieMole":
                    return [_0x56cf8f, 100, "Zombie Mole", "land/mole/100/mole"];
                case "halloween_flammyHart":
                    return [_0x5443af, 100, "Flammy Hart", "desert/gazelle/100/gazelle"];
                case "halloween_gummyViper":
                    return [_0x64c9a4, 100, "Gummy Viper", "desert/rattlesnake/100/rattlesnake"];
                case "halloween_grimRipper":
                    return [_0x4d8eda, 100, "Grim Reaper", "land/gorilla/0/100/gorilla"];
                case "halloween_bigCookie":
                    return [_0x5a7f16, 100, "Big Cookie", "land/bigcat/100/bigcat"];
                case "halloween_gargolgon":
                    return [_0x5642bc, 100, "The Gargon", "land/dragon/0/100/dragon"];
                case "halloween_candyRus":
                    return [_0x52eaad, 100, "Candy Rus", "arctic/walrus/100/walrus"];
                case "halloween_mantilian":
                    return [_0x3bf8ca, 100, "The Mantilian", "land/lion/100/lion"];
                case "halloween_phantomRay":
                    return [_0x245c67, 100, "Phantom Ray", "ocean/stingray/100/stingray"];
                case "halloween_suitedToucan":
                    return [_0x190fd6, 100, "The Dapper", "land/toucan/100/toucan"];
                case "halloween_vulgeist":
                    return [_0x2e29dc, 100, "The Vulgeist", "desert/vulture/100/vulture"];
                case "halloween_burlone":
                    return [_0x41ea0f, 100, "The Burlone", "desert/warthog/100/warthog"];
                case "halloween_unicornze":
                    return [_0x2cd75a, 100, "Unicornze", "land/zebra/100/zebra"];
                case "gold_blackDragon":
                    return [_0x47e6fe, 1, "Golden\nBlack Dragon", "volcano/blackdragon/1/blackdragon"];
                case "gold_kingDragon":
                    return [_0x370aae, 1, "Golden\nKing Dragon", "volcano/kingdragon/1/kingdragon"];
                case "gold_Dragon":
                    return [_0x5642bc, 1, "Golden\nDragon", "land/dragon/0/1/dragon"];
                case "gold_kraken":
                    return [_0x519f92, 1, "Golden\nKraken", "ocean/kraken/1/kraken"];
                case "gold_yeti":
                    return [_0x174cd3, 1, "Golden\nYeti", "arctic/yeti/1/yeti"];
                case "gold_trex":
                    return [_0x4a37d4, 1, "Golden\nT.Rex", "land/trex/1/trex"];
                case "gold_kingCrab":
                    return [_0x50431e, 1, "Golden\nCrab", "ocean/kingcrab/1/kingcrab"];
                case "gold_phoenix":
                    return [_0x27033a, 1, "Golden\nPhoenix", "volcano/phoenix/1/phoenix"];
                case "gold_pterodactyl":
                    return [_0x5b6d09, 1, "Golden\nPterodactyl", "desert/pterodactyl/1/pterodactyl_ability"];
                case "gold_iceMonster":
                    return [_0x31abda, 1, "Golden\nIce Monster", "arctic/icemonster/1/icemonster"];
                case "gold_dinoMonster":
                    return [_0x504f20, 1, "Golden\nDino Monster", "land/dinomonster/1/dinomonster"];
                case "gold_seaMonster":
                    return [_0x46adbf, 1, "Golden\nSea Monster", "ocean/seamonster/1/seamonster"];
                case "gold_landMonster":
                    return [_0x5c13ab, 1, "Golden\nLand Monster", "volcano/landmonster/0/1/landmonster"];
                case "gold_giantScorion":
                    return [_0x3f71c6, 1, "Golden\nGiant Scorpion", "desert/scorpion/1/giantscorpion"];
                case "gold_bluewhale":
                    return [_0x1d87e9, 1, "Golden\nBlue Whale", "ocean/bluewhale/0/1/bluewhale"];
                case "gold_elephant":
                    return [_0x1bba03, 1, "Golden\nElephant", "land/elephant/1/elephant"];
                case "gold_cassowary":
                    return [_0x31189f, 1, "Golden\nCassowary", "land/cassowary/1/cassowary"];
                case "gold_giantspider":
                    return [_0x21b167, 1, "Golden\nGiant Spider", "land/giantspider/1/giantspider"];
                case "gold_blackwidow":
                    return [_0x27689a, 1, "Golden\nBlackwidow", "desert/blackwidow/0/1/blackwidow"];
                case "gold_mammoth":
                    return [_0x145a21, 1, "Golden\nMammoth", "arctic/mammoth/1/mammoth"];
                case "gold_hippo":
                    return [_0x478075, 1, "Golden\nHippo", "land/hippo/1/hippo"];
                case "gold_ostrich":
                    return [_0x1f5222, 1, "Golden\nOstrich", "land/ostrich/1/ostrich"];
                case "gold_boa":
                    return [_0x471048, 1, "Golden\nBoa", "land/boaconstrictor/1/boaconstrictor"];
                case "gold_komodo":
                    return [_0x4b4e53, 1, "Golden\nKomodo", "desert/komododragon/1/komodo"];
                case "gold_killerwhale":
                    return [_0x563e19, 1, "Golden\nKiller Whale", "ocean/killerwhale/1/killerwhale"];
                case "gold_sabertooth":
                    return [_0x2ffcd2, 1, "Golden\nSabertooth", "arctic/sabertooth/1/sabertooth"];
                case "skin_blueDragon":
                    return [_0x47e6fe, 2, "The\nAzure Bringer", "volcano/blackdragon/2/blackdragon"];
                case "skin_kingRipper":
                    return [_0x370aae, 2, "King\nRipper", "volcano/kingdragon/2/kingdragon"];
                case "skin_kingStan":
                    return [_0x370aae, 3, "King\nStan", "volcano/kingdragon/3/kingdragon"];
                case "skin_kingShah":
                    return [_0x370aae, 4, "King\nShah", "volcano/kingdragon/4/kingdragon"];
                case "king_mistik":
                    return [_0x370aae, 8, "King Mistik", "volcano/kingdragon/8/kingdragon"];
                case "skin_dragon_gray":
                    return [_0x5642bc, 2, "Knight\nDragon", "land/dragon/0/2/dragon"];
                case "skin_kraken_cyan":
                    return [_0x519f92, 2, "Chromatic\nKraken", "ocean/kraken/2/kraken"];
                case "skin_yeti_emerald":
                    return [_0x174cd3, 2, "Emerald\nYeti", "arctic/yeti/2/yeti"];
                case "skin_snowman":
                    return [_0x44140d, 1, "The\nSnowman", "arctic/snowman/1/snowman"];
                case "skin_snowgirl":
                    return [_0x44140d, 2, "The\nSnowgirl", "arctic/snowman/2/snowgirl"];
                case "skin_trex_gray":
                    return [_0x4a37d4, 2, "Ember\nT.Rex", "land/trex/2/trex"];
                case "skin_kingCrab":
                    return [_0x50431e, 2, "Amethyst\nCrab", "ocean/kingcrab/2/kingcrab"];
                case "skin_phoenix_blue":
                    return [_0x27033a, 2, "Alpha\nPhoenix", "volcano/phoenix/2/phoenix"];
                case "skin_pterodactyl_green":
                    return [_0x5b6d09, 2, "Emerald\nPterodactyl", "desert/pterodactyl/2/pterodactyl_ability"];
                case "skin_iceMonster":
                    return [_0x31abda, 2, "Amethyst\nMonster", "arctic/icemonster/2/icemonster"];
                case "skin_dinoMonster":
                    return [_0x504f20, 2, "Citrine\nMonster", "land/dinomonster/2/dinomonster"];
                case "skin_seaMonster":
                    return [_0x46adbf, 2, "Sapphire\nMonster", "ocean/seamonster/2/seamonster"];
                case "skin_landMonster":
                    return [_0x5c13ab, 2, "Titanite\nMonster", "volcano/landmonster/0/2/landmonster"];
                case "skin_orangeScorpion":
                    return [_0x3f71c6, 2, "Carnelian\nScorpion", "desert/scorpion/2/giantscorpion"];
                case "skin_bluewhale":
                    return [_0x1d87e9, 2, "Albino\nBlue Whale", "ocean/bluewhale/0/2/bluewhale"];
                case "skin_elephant":
                    return [_0x1bba03, 2, "White\nElephant", "land/elephant/2/elephant"];
                case "skin_cassowary":
                    return [_0x31189f, 2, "Cotton\nCassowary", "land/cassowary/2/cassowary"];
                case "skin_giantspider":
                    return [_0x21b167, 2, "Goliath\nSpider", "land/giantspider/2/giantspider"];
                case "skin_blackwidow":
                    return [_0x27689a, 2, "Queen\nBlackwidow", "desert/blackwidow/0/2/blackwidow"];
                case "skin_mammoth":
                    return [_0x145a21, 2, "Black\nMammoth", "arctic/mammoth/2/mammoth"];
                case "skin_hippo":
                    return [_0x478075, 2, "Pygmy\nHippo", "land/hippo/2/hippo"];
                case "skin_ostrich":
                    return [_0x1f5222, 2, "Ruffled\nOstrich", "land/ostrich/2/ostrich"];
                case "skin_boa":
                    return [_0x471048, 2, "Tree\nBoa", "land/boaconstrictor/2/boaconstrictor"];
                case "skin_komodo":
                    return [_0x4b4e53, 2, "Night\nKomodo", "desert/komododragon/2/komodo"];
                case "skin_killerwhale":
                    return [_0x563e19, 2, "Albino\nOrca", "ocean/killerwhale/2/killerwhale"];
                case "skin_sabertooth":
                    return [_0x2ffcd2, 2, "Margala\nSabertooth", "arctic/sabertooth/2/sabertooth"];
                case "skin_tigerShark":
                    return [_0x78a6fc, 2, "Tiger\nShark", "ocean/shark/1/shark"];
                case "skin_hamerHeadShark":
                    return [_0x78a6fc, 3, "Hammerhead\nShark", "ocean/shark/2/shark"];
                case "skin_panda":
                    return [_0x28396e, 2, "Panda", "land/panda/panda"];
                case "skin_zonkey":
                    return [_0x2a825f, 3, "Zonkey", "land/donkey/2/zonkey"];
                case "skin_okapi":
                    return [_0x2cd75a, 2, "Okapi", "land/okapi/okapi"];
                case "skin_giantCroc":
                    return [_0xce5aa0, 1, "Giant\nCrocodile", "land/croc/0/1/croc"];
                case "skin_purpleMouse":
                    return [_0x473f55, 2, "Purple\nMouse", "land/mouse/2/mouse"];
                case "skin_prismaToucan":
                    return [_0x190fd6, 6, "Prisma\nToucan", "land/toucan/6/toucan"];
                case "gold_mouse":
                    return [_0x473f55, 1, "Golden\nMouse", "land/mouse/1/mouse"];
                case "skin_queenScarlet":
                    return [_0x370aae, 5, "Queen\nScarlet", "volcano/kingdragon/5/kingdragon"];
                case "skin_queenCeleste":
                    return [_0x370aae, 6, "Queen\nCeleste", "volcano/kingdragon/6/kingdragon"];
                case "skin_bigFoot":
                    return [_0x42c2ee, 1, "The\nBigfoot", "land/bigfoot/1/thebigfoot"];
                case "skin_woollyRhino":
                    return [_0x273128, 3, "Woolly\nRhino", "land/rhino/3/rhino"];
                case "darkPlagueRat":
                    return [_0x473f55, 204, "Dark Plague\nRat", "land/mouse/204/0/mouse"];
                case "lightPlagueRat":
                    return [_0x473f55, 204, "Light Plague\nRat", "land/mouse/204/1/mouse"];
                case "carrotRabbit":
                    return [_0x4f884f, 204, "Carrot\nRabbit", "land/rabbit/204/rabbit"];
                case "darkMatterCrab":
                    return [_0x9f0228, 204, "Dark Matter\nCrab", "ocean/crab/204/crab"];
                case "necromancerMeerkat":
                    return [_0x28b669, 204, "Necromancer\nMeerkat", "desert/meerkat/204/meerkat"];
                case "butcherPig":
                    return [_0x2bdc31, 204, "Butcher\nPig", "land/pig/204/0/pig"];
                case "hotdogPig":
                    return [_0x2bdc31, 204, "Hot Dog\nPig", "land/pig/204/1/pig"];
                case "voidScuttlingSquid":
                    return [_0x51851f, 204, "Void Scuttling\nSquid", "ocean/squid/204/squid"];
                case "spideer":
                    return [_0x1171ab, 204, "Spideer", "arctic/reindeer/204/reindeer"];
                case "blackAsuraFox":
                    return [_0x5e51a3, 204, "Black Asura\nFox", "land/fox/204/fox"];
                case "candyCornWarthog":
                    return [_0x41ea0f, 204, "Candy Corn\nWarthog", "desert/warthog/204/warthog"];
                case "phantomGorilla":
                    return [_0x4d8eda, 204, "Phantom\nGorilla", "land/gorilla/0/204/gorilla.ui"];
                case "martianLeopard":
                    return [_0x125d8e, 204, "Martian\nLeopard", "arctic/snowleopard/204/snowleopard"];
                case "genieCheetah":
                    return [_0x5a7f16, 204, "Genie\nCheetah", "land/bigcat/204/cheetah"];
                case "chimeraTiger":
                    return [_0x49687e, 204, "Chimera\nTiger", "land/tiger/204/tiger"];
                case "acidHusk":
                    return [_0x2e29dc, 204, "Acid\nHusk", "desert/vulture/204/vulture"];
                case "acutiRhino":
                    return [_0x273128, 204, "Acuti\nRhino", "land/rhino/204/rhino"];
                case "goldenDevilGoat":
                    return [_0x4d63e3, 204, "Golden Devil\nGoat", "arctic/markhor/204/2/markhor"];
                case "sunHippo":
                    return [_0x478075, 204, "Sun\nHippo", "land/hippo/204/hippo"];
                case "smileSpider":
                    return [_0x21b167, 204, "Smile\nSpider", "land/giantspider/204/giantspider"];
                case "bloodwidowSpider":
                    return [_0x27689a, 204, "Bloodwidow\nSpider", "desert/blackwidow/0/204/blackwidow"];
                case "basiliskCassowary":
                    return [_0x31189f, 204, "Basilisk\nCassowary", "land/cassowary/204/cassowary"];
                case "magmaDragon":
                    return [_0x5642bc, 204, "Magma\nDragon", "land/dragon/0/204/dragon"];
                case "plasmacoreKingCrab":
                    return [_0x50431e, 204, "Plasma-core King\nCrab", "ocean/kingcrab/204/kingcrab"];
                case "frostWolf":
                    return [_0x174cd3, 204, "Frost\nWolf", "arctic/yeti/204/yeti"];
                case "tartarusRex":
                    return [_0x4a37d4, 204, "Tartarus\nRex", "land/trex/204/trex"];
                case "cthulhuKraken":
                    return [_0x519f92, 204, "Cthulhu\nKraken", "ocean/kraken/204/kraken"];
                case "necromus":
                    return [_0x5c13ab, 204, "Necromus", "volcano/landmonster/0/204landmonster"];
                case "planetEaterMonster":
                    return [_0x5c13ab, 204, "Planet Eater\nMonster", "volcano/landmonster/0/205/landmonster"];
                case "bloodCrystalMonster":
                    return [_0x31abda, 204, "Blood Crystal\nMonster", "arctic/icemonster/204/icemonster"];
                case "superMouse":
                    return [_0x473f55, 202, "Super Mouse", "land/mouse/202/mouse"];
                case "sushiShrimp":
                    return [_0x27c6df, 202, "Sushi Shrimp", "ocean/shrimp/202/shrimp"];
                case "plasmaRat":
                    return [_0x7d036f, 202, "Plasma Rat", "desert/kangaroorat/202/kangaroorat"];
                case "chipmonk":
                    return [_0x5197c0, 202, "Chipmonk", "desert/chipmunk/202/chipmunk"];
                case "jackapole":
                    return [_0x4f884f, 202, "Jackapole", "land/rabbit/202/0/rabbit"];
                case "thugPigeon":
                    return [_0x2b4863, 202, "Thug Pigeon", "land/pigeon/202/pigeon"];
                case "royalGuppy":
                    return [_0x5767e8, 202, "Royal Guppy", "ocean/trout/0/202/trout"];
                case "hollowRabbit":
                    return [_0x4f884f, 202, "Hollow Rabbit", "land/rabbit/202/1/rabbit"];
                case "ratMunk":
                    return [_0x5c4842, 202, "Ratmunk", "desert/chipmunk/202/chipmunk"];
                case "toxicMole":
                    return [_0x56cf8f, 202, "Toxic Mole", "land/mole/202/0/mole"];
                case "lightningLord":
                    return [_0x2be8a3, 202, "Lightning Lord", "land/chicken/202/chicken"];
                case "ufoPigeon":
                    return [_0x45fb63, 202, "UFO Pigeon", "arctic/penguin/202/penguin"];
                case "cytokineticMole":
                    return [_0x56cf8f, 202, "Cytokinetic Mole", "land/mole/202/1/mole"];
                case "piggyBank":
                    return [_0x2bdc31, 202, "Piggy Bank", "land/pig/202/pig"];
                case "jackhammer":
                    return [_0x3afb27, 202, "Jackhammer", "land/woodpecker/202/woodpecker"];
                case "leafySeadragon":
                    return [_0x32b37a, 202, "Leafy Seadragon", "ocean/seahorse/202/seahorse"];
                case "soapySeal":
                    return [_0x2e1cf4, 202, "Soapy Seal", "arctic/seal/202/seal"];
                case "windupKakapo":
                    return [_0x30aab5, 202, "Wind-up Kakapo", "forest/kakapo/202/kakapo"];
                case "mevazor":
                    return [_0x52cad3, 202, "Mevazor", "land/deer/202/0/deer"];
                case "flyMango":
                    return [_0x4e8c9f, 202, "Fly Mango", "ocean/flamingo/202/flamingo"];
                case "psychedelicSquid":
                    return [_0x51851f, 202, "Psychedelic Squid", "ocean/squid/202/squid"];
                case "piebaldCosmos":
                    return [_0x1171ab, 202, "Piebald Cosmos", "arctic/reindeer/202/reindeer"];
                case "retroNeonGazelle":
                    return [_0x5443af, 202, "Retro Neon Gazelle", "desert/gazelle/202/gazelle"];
                case "divineDeer":
                    return [_0x52cad3, 202, "Divine Deer", "land/deer/202/1/deer"];
                case "grassHedgehog":
                    return [_0x4abc25, 202, "Grass Hedgehog", "land/hedgehog/202/hedgehog"];
                case "spectrumPeacock":
                    return [_0x8f4f69, 202, "Spectrum Peacock", "land/peacock/202/peacock"];
                case "discoJellyfish":
                    return [_0x29d150, 202, "Disco Jellyfish", "ocean/jellyfish/202/0/jellyfish"];
                case "iceFox":
                    return [_0x24396a, 202, "Ice Fox", "arctic/arcticfox/202/arcticfox"];
                case "fireFox":
                    return [_0x8a7dab, 202, "Fire Fox", "desert/fennecfox/202/1/fennecfox"];
                case "muscipulaRaven":
                    return [_0x3d7ba, 202, "Muscipula Raven", "forest/raven/202/raven"];
                case "sneakyFox":
                    return [_0x5e51a3, 202, "Sneaky Fox", "land/fox/202/fox"];
                case "twistedHorror":
                    return [_0x29d150, 202, "Twisted Horror", "ocean/jellyfish/202/1/jellyfish"];
                case "purpleFireFox":
                    return [_0x8a7dab, 202, "Purple Fire Fox", "desert/fennecfox/202/1/fennecfox"];
                case "synthZebra":
                    return [_0x2cd75a, 202, "Synth Zebra", "land/zebra/202/zebra"];
                case "moltenGlassTurtle":
                    return [_0x499275, 202, "Molten Glass Turtle", "ocean/turtle/202/turtle"];
                case "monitorMuskox":
                    return [_0x36539e, 202, "Monitor Muskox", "arctic/muskox/202/muskox"];
                case "headlessMule":
                    return [_0x2a825f, 202, "Headless Mule", "land/donkey/202/donkey"];
                case "quilinGiraffe":
                    return [_0x567082, 202, "Quilin Giraffe", "land/giraffe/202/0/giraffe"];
                case "etherStingray":
                    return [_0x245c67, 202, "Ether Stingray", "ocean/stingray/202/0/stingray"];
                case "potatoWalrus":
                    return [_0x52eaad, 202, "Potato Walrus", "arctic/walrus/202/walrus"];
                case "fungalCamel":
                    return [_0x3672b1, 202, "Fungal Camel", "desert/camel/202/camel"];
                case "draquorum":
                    return [_0x567082, 202, "Draquorum", "land/giraffe/202/1/giraffe"];
                case "pancakeStingray":
                    return [_0x245c67, 202, "Pancake Stingray", "ocean/stingray/202/1/stingray"];
                case "kongrilla":
                    return [_0x4d8eda, 202, "Kongrilla", "land/gorilla/0/202/gorilla"];
                case "corpseFlowerToucan":
                    return [_0x190fd6, 202, "Corpse Flower Toucan", "land/toucan/202/toucan"];
                case "ballonPufferfish":
                    return [_0x2b36cf, 202, "Balloon Pufferfish", "ocean/pufferfish/202/pufferfish"];
                case "astralLeopard":
                    return [_0x125d8e, 202, "Astral Leopard", "arctic/snowleopard/202/snowleopard"];
                case "cmykNeonCheetah":
                    return [_0x5a7f16, 202, "C.M.Y.K NeoN Cheetak", "land/bigcat/202/cheetah"];
                case "beekeeperBear":
                    return [_0x28396e, 202, "Beekeeper Bear", "land/bear/0/202/bear"];
                case "dalmatianPelican":
                    return [_0x1c9f19, 202, "Dalmatian Pelican", "ocean/pelican/202/pelican"];
                case "rocketSwordfish":
                    return [_0x371ea0, 202, "Rocket Swordfish", "ocean/swordfish/0/202/swordfish"];
                case "okamiWolf":
                    return [_0x57e1d4, 202, "Okami Wolf", "arctic/wolf/202/wolf"];
                case "anubisHyena":
                    return [_0x2bcad6, 202, "Anubis Hyena", "desert/hyena/202/hyena"];
                case "gobeeBear":
                    return [_0x2a7ad6, 202, "Gobee Bear", "desert/gobibear/202/gobibear"];
                case "chimeraLion":
                    return [_0x3bf8ca, 202, "Chimera Lion", "land/lion/202/lion"];
                case "meteorFalcon":
                    return [_0x4c676b, 202, "Meteor Falcon", "land/falcon/202/falcon"];
                case "naKika":
                    return [_0xbc1c26, 202, "Na Kika", "ocean/octopus/202/octopus"];
                case "waterBear":
                    return [_0x3941c2, 202, "Water Bear", "arctic/bear/202/bear"];
                case "croczilla":
                    return [_0xce5aa0, 202, "Croczilla", "land/croc/0/202/croc"];
                case "ammit":
                    return [_0xce5aa0, 202, "Ammit", "land/croc/0/203/croc"];
                case "cottonCandyRhino":
                    return [_0x273128, 202, "Cotton Candy Rhino", "land/rhino/202/rhino"];
                case "floralWolverine":
                    return [_0x4372c1, 202, "Floral Wolverine", "arctic/wolverine/202/wolverine"];
                case "minotaur":
                    return [_0x5ed5f7, 202, "Minotaur", "desert/bison/202/bison"];
                case "planetHippo":
                    return [_0x478075, 202, "Planet Hippo", "land/hippo/202/hippo"];
                case "seaAngelOrca":
                    return [_0x563e19, 202, "Sea Angel Orca", "ocean/killerwhale/202/killerwhale"];
                case "icefangSabertooth":
                    return [_0x2ffcd2, 202, "Ice-Fang Sabertooth", "arctic/sabertooth/202/sabertooth"];
                case "galaxyKomodoDragon":
                    return [_0x4b4e53, 202, "Galaxy Komodo Dragon", "desert/komododragon/202/komododragon"];
                case "sapphireCaveSpider":
                    return [_0x21b167, 202, "Sapphire Cave Spider", "land/giantspider/202/giantspider"];
                case "pastelCassowary":
                    return [_0x31189f, 202, "Pastel Cassowary", "land/cassowary/202/cassowary"];
                case "whaleboat":
                    return [_0x1d87e9, 202, "Whale Boat", "ocean/bluewhale/0/202/bluewhale"];
                case "acidMammoth":
                    return [_0x145a21, 202, "Acid Mammoth", "arctic/mammoth/202/0/mammoth"];
                case "iceWizardElephant":
                    return [_0x1bba03, 202, "Ice Wizard Elephant", "land/elephant/0/202/elephant"];
                case "ancientIslandMonster":
                    return [_0x1d87e9, 202, "Ancient Island Monster", "ocean/bluewhale/0/203/bluewhale"];
                case "crystalGolem":
                    return [_0x145a21, 202, "Crystal Golem", "arctic/mammoth/202/1/mammoth"];
                case "aberrantDragon":
                    return [_0x5642bc, 202, "Aberrant Dragon", "land/dragon/0/202/dragon"];
                case "astralDragon":
                    return [_0x5642bc, 224, "Astral Dragon", "land/dragon/0/204/dragon"];
                case "astralPhoenix":
                    return [_0x27033a, 200, "Astral Phoenix", "volcano/phoenix/200/4/phoenix"];
                case "roseDragon":
                    return [_0x5642bc, 225, "Rose Dragon", "land/dragon/0/225/dragon"];
                case "purpleHaze":
                    return [_0x5642bc, 226, "Purple Haze", "land/dragon/0/226/dragon"];
                case "copperPhoenix":
                    return [_0x5642bc, 3, "Copper Phoenix", "volcano/phoenix/3/phoenix"];
                case "agDragon":
                    return [_0x5642bc, 206, "AG Dragon", "land/dragon/0/206/dragon"];
                case "hyporevenantRex":
                    return [_0x4a37d4, 202, "Hyporevenant Rex", "land/trex/202/0/trex"];
                case "giantSquid":
                    return [_0x519f92, 202, "Giant Squid", "ocean/kraken/202/0/kraken"];
                case "lovelyYeti":
                    return [_0x174cd3, 202, "Lovely Yeti", "arctic/yeti/202/0/yeti"];
                case "abyssalKingCrab":
                    return [_0x50431e, 202, "Abyssal King Crab", "ocean/kingcrab/202/kingcrab"];
                case "hydrothothKraken":
                    return [_0x519f92, 202, "Hydrothoth Kraken", "ocean/kraken/202/1/kraken"];
                case "frostEyeDemon":
                    return [_0x174cd3, 202, "Frosty Eye Demon", "arctic/yeti/202/1/yeti"];
                case "ghoulDragon":
                    return [_0x5642bc, 202, "Ghoul Dragon", "land/dragon/0/203/dragon"];
                case "tankMonster":
                    return [_0x504f20, 202, "Tank Monster", "land/dinomonster/202/dinomonster"];
                case "fighterJet":
                    return [_0x5c13ab, 202, "Fighter Jet", "volcano/landmonster/0/202/landmonster"];
                case "submarineMonster":
                    return [_0x46adbf, 202, "Submarine Monster", "ocean/seamonster/202/seamonster"];
                case "kingGraveyard1":
                    return [_0x370aae, 202, "King Graveyard", "volcano/kingdragon/202/kingdragon"];
                case "fairyRabbit":
                    return [_0x4f884f, 220, "Fairy Rabbit", "land/rabbit/220/rabbit"];
                case "darkMatterWarthog":
                    return [_0x41ea0f, 202, "Dark Matter Warthog", "desert/warthog/220/warthog"];
                case "fumigatorPig":
                    return [_0x2bdc31, 220, "Fumigator Pig", "land/pig/220/pig"];
                case "moltenToucan":
                    return [_0x190fd6, 220, "Molten Toucan", "land/toucan/220/toucan.ui"];
                case "summonerWolverine":
                    return [_0x4372c1, 220, "Summoner Wolverine", "arctic/wolverine/220/wolverine"];
                case "golemMammoth":
                    return [_0x145a21, 220, "Golem Mammoth", "arctic/mammoth/220/mammoth"];
                case "glacialDemon":
                    return [_0x174cd3, 220, "Glacial Demon", "arctic/yeti/220/yeti"];
                case "cordyceraDino":
                    return [_0x504f20, 220, "Cordycera Dino", "land/dinomonster/220/dinomonster"];
                case "blazingIceMonster":
                    return [_0x31abda, 220, "BlazingIce Monster", "arctic/icemonster/220/icemonster"];
                case "bioMutantTRex":
                    return [_0x4a37d4, 220, "Bio Mutant T-rex", "land/trex/220/trex"];
                case "sunsetOstrich":
                    return [_0x1f5222, 220, "Sunset Ostrich", "land/ostrich/220/ostrich"];
                case "lightwaveElephant":
                    return [_0x1bba03, 220, "Lightwave Elephant", "land/elephant/0/220/elephant"];
                case "inkRhino":
                    return [_0x273128, 220, "Ink Rhino", "land/rhino/220/rhino"];
                case "dimensionalMonster":
                    return [_0x46adbf, 220, "Dimensional Monster", "ocean/seamonster/220/seamonster"];
                case "nebuladonScorpion":
                    return [_0x3f71c6, 220, "Nebuladon Scorpion", "desert/scorpion/220/giantscorpion"];
                case "ghastlyJadeLion":
                    return [_0x3bf8ca, 220, "Ghastly Jade Lion", "land/lion/220/lion"];
                case "belphegor":
                    return [_0x5c13ab, 220, "Belphegor", "volcano/landmonster/0/220/landmonster"];
                case "muscipulaRaven":
                    return [_0x3d7ba, 220, "Muscipula Raven", "forest/raven/220/raven"];
                case "behemothHiveDragon":
                    return [_0x5642bc, 220, "Behemoth Hive Dragon", "land/dragon/0/220/dragon"];
                case "okamiWolf":
                    return [_0x57e1d4, 220, "Okami Wolf", "arctic/wolf/220/wolf"];
                case "starCrusherCrab":
                    return [_0x50431e, 220, "Star Crusher Crab", "ocean/kingcrab/220/kingcrab"];
                case "drBrainiopod":
                    return [_0x519f92, 220, "Dr. Brainiopod", "ocean/kraken/220/kraken"];
                case "xmas22_iceHuskTrout":
                    return [_0x5767e8, 222, "Ice Husk Trout", "ocean/trout/0/221/trout"];
                case "xmas22_jollyRabbit":
                    return [_0x4f884f, 222, "Jolly Rabbit", "land/rabbit/222/rabbit"];
                case "xmas22_peppermintLandMonster":
                    return [_0x5c13ab, 222, "Peppermint Land Monster", "volcano/landmonster/0/222/landmonster"];
                case "xmas22_gingerbreadKraken":
                    return [_0x519f92, 222, "Gingerbread Kraken", "ocean/kraken/222/kraken"];
                case "val23_wolverine":
                    return [_0x4372c1, 0, "Valentine Wolverine", "arctic/wolverine/0/223/wolverine"];
                case "val23_orca":
                    return [_0x563e19, 0, "Valentine Orca", "ocean/killerwhale/0/223/killerwhale"];
                case "val23_mamoth":
                    return [_0x145a21, 0, "Valentine Mammoth", "arctic/mammoth/0/223/mammoth"];
                case "val23_whale":
                    return [_0x1d87e9, 0, "Valentine Whale", "ocean/bluewhale/0/223/bluewhale"];
                case "val23_walrus":
                    return [_0x52eaad, 0, "Valentine Walrus", "arctic/walrus/0/223/walrus"];
                case "val23_stingray":
                    return [_0x245c67, 0, "Valentine Stingray", "ocean/stingray/0/223/stingray"];
                case "val23_snowleopard":
                    return [_0x125d8e, 0, "Valentine Snow Leopard", "arctic/snowleopard/0/223/snowleopard"];
                case "val23_gorilla":
                    return [_0x4d8eda, 0, "Valentine Gorilla", "land/gorilla/0/223/gorilla"];
                case "animal_BirdMonster":
                    return [a_birdMonster, 0, "Bird Monster", "land/birdmonster/0/birdmonster"];
                case "apesGorilla":
                    return [_0x4d8eda, 224, "Apes.io Gorilla", "land/gorilla/0/224/gorilla"];
                case "hw2023_botX303":
                    return [_0x27689a, 2023, "Bot X-303", "desert/blackwidow/0/2023/blackwidow"];
                case "hw2023_sodaFish":
                    return [_0x371ea0, 2023, "Sodafish", "ocean/swordfish/0/2023/swordfish"];
                case "hw2023_solarWyvern":
                    return [_0x5c13ab, 2023, "Solar Wyvern", "volcano/landmonster/0/2023/landmonster"];
                case "hw2023_drLochness":
                    return [_0x5767e8, 2023, "Dr. Lochness", "ocean/trout/0/2023/trout"];
                case "hw2023_moltenFrostWhale":
                    return [_0x1d87e9, 2023, "Molten Frost Whale", "ocean/bluewhale/0/2023/bluewhale"];
                case "hw2023_sharkodile":
                    return [_0xce5aa0, 2023, "Sharkodile", "land/croc/0/2023/croc"];
                case "hw2023_mafiaGorilla":
                    return [_0x4d8eda, 2023, "Mafia Gorilla", "land/gorilla/0/2023/gorilla"];
                case "hw2023_carnivalElephant":
                    return [_0x1bba03, 2023, "Carnival Elephant", "land/elephant/0/2023/elephant"];
                case "hw2023_beachBattleKraken":
                    return [_0x519f92, 2023, "Beach Battle Kraken", "ocean/kraken/0/2023/kraken"];
                case "hw2023_stormDragon":
                    return [_0x5642bc, 2023, "Storm Dragon", "land/dragon/0/2023/dragon"];
                case "hw2023_spookyBear":
                    return [_0x28396e, 202, "Spooky Bear", "land/bear/0/2023/bear"];
            }
            return [_0x473f55, 99999, "Error Skin", ""];
        };
        var _0x5899d5 = _0x31dc94;
        var _0x28c171 = _0x184987;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;

        function _0x31dc94() {
            _0x31dc94.superClass.call(this, _0x1aa977);
        }
        _0x31dc94.prototype.loadShopData = function(_0x47bfa6) {
            _0x31dc94.superClass.prototype.loadShopData.call(this, _0x47bfa6);
            this.itemId = _0x47bfa6.itemId;
            this.title = _0x47bfa6.description;
            this.saleType = _0x47bfa6.saleType;
            this.salePrice = _0x47bfa6.salePrice;
        };
        _0x31dc94.prototype.getShopImageSrc = function() {
            return "shop/deals/" + this.itemId.toLowerCase() + ".png";
        };
        _0x31dc94.prototype.getImage = function() {
            var _0x1d642c = new Image();
            _0x1d642c.className = "shopdeal";
            _0x1d642c.src = "shop/deals/" + this.itemId.toLowerCase() + ".png";
            _0x1d642c.loading = "lazy";
            return _0x1d642c;
        };
        _0x31dc94.prototype.getTitle = function() {
            var _0xf53019 = "" + this.title;
            return _0xf53019.replace("\n", "<br>").toUpperCase();
        };
        _0x31dc94.prototype.generateHtml = function(_0x252016) {
            var _0xa2b9f3 = "item deal" + (this.price == -1 ? " itemOwned buyItem" : " buyItem") + " " + this.itemId;
            if (_0x252016 == _0x8505df) {
                _0xa2b9f3 = _0xa2b9f3 + " confirm_deal";
            }
            var _0x420161 = _0x11d05e("", _0xa2b9f3);
            var _0xa9f10f = _0x11d05e("", "image biome_" + this.biome);
            var _0x34202c = _0x11d05e("", "price");
            var _0x786a59 = _0x11d05e("", "orig-value");
            _0x420161.setAttribute("title", this.getTitle().replace("<BR>", " "));
            _0x34202c.innerHTML = this.getTitle();
            var _0x479ad6 = this.getImage();
            _0xa9f10f.appendChild(_0x479ad6);
            if (this.price > 0) {
                var _0x23fbe5 = "";
                if (this.saleType == 1) {
                    _0x23fbe5 = "NEW BUNDLE";
                } else if (this.saleType == 2) {
                    _0x23fbe5 = "SALE BUNDLE";
                }
                if (_0x23fbe5 != "") {
                    var _0x4073f3 = _0x11d05e("newItem_" + this.animalType, "newItem");
                    _0x4073f3.innerHTML = _0x23fbe5;
                    _0x420161.appendChild(_0x4073f3);
                }
            }
            _0x420161.appendChild(_0xa9f10f);
            _0x420161.appendChild(_0x34202c);
            if (this.saleType == 2) {
                var _0x247bbf = new Image();
                _0x247bbf.className = "buycoin-img";
                _0x247bbf.src = "shop/mopecoin.png";
                var _0x5bf889 = _0x3709bd("span", "", "buycoin-price");
                _0x5bf889.innerHTML = this.price;
                _0x786a59.appendChild(_0x247bbf);
                _0x786a59.appendChild(_0x5bf889);
            } else {
                _0x786a59.innerText = "NO SALE";
            }
            if (this.price > 0) {
                _0x420161.appendChild(_0x786a59);
                _0x420161.appendChild(this.btn.generateHtml(_0x252016));
            } else {}
            return _0x420161;
        };
        _0x31dc94.prototype.fillItemDetails = function(_0x55e2ed) {
            var _0x1cf451 = _0x11d05e("bundleSkins", "bundleSkins_" + this.itemId);
            _0x55e2ed.appendChild(_0x1cf451);
            if (this.data.bundled) {
                for (i = 0; i < _0x247e4a.shop.allItems.length; i++) {
                    var _0x480e92 = _0x247e4a.shop.allItems[i];
                    if (!this.data.bundled.includes(_0x480e92.data.id)) {
                        continue;
                    }
                    var _0x4fbc39 = _0x247e4a.getPostFixForItem(_0x480e92.data.itemId);
                    var _0x1e92c8 = _0x480e92.getImagePromo(_0x4fbc39);
                    _0x1e92c8.className = "bundleSkinImg" + (_0x480e92.price == -1 ? " bought" : "");
                    _0x1e92c8.width = "40px";
                    _0x1cf451.appendChild(_0x1e92c8);
                }
            }
        };
        var _0x1aa977 = 3;
        _0x3e70c3.setCustomClassForShopItem(_0x31dc94, _0x1aa977);
        var _0x5899d5 = _0x25aa67;
        var _0x28c171 = _0x184987;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;

        function _0x25aa67() {
            _0x25aa67.superClass.call(this, _0x1aa977);
        }
        _0x25aa67.prototype.loadShopData = function(_0x875153) {
            _0x25aa67.superClass.prototype.loadShopData.call(this, _0x875153);
            this.itemId = _0x875153.itemId;
            this.title = _0x875153.description;
            this.credits = _0x875153.credits;
            this.saleType = _0x875153.saleType;
            this.salePrice = _0x875153.salePrice;
        };
        _0x25aa67.prototype.getShopImageSrc = function() {
            return "shop/feature/" + this.itemId.toLowerCase() + ".png";
        };
        _0x25aa67.prototype.getImage = function() {
            var _0x1c6b57 = new Image();
            _0x1c6b57.className = "shopFeature";
            _0x1c6b57.src = "shop/feature/" + this.itemId.toLowerCase() + ".png";
            _0x1c6b57.loading = "lazy";
            return _0x1c6b57;
        };
        _0x25aa67.prototype.getTitle = function() {
            var _0x5d62e0 = "" + this.title;
            return _0x5d62e0.replace("\n", "<br>").toUpperCase();
        };
        _0x25aa67.prototype.generateHtml = function(_0x1af4a2) {
            var _0xf1e26d = "item feature " + (this.price == -1 ? " itemOwned" : " buyItem") + " " + this.itemId;
            if (_0x1af4a2 == _0x8505df) {
                _0xf1e26d = _0xf1e26d + " confirm_item";
            }
            var _0x461166 = _0x11d05e("", _0xf1e26d);
            var _0x4d4962 = _0x11d05e("", "image biome_" + this.biome);
            var _0x4fd659 = _0x11d05e("", "price");
            _0x4fd659.innerHTML = this.title;
            var _0x2247c7 = this.getImage();
            _0x4d4962.appendChild(_0x2247c7);
            if (this.price > 0) {
                var _0x5788b7 = "";
                if (this.saleType == 1) {
                    _0x5788b7 = "NEW";
                } else if (this.saleType == 2) {
                    _0x5788b7 = "SALE";
                }
                if (this.salePrice != this.price && this.saleType > 0) {
                    _0x5788b7 += " -" + Math.floor((1 - this.salePrice / this.price) * 100) + "%";
                }
                if (_0x5788b7 != "") {
                    var _0x1ef40c = _0x11d05e("newItem_" + this.animalType, "newItem");
                    _0x1ef40c.innerHTML = _0x5788b7;
                    _0x461166.appendChild(_0x1ef40c);
                }
            }
            _0x461166.appendChild(_0x4d4962);
            _0x461166.appendChild(_0x4fd659);
            if (this.price >= 0) {
                _0x461166.appendChild(this.btn.generateHtml(_0x1af4a2));
            } else if (_0x1af4a2 != _0x12994c) {
                var _0x431c40 = this;
            }
            return _0x461166;
        };
        _0x25aa67.prototype.fillItemDetails = function(_0x3d1af1) {
            var _0xa47ee5 = _0x11d05e("bundleSkins", "bundleSkins_" + this.itemId);
            _0x3d1af1.appendChild(_0xa47ee5);
            if (this.data.aniTypes == undefined) {
                for (i = 0; i < _0x247e4a.shop.allItems.length; i++) {
                    var _0x286aed = _0x247e4a.shop.allItems[i];
                    if (_0x286aed && _0x286aed.data.promotions && _0x286aed.data.promotions.toLowerCase().indexOf(this.itemId.toLowerCase()) > -1) {
                        var _0x4db371 = _0x247e4a.getPostFixForItem(_0x286aed.data.itemId);
                        var _0x2a94ef = _0x286aed.getImagePromo(_0x4db371);
                        _0x2a94ef.className = "bundleSkinImg" + (_0x286aed.price == -1 ? " bought" : "");
                        _0x2a94ef.width = "40px";
                        _0xa47ee5.appendChild(_0x2a94ef);
                    }
                }
            } else {
                for (i = 0; i < this.data.aniTypes.length; i++) {
                    if (this.data.aniTypes[i] == 1000) {
                        continue;
                    }
                    var _0x40bf07 = _0x247e4a.getSkinPath(this.data.aniTypes[i], this.data.theme);
                    console.log(_0x40bf07);
                    var _0x2a94ef = new Image();
                    _0x2a94ef.src = _0x40bf07;
                    _0x2a94ef.loading = "lazy";
                    _0x2a94ef.className = "bundleSkinImg aniTypes";
                    _0x2a94ef.width = "40px";
                    _0xa47ee5.appendChild(_0x2a94ef);
                }
            }
        };
        var _0x512230 = 4;
        _0x3e70c3.setCustomClassForShopItem(_0x25aa67, _0x512230);
        var _0x5899d5 = _0x105bf0;
        var _0x28c171 = _0x184987;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        var _0x1abf6a = 1001;

        function _0x105bf0(_0x1edddd, _0xe58f53) {
            _0x105bf0.superClass.call(this, _0x1abf6a);
        }
        _0x105bf0.prototype.data = null;
        _0x105bf0.prototype.loadShopData = function(_0x235c4) {
            _0x105bf0.superClass.prototype.loadShopData.call(this, _0x235c4);
            this.data = _0x235c4;
            this.getPropType();
        };
        _0x105bf0.prototype.itemType = null;
        _0x105bf0.prototype.propType = null;
        _0x105bf0.prototype.propColor = null;
        _0x105bf0.prototype.getPropType = function() {
            if (this.data == null) {
                return;
            }
            var _0x4a6ae8 = this.data.id.split("_");
            if (_0x4a6ae8.length == 3) {
                this.itemType = _0x4a6ae8[0];
                this.propType = _0x4a6ae8[1];
                this.propColor = _0x4a6ae8[2];
            }
        };
        _0x3e70c3.setCustomClassForShopItem(_0x105bf0, _0x1abf6a);

        function _0x7f2473(_0x8b0089) {
            this.tabs = {
                titles: new Array()
            };
            this.data = _0x8b0089;
            this.load = function() {
                for (i = 0; i < this.data.length; i++) {
                    var _0x4e49da = this.data[i].itemType;
                    if (this.tabs[_0x4e49da] === undefined) {
                        this.tabs.titles.push(_0x4e49da);
                        this.tabs[_0x4e49da] = new Array();
                    }
                    this.tabs[_0x4e49da].push(this.data[i]);
                }
            };
        }
        var _0x5899d5 = _0x38bac8;
        var _0x28c171 = _0xa0a2ad;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x5899d5.prototype.arenaState = 0;
        _0x5899d5.prototype.fightNumber = 0;
        _0x5899d5.prototype.climaxType = 1;
        _0x5899d5.prototype.timer = 0;
        _0x5899d5.prototype.timerTxt = null;
        _0x5899d5.prototype.p1Name = null;
        _0x5899d5.prototype.p2Name = null;
        _0x5899d5.prototype.p1Bites = 0;
        _0x5899d5.prototype.p2Bites = 0;
        _0x5899d5.prototype.arenaRad = 10;
        _0x5899d5.prototype.nArenaRad = 10;
        _0x5899d5.prototype.oArenaRad = 10;
        _0x5899d5.prototype.isCountdownTimer = true;
        _0x5899d5.prototype.p1PushRemain = 0;
        _0x5899d5.prototype.p1DashRemain = 0;
        _0x5899d5.prototype.p2PushRemain = 0;
        _0x5899d5.prototype.p2DashRemain = 0;
        _0x38bac8.prototype.setTimer = function(_0x1745cc) {
            var _0x5061ff = "";
            var _0x1e4c23 = 25;
            if (this.isCountdownTimer) {
                _0x5061ff = "" + _0x1745cc;
            } else {
                _0x1e4c23 = 15;
                if (this.isCpuVsPlayer) {
                    _0x5061ff = "1v1 REDEMPTION";
                } else if (this.arenaModeType == 2) {
                    _0x5061ff = "MATCH #" + this.fightNumber;
                } else {
                    _0x5061ff = "FIGHT\n#" + this.fightNumber;
                }
                _0x5061ff = _0x925cfa.name + "\n" + _0x5061ff;
            }
            if (this.isCountdownTimer) {
                _0x1e4c23 = Number(_0x1745cc) ? 30 : _0x1e4c23;
            }
            if (this.timerTxt == null) {
                this.timerTxt = new _0x123582(_0x1e4c23, "#FFFFFF");
                this.timerTxt.strokeW = 2;
                this.timerTxt.multiLine = true;
                this.timerTxt.renderScale = 5;
                this.timerTxt.setText(_0x5061ff);
            } else {
                this.timerTxt.setFontSize(_0x1e4c23);
                this.timerTxt.setText(_0x5061ff);
            }
            var _0x559a8e = "MOPE";
            if (this.arenaModeType == 1) {
                _0x559a8e = "NOOB";
            } else if (this.arenaModeType == 2) {
                _0x559a8e = "PRO";
            }
            var _0x4039e4 = this.climaxType == 1 ? "LAST " + _0x559a8e + " STANDING" : this.maxBitesToWin + " BITES WINS";
            if (this.climaxTxt == null) {
                this.climaxTxt = new _0x123582(_0x1e4c23, "#FFFFFF");
                this.climaxTxt.strokeW = 2;
                this.climaxTxt.multiLine = true;
                this.climaxTxt.renderScale = 5;
                this.climaxTxt.setText(_0x4039e4);
            } else {
                this.climaxTxt.setFontSize(15);
                this.climaxTxt.setText(_0x4039e4);
            }
        };
        _0x38bac8.prototype.playerFontSize = 10;
        _0x38bac8.prototype.setP1 = function(_0x577c85) {
            var _0x358c5f = "" + _0x577c85;
            if (this.p1Name == null) {
                this.p1Name = new _0x123582(this.playerFontSize, "cyan");
                this.p1Name.strokeW = 2;
                this.p1Name.multiLine = true;
                this.p1Name.renderScale = 2;
                this.p1Name.setText(_0x358c5f);
            } else {
                this.p1Name.setFontSize(this.playerFontSize);
                this.p1Name.setText(_0x358c5f);
            }
        };
        _0x38bac8.prototype.setP2 = function(_0xd9bd2a) {
            var _0x824c09 = "" + _0xd9bd2a;
            if (this.p2Name == null) {
                this.p2Name = new _0x123582(this.playerFontSize, "yellow");
                this.p2Name.strokeW = 2;
                this.p2Name.multiLine = true;
                this.p2Name.renderScale = 2;
                this.p2Name.setText(_0x824c09);
            } else {
                this.p2Name.setFontSize(this.playerFontSize);
                this.p2Name.setText(_0x824c09);
            }
        };
        _0x38bac8.prototype.updateZ = function() {
            this.z = 100002;
        };
        _0x38bac8.prototype.dotX = 0.33;
        _0x38bac8.prototype.dotY = 0.77;
        var _0x430e96 = 35;
        var _0x292476 = 0.72;
        var _0x467f9f = 0.2;
        var _0x28c758 = 0.65;
        var _0x9cf4ad = 10;
        _0x38bac8.prototype.glowEffect = 0;
        _0x38bac8.prototype.ver = 2;
        _0x38bac8.prototype.customDraw = function(_0xa98b5) {
            if (_0x1d523b && _0x7786f && _0x17f2cd == this.id) {
                this.drawCanvas();
            }
            if (this.arenaState == 2 || this.arenaState == 3) {
                this.displayEndScreen();
            }
            _0x39e82d.save();
            _0x39e82d.rotate(Math.PI * -0.5);
            _0x39e82d.save();
            _0x39e82d.globalAlpha = 0.065;
            _0x39e82d.beginPath();
            _0x39e82d.arc(0, 0, this.rad, 0, Math.PI * 2, false);
            _0x39e82d.arc(0, 0, this.arenaRad, 0, Math.PI * 2, true);
            _0x39e82d.fillStyle = "red";
            _0x39e82d.closePath();
            _0x39e82d.fill();
            _0x39e82d.restore();
            if (_0x17f2cd == this.id) {
                if (_0x17f2cd == this.id && this.arenaState == 1) {
                    _0x39e82d.save();
                    _0x39e82d.lineWidth = 4;
                    _0x39e82d.globalAlpha = 0.5;
                    var _0x3c1480 = this.timeoutAngle * -2;
                    if (this.closingAngleSet) {
                        var _0x3a0506 = this.arenaClosingAngle * -2;
                        _0x39e82d.save();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(0, 0, this.rad - 2, _0x3a0506 * Math.PI, _0x3c1480 * Math.PI);
                        _0x39e82d.strokeStyle = "red";
                        _0x39e82d.stroke();
                        _0x39e82d.restore();
                        _0x39e82d.save();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(0, 0, this.rad - 2, 0, _0x3a0506 * Math.PI);
                        _0x39e82d.strokeStyle = "#32ff00";
                        _0x39e82d.stroke();
                        _0x39e82d.restore();
                    } else {
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(0, 0, this.rad - 2, 0, _0x3c1480 * Math.PI);
                        _0x39e82d.strokeStyle = "#32ff00";
                        _0x39e82d.stroke();
                    }
                    _0x39e82d.restore();
                }
                if (this.showTimerAngle) {
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = 0.5;
                    var _0x22ffab = this.timerAngle * -2;
                    _0x39e82d.beginPath();
                    _0x39e82d.lineWidth = 2;
                    _0x39e82d.arc(0, 0, this.arenaRad + 2, 0, _0x22ffab * Math.PI);
                    _0x39e82d.strokeStyle = "red";
                    _0x39e82d.stroke();
                    _0x39e82d.restore();
                }
            }
            _0x39e82d.restore();
            if (this.timerTxt != null) {
                if (this.arenaState == 0) {
                    this.timerTxt.x = 0;
                    this.timerTxt.y = 0;
                    this.timerTxt.draw();
                } else if (this.arenaState == 1) {
                    this.timerTxt.x = 0;
                    this.timerTxt.y = -this.rad * 0.9;
                    this.timerTxt.draw();
                    if (this.climaxTxt != null) {
                        this.climaxTxt.x = 0;
                        this.climaxTxt.y = this.rad * 0.85;
                        this.climaxTxt.draw();
                    }
                } else if (this.arenaState == 2 || this.arenaState == 3) {
                    this.timerTxt.x = 0;
                    this.timerTxt.y = 0;
                    this.timerTxt.draw();
                    if (this.climaxTxt != null) {
                        this.climaxTxt.x = 0;
                        this.climaxTxt.y = this.rad * 0.85;
                        this.climaxTxt.draw();
                    }
                }
            }
            var _0x44823a = 15;
            var _0x1e44d0 = this.rad / 2 + this.rad * 0.05;
            if (this.p1Name != null) {
                this.p1Name.x = -this.rad / 2;
                this.p1Name.y = -this.rad * 0.65;
                this.p1Name.draw();
                if (!this.isCpuVsPlayer) {
                    var _0x25e584 = 0;
                    var _0x68e9da = -this.rad * _0x292476;
                    _0x25e584 -= _0x430e96;
                    _0x68e9da -= _0x44823a * 2;
                    var _0x407a4a = this.getSkinImageObj("gameobj/18/0/0.png");
                    for (i = 0; i < this.getLives(); i++) {
                        _0x25e584 -= _0x44823a * 2.2;
                        if (_0x407a4a) {
                            _0x39e82d.save();
                            if (this.roundsWon_p1 > 0 && i + 1 <= this.roundsWon_p1) {
                                _0x39e82d.globalAlpha = 0.8;
                            } else {
                                _0x39e82d.globalAlpha = 0.2;
                            }
                            _0x39e82d.drawImage(_0x407a4a, _0x25e584 - _0x44823a, _0x68e9da - _0x44823a, _0x44823a * 2, _0x44823a * 2);
                            _0x39e82d.restore();
                        }
                    }
                }
            }
            if (this.p2Name != null) {
                this.p2Name.x = this.rad / 2;
                this.p2Name.y = -this.rad * 0.65;
                this.p2Name.draw();
                if (!this.isCpuVsPlayer) {
                    var _0x25e584 = 0;
                    var _0x68e9da = -this.rad * _0x292476;
                    _0x25e584 = _0x430e96;
                    _0x68e9da -= _0x44823a * 2;
                    var _0x407a4a = this.getSkinImageObj("gameobj/18/0/0.png");
                    for (i = 0; i < this.getLives(); i++) {
                        _0x25e584 += _0x44823a * 2.2;
                        if (_0x407a4a) {
                            _0x39e82d.save();
                            if (this.roundsWon_p2 > 0 && i + 1 <= this.roundsWon_p2) {
                                _0x39e82d.globalAlpha = 0.8;
                            } else {
                                _0x39e82d.globalAlpha = 0.2;
                            }
                            _0x39e82d.drawImage(_0x407a4a, _0x25e584 - _0x44823a, _0x68e9da - _0x44823a, _0x44823a * 2, _0x44823a * 2);
                            _0x39e82d.restore();
                        }
                    }
                }
            }
            if (_0x166276 != 0 && this.id == _0x17f2cd && this.arenaState == 0) {}
        };
        var _0x50aecf = 1;
        var _0x4b994f = 3;
        var _0x36279e = 5;
        var _0xcd1d67 = 9;
        _0x38bac8.prototype.getLives = function() {
            switch (this.fightType) {
                case _0x50aecf:
                    return 1;
                case _0x4b994f:
                    return 2;
                case _0x36279e:
                    return 3;
                case _0xcd1d67:
                    return 5;
            }
            return 1;
        };
        _0x38bac8.prototype.hasAdLoaded = false;
        _0x38bac8.prototype.isCpuVsPlayer = false;
        _0x38bac8.prototype.arenaModeType = 0;
        _0x38bac8.prototype.canPush = false;
        _0x38bac8.prototype.canDash = false;
        _0x38bac8.prototype.isDarkTheme = false;
        _0x38bac8.prototype.custom_canvas = null;
        _0x38bac8.prototype.drawCanvas = function() {
            if (this.custom_canvas == null) {
                this.custom_canvas = document.createElement("canvas");
                var _0x10c798 = this.rad * 10;
                var _0x5e8d7c = this.rad * 10;
                this.custom_canvas.width = _0x10c798;
                this.custom_canvas.height = _0x5e8d7c;
                var _0x4a55c7 = this.custom_canvas.getContext("2d");
                _0x4a55c7.save();
                _0x4a55c7.globalAlpha = 1;
                _0x4a55c7.fillStyle = "black";
                _0x4a55c7.fillRect(0, 0, this.custom_canvas.width, this.custom_canvas.height);
                _0x4a55c7.globalCompositeOperation = "xor";
                _0x4a55c7.beginPath();
                _0x4a55c7.arc(_0x10c798 / 2, _0x10c798 / 2, this.rad, 0, Math.PI * 2);
                _0x4a55c7.fillStyle = "blue";
                _0x4a55c7.fill();
                _0x4a55c7.restore();
            }
            if (this.custom_canvas != null) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = 0.5;
                _0x39e82d.drawImage(this.custom_canvas, -this.custom_canvas.width / 2, -this.custom_canvas.height / 2, this.custom_canvas.width, this.custom_canvas.height);
                _0x39e82d.restore();
            }
        };
        _0x38bac8.prototype.timerAngle = 0;
        _0x38bac8.prototype.nTimerAngle = 0;
        _0x38bac8.prototype.showTimerAngle = true;
        _0x38bac8.prototype.nTimeoutAngle = 0;
        _0x38bac8.prototype.timeoutAngle = 0;
        _0x38bac8.prototype.arenaTimeoutLeft = 0;
        _0x38bac8.prototype.isArenaClosing = false;
        _0x38bac8.prototype.closingAngleSet = false;
        _0x38bac8.prototype.arenaClosingAngle = 0;
        _0x38bac8.prototype.onLerpUpdate = function(_0x489d9f) {
            _0x38bac8.superClass.prototype.onLerpUpdate.call(this, _0x489d9f);
            this.arenaRad += (this.nArenaRad - this.arenaRad) * 0.1;
            this.timerAngle += (this.nTimerAngle - this.timerAngle) * 0.1;
            this.timeoutAngle += (this.nTimeoutAngle - this.timeoutAngle) * 0.1;
        };
        _0x38bac8.prototype.timeLeft = 0;
        _0x38bac8.prototype.fightType = 0;
        _0x38bac8.prototype.rounds = 0;
        _0x38bac8.prototype.roundsWon_p1 = 0;
        _0x38bac8.prototype.roundsWon_p2 = 0;
        _0x38bac8.prototype.resetArena = false;
        _0x38bac8.prototype.player1DarkTheme = false;
        _0x38bac8.prototype.player2DarkTheme = false;
        _0x38bac8.prototype.readCustomData_onNewlyVisible = function(_0x361e10) {
            _0x38bac8.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x361e10);
            this.fightType = _0x361e10.readUInt8();
            this.arenaState = _0x361e10.readUInt8();
            this.rounds = _0x361e10.readUInt8();
            this.p1 = _0x361e10.readString();
            this.p2 = _0x361e10.readString();
            this.arenaModeType = _0x361e10.readUInt8();
            this.isCpuVsPlayer = this.arenaModeType == 1 || this.arenaModeType == 2;
            this.p1Wins = _0x361e10.readUInt8();
            this.p2Wins = _0x361e10.readUInt8();
            this.fightNumber = _0x361e10.readUInt16();
            var _0x14ad82 = _0x361e10.readUInt16() / 100;
            this.oArenaRad = this.arenaRad;
            this.nArenaRad = _0x14ad82;
            this.setNames();
            this.climaxType = _0x361e10.readUInt8();
            if (this.climaxType == 2) {
                this.maxBitesToWin = _0x361e10.readUInt8();
            }
            this.canPush = _0x361e10.readUInt8() == 1;
            this.canDash = _0x361e10.readUInt8() == 1;
        };
        _0x38bac8.prototype.readUpdatedProperty = function(_0x3738ae, _0x14a0a4) {
            if (_0x3738ae == _0x2dab52) {
                this.arenaState = _0x14a0a4.readUInt8();
            } else if (_0x3738ae == _0x5cda5d) {
                this.rounds = _0x14a0a4.readUInt8();
            } else if (_0x3738ae == _0x1eb15d) {
                var _0x4bc349 = _0x14a0a4.readUInt16() / 100;
                this.oArenaRad = this.arenaRad;
                this.nArenaRad = _0x4bc349;
            } else if (_0x3738ae == _0x325ef8) {
                this.closingAngleSet = this.isArenaClosing = false;
                this.timer = _0x14a0a4.readUInt16() / 100;
                this.isCountdownTimer = true;
                if (this.timer < 23) {
                    this.updateTimer();
                }
            } else if (_0x3738ae == _0x5c2aee) {
                this.timer = _0x14a0a4.readUInt16() / 100;
                this.isCountdownTimer = false;
                this.updateTimer();
                this.displayAds = false;
                this.adShown = false;
            } else if (_0x3738ae == _0x3146be) {
                this.timeLeft = _0x14a0a4.readUInt16();
                this.nTimerAngle = this.timeLeft / 1000;
            } else if (_0x3738ae == _0x46bd0d) {
                this.showTimerAngle = _0x14a0a4.readUInt8() == 1;
            } else if (_0x3738ae == _0xa42843) {
                this.isArenaClosing = _0x14a0a4.readUInt8() == 1;
                if (this.isArenaClosing && !this.closingAngleSet) {
                    this.closingAngleSet = true;
                    this.arenaClosingAngle = this.timeoutAngle;
                }
            } else if (_0x3738ae == _0x3aceb6) {
                this.arenaTimeoutLeft = _0x14a0a4.readUInt16();
                this.nTimeoutAngle = this.arenaTimeoutLeft / 1000;
            } else if (_0x3738ae == _0x130a67) {
                this.winner = _0x14a0a4.readUInt8();
                var _0x116b8f = "" + this.p1;
                if (_0x116b8f.length == 0) {
                    _0x116b8f = "mope.io";
                }
                var _0x2bb80e = "" + this.p2;
                if (_0x2bb80e.length == 0) {
                    _0x2bb80e = "mope.io";
                }
                if (this.winner == 1) {
                    this.winnerName = _0x116b8f;
                } else {
                    this.winnerName = _0x2bb80e;
                }
            } else if (_0x3738ae == _0x371b59) {
                this.winnerMsg = _0x14a0a4.readString();
            } else if (_0x3738ae == _0x2b3ca5) {
                this.p1Bites = _0x14a0a4.readUInt8();
                this.setNames();
            } else if (_0x3738ae == _0x3b2a53) {
                this.p2Bites = _0x14a0a4.readUInt8();
                this.setNames();
            } else if (_0x3738ae == _0x454a9e) {
                this.winBonus = _0x14a0a4.readUInt32();
            } else if (_0x3738ae == _0x395fbf) {
                this.roundsWon_p1 = _0x14a0a4.readUInt8();
            } else if (_0x3738ae == _0x3b201e) {
                this.roundsWon_p2 = _0x14a0a4.readUInt8();
            } else if (_0x3738ae == _0x5db96b) {
                this.p1Wins = _0x14a0a4.readUInt8();
            } else if (_0x3738ae == _0x56e22b) {
                this.p2Wins = _0x14a0a4.readUInt8();
            } else if (_0x3738ae == _0x470766) {
                this.p1 = _0x14a0a4.readString();
                this.setNames();
            } else if (_0x3738ae == _0x32e96b) {
                this.p2 = _0x14a0a4.readString();
                this.setNames();
            } else if (_0x3738ae == _0x5c97ac) {
                var _0x32edf9 = _0x14a0a4.readUInt8() == 1;
                if (this.resetArena != _0x32edf9) {
                    this.endScreenState = 0;
                    this.resetArena = _0x32edf9;
                }
            } else if (_0x3738ae == _0x5a5842) {
                this.fightNumber = _0x14a0a4.readUInt16();
            } else if (_0x3738ae == _0xd396c7) {
                this.player1DarkTheme = _0x14a0a4.readUInt8() == 1;
            } else if (_0x3738ae == _0x53ae0f) {
                this.player2DarkTheme = _0x14a0a4.readUInt8() == 1;
            }
        };
        _0x38bac8.prototype.endScreenState = -1;
        _0x38bac8.prototype.endScreenChangeT = 0;
        _0x38bac8.prototype.resetEndScreenState = true;
        _0x38bac8.prototype.displayEndScreen = function() {
            if (_0x4ec996 >= this.endScreenChangeT) {
                this.endScreenState++;
                this.endScreenChangeT = _0x4ec996 + 3000;
            }
            if (this.timerTxt != null) {
                if (this.endScreenState == 0) {
                    this.timerTxt.setFontSize(40);
                    if (this.winnerName !== undefined) {
                        this.timerTxt.setText("\nKO!");
                    }
                } else if (this.endScreenState == 1) {
                    this.timerTxt.setFontSize(20);
                    if (this.winnerName == undefined) {
                        this.timerTxt.setText("TIE!");
                    } else {
                        this.timerTxt.setText(this.winnerName + "\nWON!");
                    }
                } else if (this.endScreenState >= 3) {
                    this.timerTxt.setFontSize(20);
                    if (this.winBonus !== undefined && this.winnerMsg != null && this.winBonus > 0) {
                        this.timerTxt.setText(this.winnerMsg + "\nWIN BONUS: " + _0x540660(this.winBonus));
                    }
                }
            }
        };
        _0x38bac8.prototype.challenger = null;
        _0x38bac8.prototype.opponent = null;
        _0x38bac8.prototype.setNames = function() {
            var _0x2167f2 = "" + this.p1;
            if (_0x2167f2.length == 0) {
                _0x2167f2 = "mope.io";
            }
            var _0x3dd42c = "" + this.p2;
            if (_0x3dd42c.length == 0) {
                _0x3dd42c = "mope.io";
            }
            var _0x231e9b = this.isCpuVsPlayer ? "level" : "wins";
            var _0x2b1615 = "\n(" + _0x231e9b + ": " + this.p1Wins + ")";
            var _0x1bbb0b = "\n(" + _0x231e9b + ": " + this.p2Wins + ")";
            var _0x4a281e = "\nbites: " + this.p1Bites;
            var _0x2804ce = "\nbites: " + this.p2Bites;
            if (this.arenaState < 3) {
                this.challenger = _0x2167f2 + _0x2b1615;
                this.opponent = _0x3dd42c + _0x1bbb0b;
                this.setP1(_0x2167f2 + _0x2b1615 + _0x4a281e);
                this.setP2(_0x3dd42c + _0x1bbb0b + _0x2804ce);
            } else if (this.arenaState == 3) {
                if (this.winner == 1) {
                    this.winnerName = _0x2167f2;
                    this.setP1(_0x2167f2 + _0x2b1615 + _0x4a281e);
                    this.p2Name = null;
                } else if (this.winner == 2) {
                    this.winnerName = _0x3dd42c;
                    this.setP2(_0x3dd42c + _0x1bbb0b + _0x2804ce);
                    this.p1Name = null;
                }
            }
        };
        _0x38bac8.prototype.updateTimer = function() {
            this.timer = Math.round(this.timer);
            var _0x57716f = this.timer;
            if (this.isCountdownTimer) {
                switch (this.timer) {
                    case 23:
                        _0x57716f = "";
                        break;
                    case 22:
                    case 21:
                        if (this.arenaModeType == 3) {
                            _0x57716f = "1V1 TOURNAMENT";
                        } else {
                            _0x57716f = "WELCOME TO 1V1 ARENA";
                        }
                        break;
                    case 20:
                    case 19:
                        if (this.arenaModeType == 3) {
                            _0x57716f = "MATCH #" + this.fightNumber;
                        } else {
                            var _0x49e504 = "MAN";
                            if (this.arenaModeType == 1) {
                                _0x49e504 = "NOOB";
                            } else if (this.arenaModeType == 2) {
                                _0x49e504 = "PRO";
                            }
                            _0x57716f = "FIGHT #" + this.fightNumber + "\n" + (this.climaxType == 1 ? "LAST " + _0x49e504 + " STANDING" : this.maxBitesToWin + " BITES TO WIN");
                            _0x57716f = _0x925cfa.name + "\n" + _0x57716f;
                        }
                        break;
                    case 18:
                    case 17:
                        if (!this.isCpuVsPlayer) {
                            _0x57716f = "CHALLENGER";
                            break;
                        }
                    case 16:
                    case 15:
                        if (this.isCpuVsPlayer) {
                            _0x57716f = "REDEMPTION\nLEVEL " + this.p1Wins;
                        } else {
                            _0x57716f = this.challenger;
                        }
                        break;
                    case 14:
                    case 13:
                        _0x57716f = "OPPONENT";
                        break;
                    case 12:
                    case 11:
                        _0x57716f = this.opponent;
                        break;
                    case 2:
                        _0x57716f = "ROUND " + this.rounds;
                        break;
                    case 1:
                        _0x57716f = "GET SET";
                        break;
                    case 0:
                        _0x57716f = "FIGHT";
                        break;
                }
                if (this.timer < 20 && !this.displayAds && !this.adShown) {
                    this.displayAds = true;
                }
            }
            this.setTimer(_0x57716f);
        };
        _0x38bac8.prototype.adShown = false;
        _0x38bac8.prototype.displayAds = false;
        _0x38bac8.prototype.displayedAdsOnEnd = false;
        _0x38bac8.prototype.showAds = function(_0x402112) {
            if (!_0xc4d403) {
                if (!this.adShown) {
                    if (this.displayAds) {
                        if (_0x1157ee > 13) {
                            this.adShown = true;
                        }
                    }
                }
            }
        };
        _0x38bac8.prototype.removeAds = function() {
            if (_0x17f2cd == this.id) {}
        };
        _0x38bac8.prototype.onRemovedFromGame = function() {
            console.log("Arena removed from game!");
        };

        function _0x38bac8() {
            _0x38bac8.superClass.call(this);
            this.hasAdLoaded = false;
        }
        _0x35d268.setCustomClassForGameObjType(_0x38bac8, _0x651296, _0x1a7ba3);
        var _0x28c171 = Animal;
        _0x54e8f2.prototype = Object.create(_0x28c171.prototype);
        _0x54e8f2.prototype.constructor = _0x54e8f2;
        _0x54e8f2.superClass = _0x28c171;
        _0x54e8f2.prototype.getSkinName = function() {
            if (this.animalSpecies == 220 && this.animalSubSpecies == 0) {
                return "ocean/seamonster/" + this.animalSpecies + "/seamonster1";
            } else {
                return "ocean/seamonster/" + this.animalSpecies + "/seamonster";
            }
        };
        _0x54e8f2.prototype.calcAnimalZIndex = function() {
            if (this.flag_underWater) {
                this.z = -100;
            } else if (this.flag_isInArena) {
                this.z += 1000;
            } else if (this.flag_eff_tossedInAir) {
                this.z = 1200 + this.rad;
            } else {
                this.z = 1000 + this.rad;
            }
        };
        _0x54e8f2.prototype.animalInfo = function() {
            var _0x1e85e3 = {};
            var _0x3f317c = "";
            switch (this.animalSpecies) {
                case 0:
                    _0x1e85e3.aniName = "Sea Monster";
                    break;
                case 1:
                    _0x1e85e3.aniName = "Golden Sea Monster";
                    break;
                case 2:
                    _0x1e85e3.aniName = "Sapphire Monster";
                    break;
                case 111:
                    _0x1e85e3.aniName = "Classic Sea Monster";
                    break;
                case 200:
                    _0x1e85e3.aniName = "Luckycharm Monster";
                    break;
                case 201:
                    _0x1e85e3.aniName = "Ancient Tortoise";
                    break;
                case 202:
                    _0x1e85e3.aniName = "Submarine Monster";
                    break;
                case 220:
                    _0x1e85e3.aniName = "Dimensional Monster";
                    break;
            }
            _0x1e85e3.aniCol = "blue";
            _0x1e85e3.upgradeText = "UPGRADED to " + _0x1e85e3.aniName + "!\nCreate whirlpool to trap prey!" + _0x3f317c;
            _0x1e85e3.skinName = "ocean/seamonster/" + this.animalSpecies + "/seamonster";
            return _0x1e85e3;
        };
        _0x54e8f2.prototype.getAbilityInfo = function(_0x52e4bb) {
            var _0x13b0f8 = {
                abilName: "Giant Whirlpool",
                abilImg: "skins/ocean/seamonster/" + this.animalSpecies + "/seamonster.png",
                skinThemeID: this.skinThemeID,
                mopeSeasonID: this.mopeSeasonID
            };
            return _0x13b0f8;
        };
        _0x54e8f2.prototype.drawWhenUnderwater = function() {
            var _0x34ce8f = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x5d7436 = 1.5;
            var _0x4073dc = 1;
            var _0x2eff86 = _0x4073dc * Math.sin(Math.PI * 2 / _0x5d7436 * _0x34ce8f);
            var _0x5dc43b = "white";
            _0x39e82d.globalAlpha = 0.2;
            _0x39e82d.fillStyle = _0x5dc43b;
            var _0x3b4460 = this.flag_underWater ? this.rad * 0.15 : this.rad * 0.1;
            _0x39e82d.beginPath();
            _0x39e82d.arc(this.rad * -0.35, this.rad * -0.33, Math.max(0, _0x3b4460 + _0x2eff86), 0, Math.PI * 2);
            _0x39e82d.fill();
            _0x39e82d.beginPath();
            _0x39e82d.arc(this.rad * 0.35, this.rad * -0.32, Math.max(0, _0x3b4460 - _0x2eff86), 0, Math.PI * 2);
            _0x39e82d.fill();
            _0x39e82d.beginPath();
            _0x39e82d.arc(this.rad * 0.35, this.rad * 0.36, Math.max(0, _0x3b4460 + _0x2eff86), 0, Math.PI * 2);
            _0x39e82d.fill();
            _0x39e82d.beginPath();
            _0x39e82d.arc(this.rad * -0.35, this.rad * 0.35, Math.max(0, _0x3b4460 - _0x2eff86), 0, Math.PI * 2);
            _0x39e82d.fill();
            var _0x48ba82 = this.getSkinImageObj("skins/" + this.getSkinName() + "-crown.png");
            if (_0x48ba82) {
                var _0x307dde = 500 / 340;
                _0x39e82d.save();
                _0x39e82d.globalAlpha = 0.4;
                var _0xda0fc4 = this.rad;
                _0x39e82d.drawImage(_0x48ba82, -_0xda0fc4 * _0x307dde, (-_0xda0fc4 + _0xda0fc4 * 0.4) * _0x307dde, _0xda0fc4 * 2 * _0x307dde, _0xda0fc4 * 2 * _0x307dde);
                _0x39e82d.restore();
            }
        };
        _0x54e8f2.prototype.drawSkinCustomization = function() {
            this.setSkinScale();
            if (this.animalSpecies == 220 && this.animalSubSpecies == 0) {
                var _0x243e3c = "skins/ocean/seamonster/220/";
                var _0x1fc6f9 = this.skinScale * 1.07;
                var _0x353082 = this.skinRad;
                var _0x1884fc = 1 + Math.trunc(_0x4ec996 / 120) % 8;
                var _0x169f6b = 0;
                var _0x11e4aa = this.getSkinImageObj(_0x243e3c + "/anim/" + _0x1884fc + ".png");
                if (_0x11e4aa) {
                    _0x39e82d.save();
                    _0x39e82d.drawImage(_0x11e4aa, -_0x353082 * _0x1fc6f9, (-_0x353082 + _0x353082 * 0.05) * _0x1fc6f9 - _0x169f6b, _0x353082 * 2 * _0x1fc6f9, _0x353082 * 2 * _0x1fc6f9);
                    _0x39e82d.restore();
                }
            }
        };
        _0x54e8f2.prototype.basicDrawSkinImg = function() {
            if (this.animalSpecies == 220 && this.animalSubSpecies == 0) {
                this.setSkinScale();
                var _0x34df45 = this.skinScale;
                var _0x22913a = this.skinRad;
                if (this.loadedSkinImg) {
                    overSizeOffset = this.skinRad / 2;
                    _0x39e82d.drawImage(this.loadedSkinImg, -_0x22913a * _0x428da7, -_0x22913a * _0x428da7, _0x22913a * 2 * _0x428da7, _0x22913a * 2 * _0x428da7);
                }
            } else {
                _0x54e8f2.superClass.prototype.basicDrawSkinImg.call(this);
            }
        };

        function _0x54e8f2() {
            _0x54e8f2.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x54e8f2, _0x48c056, _0x46adbf);
        var _0x28c171 = Animal;
        _0x545948.prototype = Object.create(_0x28c171.prototype);
        _0x545948.prototype.constructor = _0x545948;
        _0x545948.superClass = _0x28c171;
        _0x545948.prototype.calcAnimalZIndex = function() {
            if (this.flag_underWater) {
                this.z = -100;
            } else if (this.flag_isInArena) {
                this.z += 1000;
            } else if (this.flag_eff_tossedInAir) {
                this.z = 1200 + this.rad;
            } else {
                this.z = 1200 + this.rad;
            }
        };
        _0x545948.prototype.animalInfo = function() {
            var _0x5beb00 = {};
            var _0x377190 = "";
            switch (this.animalSpecies) {
                case 0:
                    _0x5beb00.aniName = "Land Monster";
                    break;
                case 1:
                    _0x5beb00.aniName = "Golden Land Monster";
                    break;
                case 2:
                    _0x5beb00.aniName = "Titanite Monster";
                    break;
            }
            _0x5beb00.aniCol = "orange";
            _0x5beb00.upgradeText = "UPGRADED to " + _0x5beb00.aniName + "!\nCreate Sink holes to trap prey!" + _0x377190;
            _0x5beb00.skinName = "volcano/landmonster/" + this.animalSpecies + "/landmonster";
            return _0x5beb00;
        };
        _0x545948.prototype.getSkinName = function() {
            return "volcano/landmonster/" + this.animalSpecies + "/landmonster";
        };
        _0x545948.prototype.getAbilityInfo = function(_0x2d1229) {
            var _0x4d1eab = {
                abilName: "Giant\nSinkhole!",
                abilImg: "skins/volcano/landmonster/" + this.animalSpecies + "/landmonster.png",
                skinThemeID: this.skinThemeID,
                mopeSeasonID: this.mopeSeasonID
            };
            return _0x4d1eab;
        };
        _0x545948.prototype.drawWhenUnderwater = function() {
            var _0x1fdcf7 = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x5f017a = 1.5;
            var _0xa4d907 = 1;
            var _0x39763b = _0xa4d907 * Math.sin(Math.PI * 2 / _0x5f017a * _0x1fdcf7);
            var _0x249fac = "#f9d43b";
            _0x39e82d.globalAlpha = 0.3;
            _0x39e82d.fillStyle = _0x249fac;
            var _0x22fdba = this.flag_underWater ? this.rad * 0.15 : this.rad * 0.1;
            _0x39e82d.beginPath();
            _0x39e82d.arc(this.rad * -0.35, this.rad * -0.33, Math.max(0, _0x22fdba + _0x39763b), 0, Math.PI * 2);
            _0x39e82d.fill();
            _0x39e82d.beginPath();
            _0x39e82d.arc(this.rad * 0.35, this.rad * -0.32, Math.max(0, _0x22fdba - _0x39763b), 0, Math.PI * 2);
            _0x39e82d.fill();
            _0x39e82d.beginPath();
            _0x39e82d.arc(this.rad * 0.35, this.rad * 0.36, Math.max(0, _0x22fdba + _0x39763b), 0, Math.PI * 2);
            _0x39e82d.fill();
            _0x39e82d.beginPath();
            _0x39e82d.arc(this.rad * -0.35, this.rad * 0.35, Math.max(0, _0x22fdba - _0x39763b), 0, Math.PI * 2);
            _0x39e82d.fill();
        };
        _0x545948.prototype.animalInfo = function() {
            var _0x71e30f = {};
            var _0x4a048f = "";
            switch (this.animalSubSpecies) {
                case 0:
                    switch (this.animalSpecies) {
                        case 0:
                            _0x71e30f.aniName = "Land Monster";
                            break;
                        case 111:
                            _0x71e30f.aniName = "Classic Land Monster";
                            break;
                    }
                    break;
                case 1:
                    _0x71e30f.aniName = "Golden Land Monster";
                    break;
                case 2:
                    _0x71e30f.aniName = "Titanite Monster";
                    break;
                case 202:
                    _0x71e30f.aniName = "Fighter Jet";
                    break;
                case 204:
                    _0x71e30f.aniName = "Necromus";
                    break;
                case 205:
                    _0x71e30f.aniName = "Planet Eater Monster";
                    break;
                case 220:
                    _0x71e30f.aniName = "Belphegor";
                    break;
                case 222:
                    _0x71e30f.aniName = "Peppermint Monster";
                    break;
                case 2023:
                    _0x71e30f.aniName = "Solar Wyvern";
                    break;
            }
            _0x71e30f.aniCol = "orange";
            _0x71e30f.upgradeText = "UPGRADED to " + _0x71e30f.aniName + "!\nCreate Sink holes to trap prey!" + _0x4a048f;
            _0x71e30f.skinName = this.getSkinName();
            return _0x71e30f;
        };
        _0x545948.prototype.getSkinName = function() {
            if (this.animalSubSpecies == 204) {
                return "volcano/landmonster/" + this.animalSpecies + "/" + this.animalSubSpecies + "/landmonster1";
            } else {
                return "volcano/landmonster/" + this.animalSpecies + "/" + this.animalSubSpecies + "/landmonster";
            }
        };
        _0x545948.prototype.getAbilityInfo = function(_0x465bae) {
            var _0x101ace = {
                abilName: "Giant\nSinkhole!",
                abilImg: "skins/volcano/landmonster/" + this.animalSpecies + "/" + this.animalSubSpecies + "/landmonster.png",
                skinThemeID: this.skinThemeID,
                mopeSeasonID: this.mopeSeasonID
            };
            return _0x101ace;
        };
        _0x545948.prototype.drawSkinCustomization = function() {
            this.setSkinScale();
            if (this.animalSubSpecies == 204) {
                var _0x922dc6 = "skins/volcano/landmonster/0/204/";
                var _0x1f5422 = this.skinScale * 1.07;
                var _0x4b19ea = this.skinRad;
                var _0x243c1a = 1 + Math.trunc(_0x4ec996 / 120) % 7;
                var _0x2ee3bc = this.getSkinImageObj(_0x922dc6 + "/landmonster_head.png");
                var _0x233725 = 0;
                if (_0x2ee3bc) {
                    _0x39e82d.save();
                    var _0x4b19ea = this.rad;
                    _0x39e82d.drawImage(_0x2ee3bc, -_0x4b19ea * _0x1f5422, (-_0x4b19ea + _0x4b19ea * 0.05) * _0x1f5422 - _0x233725, _0x4b19ea * 2 * _0x1f5422, _0x4b19ea * 2 * _0x1f5422);
                    _0x39e82d.restore();
                    var _0x32db09 = this.getSkinImageObj(_0x922dc6 + "/fire" + _0x243c1a + ".png");
                    if (_0x32db09) {
                        _0x39e82d.save();
                        _0x39e82d.drawImage(_0x32db09, -_0x4b19ea * _0x1f5422, (-_0x4b19ea + _0x4b19ea * 0.05) * _0x1f5422 - _0x233725, _0x4b19ea * 2 * _0x1f5422, _0x4b19ea * 2 * _0x1f5422);
                        _0x39e82d.restore();
                    }
                    var _0x32db09 = this.getSkinImageObj(_0x922dc6 + "/landmonster_head1.png");
                    if (_0x32db09) {
                        _0x39e82d.save();
                        _0x39e82d.drawImage(_0x32db09, -_0x4b19ea * _0x1f5422, (-_0x4b19ea + _0x4b19ea * 0.05) * _0x1f5422 - _0x233725, _0x4b19ea * 2 * _0x1f5422, _0x4b19ea * 2 * _0x1f5422);
                        _0x39e82d.restore();
                    }
                }
            }
        };
        var _0x428da7 = 1.8;
        _0x545948.prototype.basicDrawSkinImg = function() {
            if (this.animalSubSpecies == 204) {
                this.setSkinScale();
                var _0x1d2dac = this.skinScale;
                var _0x4ed146 = this.skinRad;
                if (this.loadedSkinImg) {
                    overSizeOffset = this.skinRad / 2;
                    _0x39e82d.drawImage(this.loadedSkinImg, -_0x4ed146 * _0x428da7, -_0x4ed146 * _0x428da7, _0x4ed146 * 2 * _0x428da7, _0x4ed146 * 2 * _0x428da7);
                }
            } else {
                _0x545948.superClass.prototype.basicDrawSkinImg.call(this);
            }
        };

        function _0x545948() {
            _0x545948.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x545948, _0x48c056, _0x5c13ab);
        var _0x28c171 = Animal;
        _0x28c84b.prototype = Object.create(_0x28c171.prototype);
        _0x28c84b.prototype.constructor = _0x28c84b;
        _0x28c84b.superClass = _0x28c171;
        _0x28c84b.prototype.calcAnimalZIndex = function() {
            if (this.flag_underWater) {
                this.z = -100;
            } else if (this.flag_isInArena) {
                this.z += 1000;
            } else if (this.flag_eff_tossedInAir) {
                this.z = 1200 + this.rad;
            } else {
                this.z = 1000 + this.rad;
            }
        };
        _0x28c84b.prototype.animalInfo = function() {
            var _0x23f8a2 = {};
            var _0x5188e8 = "";
            switch (this.animalSpecies) {
                case 0:
                    _0x23f8a2.aniName = "Ice Monster";
                    break;
                case 1:
                    _0x23f8a2.aniName = "Golden Ice Monster";
                    break;
                case 2:
                    _0x23f8a2.aniName = "Amethyst Monster";
                    break;
                case 111:
                    _0x23f8a2.aniName = "Classic Ice Monster";
                    break;
                case 201:
                    _0x23f8a2.aniName = "Cryo Coach Monster";
                    break;
                case 204:
                    _0x23f8a2.aniName = "Blood Crystal Monster";
                    break;
                case 220:
                    _0x23f8a2.aniName = "Blazing Ice Monster";
                    break;
            }
            _0x23f8a2.aniCol = "#ffffff";
            _0x23f8a2.upgradeText = "UPGRADED to " + _0x23f8a2.aniName + "!\nShoot Ice crystals to freeze prey!" + _0x5188e8;
            _0x23f8a2.skinName = "arctic/icemonster/" + this.animalSpecies + "/icemonster";
            return _0x23f8a2;
        };
        _0x28c84b.prototype.getSkinName = function() {
            var _0x1c4845 = this.id == 0 ? "ability" : "icemonster";
            return "arctic/icemonster/" + this.animalSpecies + "/" + _0x1c4845;
        };
        _0x28c84b.prototype.getAbilityInfo = function(_0x22dcdf) {
            var _0x829e97 = {
                abilName: "Freeze Prey!",
                abilImg: "skins/arctic/icemonster/" + this.animalSpecies + "/ability.png",
                skinThemeID: this.skinThemeID,
                mopeSeasonID: this.mopeSeasonID
            };
            return _0x829e97;
        };
        _0x28c84b.prototype.readCustomData_onNewlyVisible = function(_0x196a99) {
            _0x28c84b.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x196a99);
            this.readCrystalsInfo(_0x196a99);
        };
        _0x28c84b.prototype.readCrystal = function(_0x11d7ed, _0x5d44aa) {
            var _0xa68d8c = _0x11d7ed.readInt16() / 100;
            this.crystals[_0x5d44aa].nRad = _0xa68d8c;
            if (_0xa68d8c < 1) {
                this.crystals[_0x5d44aa].rad = 0;
            }
            this.crystals[_0x5d44aa].isReady = _0x11d7ed.readUInt8() == 1;
        };
        _0x28c84b.prototype.customUpdatedProperty = function(_0x34282d, _0x22931d) {
            if (_0x34282d == _0x12c33f) {
                this.readCrystal(_0x22931d, 0);
            } else if (_0x34282d == _0x198166) {
                this.readCrystal(_0x22931d, 1);
            } else if (_0x34282d == _0x2f5e3f) {
                this.readCrystal(_0x22931d, 2);
            } else if (_0x34282d == _0x4b0080) {
                this.readCrystal(_0x22931d, 3);
            } else if (_0x34282d == _0x47caed) {
                this.readCrystal(_0x22931d, 4);
            } else if (_0x34282d == _0xa8dc8d) {
                this.readCrystal(_0x22931d, 5);
            } else if (_0x34282d == _0x103ff4) {
                this.readCrystal(_0x22931d, 6);
            }
        };
        _0x28c84b.prototype.crystals = [];
        _0x28c84b.prototype.readCrystalsInfo = function(_0x7a1f40) {
            var _0x785c01 = _0x7a1f40.readUInt8();
            this.crystals = [];
            for (i = 0; i < _0x785c01; i++) {
                var _0x3c7341 = _0x7a1f40.readInt16() / 100;
                var _0x161b0e = _0x7a1f40.readInt16() / 100;
                var _0x30bb99 = _0x7a1f40.readInt16() / 100;
                var _0x8b02cc = _0x7a1f40.readUInt8() * 4;
                var _0x3b6131 = _0x7a1f40.readUInt8() == 1;
                this.crystals.push({
                    isReady: _0x3b6131,
                    x: _0x3c7341,
                    y: _0x161b0e,
                    nRad: _0x30bb99,
                    oRad: _0x30bb99,
                    rad: _0x30bb99,
                    angle: _0x8b02cc
                });
            }
        };
        var _0x405177 = 1.5;
        _0x28c84b.prototype.drawSkinCustomization = function() {
            if (this.animalSpecies == 201) {
                _0x39e82d.save();
                var _0x12d97b = 0;
                for (i = 0; i < this.crystals.length; i++) {
                    var _0x13b2ed = this.crystals[i];
                    if (_0x13b2ed.isReady) {
                        _0x12d97b++;
                    }
                }
                _0x12d97b = Math.min(5, _0x12d97b);
                var _0x54e884 = "skins/arctic/icemonster/201/icemonster" + _0x12d97b + ".png";
                var _0xa419e5 = this.getSkinImageObj(_0x54e884);
                if (_0xa419e5) {
                    var _0x3386f = this.rad * _0x405177;
                    _0x39e82d.drawImage(_0xa419e5, -_0x3386f, -_0x3386f, _0x3386f * 2, _0x3386f * 2);
                }
                _0x39e82d.restore();
            } else {
                var _0x3386f = this.rad - this.outlineW;
                for (i = 0; i < this.crystals.length; i++) {
                    var _0x13b2ed = this.crystals[i];
                    if (_0x13b2ed.nRad == 0) {
                        continue;
                    }
                    _0x13b2ed.rad += (_0x13b2ed.nRad - _0x13b2ed.rad) * 0.01;
                    var _0x5a5601 = _0x13b2ed.x * _0x3386f;
                    var _0x5a5253 = _0x13b2ed.y * _0x3386f;
                    var _0x20c161 = _0x13b2ed.angle;
                    var _0x104fda = _0x13b2ed.rad;
                    _0x39e82d.save();
                    _0x39e82d.translate(_0x5a5601, _0x5a5253);
                    _0x39e82d.globalAlpha = 1;
                    _0x39e82d.rotate(_0x4bfce6(_0x20c161));
                    var _0xa419e5 = this.getSkinImageObj("skins/arctic/icemonster/" + this.animalSpecies + "/crystal.png");
                    if (_0xa419e5) {
                        _0x39e82d.drawImage(_0xa419e5, -_0x104fda, -_0x104fda * 2, _0x104fda * 2, _0x104fda * 2);
                    }
                    _0x39e82d.restore();
                }
            }
        };

        function _0x28c84b() {
            _0x28c84b.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x28c84b, _0x48c056, _0x31abda);
        var _0x28c171 = Animal;
        _0x62356c.prototype = Object.create(_0x28c171.prototype);
        _0x62356c.prototype.constructor = _0x62356c;
        _0x62356c.superClass = _0x28c171;
        _0x62356c.prototype.calcAnimalZIndex = function() {
            if (this.flag_underWater) {
                this.z = -100;
            } else if (this.flag_isInArena) {
                this.z += 1000;
            } else if (this.flag_eff_tossedInAir) {
                this.z = 1200 + this.rad;
            } else {
                this.z = 1000 + this.rad;
            }
        };
        _0x62356c.prototype.animalInfo = function() {
            var _0x2be763 = {};
            var _0x48772c = "";
            switch (this.animalSpecies) {
                case 0:
                    _0x2be763.aniName = "Dino Monster";
                    break;
                case 1:
                    _0x2be763.aniName = "Golden Dino Monster";
                    break;
                case 2:
                    _0x2be763.aniName = "Citrine Monster";
                    break;
                case 111:
                    _0x2be763.aniName = "Classic Dino Monster";
                    break;
                case 200:
                    _0x2be763.aniName = "Ruby Devil";
                    break;
                case 202:
                    _0x2be763.aniName = "Tank Monster";
                    break;
                case 220:
                    _0x2be763.aniName = "Cordycera Dino Monster";
                    break;
            }
            _0x2be763.aniCol = "orange";
            _0x2be763.upgradeText = "UPGRADED to " + _0x2be763.aniName + "!\nKnock prey in Air to inflict deadly damage!" + _0x48772c;
            _0x2be763.skinName = "land/dinomonster/" + this.animalSpecies + "/dinomonster";
            return _0x2be763;
        };
        _0x62356c.prototype.getSkinName = function() {
            return "land/dinomonster/" + this.animalSpecies + "/dinomonster1";
        };
        _0x62356c.prototype.getAbilityInfo = function(_0x337a7e) {
            var _0x15bd24 = {
                abilName: "Knock in Air",
                abilImg: "skins/land/dinomonster/" + this.animalSpecies + "/dinomonster.png",
                skinThemeID: this.skinThemeID,
                mopeSeasonID: this.mopeSeasonID
            };
            return _0x15bd24;
        };
        _0x62356c.prototype.drawSkinCustomization = function() {
            var _0x9eb1c4 = "skins/land/dinomonster/" + this.animalSpecies + "/dinomonster";
            if (this.flag_usingAbility) {
                _0x9eb1c4 += "3";
            } else {
                _0x9eb1c4 += "2";
            }
            var _0x564261 = this.getSkinImageObj(_0x9eb1c4 + ".png");
            if (_0x564261) {
                _0x39e82d.save();
                var _0x1c78e6 = (this.rad - this.outlineW) * 1.1;
                _0x39e82d.drawImage(_0x564261, -_0x1c78e6 * this.skinScale * 0.91, -_0x1c78e6 * this.skinScale * 1.1, _0x1c78e6 * 2 * this.skinScale * 0.91, _0x1c78e6 * 2 * this.skinScale * 1.1);
                _0x39e82d.restore();
            }
        };

        function _0x62356c() {
            _0x62356c.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x62356c, _0x48c056, _0x504f20);
        var _0x28c171 = GameObj;
        _0x35acb9.prototype = Object.create(_0x28c171.prototype);
        _0x35acb9.prototype.constructor = _0x35acb9;
        _0x35acb9.superClass = _0x28c171;
        _0x35acb9.prototype.updateZ = function() {
            this.z = 1005;
        };
        _0x35acb9.prototype.customDraw = function(_0x33de8c) {
            var _0x31575c = this.getSkinImageObj("skins/arctic/icemonster/" + this.speciesType + "/crystalfire.png");
            if (_0x31575c) {
                _0x39e82d.save();
                var _0x2a064a = this.rad * 1.5;
                _0x39e82d.rotate(this.angle + _0x4bfce6(180));
                _0x39e82d.drawImage(_0x31575c, -_0x2a064a, -_0x2a064a, _0x2a064a * 2, _0x2a064a * 2.5);
                _0x39e82d.restore();
            }
        };
        _0x35acb9.prototype.getSkinImageObj = function(_0x1f9b7b) {
            var _0x5a2c47 = this.mopeSeasonID;
            var _0x247e54 = "./assets/s/" + _0x5a2c47 + "/" + _0x1f9b7b;
            if (this.skinThemeID > 0) {
                _0x247e54 = "./assets/t/" + this.skinThemeID + "/" + _0x1f9b7b;
            }
            return _0x4172bb(_0x247e54, function(_0x30d422) {
                console.log(_0x30d422.src);
            });
        };
        _0x35acb9.prototype.readCustomData_onNewlyVisible = function(_0x58f7af) {
            _0x35acb9.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x58f7af);
            this.speciesType = _0x58f7af.readUInt8();
        };

        function _0x35acb9() {
            _0x35acb9.superClass.call(this, _0x5e49df);
        }
        _0x35d268.setCustomClassForGameObjType(_0x35acb9, _0x5e49df);
        var _0x28c171 = GameObj;
        _0xdad25.prototype = Object.create(_0x28c171.prototype);
        _0xdad25.prototype.constructor = _0xdad25;
        _0xdad25.superClass = _0x28c171;
        _0xdad25.prototype.updateZ = function() {
            this.z = -101;
        };
        _0xdad25.prototype.customDraw = function(_0x4694b5) {
            _0x39e82d.save();
            if (this.specType == 0) {
                this.drawOutlinedCircle("", "#9F8641");
                _0x39e82d.globalAlpha = 0.6;
                _0x466d9b(0 + this.rPer, 1, Math.max(0, this.rad * 0.9), "#5C4E28");
                _0x39e82d.globalAlpha = 0.7;
                _0x466d9b(0 - this.rPer, 1, Math.max(0, this.rad * 0.8), "#40371D");
                _0x39e82d.globalAlpha = 0.9;
                _0x466d9b(0 - this.rPer, 1, Math.max(0, this.rad * 0.8), "#40371D");
                _0x39e82d.globalAlpha = 0.5;
                _0x466d9b(0 - this.rPer * 3, 1, Math.max(0, this.rad * 0.5), "black");
                _0x39e82d.globalAlpha = 1;
                _0x466d9b(0 - this.rPer * 3, 1, Math.max(0, this.rad * 0.3), _0x51276a);
            } else {
                this.drawOutlinedCircle("", "#9F8641");
                _0x466d9b(0 - this.rPer, 0 - this.rPer, Math.max(0, this.rad - 7), "#7E6A35");
                _0x466d9b(0 + this.rPer, 1, Math.max(0, this.rad - 14), "#5C4E28");
                _0x466d9b(0 - this.rPer * 2 - 3, 1, Math.max(0, this.rad - 18.5), "#40371D");
            }
            _0x39e82d.restore();
        };

        function _0xdad25() {
            _0xdad25.superClass.call(this, _0x63bdc1);
            this.webTransparency = 0;
            this.doesDrawEffectScale = true;
            this.drawEffectScale_Slow = true;
        }
        _0x35d268.setCustomClassForGameObjType(_0xdad25, _0x43a5b2);
        var _0x28c171 = GameObj;
        _0x2d32a0.prototype = Object.create(_0x28c171.prototype);
        _0x2d32a0.prototype.constructor = _0x2d32a0;
        _0x2d32a0.superClass = _0x28c171;
        _0x2d32a0.prototype.mommyID = 0;
        _0x2d32a0.prototype.updateZ = function() {
            this.z = -153;
        };
        _0x2d32a0.prototype.isEdibleOutlined = function() {
            if (this.mommyID == _0x166276) {
                return false;
            }
            var _0x304755 = _0xa4e113.superClass.prototype.isEdibleOutlined.call(this);
            return _0x304755;
        };
        _0x2d32a0.prototype.customDraw = function(_0x15be7b) {
            _0x39e82d.save();
            var _0x575f35 = this.getSkinImageObj("skins/land/ostrich/" + this.speciesType + "/ostrichEgg" + (this.isEdibleOutlined() ? "edible" : "") + ".png");
            if (_0x575f35) {
                var _0x34f62b = this.rad;
                _0x39e82d.rotate(this.angle);
                _0x39e82d.drawImage(_0x575f35, -_0x34f62b, -_0x34f62b, _0x34f62b * 2, _0x34f62b * 2);
            }
            _0x39e82d.restore();
        };
        _0x2d32a0.prototype.getSkinImageObj = function(_0x2b772d) {
            var _0x4dd7d1 = this.mopeSeasonID;
            return this.getSkinImageObjForSeason(_0x2b772d, _0x4dd7d1);
        };
        _0x2d32a0.prototype.readCustomData_onNewlyVisible = function(_0xff57e9) {
            _0x2d32a0.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0xff57e9);
            this.mommyID = _0xff57e9.readUInt32();
            this.speciesType = _0xff57e9.readUInt8();
        };

        function _0x2d32a0() {
            _0x2d32a0.superClass.call(this, _0x1a0fc0);
            this.doesDrawEffectScale = true;
        }
        _0x35d268.setCustomClassForGameObjType(_0x2d32a0, _0x1a0fc0);
        var _0x28c171 = Animal;
        _0x388d6f.prototype = Object.create(_0x28c171.prototype);
        _0x388d6f.prototype.constructor = _0x388d6f;
        _0x388d6f.superClass = _0x28c171;
        _0x388d6f.prototype.drawNickName = function(_0x1a8496) {
            if (this.flag_usingAbility && this.flag_flying || !this.flag_usingAbility || _0xebbf06.mode == _0x89f537) {
                _0x388d6f.superClass.prototype.drawNickName.call(this, _0x1a8496);
            }
        };
        _0x388d6f.prototype.animalInfo = function() {
            var _0x3bacd9 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x3bacd9.aniName = "Macaw";
                    break;
                case 2:
                    _0x3bacd9.aniName = "Spix's Macaw";
                    break;
                case 1:
                    _0x3bacd9.aniName = "Blue Macaw";
                    break;
                case 111:
                    _0x3bacd9.aniName = "Classic Macaw";
                    break;
                case 112:
                    _0x3bacd9.aniName = "Gold-trim Macaw";
                    break;
            }
            _0x3bacd9.aniCol = "#FF9000";
            _0x3bacd9.skinName = this.getSpeciesPath("macaw") + "/macaw";
            _0x3bacd9.upgradeText = "UPGRADED to " + (this.animalSpecies == 2 ? "Rare " : "") + _0x3bacd9.aniName + "!\nHold W to fly around.\n(Hint: Use ability on hills to mimic animals) ";
            return _0x3bacd9;
        };
        _0x388d6f.prototype.getSkinName = function() {
            var _0x376f4f = this.getSpeciesPath("macaw") + "/macaw";
            _0x376f4f += this.specType == 0 ? "" : this.specType;
            return _0x376f4f;
        };
        _0x388d6f.prototype.getSpeciesPath = function(_0x2057c2) {
            return "land/" + _0x2057c2 + "/" + this.animalSpecies;
        };
        _0x388d6f.prototype.getWing = function(_0x3fb7bb, _0x349c73, _0x42663d) {
            var _0x3e2601 = "skins/" + (_0x42663d ? this.getSpeciesPath(_0x3fb7bb) + "/" : _0x3fb7bb + "/");
            _0x3e2601 += _0x3fb7bb + "_wing" + _0x349c73 + ".png";
            return _0x3e2601;
        };
        _0x388d6f.prototype.getHead = function(_0x5cc68a, _0x4737f0) {
            var _0x820bc5 = "skins/" + (_0x4737f0 ? this.getSpeciesPath(_0x5cc68a) + "/" : _0x5cc68a + "/");
            _0x820bc5 += _0x5cc68a + "_head.png";
            return _0x820bc5;
        };
        _0x388d6f.prototype.getAniRadius = function(_0x1187da) {
            if (this.flag_flying) {
                return _0x1187da * 0.9;
            } else {
                return _0x1187da;
            }
        };
        _0x388d6f.prototype.basicDrawSkinImg = function() {
            if (this.flag_usingAbility) {
                if (!this.flag_flying && this.octoDrawObj != null) {
                    return;
                }
            }
            var _0x37d43e = 0.05;
            var _0x4dd78e = -0.08;
            var _0x56af7a = 1.1;
            this.setSkinScale();
            var _0x130d51 = this.getAniRadius(this.skinRad - this.outlineW);
            var _0x436046 = 500 / 340;
            if (this.loadedSkinImg) {
                _0x39e82d.drawImage(this.loadedSkinImg, -_0x130d51 * _0x436046, -_0x130d51 * _0x436046, _0x130d51 * 2 * _0x436046, _0x130d51 * 2 * _0x436046);
            }
        };
        var _0x2d95c1 = 1.7;
        var _0x14f9f6 = 2.2;
        _0x388d6f.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                return;
            }
            var _0x323e87 = this.getAniRadius(this.skinRad - this.outlineW);
            var _0x270934 = _0x323e87 * 0.8;
            if (this.flag_flying) {
                var _0x1f9a07 = 500 / 340;
                if (this.flag_flying && !this.flag_isGrabbed) {
                    _0x39e82d.save();
                    let _0x150609 = _0x4e4bab("bird", this.spawnTime);
                    if (_0x150609 !== undefined && _0x150609 != null) {
                        this.theFrame = _0x150609;
                    }
                    let _0x58fddf = _0x5981a2 != _0x4051d6 && !_0x1d523b ? this.theFrame : this.birdNoAnimationFlyWingAngle;
                    var _0x21e437 = this.getSkinImageObj(this.getWing("macaw", 1, true));
                    if (_0x21e437) {
                        _0x39e82d.save();
                        var _0x419d6a = -(-0.2 + _0x58fddf) * _0x439930;
                        _0x39e82d.rotate(_0x506969 + _0x419d6a);
                        var _0x400c6b = 0;
                        var _0x210f09 = _0x270934;
                        var _0x431bf9 = _0x270934 * 2 * 0.62;
                        var _0x40870d = _0x270934 * _0x14f9f6;
                        var _0x2a4790 = 0.2;
                        var _0x4997ee = _0x2d95c1;
                        _0x39e82d.drawImage(_0x21e437, _0x400c6b + _0x431bf9 * -_0x2a4790, _0x210f09 + _0x40870d * -_0x4997ee, _0x431bf9, _0x40870d);
                        _0x39e82d.restore();
                    }
                    var _0x21e437 = this.getSkinImageObj(this.getWing("macaw", 2, true));
                    if (_0x21e437) {
                        _0x39e82d.save();
                        var _0x419d6a = -(-0.2 + _0x58fddf) * -_0x439930;
                        _0x39e82d.rotate(-_0x506969 + _0x419d6a);
                        var _0x400c6b = 0;
                        var _0x210f09 = _0x270934;
                        var _0x431bf9 = _0x270934 * 2 * 0.62;
                        var _0x40870d = _0x270934 * _0x14f9f6;
                        var _0x2a4790 = 0.8;
                        var _0x4997ee = _0x2d95c1;
                        _0x39e82d.drawImage(_0x21e437, _0x400c6b + _0x431bf9 * -_0x2a4790, _0x210f09 + _0x40870d * -_0x4997ee, _0x431bf9, _0x40870d);
                        _0x39e82d.restore();
                    }
                    _0x39e82d.restore();
                }
                if (this.specType != 0 && this.specType != undefined) {
                    var _0x23fe1d = this.getSkinImageObj(this.getHead("macaw", true));
                    if (_0x23fe1d) {
                        _0x39e82d.save();
                        var _0x323e87 = this.rad;
                        _0x39e82d.drawImage(_0x23fe1d, -_0x323e87 * _0x1f9a07, (-_0x323e87 + _0x323e87 * 0.2) * _0x1f9a07, _0x323e87 * 2 * _0x1f9a07, _0x323e87 * 2 * _0x1f9a07);
                        _0x39e82d.restore();
                    }
                }
            }
        };
        _0x388d6f.prototype.readCustomData_onNewlyVisible = function(_0xa935f4) {
            _0x388d6f.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0xa935f4);
            this.customUpdatedProperty(_0x293bc6, _0xa935f4);
        };
        _0x388d6f.prototype.customUpdatedProperty = function(_0x3d4ac8, _0x11f7a8) {
            if (_0x3d4ac8 == _0x293bc6) {
                var _0x3c919a = _0x11f7a8.readUInt8() == 1;
                if (_0x3c919a) {
                    var _0x3d3331 = _0x11f7a8.readUInt16();
                    var _0x1eac4e = _0x11f7a8.readUInt16();
                    this.createDisguiseAniObj(_0x3d3331, _0x1eac4e);
                } else {
                    this.octoDrawObj = null;
                }
            }
        };
        _0x388d6f.prototype.createDisguiseAniObj = function(_0xa7db91, _0x4686eb) {
            if (this.octoDrawObj == null) {
                var _0x5f2875 = _0x35d268.createGameObjOfOType(_0x48c056, _0xa7db91);
                _0x5f2875.animalType = _0xa7db91;
                _0x5f2875.animalSpecies = _0x4686eb;
                _0x5f2875.rad = _0x5f2875.oRad = _0x5f2875.nRad = this.rad;
                _0x5f2875.curBiome = this.curBiome;
                _0x5f2875.hp = 5 + Math.random() * 50;
                this.octoDrawObj = _0x5f2875;
            }
        };
        _0x388d6f.prototype.drawHealthBar = function() {
            if (this.flag_usingAbility && !this.flag_flying && this.octoDrawObj != null) {
                this.octoDrawObj.curBiome = this.curBiome;
                this.hpPer_n = 1;
                this.hpPer = this.octoDrawObj.hp;
                this.hpBarA = 1;
            }
            _0x39e82d.save();
            var _0x2c12d1 = _0x4ec996 < this.hpBarTimeoutT ? 1 : 0;
            this.hpBarA += (_0x2c12d1 - this.hpBarA) * 0.04;
            if (this.hpBarA > 0.001) {
                this.hpPer += (this.hpPer_n - this.hpPer) * 0.1;
                var _0x1386a3 = Math.max(1, this.rad / 25);
                var _0x1c4b6f = _0x1386a3 * 20;
                var _0x67ae3e = _0x1386a3 * 5;
                var _0x730058 = 0;
                var _0x1d1883 = -this.rad - _0x1386a3 * 10;
                _0x39e82d.globalAlpha *= this.hpBarA;
                _0x39e82d.fillStyle = "rgba(0,0,0,0.35)";
                _0x39e82d.fillRect(_0x730058 - _0x1c4b6f / 2, _0x1d1883 - _0x67ae3e / 2, _0x1c4b6f, _0x67ae3e);
                _0x39e82d.fillStyle = "#16D729";
                var _0xd56e8e = _0x1c4b6f * (this.hpPer / 100);
                if (this.flag_usingAbility && this.octoIsAnimal) {
                    _0xd56e8e = _0x1c4b6f * (25 / 100);
                }
                _0x39e82d.fillRect(_0x730058 - _0x1c4b6f / 2, _0x1d1883 - _0x67ae3e / 2, _0xd56e8e, _0x67ae3e);
            }
            _0x39e82d.restore();
        };
        _0x388d6f.prototype.drawOnTopOfSkinImg = function() {
            _0x388d6f.superClass.prototype.drawOnTopOfSkinImg.call(this);
            if (this.flag_usingAbility && !this.flag_flying) {
                if (this.octoDrawObj != null) {
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = 1;
                    this.octoDrawObj.mopeSeasonID = 1;
                    this.octoDrawObj.rad = this.rad;
                    this.octoDrawObj.draw();
                    _0x39e82d.restore();
                }
            }
        };

        function _0x388d6f() {
            _0x388d6f.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x388d6f, _0x48c056, _0x3adb75);
        var _0x28c171 = Animal;
        _0x1679a9.prototype = Object.create(_0x28c171.prototype);
        _0x1679a9.prototype.constructor = _0x1679a9;
        _0x1679a9.superClass = _0x28c171;
        _0x1679a9.prototype.getSkinName = function() {
            var _0x453c12 = this.getSpeciesPath("flamingo") + "/flamingo";
            _0x453c12 += this.specType == 0 ? "" : this.specType;
            return _0x453c12;
        };
        _0x1679a9.prototype.animalInfo = function() {
            var _0x25ce66 = {
                aniName: "Flamingo"
            };
            switch (this.animalSpecies) {
                case 111:
                    _0x25ce66.aniName = "Classic Flamingo";
                    break;
                case 112:
                    _0x25ce66.aniName = "Gold-trim Flamingo";
                    break;
                case 202:
                    _0x25ce66.aniName = "Fly Mango";
                    break;
            }
            _0x25ce66.aniCol = "#FF9000";
            _0x25ce66.skinName = this.getSpeciesPath("flamingo") + "/flamingo";
            _0x25ce66.upgradeText = "UPGRADED to " + _0x25ce66.aniName + "!\nHold W in water to search for food underwater.\n(Tip: Any nearby underwater animals will get surfaced by the flamingo!)";
            return _0x25ce66;
        };
        _0x1679a9.prototype.getSpeciesPath = function(_0x48dd5c) {
            return "ocean/" + _0x48dd5c + "/" + this.animalSpecies;
        };
        _0x1679a9.prototype.getWing = function(_0x87c57e, _0x1b5aca, _0x4528f7) {
            var _0x52c9f2 = "skins/" + this.getSpeciesPath(_0x87c57e) + (_0x4528f7 ? "/pink" : "") + "/";
            _0x52c9f2 += _0x87c57e + "_wing" + _0x1b5aca + ".png";
            return _0x52c9f2;
        };
        _0x1679a9.prototype.getHead = function(_0x5556a0, _0x4021f3) {
            var _0x105ea6 = "skins/" + this.getSpeciesPath(_0x5556a0) + (_0x4021f3 ? "/pink" : "") + "/";
            _0x105ea6 += _0x5556a0 + "_head.png";
            return _0x105ea6;
        };
        _0x1679a9.prototype.basicDrawSkinImg = function() {
            _0x1679a9.superClass.prototype.basicDrawSkinImg.call(this);
            if (!this.flag_underWater && this.id > 0) {
                var _0x13fd60 = this.skinScale;
                var _0x4e7eeb = this.skinRad;
                var _0x1158fc = "skins/" + this.getSpeciesPath("flamingo") + "/pink/flamingo";
                _0x1158fc += this.specType == 0 ? "" : this.specType;
                var _0x340ced = this.getSkinImageObj(_0x1158fc + ".png");
                if (_0x340ced) {
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = this.colorPerc;
                    _0x39e82d.drawImage(_0x340ced, -_0x4e7eeb * _0x13fd60, -_0x4e7eeb * _0x13fd60, _0x4e7eeb * 2 * _0x13fd60, _0x4e7eeb * 2 * _0x13fd60);
                    _0x39e82d.restore();
                }
            }
        };
        _0x1679a9.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                return;
            }
            var _0x2e12ec = 500 / 340;
            _0x39e82d.save();
            var _0x114d6d = this.flag_flying ? 45 : 47;
            var _0x186ad8 = this.flag_flying ? 90 : 45;
            var _0x1f12ce = this.flag_flying ? 0.2 : 0.01;
            var _0x2766c7 = this.flag_flying ? 2.5 : 2;
            var _0x91cd18 = this.flag_flying ? 2 : 2.5;
            var _0x5089a8 = this.flag_flying ? 0.5 : 1.2;
            var _0xba1c3d = (_0x4ec996 - this.spawnTime) / 1000;
            if (this.flag_flying) {
                var _0x3a851c = _0x4e4bab("bird", this.spawnTime);
                if (_0x3a851c !== undefined && _0x3a851c != null) {
                    this.theFrame = _0x3a851c;
                }
            } else {
                this.theFrame = _0x5981a2 != _0x4051d6 && !_0x1d523b ? _0x1b594e(_0xba1c3d, _0x5089a8, 0.3, 2) : this.birdNoAnimationFlyWingAngle;
            }
            var _0x56b975 = this.theFrame;
            var _0x29bfbb = this.getSkinImageObj(this.getWing("flamingo", 1, false));
            if (_0x29bfbb) {
                _0x39e82d.save();
                var _0x5c2d02 = -(-_0x1f12ce + _0x56b975) * _0x4bfce6(_0x186ad8);
                var _0x5163ed = this.rad * 0.8;
                _0x39e82d.rotate(_0x4bfce6(_0x114d6d) + _0x5c2d02);
                var _0x5960ef = 0;
                var _0x2eebf2 = this.rad;
                var _0x55ba03 = _0x5163ed * _0x91cd18 * 0.62;
                var _0x460fbf = _0x5163ed * _0x2766c7;
                var _0x3e368d = 0.2;
                var _0x193ac2 = 1.7;
                _0x39e82d.drawImage(_0x29bfbb, _0x5960ef + _0x55ba03 * -_0x3e368d, _0x2eebf2 + _0x460fbf * -_0x193ac2, _0x55ba03, _0x460fbf);
                _0x39e82d.restore();
            }
            var _0x29bfbb = this.getSkinImageObj(this.getWing("flamingo", 2, false));
            if (_0x29bfbb) {
                _0x39e82d.save();
                var _0x5c2d02 = -(-_0x1f12ce + _0x56b975) * _0x4bfce6(-_0x186ad8);
                var _0x5163ed = this.rad * 0.8;
                _0x39e82d.rotate(_0x4bfce6(-_0x114d6d) + _0x5c2d02);
                var _0x5960ef = 0;
                var _0x2eebf2 = this.rad;
                var _0x55ba03 = _0x5163ed * _0x91cd18 * 0.62;
                var _0x460fbf = _0x5163ed * _0x2766c7;
                var _0x3e368d = 0.8;
                var _0x193ac2 = 1.7;
                _0x39e82d.drawImage(_0x29bfbb, _0x5960ef + _0x55ba03 * -_0x3e368d, _0x2eebf2 + _0x460fbf * -_0x193ac2, _0x55ba03, _0x460fbf);
                _0x39e82d.restore();
            }
            _0x39e82d.restore();
            if (this.specType == 1) {
                var _0x21948c = this.getSkinImageObj(this.getHead("flamingo", false));
                if (_0x21948c) {
                    _0x39e82d.save();
                    var _0x5163ed = this.rad;
                    _0x39e82d.drawImage(_0x21948c, -_0x5163ed * _0x2e12ec, (-_0x5163ed + _0x5163ed * 0.1) * _0x2e12ec, _0x5163ed * 2 * _0x2e12ec, _0x5163ed * 2 * _0x2e12ec);
                    _0x39e82d.restore();
                }
            }
        };
        _0x1679a9.prototype.drawUnderSkinImgOutline = function() {
            _0x1679a9.superClass.prototype.drawUnderSkinImgOutline.call(this);
            if (this.flag_usingAbility && !this.flag_flying) {
                var _0x486d49 = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x5056af = 1.5;
                var _0x200b0f = 0.5;
                var _0x1054b3 = _0x200b0f * Math.sin(Math.PI * 2 / _0x5056af * _0x486d49);
                _0x39e82d.save();
                _0x39e82d.globalAlpha *= 0.8;
                _0x466d9b(0, this.rad * (0.9 + _0x1054b3 * 0.12), this.rad * 0.3, "#2c84ff");
                _0x466d9b(0, -this.rad * 0.3, this.rad * (1.05 + _0x1054b3 * 0.09), "#4668ff");
                _0x39e82d.restore();
                _0x39e82d.save();
                var _0x4a97de = "#4E71C3";
                _0x39e82d.globalAlpha = 1;
                _0x39e82d.fillStyle = _0x4a97de;
                var _0x677423 = this.rad * 0.1;
                _0x39e82d.beginPath();
                _0x39e82d.arc(this.rad * -0.3, this.rad * 1.2, Math.max(0, _0x677423 + _0x1054b3), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.beginPath();
                _0x39e82d.arc(this.rad * 0.2, this.rad * 1.5, Math.max(0, _0x677423 - _0x1054b3), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.beginPath();
                _0x39e82d.arc(this.rad * 0.3, this.rad * 1.2, Math.max(0, _0x677423 + _0x1054b3), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.beginPath();
                _0x39e82d.arc(this.rad * -0.2, this.rad * 1.5, Math.max(0, _0x677423 - _0x1054b3), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.restore();
            }
        };
        _0x1679a9.prototype.readCustomData_onNewlyVisible = function(_0x5456e8) {
            _0x1679a9.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x5456e8);
            var _0xfa45d3 = _0x5456e8.readUInt8();
            this.colorPerc = _0xfa45d3 / 100;
        };
        _0x1679a9.prototype.customUpdatedProperty = function(_0x296ab1, _0x1f67bc) {
            if (_0x296ab1 == _0xb8d9df) {
                var _0x194039 = _0x1f67bc.readUInt8();
                this.colorPerc = _0x194039 / 100;
            }
        };

        function _0x1679a9() {
            _0x1679a9.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x1679a9, _0x48c056, _0x4e8c9f);
        var _0x28c171 = Animal;
        _0x1aa328.prototype = Object.create(_0x28c171.prototype);
        _0x1aa328.prototype.constructor = _0x1aa328;
        _0x1aa328.superClass = _0x28c171;
        _0x1aa328.prototype.getSkinName = function() {
            let _0x4298e1 = this.getSpeciesPath() + "/cassowary";
            _0x4298e1 += this.specType == 0 ? "" : this.specType;
            return _0x4298e1;
        };
        _0x1aa328.prototype.getSpeciesPath = function() {
            return "land/cassowary/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x1aa328.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x1aa328.prototype.getAbilityInfo = function(_0x1301cd) {
            var _0x304d34 = {
                abilName: "Front Kick\n(Hold to Charge)"
            };
            _0x304d34.abilImg = "skins/land/cassowary/" + this.animalSpecies + this.getSubSpecies() + "/cassowary2.png";
            _0x304d34.skinThemeID = this.skinThemeID;
            _0x304d34.mopeSeasonID = this.mopeSeasonID;
            return _0x304d34;
        };
        _0x1aa328.prototype.animalInfo = function() {
            var _0x4bd675 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x4bd675.aniName = "Cassowary!";
                    break;
                case 1:
                    _0x4bd675.aniName = "Golden Cassowary!";
                    break;
                case 2:
                    _0x4bd675.aniName = "Cotton Cassowary!";
                    break;
                case 111:
                    _0x4bd675.aniName = "Classic Cassowary";
                    break;
                case 202:
                    _0x4bd675.aniName = "Pastel Cassowary";
                    break;
                case 204:
                    _0x4bd675.aniName = "Basilisk Cassowary!";
                    break;
            }
            _0x4bd675.aniCol = "#FF9000";
            _0x4bd675.skinName = this.getSkinName();
            _0x4bd675.upgradeText = "UPGRADED to " + _0x4bd675.aniName + "!\nHold W to charge up a kick, the longer you hold, the more powerful it is!";
            return _0x4bd675;
        };

        function _0x1aa328() {
            _0x1aa328.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x1aa328, _0x48c056, _0x31189f);
        var _0x28c171 = Animal;
        _0x5c8437.prototype = Object.create(_0x28c171.prototype);
        _0x5c8437.prototype.constructor = _0x5c8437;
        _0x5c8437.superClass = _0x28c171;
        _0x5c8437.prototype.getSkinName = function() {
            var _0x474bb1 = "land/chicken/" + this.animalSpecies + "/chicken";
            _0x474bb1 += this.specType == 0 ? "" : this.specType;
            return _0x474bb1;
        };
        _0x5c8437.prototype.animalInfo = function() {
            var _0x44e0f2 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x44e0f2.aniName = "Chicken";
                    break;
                case 111:
                    _0x44e0f2.aniName = "Classic Chicken";
                    break;
                case 112:
                    _0x44e0f2.aniName = "Gold-trim Chicken";
                    break;
                case 201:
                    _0x44e0f2.aniName = "Countryside Chick";
                    break;
                case 202:
                    _0x44e0f2.aniName = "Lightning Lord";
                    break;
            }
            _0x44e0f2.aniCol = "#FF9000";
            _0x44e0f2.skinName = "land/chicken/" + this.animalSpecies + "/chicken";
            _0x44e0f2.upgradeText = "UPGRADED to " + _0x44e0f2.aniName + "!";
            return _0x44e0f2;
        };
        _0x5c8437.prototype.getWing = function(_0x5a8c1f, _0x41bb45, _0x1c588b) {
            var _0x37f515 = "skins/land/" + (_0x1c588b ? this.getSpeciesPath(_0x5a8c1f) + "/" : _0x5a8c1f + "/");
            _0x37f515 += _0x5a8c1f + "_wing" + _0x41bb45 + ".png";
            return _0x37f515;
        };
        _0x5c8437.prototype.getHead = function(_0xf52fe5, _0x25cb74) {
            var _0x3c2590 = "skins/land/" + (_0x25cb74 ? this.getSpeciesPath(_0xf52fe5) + "/" : _0xf52fe5 + "/");
            _0x3c2590 += _0xf52fe5 + "_head.png";
            return _0x3c2590;
        };
        _0x5c8437.prototype.getAbilityInfo = function(_0x82cd31) {
            var _0x3c0666 = {
                abilName: "Run!",
                abilImg: "skins/land/chicken/" + this.animalSpecies + "/ability.png",
                skinThemeID: this.skinThemeID,
                mopeSeasonID: this.mopeSeasonID
            };
            return _0x3c0666;
        };
        _0x5c8437.prototype.drawSkinCustomization = function() {
            var _0x31e3e0 = 500 / 340;
            if (this.flag_usingAbility) {
                _0x39e82d.save();
                var _0x31af46 = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x1d4f87 = _0x1b594e(_0x31af46, 0.3, 1, 2);
                var _0x42d1e4 = this.getSkinImageObj(this.getWing("chicken", 1, true));
                if (_0x42d1e4) {
                    _0x39e82d.save();
                    var _0x48e72b = -(-0.2 + _0x1d4f87) * _0x4bfce6(15);
                    var _0x455783 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(15) + _0x48e72b);
                    var _0x1d9fd0 = 0;
                    var _0x379cb4 = this.rad;
                    var _0x3fa355 = _0x455783 * 2 * 0.7;
                    var _0x1f8cd4 = _0x455783 * 2.2;
                    var _0x8b1948 = 0;
                    var _0xd31d53 = 1.5;
                    _0x39e82d.drawImage(_0x42d1e4, _0x1d9fd0 + _0x3fa355 * -_0x8b1948, _0x379cb4 + _0x1f8cd4 * -_0xd31d53, _0x3fa355, _0x1f8cd4);
                    _0x39e82d.restore();
                }
                var _0x42d1e4 = this.getSkinImageObj(this.getWing("chicken", 2, true));
                if (_0x42d1e4) {
                    _0x39e82d.save();
                    var _0x48e72b = -(-0.2 + _0x1d4f87) * _0x4bfce6(-15);
                    var _0x455783 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(-15) + _0x48e72b);
                    var _0x1d9fd0 = 0;
                    var _0x379cb4 = this.rad;
                    var _0x3fa355 = _0x455783 * 2 * 0.7;
                    var _0x1f8cd4 = _0x455783 * 2.2;
                    var _0x8b1948 = 1;
                    var _0xd31d53 = 1.5;
                    _0x39e82d.drawImage(_0x42d1e4, _0x1d9fd0 + _0x3fa355 * -_0x8b1948, _0x379cb4 + _0x1f8cd4 * -_0xd31d53, _0x3fa355, _0x1f8cd4);
                    _0x39e82d.restore();
                }
                var _0x523526 = this.getSkinImageObj(this.getHead("chicken", true));
                if (_0x523526) {
                    _0x39e82d.save();
                    var _0x455783 = this.rad * 1;
                    var _0x5350ea = -this.rad * 0.1;
                    _0x39e82d.drawImage(_0x523526, -_0x455783 * _0x31e3e0, -_0x455783 + _0x5350ea * _0x31e3e0, _0x455783 * 2 * _0x31e3e0, _0x455783 * 2 * _0x31e3e0);
                    _0x39e82d.restore();
                }
                _0x39e82d.restore();
            }
        };

        function _0x5c8437() {
            _0x5c8437.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x5c8437, _0x48c056, _0x2be8a3);
        var _0x28c171 = Animal;
        _0x1aec66.prototype = Object.create(_0x28c171.prototype);
        _0x1aec66.prototype.constructor = _0x1aec66;
        _0x1aec66.superClass = _0x28c171;
        _0x1aec66.prototype.animalInfo = function() {
            var _0x31dd90 = {
                aniName: "Woodpecker"
            };
            switch (this.animalSpecies) {
                case 111:
                    _0x31dd90.aniName = "Classic Woodpecker";
                    break;
                case 112:
                    _0x31dd90.aniName = "Gold-trim Woodpecker";
                    break;
                case 202:
                    _0x31dd90.aniName = "Jackhammer";
                    break;
            }
            _0x31dd90.aniCol = "#FF9000";
            _0x31dd90.skinName = this.getSpeciesPath("woodpecker") + "/woodpecker";
            _0x31dd90.upgradeText = "UPGRADED to " + _0x31dd90.aniName + "!\nHold W to Peck other animals,\n or (Hint: Use ability on hills to fly)";
            return _0x31dd90;
        };
        _0x1aec66.prototype.getSpeciesPath = function(_0x6243b4) {
            return "land/" + _0x6243b4 + "/" + this.animalSpecies;
        };
        _0x1aec66.prototype.getSkinName = function() {
            var _0x595e71 = this.getSpeciesPath("woodpecker") + "/woodpecker";
            _0x595e71 += this.specType == 0 ? "" : this.specType;
            return _0x595e71;
        };
        _0x1aec66.prototype.getHead = function(_0x644a3, _0x3561d3) {
            var _0x5802ab = "skins/" + (_0x3561d3 ? this.getSpeciesPath(_0x644a3) + "/" : _0x644a3 + "/");
            _0x5802ab += _0x644a3 + "_head" + (!this.flag_flying && this.flag_usingAbility ? "1" : "") + ".png";
            return _0x5802ab;
        };
        _0x1aec66.prototype.getAniRadius = function(_0x4cc4e2) {
            if (this.flag_usingAbility && this.flag_flying) {
                return _0x4cc4e2 * 0.8;
            }
            return _0x4cc4e2;
        };
        _0x1aec66.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                return;
            }
            var _0x1410f5 = "skins";
            {
                var _0x318c79 = 500 / 340;
                _0x39e82d.save();
                var _0x4b6b74 = this.flag_flying ? 45 : 47;
                var _0xb0aaad = this.flag_flying ? 90 : 45;
                var _0x385dd7 = this.flag_flying ? 0.2 : 0.01;
                var _0x17ebc = this.flag_flying ? 2.5 : 2;
                var _0x2fff4a = this.flag_flying ? 2.2 : 2.5;
                var _0x427dee = this.flag_flying ? 0.5 : 0.3;
                var _0x51c773 = 0.3;
                var _0x746709 = (_0x4ec996 - this.spawnTime) / 1000;
                if (this.flag_flying) {
                    var _0x31b374 = _0x4e4bab("bird", this.spawnTime);
                    if (_0x31b374 !== undefined && _0x31b374 != null) {
                        this.theFrame = _0x31b374;
                    }
                } else {
                    this.theFrame = _0x5981a2 != _0x4051d6 && !_0x1d523b ? _0x1b594e(_0x746709, _0x427dee, _0x51c773, 2) : this.birdNoAnimationFlyWingAngle;
                }
                var _0x1a9493 = this.theFrame;
                var _0x5d8e84 = this.getSkinImageObj(this.getWing("woodpecker", 1, true));
                if (_0x5d8e84) {
                    _0x39e82d.save();
                    var _0x28dac2 = -(-_0x385dd7 + _0x1a9493) * _0x4bfce6(_0xb0aaad);
                    var _0x3e9797 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(_0x4b6b74) + _0x28dac2);
                    var _0x343b4d = 0;
                    var _0x35bd6f = this.rad;
                    var _0x1e7e7d = _0x3e9797 * _0x2fff4a * 0.62;
                    var _0x4fe28b = _0x3e9797 * _0x17ebc;
                    var _0x1598c6 = 0.2;
                    var _0x4edd34 = 1.7;
                    _0x39e82d.drawImage(_0x5d8e84, _0x343b4d + _0x1e7e7d * -_0x1598c6, _0x35bd6f + _0x4fe28b * -_0x4edd34, _0x1e7e7d, _0x4fe28b);
                    _0x39e82d.restore();
                }
                var _0x5d8e84 = this.getSkinImageObj(this.getWing("woodpecker", 2, true));
                if (_0x5d8e84) {
                    _0x39e82d.save();
                    var _0x28dac2 = -(-_0x385dd7 + _0x1a9493) * _0x4bfce6(-_0xb0aaad);
                    var _0x3e9797 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(-_0x4b6b74) + _0x28dac2);
                    var _0x343b4d = 0;
                    var _0x35bd6f = this.rad;
                    var _0x1e7e7d = _0x3e9797 * _0x2fff4a * 0.62;
                    var _0x4fe28b = _0x3e9797 * _0x17ebc;
                    var _0x1598c6 = 0.8;
                    var _0x4edd34 = 1.7;
                    _0x39e82d.drawImage(_0x5d8e84, _0x343b4d + _0x1e7e7d * -_0x1598c6, _0x35bd6f + _0x4fe28b * -_0x4edd34, _0x1e7e7d, _0x4fe28b);
                    _0x39e82d.restore();
                }
                _0x39e82d.restore();
                if (this.specType != 0 && this.specType != undefined) {
                    var _0x47752c = this.getSkinImageObj(this.getHead("woodpecker", true));
                    if (_0x47752c) {
                        _0x1a9493 = 0;
                        if (!this.flag_flying) {
                            _0x51c773 = 3;
                            _0x427dee = 0.18;
                            _0x1a9493 = _0x5981a2 != _0x4051d6 ? _0x1b594e(_0x746709, _0x427dee, _0x51c773, 2) : this.birdNoAnimationFlyWingAngle;
                        }
                        _0x39e82d.save();
                        var _0x3e9797 = this.rad;
                        var _0x3a0d69 = !this.flag_flying ? (-_0x3e9797 + _0x3e9797 * 0.1) * _0x318c79 + _0x1a9493 : -_0x3e9797;
                        _0x39e82d.drawImage(_0x47752c, -_0x3e9797 * _0x318c79, _0x3a0d69, _0x3e9797 * 2 * _0x318c79, _0x3e9797 * 2 * _0x318c79);
                        _0x39e82d.restore();
                    }
                }
            }
        };

        function _0x1aec66() {
            _0x1aec66.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x1aec66, _0x48c056, _0x3afb27);
        var _0x28c171 = Animal;
        _0x3f7e61.prototype = Object.create(_0x28c171.prototype);
        _0x3f7e61.prototype.constructor = _0x3f7e61;
        _0x3f7e61.superClass = _0x28c171;
        _0x3f7e61.prototype.updateZ = function() {
            if (this.flag_usingAbility) {
                if (this.flag_flying) {
                    this.z = 100000 + this.rad;
                    return;
                }
            }
            this.z = 1000 + this.rad;
        };
        _0x3f7e61.prototype.animalInfo = function() {
            var _0x5f1768 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x5f1768.aniName = "Peacock";
                    break;
                case 111:
                    _0x5f1768.aniName = "Classic Peacock";
                    break;
                case 112:
                    _0x5f1768.aniName = "Gold-trim Peacock";
                    break;
                case 200:
                    _0x5f1768.aniName = "Plague Raptor";
                    break;
                case 202:
                    _0x5f1768.aniName = "Spectrum Peacock";
                    break;
            }
            _0x5f1768.aniCol = "#FF9000";
            _0x5f1768.skinName = this.getSpeciesPath("peacock") + "/peacock";
            _0x5f1768.upgradeText = "UPGRADED to " + _0x5f1768.aniName + "!\nHold W to hypnotize prey: prey gets pulled in, predtors pushed!. \nHint:Start the ability on a hill to fly!. ";
            return _0x5f1768;
        };
        _0x3f7e61.prototype.getSkinName = function() {
            if (this.mopeSeasonID == 1) {
                if (this.flag_usingAbility) {
                    if (this.flag_flying) {
                        return this.getSpeciesPath("peacock") + "/peacock_flying_tail";
                    } else {
                        return this.getSpeciesPath("peacock") + "/tail3";
                    }
                }
                return this.getSpeciesPath("peacock") + "/tail1";
            } else {
                var _0x51cf8d = this.getSpeciesPath("peacock") + "/peacock";
                _0x51cf8d += this.specType == 0 ? "" : this.specType;
                return _0x51cf8d;
            }
        };
        _0x3f7e61.prototype.getSpeciesPath = function(_0x418aef) {
            return "land/" + _0x418aef + "/" + this.animalSpecies;
        };
        _0x3f7e61.prototype.getWing = function(_0x3c76dd, _0x244152, _0x50d61e) {
            var _0x137a16 = "skins/" + (_0x50d61e ? this.getSpeciesPath(_0x3c76dd) + "/" : _0x3c76dd + "/");
            _0x137a16 += _0x3c76dd + "_wing" + _0x244152 + ".png";
            return _0x137a16;
        };
        _0x3f7e61.prototype.getHead = function(_0x257cbf, _0x14cb15) {
            var _0x16855d = "skins/" + (_0x14cb15 ? this.getSpeciesPath(_0x257cbf) + "/" : _0x257cbf + "/");
            _0x16855d += _0x257cbf + "_head.png";
            return _0x16855d;
        };
        _0x3f7e61.prototype.getAniRadius = function(_0x3643f9) {
            if (this.flag_usingAbility && this.flag_flying) {
                return _0x3643f9 * 0.9;
            }
            return _0x3643f9;
        };
        _0x3f7e61.prototype.getSkinImageObj = function(_0x137e1d) {
            var _0x4cbf8b = this.mopeSeasonID;
            return this.getSkinImageObjForSeason(_0x137e1d, _0x4cbf8b);
        };
        _0x3f7e61.prototype.basicDrawSkinImg = function() {
            this.setSkinScale();
            if (this.mopeSeasonID <= 1) {
                var _0x3eb4e0 = this.skinRad;
                if (this.loadedSkinImg) {
                    if (!this.flag_usingAbility) {
                        _0x39e82d.drawImage(this.loadedSkinImg, -_0x3eb4e0 * this.skinScale, -_0x3eb4e0 * 1.25 * this.skinScale, _0x3eb4e0 * 2 * this.skinScale, _0x3eb4e0 * 2 * this.skinScale);
                        var _0x42176d = this.getSkinImageObj("skins/" + this.getSpeciesPath("peacock") + "/peacock_top.png");
                        if (_0x42176d) {
                            _0x39e82d.drawImage(_0x42176d, -_0x3eb4e0 * this.skinScale, -_0x3eb4e0 * this.skinScale, _0x3eb4e0 * 2 * this.skinScale, _0x3eb4e0 * 2 * this.skinScale);
                        }
                    } else {
                        _0x39e82d.drawImage(this.loadedSkinImg, -_0x3eb4e0 * this.skinScale, -_0x3eb4e0 * 1.75 * this.skinScale, _0x3eb4e0 * 2 * this.skinScale, _0x3eb4e0 * 2.5 * this.skinScale);
                    }
                }
            } else {
                var _0x1db78f = 0.05;
                var _0x3f9618 = -0.8;
                var _0x3eb4e0 = this.getAniRadius(this.skinRad - this.outlineW);
                var _0x4c4256 = 500 / 340;
                if (!this.flag_flying && this.flag_usingAbility) {
                    var _0x9094dc = -0.55;
                    var _0x26227f = "peacock_ability";
                    var _0x1e9273 = this.getSkinImageObj("skins/land/peacock/" + this.animalSpecies + "/" + _0x26227f + ".png");
                    var _0x477a20 = this.skinScale + (this.flag_usingAbility && !this.flag_flying ? 1 : 0);
                    if (_0x1e9273) {
                        _0x39e82d.save();
                        _0x39e82d.drawImage(_0x1e9273, -_0x3eb4e0 * _0x477a20, (-_0x3eb4e0 + _0x3eb4e0 * _0x9094dc) * _0x477a20, _0x3eb4e0 * 2 * _0x477a20, _0x3eb4e0 * 2 * _0x477a20);
                        _0x39e82d.restore();
                    }
                }
                if (this.loadedSkinImg) {
                    var _0x2e5a71 = this.flag_usingAbility && !this.flag_flying ? this.skinScale * 1.1 : _0x4c4256;
                    _0x39e82d.drawImage(this.loadedSkinImg, -_0x3eb4e0 * _0x2e5a71, (-_0x3eb4e0 + _0x3eb4e0 * _0x1db78f) * _0x2e5a71, _0x3eb4e0 * 2 * _0x2e5a71, _0x3eb4e0 * 2 * _0x2e5a71);
                    if (this.flag_flying || !this.flag_usingAbility) {
                        var _0x26227f = "tail";
                        var _0x1e9273 = this.getSkinImageObj("skins/land/peacock/" + this.animalSpecies + "/" + _0x26227f + ".png");
                        var _0x477a20 = this.skinScale;
                        if (_0x1e9273) {
                            _0x39e82d.save();
                            var _0x3eb4e0 = this.rad - this.outlineW;
                            _0x39e82d.drawImage(_0x1e9273, -_0x3eb4e0 * _0x477a20, (-_0x3eb4e0 + _0x3eb4e0 * _0x3f9618) * _0x477a20, _0x3eb4e0 * 2 * _0x477a20, _0x3eb4e0 * 2 * _0x477a20);
                            _0x39e82d.restore();
                        }
                    }
                    if (!this.flag_usingAbility) {
                        var _0x42176d = this.getSkinImageObj("skins/" + this.getSpeciesPath("peacock") + "/peacock_top.png");
                        if (_0x42176d) {
                            _0x39e82d.drawImage(_0x42176d, -_0x3eb4e0 * _0x4c4256, (-_0x3eb4e0 + _0x3eb4e0 * _0x1db78f) * _0x4c4256, _0x3eb4e0 * 2 * _0x4c4256, _0x3eb4e0 * 2 * _0x4c4256);
                        }
                    }
                }
            }
        };
        _0x3f7e61.prototype.drawSkinCustomization = function() {
            if (this.mopeSeasonID <= 1) {
                if (!this.flag_usingAbility) {
                    return;
                }
                if (!this.flag_flying) {
                    _0x39e82d.save();
                    var _0x3fcd60 = this.rad;
                    var _0x1fe558 = this.getSkinImageObj("skins/" + this.getSpeciesPath("peacock") + "/peacock_ability.png");
                    if (_0x1fe558) {
                        _0x39e82d.drawImage(_0x1fe558, -_0x3fcd60 * this.skinScale * 2, -_0x3fcd60 * this.skinScale * 3 + _0x3fcd60 * 0.4, _0x3fcd60 * 2 * this.skinScale * 2, _0x3fcd60 * 3 * this.skinScale);
                    }
                    _0x39e82d.restore();
                }
                var _0x4f6888 = 500 / 340;
                _0x39e82d.save();
                var _0x40170c = this.flag_flying ? 45 : 20;
                var _0x1028a9 = this.flag_flying ? 90 : 45;
                var _0x1a3192 = this.flag_flying ? 0.2 : 0.01;
                var _0x4bccbd = this.flag_flying ? 2.5 : 2;
                var _0x1d8cdf = this.flag_flying ? 2.5 : 2;
                var _0x3cb157 = this.flag_flying ? 0 : -0.4;
                var _0x12b710 = this.flag_flying ? 0 : -0.2;
                var _0x383aeb = this.flag_flying ? 0.5 : 1.2;
                var _0x5ce748 = this.flag_flying ? 0.3 : 0.1;
                var _0x451e54 = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x5450ef = _0x5981a2 != 2 && !_0x1d523b ? _0x1b594e(_0x451e54, _0x383aeb, _0x5ce748, 2) : this.birdNoAnimationFlyWingAngle;
                var _0x33cd80 = this.getSkinImageObj(this.getWing("peacock", 1, true));
                if (_0x33cd80) {
                    _0x39e82d.save();
                    var _0x170344 = -(-_0x1a3192 + _0x5450ef) * _0x4bfce6(_0x1028a9);
                    var _0x3fcd60 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(_0x40170c) + _0x170344);
                    var _0xd134a5 = 0;
                    var _0x4f3211 = this.rad;
                    var _0x326721 = _0x3fcd60 * _0x1d8cdf * 0.62;
                    var _0x5ebccf = _0x3fcd60 * _0x4bccbd;
                    var _0x5c6151 = 0.2 + _0x3cb157;
                    var _0x7b928e = 1.7 + _0x12b710;
                    _0x39e82d.drawImage(_0x33cd80, _0xd134a5 + _0x326721 * -_0x5c6151, _0x4f3211 + _0x5ebccf * -_0x7b928e, _0x326721, _0x5ebccf);
                    _0x39e82d.restore();
                }
                var _0x33cd80 = this.getSkinImageObj(this.getWing("peacock", 2, true));
                if (_0x33cd80) {
                    _0x39e82d.save();
                    var _0x170344 = -(-_0x1a3192 + _0x5450ef) * _0x4bfce6(-_0x1028a9);
                    var _0x3fcd60 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(-_0x40170c) + _0x170344);
                    var _0xd134a5 = 0;
                    var _0x4f3211 = this.rad;
                    var _0x326721 = _0x3fcd60 * _0x1d8cdf * 0.62;
                    var _0x5ebccf = _0x3fcd60 * _0x4bccbd;
                    var _0x5c6151 = 0.8 - _0x3cb157;
                    var _0x7b928e = 1.7 + _0x12b710;
                    _0x39e82d.drawImage(_0x33cd80, _0xd134a5 + _0x326721 * -_0x5c6151, _0x4f3211 + _0x5ebccf * -_0x7b928e, _0x326721, _0x5ebccf);
                    _0x39e82d.restore();
                }
                _0x39e82d.restore();
                if (this.specType == 1) {
                    var _0x17c5a4 = this.getSkinImageObj(this.getHead("peacock", true));
                    if (_0x17c5a4) {
                        _0x39e82d.save();
                        var _0x3fcd60 = this.rad;
                        _0x39e82d.drawImage(_0x17c5a4, -_0x3fcd60 * _0x4f6888, (-_0x3fcd60 + _0x3fcd60 * 0.1) * _0x4f6888, _0x3fcd60 * 2 * _0x4f6888, _0x3fcd60 * 2 * _0x4f6888);
                        _0x39e82d.restore();
                    }
                }
            } else {
                if (!this.flag_usingAbility) {
                    return;
                }
                var _0x4f6888 = 500 / 340;
                if (this.flag_flying && !this.flag_isGrabbed) {
                    _0x39e82d.save();
                    var _0x47924d = _0x4e4bab("bird", this.spawnTime);
                    if (_0x47924d !== undefined && _0x47924d != null) {
                        this.theFrame = _0x47924d;
                    }
                    var _0x5450ef = _0x5981a2 != _0x4051d6 && !_0x1d523b ? this.theFrame : this.birdNoAnimationFlyWingAngle;
                    var _0x33cd80 = this.getSkinImageObj(this.getWing("peacock", 1, true));
                    if (_0x33cd80) {
                        _0x39e82d.save();
                        var _0x170344 = -(-0.2 + _0x5450ef) * _0x439930;
                        var _0x3fcd60 = this.rad * 0.8;
                        _0x39e82d.rotate(_0x4bfce6(45) + _0x170344);
                        var _0xd134a5 = 0;
                        var _0x4f3211 = this.rad;
                        var _0x326721 = _0x3fcd60 * 2 * 0.62;
                        var _0x5ebccf = _0x3fcd60 * 2.5;
                        var _0x5c6151 = 0.2;
                        var _0x7b928e = 1.7;
                        _0x39e82d.drawImage(_0x33cd80, _0xd134a5 + _0x326721 * -_0x5c6151, _0x4f3211 + _0x5ebccf * -_0x7b928e, _0x326721, _0x5ebccf);
                        _0x39e82d.restore();
                    }
                    var _0x33cd80 = this.getSkinImageObj(this.getWing("peacock", 2, true));
                    if (_0x33cd80) {
                        _0x39e82d.save();
                        var _0x170344 = -(-0.2 + _0x5450ef) * _0x4bfce6(-90);
                        var _0x3fcd60 = this.rad * 0.8;
                        _0x39e82d.rotate(_0x4bfce6(-45) + _0x170344);
                        var _0xd134a5 = 0;
                        var _0x4f3211 = this.rad;
                        var _0x326721 = _0x3fcd60 * 2 * 0.62;
                        var _0x5ebccf = _0x3fcd60 * 2.5;
                        var _0x5c6151 = 0.8;
                        var _0x7b928e = 1.7;
                        _0x39e82d.drawImage(_0x33cd80, _0xd134a5 + _0x326721 * -_0x5c6151, _0x4f3211 + _0x5ebccf * -_0x7b928e, _0x326721, _0x5ebccf);
                        _0x39e82d.restore();
                    }
                    _0x39e82d.restore();
                } else if (this.flag_usingAbility && !this.flag_flying) {
                    _0x39e82d.save();
                    var _0x40170c = this.flag_flying ? 45 : 20;
                    var _0x1028a9 = this.flag_flying ? 90 : 45;
                    var _0x1a3192 = this.flag_flying ? 0.2 : 0.01;
                    var _0x4bccbd = this.flag_flying ? 2.5 : 2;
                    var _0x1d8cdf = this.flag_flying ? 2.5 : 2;
                    var _0x3cb157 = this.flag_flying ? 0 : -0.4;
                    var _0x12b710 = this.flag_flying ? 0 : -0.2;
                    var _0x383aeb = this.flag_flying ? 0.5 : 1.2;
                    var _0x5ce748 = this.flag_flying ? 0.3 : 0.1;
                    var _0x451e54 = (_0x4ec996 - this.spawnTime) / 1000;
                    var _0x5450ef = _0x5981a2 != _0x4051d6 && !_0x1d523b ? _0x1b594e(_0x451e54, _0x383aeb, _0x5ce748, 2) : this.birdNoAnimationFlyWingAngle;
                    var _0x33cd80 = this.getSkinImageObj(this.getWing("peacock", 1, true));
                    if (_0x33cd80) {
                        _0x39e82d.save();
                        var _0x170344 = -(-_0x1a3192 + _0x5450ef) * _0x4bfce6(_0x1028a9);
                        var _0x3fcd60 = this.rad * 0.8;
                        _0x39e82d.rotate(_0x4bfce6(_0x40170c) + _0x170344);
                        var _0xd134a5 = 0;
                        var _0x4f3211 = this.rad;
                        var _0x326721 = _0x3fcd60 * _0x1d8cdf * 0.62;
                        var _0x5ebccf = _0x3fcd60 * _0x4bccbd;
                        var _0x5c6151 = 0.2 + _0x3cb157;
                        var _0x7b928e = 1.7 + _0x12b710;
                        _0x39e82d.drawImage(_0x33cd80, _0xd134a5 + _0x326721 * -_0x5c6151, _0x4f3211 + _0x5ebccf * -_0x7b928e, _0x326721, _0x5ebccf);
                        _0x39e82d.restore();
                    }
                    var _0x33cd80 = this.getSkinImageObj(this.getWing("peacock", 2, true));
                    if (_0x33cd80) {
                        _0x39e82d.save();
                        var _0x170344 = -(-_0x1a3192 + _0x5450ef) * _0x4bfce6(-_0x1028a9);
                        var _0x3fcd60 = this.rad * 0.8;
                        _0x39e82d.rotate(_0x4bfce6(-_0x40170c) + _0x170344);
                        var _0xd134a5 = 0;
                        var _0x4f3211 = this.rad;
                        var _0x326721 = _0x3fcd60 * _0x1d8cdf * 0.62;
                        var _0x5ebccf = _0x3fcd60 * _0x4bccbd;
                        var _0x5c6151 = 0.8 - _0x3cb157;
                        var _0x7b928e = 1.7 + _0x12b710;
                        _0x39e82d.drawImage(_0x33cd80, _0xd134a5 + _0x326721 * -_0x5c6151, _0x4f3211 + _0x5ebccf * -_0x7b928e, _0x326721, _0x5ebccf);
                        _0x39e82d.restore();
                    }
                    _0x39e82d.restore();
                }
                if (this.specType != 0 && this.specType != undefined) {
                    var _0x271762 = 0.4;
                    var _0x17c5a4 = this.getSkinImageObj(this.getHead("peacock", true));
                    if (_0x17c5a4) {
                        _0x39e82d.save();
                        var _0x3fcd60 = this.rad;
                        _0x39e82d.drawImage(_0x17c5a4, -_0x3fcd60 * _0x4f6888, (-_0x3fcd60 + _0x3fcd60 * _0x271762) * _0x4f6888, _0x3fcd60 * 2 * _0x4f6888, _0x3fcd60 * 2 * _0x4f6888);
                        _0x39e82d.restore();
                    }
                }
            }
        };

        function _0x3f7e61() {
            _0x3f7e61.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x3f7e61, _0x48c056, _0x8f4f69);
        var _0x28c171 = Animal;
        _0x4cefd2.prototype = Object.create(_0x28c171.prototype);
        _0x4cefd2.prototype.constructor = _0x4cefd2;
        _0x4cefd2.superClass = _0x28c171;
        _0x4cefd2.prototype.updateZ = function() {
            this.z = this.rad;
            if (this.flag_canClimbHill || this.flag_flying) {
                this.z += 100000;
            }
        };
        _0x4cefd2.prototype.animalInfo = function() {
            var _0x36eb37 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x36eb37.aniName = "Gazelle";
                    break;
                case 100:
                    _0x36eb37.aniName = "Flammy Hart";
                    break;
                case 111:
                    _0x36eb37.aniName = "Classic Gazelle";
                    break;
                case 112:
                    _0x36eb37.aniName = "Gold-trim Gazelle";
                    break;
                case 202:
                    _0x36eb37.aniName = "Retro Neon Gazelle";
                    break;
            }
            _0x36eb37.skinName = this.getSkinName();
            _0x36eb37.aniCol = "#FF9000";
            _0x36eb37.upgradeText = "UPGRADED to " + _0x36eb37.aniName + "!\nHold 'W' to Jump High through everything.";
            return _0x36eb37;
        };
        _0x4cefd2.prototype.moveF = 0.08;
        _0x4cefd2.prototype.jumpAnim = null;
        _0x4cefd2.prototype.frame = 0;
        _0x4cefd2.prototype.drawUnderSkinImg = function() {
            if (this.flag_usingAbility && _0x5981a2 != _0x4051d6) {
                var _0x1132a5 = 1;
                if (this.jumpAnim == null) {
                    this.jumpAnim = new _0x28a15f(this, 0.5, _0x28a15f.halfWave);
                    this.jumpAnim.keepLastFrame = true;
                    this.jumpAnim.loop = true;
                    this.jumpAnim.onFrameEntered = function(_0x5ae50b) {
                        this.forObj.frame = _0x5ae50b;
                    };
                    this.jumpAnim.onStop = function() {};
                }
                if (this.jumpAnim != null) {
                    this.jumpAnim.run();
                }
                var _0x160aa8 = this.rad - this.outlineW;
                var _0x420653 = 500 / 340;
                this.setSkinScale();
                var _0x27de11 = "skins/" + this.getSkinPath() + "/legs0.png";
                var _0x370e17 = "skins/" + this.getSkinPath() + "/legs1.png";
                var _0x21450d = this.getSkinImageObj(_0x27de11);
                var _0x275db8 = this.getSkinImageObj(_0x370e17);
                if (_0x21450d && _0x275db8) {
                    var _0x420653 = this.skinScale + this.skinScale * 0.15 * this.frame;
                    var _0x160aa8 = this.skinRad;
                    if (this.specType == 0) {
                        _0x39e82d.drawImage(_0x21450d, -_0x160aa8 * _0x420653, -_0x160aa8 * _0x420653, _0x160aa8 * 2 * _0x420653, _0x160aa8 * 2 * _0x420653);
                        _0x39e82d.drawImage(_0x275db8, -_0x160aa8 * _0x420653, (-_0x160aa8 - _0x160aa8 * this.moveF * this.frame) * _0x420653, _0x160aa8 * 2 * _0x420653, _0x160aa8 * 2 * _0x420653);
                    } else {
                        _0x39e82d.drawImage(_0x275db8, -_0x160aa8 * _0x420653, -_0x160aa8 * _0x420653, _0x160aa8 * 2 * _0x420653, _0x160aa8 * 2 * _0x420653);
                        _0x39e82d.drawImage(_0x21450d, -_0x160aa8 * _0x420653, (-_0x160aa8 + _0x160aa8 * this.moveF * this.frame) * _0x420653, _0x160aa8 * 2 * _0x420653, _0x160aa8 * 2 * _0x420653);
                    }
                }
            } else {
                this.jumpAnim = null;
            }
        };
        _0x4cefd2.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x4cefd2.prototype.getSkinPath = function(_0x587377) {
            return "desert/gazelle/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x4cefd2.prototype.getSkinName = function() {
            var _0x439ad4 = this.getSkinPath() + "/gazelle";
            _0x439ad4 += this.specType == 0 || _0x5981a2 !== _0x4051d6 ? "" : this.specType;
            return _0x439ad4;
        };
        _0x4cefd2.prototype.getAbilityInfo = function(_0x5728f5) {
            var _0x33b7d4 = {};
            _0x33b7d4.abilImg = "skins/" + this.getSkinPath() + "/gazelle1.png";
            _0x33b7d4.abilName = "HOLD to Jump High\n";
            _0x33b7d4.skinThemeID = this.skinThemeID;
            _0x33b7d4.mopeSeasonID = this.mopeSeasonID;
            return _0x33b7d4;
        };

        function _0x4cefd2() {
            _0x4cefd2.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x4cefd2, _0x48c056, _0x5443af);
        var _0x28c171 = Animal;
        _0x287754.prototype = Object.create(_0x28c171.prototype);
        _0x287754.prototype.constructor = _0x287754;
        _0x287754.superClass = _0x28c171;
        _0x287754.prototype.animalInfo = function() {
            var _0x399be3 = {
                aniCol: "#FF9000"
            };
            switch (this.animalSpecies) {
                case 0:
                    _0x399be3.aniName = "Armadillo";
                    break;
                case 111:
                    _0x399be3.aniName = "Classic Armadillo";
                    break;
                case 112:
                    _0x399be3.aniName = "Gold-trim Armadillo";
                    break;
            }
            _0x399be3.skinName = this.getSkinName();
            _0x399be3.upgradeText = "UPGRADED to " + _0x399be3.aniName + "!\nHold 'W' to roll through everything. \nCarefully, try eating mangoes around venus flytraps!";
            return _0x399be3;
        };
        _0x287754.prototype.drawUnderSkinTail = function(_0xa1c0d6) {
            if (!this.flag_usingAbility) {
                _0x287754.superClass.prototype.drawUnderSkinTail.call(this, _0xa1c0d6);
            }
        };
        _0x287754.prototype.drawAnimalUnderSkinCircle = function(_0x53ed01) {
            if (!this.flag_usingAbility) {
                _0x287754.superClass.prototype.drawAnimalUnderSkinCircle.call(this, _0x53ed01);
            }
        };
        _0x287754.prototype.basicDrawSkinImg = function() {
            if (!this.flag_usingAbility) {
                _0x287754.superClass.prototype.basicDrawSkinImg.call(this);
                return;
            } else {
                this.setSkinScale();
                this.frameNumber = Math.trunc(_0x4ec996 / 120) % 6;
                var _0x25efe3 = "skins/" + this.getSkin() + this.frameNumber + ".png";
                var _0x337525 = this.getSkinImageObj(_0x25efe3);
                if (_0x337525) {
                    var _0x4e7da0 = this.skinScale;
                    var _0x4b21d1 = this.skinRad;
                    _0x39e82d.drawImage(_0x337525, -_0x4b21d1 * _0x4e7da0, -_0x4b21d1 * _0x4e7da0, _0x4b21d1 * 2 * _0x4e7da0, _0x4b21d1 * 2 * _0x4e7da0);
                }
            }
        };
        _0x287754.prototype.getSkin = function() {
            return "desert/armadillo/" + this.animalSpecies + this.getSubSpecies() + "/armadillo";
        };
        _0x287754.prototype.getSkinName = function() {
            return "desert/armadillo/" + this.animalSpecies + this.getSubSpecies() + "/armadillo" + (this.specType == 0 ? "" : this.specType);
        };
        _0x287754.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };

        function _0x287754() {
            _0x287754.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x287754, _0x48c056, _0x2892bd);
        var _0x28c171 = Animal;
        _0x85b03b.prototype = Object.create(_0x28c171.prototype);
        _0x85b03b.prototype.constructor = _0x85b03b;
        _0x85b03b.superClass = _0x28c171;
        _0x85b03b.prototype.animalInfo = function() {
            var _0x198198 = {
                aniCol: "#FF9000"
            };
            switch (this.animalSpecies) {
                case 100:
                    _0x198198.aniName = "Cacti Rat";
                    break;
                case 0:
                    _0x198198.aniName = "Desert Rat";
                    break;
                case 111:
                    _0x198198.aniName = "Classic Desert Rat";
                    break;
                case 112:
                    _0x198198.aniName = "Gold-trim Desert Rat";
                    break;
                case 202:
                    _0x198198.aniName = "Plasma Rat";
                    break;
            }
            _0x198198.skinName = this.getSkinName();
            _0x198198.upgradeText = "You're a tiny " + _0x198198.aniName + "- Eat food to grow!";
            return _0x198198;
        };
        _0x85b03b.prototype.getSkinName = function() {
            return this.getSkinPath() + "/kangaroorat" + (this.specType == 0 ? "" : this.specType);
        };
        _0x85b03b.prototype.getSkinPath = function() {
            return "desert/kangaroorat/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x85b03b.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x85b03b.prototype.flapStart = 0;
        _0x85b03b.prototype.drawSkinCustomization = function() {
            if (this.flag_usingAbility) {
                var _0xa0bd8d = "skins/" + this.getSkinPath() + "/tail.png";
                var _0x35f264 = this.getSkinImageObj(_0xa0bd8d);
                if (_0x35f264) {
                    var _0x26d739 = this.skinScale * 1.5;
                    var _0xd0dda4 = this.skinRad;
                    _0x39e82d.drawImage(_0x35f264, -_0xd0dda4 * _0x26d739, (-_0xd0dda4 + _0xd0dda4 * -0.08) * _0x26d739, _0xd0dda4 * 2 * _0x26d739, _0xd0dda4 * 2 * _0x26d739);
                }
            }
        };

        function _0x85b03b() {
            _0x85b03b.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x85b03b, _0x48c056, _0x7d036f);
        var _0x28c171 = Animal;
        _0xdbad21.prototype = Object.create(_0x28c171.prototype);
        _0xdbad21.prototype.constructor = _0xdbad21;
        _0xdbad21.superClass = _0x28c171;
        _0xdbad21.prototype.animalInfo = function() {
            var _0x2ef3c3 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x2ef3c3.aniName = "Desert Chipmunk";
                    break;
                case 111:
                    _0x2ef3c3.aniName = "Classic Desert Chipmunk";
                    break;
                case 112:
                    _0x2ef3c3.aniName = "Gold-trim Desert Chipmunk";
                    break;
                case 200:
                    _0x2ef3c3.aniName = "Velvet Chipmunk";
                    break;
                case 202:
                    _0x2ef3c3.aniName = "Chipmonk";
                    break;
            }
            _0x2ef3c3.skinName = this.getSkinName();
            _0x2ef3c3.aniCol = "#FF9000";
            _0x2ef3c3.upgradeText = "UPGRADED to " + _0x2ef3c3.aniName + "!\n Press W to Spit food to boost yourself!";
            return _0x2ef3c3;
        };
        _0xdbad21.prototype.getSkinName = function() {
            return this.getSkinPath() + "/chipmunk" + (this.specType == 0 ? "" : this.specType);
        };
        _0xdbad21.prototype.getSkinPath = function() {
            return "desert/chipmunk/" + this.animalSpecies + this.getSubSpecies();
        };
        _0xdbad21.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };

        function _0xdbad21() {
            _0xdbad21.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0xdbad21, _0x48c056, _0x5c4842);
        var _0x28c171 = Animal;
        _0x23c99f.prototype = Object.create(_0x28c171.prototype);
        _0x23c99f.prototype.constructor = _0x23c99f;
        _0x23c99f.superClass = _0x28c171;
        _0x23c99f.prototype.updateZ = function() {
            if (this.flag_eff_grabbedByFlytrap) {
                this.z = 1100 + this.rad;
            } else if (this.flag_usingAbility) {
                this.z = -157;
            } else if (this.flag_flying || this.flag_eff_tossedInAir) {
                this.z = 2100 + this.rad;
            } else {
                this.z = this.rad;
            }
        };
        _0x23c99f.prototype.animalInfo = function() {
            var _0x42c0a5 = {
                aniCol: "#FF9000"
            };
            switch (this.animalSpecies) {
                case 0:
                    _0x42c0a5.aniName = "Meerkat";
                    break;
                case 100:
                    _0x42c0a5.aniName = "Puumpkat";
                    break;
                case 111:
                    _0x42c0a5.aniName = "Classic Meerkat";
                    break;
                case 112:
                    _0x42c0a5.aniName = "Gold-trim Meerkat";
                    break;
                case 201:
                    _0x42c0a5.aniName = "Scubakat";
                    break;
                case 204:
                    _0x42c0a5.aniName = "Necromancer Meerkat";
                    break;
            }
            _0x42c0a5.skinName = this.getSkinName();
            _0x42c0a5.upgradeText = "UPGRADED to " + _0x42c0a5.aniName + "!\n HOLD to Dig Underground. \nYou can now eat pink cactus fruits!";
            return _0x42c0a5;
        };
        _0x23c99f.prototype.getSkinName = function() {
            return this.getSkinPath() + "/meerkat" + (this.specType == 0 ? "" : this.specType);
        };
        _0x23c99f.prototype.getSkinPath = function() {
            return "desert/meerkat/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x23c99f.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x23c99f.prototype.drawAnimalUnderSkinCircle = function(_0x2f20a5) {
            if (!this.flag_usingAbility) {
                _0x23c99f.superClass.prototype.drawAnimalUnderSkinCircle.call(this, _0x2f20a5);
            }
        };
        _0x23c99f.prototype.drawUnderSkinTail = function(_0x520fc5) {
            if (!this.flag_usingAbility) {
                _0x23c99f.superClass.prototype.drawUnderSkinTail.call(this, _0x520fc5);
            }
        };
        _0x23c99f.prototype.basicDrawSkinImg = function() {
            if (!this.flag_usingAbility) {
                _0x23c99f.superClass.prototype.basicDrawSkinImg.call(this);
                return;
            } else {
                this.setSkinScale();
                _0x39e82d.save();
                var _0x28b613 = _0x28b613 = "skins/" + this.getSkinPath() + "/meerkat1.png";
                var _0x2dabc3 = this.getSkinImageObj(_0x28b613);
                if (_0x2dabc3) {
                    var _0x3bf54c = this.skinScale;
                    var _0x4cb223 = this.skinRad;
                    _0x39e82d.drawImage(_0x2dabc3, -_0x4cb223 * _0x3bf54c, -_0x4cb223 * _0x3bf54c, _0x4cb223 * 2 * _0x3bf54c, _0x4cb223 * 2 * _0x3bf54c);
                }
                _0x39e82d.restore();
            }
        };

        function _0x23c99f() {
            _0x23c99f.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x23c99f, _0x48c056, _0x28b669);
        var _0x28c171 = Animal;
        _0x5c71c9.prototype = Object.create(_0x28c171.prototype);
        _0x5c71c9.prototype.constructor = _0x5c71c9;
        _0x5c71c9.superClass = _0x28c171;
        _0x5c71c9.prototype.animalInfo = function() {
            var _0x42a3bb = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x42a3bb.aniName = "Fennec Fox";
                    break;
                case 111:
                    _0x42a3bb.aniName = "Classic Fennec Fox";
                    break;
                case 112:
                    _0x42a3bb.aniName = "Gold-trim Fennec Fox";
                    break;
                case 202:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0x42a3bb.aniName = "Fire Fox";
                            break;
                        case 1:
                            _0x42a3bb.aniName = "Purple Fire Fox";
                    }
                    break;
            }
            _0x42a3bb.aniCol = "#FF9000";
            _0x42a3bb.skinName = this.getSkinName();
            _0x42a3bb.upgradeText = "UPGRADED to " + _0x42a3bb.aniName + "!\nFennec Fox has very sharp ears (can see animals in hiding holes).\n Press W to Whine!";
            return _0x42a3bb;
        };
        _0x5c71c9.prototype.getSkinPath = function(_0xbf2489) {
            return "desert/fennecfox/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x5c71c9.prototype.getSkinName = function() {
            var _0x5b597d = this.getSkinPath() + "/fennecfox";
            _0x5b597d += this.specType == 0 ? "" : this.specType;
            return _0x5b597d;
        };
        _0x5c71c9.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            if (this.animalSpecies === 202) {
                return "/" + this.animalSubSpecies;
            } else {
                return "";
            }
        };
        _0x5c71c9.prototype.flapStart = 0;
        _0x5c71c9.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                this.flapStart = 0;
                return;
            } else if (this.flapStart == 0) {
                this.flapStart = _0x4ec996;
            }
            this.setSkinScale();
            var _0x2bafa6 = 0.5;
            var _0x249a23 = _0x5981a2 != _0x4051d6 ? _0x4e4bab("fennecfox", this.spawnTime) : 2;
            _0x249a23 = Math.abs(Math.round(_0x249a23));
            var _0x36c1bc = "skins/" + this.getSkinPath() + "/ears" + _0x249a23 + ".png";
            var _0x32c4f2 = this.getSkinImageObj(_0x36c1bc);
            if (_0x32c4f2) {
                var _0x4e5eec = this.skinScale;
                var _0x489039 = this.skinRad;
                _0x39e82d.drawImage(_0x32c4f2, -_0x489039 * _0x4e5eec, -_0x489039 * _0x4e5eec, _0x489039 * 2 * _0x4e5eec, _0x489039 * 2 * _0x4e5eec);
            }
        };

        function _0x5c71c9() {
            _0x5c71c9.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x5c71c9, _0x48c056, _0x8a7dab);
        var _0x28c171 = Animal;
        _0x2ed8c8.prototype = Object.create(_0x28c171.prototype);
        _0x2ed8c8.prototype.constructor = _0x2ed8c8;
        _0x2ed8c8.superClass = _0x28c171;
        _0x2ed8c8.prototype.animalInfo = function() {
            var _0x3fb3fc = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x3fb3fc.aniName = "Gobi Bear";
                    break;
                case 111:
                    _0x3fb3fc.aniName = "Classic Gobi Bear";
                    break;
                case 112:
                    _0x3fb3fc.aniName = "Gold-trim Gobi Bear";
                    break;
                case 202:
                    _0x3fb3fc.aniName = "Gobee Bear";
                    break;
            }
            _0x3fb3fc.aniCol = "#FF9000";
            _0x3fb3fc.skinName = this.getSkinName();
            _0x3fb3fc.upgradeText = "UPGRADED to " + _0x3fb3fc.aniName + "!\n";
            return _0x3fb3fc;
        };
        _0x2ed8c8.prototype.getSkinName = function() {
            return this.getSkinPath() + "/gobibear" + (this.flag_usingAbility ? "1" : "");
        };
        _0x2ed8c8.prototype.getSkinPath = function() {
            return "desert/gobibear/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x2ed8c8.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x2ed8c8.prototype.biteStart = 0;
        _0x2ed8c8.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                this.biteStart = 0;
                return;
            } else {
                if (this.biteStart == 0) {
                    this.biteStart = _0x4ec996;
                }
                if (_0x4ec996 - this.biteStart < 400) {
                    if (this.specType != 0 && this.specType != undefined) {
                        var _0x199acb = this.getSkinImageObj("skins/" + this.getSkinPath() + "/gobibear_head1.png");
                        var _0x4e3fcc = (_0x4ec996 - this.biteStart) / 1000;
                        var _0x7648a6 = this.skinScale * 1.1;
                        var _0x3d821c = this.skinRad;
                        if (_0x199acb) {
                            frame = 0;
                            if (!this.flag_flying) {
                                flapAmount = 3;
                                flapDur = 0.5;
                                frame = _0x5981a2 != _0x4051d6 ? _0x1b594e(_0x4e3fcc, flapDur, flapAmount, 2) : this.birdNoAnimationFlyWingAngle;
                            }
                            _0x39e82d.save();
                            var _0x3d821c = this.rad;
                            _0x39e82d.drawImage(_0x199acb, -_0x3d821c * _0x7648a6, (-_0x3d821c + _0x3d821c * 0.1) * _0x7648a6 + frame, _0x3d821c * 2 * _0x7648a6, _0x3d821c * 2 * _0x7648a6);
                            _0x39e82d.restore();
                        }
                    }
                }
            }
        };

        function _0x2ed8c8() {
            _0x2ed8c8.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x2ed8c8, _0x48c056, _0x2a7ad6);
        var _0x28c171 = Animal;
        _0x296d29.prototype = Object.create(_0x28c171.prototype);
        _0x296d29.prototype.constructor = _0x296d29;
        _0x296d29.superClass = _0x28c171;
        _0x296d29.prototype.animalInfo = function() {
            var _0x19c50a = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x19c50a.aniName = "Camel";
                    break;
                case 100:
                    _0x19c50a.aniName = "Doomedarius";
                    break;
                case 111:
                    _0x19c50a.aniName = "Classic Camel";
                    break;
                case 112:
                    _0x19c50a.aniName = "Gold-trim Camel";
                    break;
                case 201:
                    _0x19c50a.aniName = "Balloon Warrior";
                    break;
                case 202:
                    _0x19c50a.aniName = "Fungal Camel";
                    break;
            }
            _0x19c50a.skinName = this.getSkinName();
            _0x19c50a.aniCol = "#FF9000";
            _0x19c50a.upgradeText = "UPGRADED to " + _0x19c50a.aniName + "!\n Press W to Spit. Try eating oranges from trees!";
            return _0x19c50a;
        };
        _0x296d29.prototype.getSkinName = function() {
            let _0x4a729d = this.getSkinPath() + "/camel";
            _0x4a729d += this.specType == 0 ? "" : this.specType;
            return _0x4a729d;
        };
        _0x296d29.prototype.getSkinPath = function() {
            return "desert/camel/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x296d29.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x296d29.prototype.getAbilityInfo = function(_0x2109e9) {
            var _0x3e1035 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x3e1035.abilName = "Spit!";
                    break;
                case 100:
                    _0x3e1035.abilName = "Cannon Shots!";
                    break;
                case 201:
                    _0x3e1035.abilName = "Water Balloons!";
                    break;
            }
            _0x3e1035.abilImg = "skins/desert/camel/" + this.animalSpecies + this.getSubSpecies() + "/spit.png";
            _0x3e1035.skinThemeID = this.skinThemeID;
            _0x3e1035.mopeSeasonID = this.mopeSeasonID;
            return _0x3e1035;
        };
        _0x296d29.prototype.biteStart = 0;
        _0x296d29.prototype.flapAmount = 3;
        _0x296d29.prototype.flapDur = 1;
        _0x296d29.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                this.biteStart = 0;
                return;
            } else {
                if (this.biteStart == 0) {
                    this.biteStart = _0x4ec996;
                }
                if (this.specType != 0 && this.specType != undefined) {
                    var _0x2c66c7 = "skins/" + this.getSkinPath() + "/camel_head1.png";
                    var _0x5e5218 = this.getSkinImageObj(_0x2c66c7);
                    var _0x157c1f = (_0x4ec996 - this.biteStart) / 1000;
                    var _0x2dfbb5 = this.skinScale * 1.1;
                    var _0x35e7f8 = this.skinRad;
                    if (_0x5e5218) {
                        var _0x11d239 = 0;
                        if (!this.flag_flying) {
                            _0x11d239 = _0x5981a2 != _0x4051d6 ? _0x1b594e(_0x157c1f, this.flapDur, this.flapAmount, 2) : this.flapAmount;
                        }
                        _0x39e82d.save();
                        var _0x35e7f8 = this.rad;
                        _0x39e82d.drawImage(_0x5e5218, -_0x35e7f8 * _0x2dfbb5, (-_0x35e7f8 + _0x35e7f8 * 0.1) * _0x2dfbb5 - _0x11d239, _0x35e7f8 * 2 * _0x2dfbb5, _0x35e7f8 * 2 * _0x2dfbb5);
                        _0x39e82d.restore();
                    }
                }
            }
        };

        function _0x296d29() {
            _0x296d29.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x296d29, _0x48c056, _0x3672b1);
        var _0x28c171 = GameObj;
        _0x189c68.prototype = Object.create(_0x28c171.prototype);
        _0x189c68.prototype.constructor = _0x189c68;
        _0x189c68.superClass = _0x28c171;
        _0x189c68.prototype.updateZ = function() {
            this.z = 1005;
        };
        _0x189c68.prototype.customDraw = function(_0x4c7925) {
            var _0x46e094 = "";
            if (this.speciesType == 201) {
                _0x46e094 = "skins/desert/camel/" + this.speciesType + "/spit" + this.specType + ".png";
            } else {
                _0x46e094 = "skins/desert/camel/" + this.speciesType + "/spit.png";
            }
            var _0x4eb12e = this.getSkinImageObj(_0x46e094);
            if (_0x4eb12e) {
                _0x39e82d.save();
                var _0x539d4f = this.rad * 2;
                _0x39e82d.rotate(this.angle);
                _0x39e82d.drawImage(_0x4eb12e, -_0x539d4f, -_0x539d4f, _0x539d4f * 2, _0x539d4f * 2);
                _0x39e82d.restore();
            }
        };
        _0x189c68.prototype.getSkinImageObj = function(_0x100827) {
            var _0x4e6d0c = this.speciesType === 100 || this.speciesType === 201 ? 1 : 2;
            var _0x113709 = "./assets/s/" + _0x4e6d0c + "/" + _0x100827;
            if (this.skinThemeID > 0) {
                _0x113709 = "./assets/t/" + this.skinThemeID + "/" + _0x100827;
            }
            return _0x4172bb(_0x113709, function(_0xc1558d) {
                console.log(_0xc1558d.src);
            });
        };

        function _0x189c68() {
            _0x189c68.superClass.call(this, _0x5f258f);
        }
        _0x35d268.setCustomClassForGameObjType(_0x189c68, _0x5f258f);
        var _0x28c171 = Animal;
        _0x374f63.prototype = Object.create(_0x28c171.prototype);
        _0x374f63.prototype.constructor = _0x374f63;
        _0x374f63.superClass = _0x28c171;
        _0x374f63.prototype.animalInfo = function() {
            var _0x10e519 = {
                aniCol: "#FF9000"
            };
            switch (this.animalSpecies) {
                case 0:
                    _0x10e519.aniName = "Warthog";
                    break;
                case 100:
                    _0x10e519.aniName = "The Burlone";
                    break;
                case 111:
                    _0x10e519.aniName = "Classic Warthog";
                    break;
                case 112:
                    _0x10e519.aniName = "Gold-trim Warthog";
                    break;
                case 200:
                    _0x10e519.aniName = "WarT. Hog";
                    break;
                case 201:
                    _0x10e519.aniName = "Flame Tiki";
                    break;
                case 202:
                    _0x10e519.aniName = "Dark Matter Warthog";
                    break;
                case 204:
                    _0x10e519.aniName = "Candy Corn Warthog";
                    break;
                case 220:
                    _0x10e519.aniName = "Dark Matter Warthog";
                    break;
            }
            _0x10e519.skinName = this.getSkinName();
            _0x10e519.upgradeText = "UPGRADED to " + _0x10e519.aniName + "!\nPress W to Dig and Charge.";
            return _0x10e519;
        };
        _0x374f63.prototype.getSkinName = function() {
            let _0x8f5a95 = this.getSkinPath() + "/warthog";
            _0x8f5a95 += this.specType == 0 ? "" : this.specType;
            return _0x8f5a95;
        };
        _0x374f63.prototype.getSkinPath = function() {
            return "desert/warthog/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x374f63.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x374f63.prototype.flapStart = 0;
        _0x374f63.prototype.drawUnderSkinImgOutline = function() {
            console.log(this.teamID);
            _0x374f63.superClass.prototype.drawUnderSkinImgOutline.call(this);
            if (this.flag_usingAbility && !this.isCharging) {
                var _0x618fab = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x5a9a32 = 1.5;
                var _0x273a06 = 1;
                var _0x49a84f = _0x273a06 * Math.sin(Math.PI * 2 / _0x5a9a32 * _0x618fab);
                _0x39e82d.save();
                _0x39e82d.globalAlpha *= 0.8 - _0x49a84f * 0.2;
                _0x466d9b(0, this.rad * 0.3, this.rad * (0.9 + _0x49a84f * 0.12), "#b69327");
                _0x466d9b(0, -this.rad * 0.2, this.rad * (0.9 + _0x49a84f * 0.09), "#b69327");
                _0x39e82d.restore();
            }
        };
        _0x374f63.prototype.drawUnderSkinImg = function() {
            if (!this.flag_usingAbility) {
                this.flapStart = 0;
                return;
            } else if (this.flapStart == 0) {
                this.flapStart = _0x4ec996;
            }
            if (this.flag_usingAbility && !this.isCharging) {
                var _0x50f027 = this.rad - this.outlineW;
                var _0x5cf1e1 = 500 / 340;
                this.setSkinScale();
                var _0x4dae89 = 0.8;
                var _0x3637c1 = (_0x4ec996 - this.flapStart) / 1000;
                var _0x3aed90 = _0x5981a2 != _0x4051d6 ? _0x1b594e(_0x3637c1, _0x4dae89, 1, 1) : 0;
                _0x3aed90 = Math.round(_0x3aed90);
                if (_0x3aed90 < 0) {
                    _0x3aed90 = 0;
                }
                var _0x23d2cd = "skins/" + this.getSkinPath() + "/leg" + _0x3aed90 + ".png";
                var _0x45d014 = this.getSkinImageObj(_0x23d2cd);
                if (_0x45d014) {
                    var _0x5cf1e1 = this.skinScale;
                    var _0x50f027 = this.skinRad;
                    _0x39e82d.drawImage(_0x45d014, -_0x50f027 * _0x5cf1e1, -_0x50f027 * _0x5cf1e1, _0x50f027 * 2 * _0x5cf1e1, _0x50f027 * 2 * _0x5cf1e1);
                }
            }
        };
        _0x374f63.prototype.getAbilityInfo = function(_0x4f5681) {
            var _0x2836d5 = {
                abilName: "Dig Food\nSudden Charge"
            };
            _0x2836d5.abilImg = "skins/" + this.getSkinPath() + "/warthog.png";
            _0x2836d5.skinThemeID = this.skinThemeID;
            _0x2836d5.mopeSeasonID = this.mopeSeasonID;
            return _0x2836d5;
        };
        _0x374f63.prototype.isCharging = false;
        _0x374f63.prototype.readCustomData_onNewlyVisible = function(_0x1ab74f) {
            _0x374f63.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x1ab74f);
            this.customUpdatedProperty(_0x4b423e, _0x1ab74f);
        };
        _0x374f63.prototype.customUpdatedProperty = function(_0x5ac4d2, _0xddb437) {
            if (_0x5ac4d2 == _0x4b423e) {
                this.isCharging = _0xddb437.readUInt8() == 1;
            }
        };

        function _0x374f63() {
            _0x374f63.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x374f63, _0x48c056, _0x41ea0f);
        var _0x28c171 = Animal;
        _0x25a1c8.prototype = Object.create(_0x28c171.prototype);
        _0x25a1c8.prototype.constructor = _0x25a1c8;
        _0x25a1c8.superClass = _0x28c171;
        _0x25a1c8.prototype.animalInfo = function() {
            var _0x297616 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x297616.aniName = "Hyena";
                    break;
                case 111:
                    _0x297616.aniName = "Classic Hyena";
                    break;
                case 112:
                    _0x297616.aniName = "Gold-trim Hyena";
                    break;
                case 201:
                    _0x297616.aniName = "DJ Hyena";
                    break;
                case 202:
                    _0x297616.aniName = "Anubis Hyena";
                    break;
            }
            _0x297616.aniCol = "#FF9000";
            _0x297616.skinName = this.getSkinName();
            _0x297616.upgradeText = "UPGRADED to " + _0x297616.aniName + "!\nHyenas have a very loud and scary laugh!\nPress W to Laugh.";
            return _0x297616;
        };
        _0x25a1c8.prototype.getSkinName = function() {
            return this.getSkinPath() + "/hyena" + (this.specType == 0 ? "" : this.specType);
        };
        _0x25a1c8.prototype.getSkinPath = function() {
            return "desert/hyena/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x25a1c8.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x25a1c8.prototype.biteStart = 0;
        _0x25a1c8.prototype.flapAmount = 3;
        _0x25a1c8.prototype.flapDur = 1;
        _0x25a1c8.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                this.biteStart = 0;
                return;
            } else {
                if (this.biteStart == 0) {
                    this.biteStart = _0x4ec996;
                }
                if (this.specType != 0 && this.specType != undefined) {
                    var _0x366c2e = this.getSkinImageObj("skins/" + this.getSkinPath() + "/hyena_head.png");
                    var _0x4c2603 = (_0x4ec996 - this.biteStart) / 1000;
                    var _0x10d45e = this.skinScale * 1.1;
                    var _0x2fb14b = this.skinRad;
                    if (_0x366c2e) {
                        frame = 0;
                        if (!this.flag_flying) {
                            frame = _0x5981a2 != _0x4051d6 ? _0x1b594e(_0x4c2603, this.flapDur, this.flapAmount, 2) : this.flapAmount;
                        }
                        _0x39e82d.save();
                        var _0x2fb14b = this.rad;
                        _0x39e82d.drawImage(_0x366c2e, -_0x2fb14b * _0x10d45e, (-_0x2fb14b + _0x2fb14b * 0.1) * _0x10d45e + frame, _0x2fb14b * 2 * _0x10d45e, _0x2fb14b * 2 * _0x10d45e);
                        _0x39e82d.restore();
                    }
                }
            }
        };
        _0x25a1c8.prototype.getAbilityInfo = function(_0x33d495) {
            var _0x11531a = {
                abilName: "Laughs!"
            };
            _0x11531a.abilImg = "skins/" + this.getSkinPath() + "/hyena2.png";
            _0x11531a.skinThemeID = this.skinThemeID;
            _0x11531a.mopeSeasonID = this.mopeSeasonID;
            return _0x11531a;
        };
        _0x25a1c8.prototype.getSkinImageObj = function(_0x303f44) {
            var _0x47f07d = this.animalSpecies === 201 ? 1 : this.mopeSeasonID;
            return this.getSkinImageObjForSeason(_0x303f44, _0x47f07d);
        };

        function _0x25a1c8() {
            _0x25a1c8.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x25a1c8, _0x48c056, _0x2bcad6);
        var _0x5899d5 = _0x1c9828;
        var _0x28c171 = _0xa0a2ad;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x1c9828.prototype.updateZ = function() {
            this.z = 100002;
        };
        _0x1c9828.prototype.customDraw = function(_0x5691dd) {
            _0x39e82d.save();
            var _0x12a645 = this.getSkinImageObj("skins/desert/hyena/" + this.speciesType + "/laugh.png");
            if (_0x12a645) {
                var _0xaa8977 = _0x4ec996 - this.spawnTime;
                var _0x578e7a = _0xaa8977 / 1000;
                var _0x29ed16 = 2;
                var _0x307ef3 = 1.5;
                rShift = _0x307ef3 * Math.sin(Math.PI * 2 / _0x29ed16 * _0x578e7a);
                var _0x452dd2 = _0x1b594e(_0x578e7a, 5.1, 1, 1);
                _0x452dd2 = _0x2944ee(_0x452dd2, 0, 1);
                _0x39e82d.globalAlpha = _0x452dd2;
                var _0x874318 = 1;
                var _0x3331ec = this.rad;
                _0x39e82d.rotate(this.angle + _0x4bfce6(-90));
                _0x39e82d.drawImage(_0x12a645, -_0x3331ec * _0x874318, -_0x3331ec * _0x874318, _0x3331ec * 2 * _0x874318, _0x3331ec * 2 * _0x874318);
            }
            _0x39e82d.restore();
            this.drawChat();
        };
        _0x1c9828.prototype.drawChat = function() {
            if (this.aLine == null) {
                return;
            }
            _0x39e82d.save();
            _0x39e82d.font = "10px Arial";
            _0x39e82d.lineWidth = 1;
            _0x39e82d.textAlign = "center";
            _0x39e82d.textBaseline = "middle";
            var _0x4315a5 = this.aLine;
            var _0x55daee = _0x4ec996 > _0x4315a5.chatFadeT ? 0 : 1;
            _0x4315a5.chatA += (_0x55daee - _0x4315a5.chatA) * 0.1;
            _0x39e82d.shadowOffsetX = 0;
            _0x39e82d.shadowOffsetY = 0;
            if (_0x4315a5.chatA < 0.02) {
                this.aLine = null;
            }
            var _0x125862 = _0x39e82d.measureText(_0x4315a5.chatTxt).width;
            var _0xf9010b = 10;
            var _0x2673d5 = 1;
            var _0x42e8ee = 1;
            _0x39e82d.globalAlpha = _0x4315a5.chatA * 0.8;
            _0x39e82d.fillStyle = _0x3a1319(this.curBiome);
            _0x39e82d.fillRect(this.x - _0x2673d5 - _0x125862 / 2, this.y - this.rad - _0xf9010b / 2 - _0x42e8ee, _0x125862 + _0x2673d5 * 2, _0xf9010b + _0x42e8ee * 2);
            _0x39e82d.fillStyle = "#F1C34C";
            if (_0x5981a2 != _0x4051d6) {
                _0x39e82d.shadowOffsetX = 1;
                _0x39e82d.shadowOffsetY = 1;
                _0x39e82d.shadowColor = "black";
            }
            _0x39e82d.globalAlpha = _0x4315a5.chatA;
            _0x39e82d.fillText(_0x4315a5.chatTxt, this.x, this.y - this.rad);
            _0x39e82d.restore();
        };

        function _0x1c9828() {
            _0x1c9828.superClass.call(this);
        }
        _0x1c9828.prototype.aLine = null;
        _0x1c9828.prototype.readCustomData_onNewlyVisible = function(_0x25bee9) {
            _0x1c9828.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x25bee9);
            this.aLine = {
                chatTxt: this.speciesType == 201 ? "Oh yeah!" : "Hehehe",
                chatFadeT: _0x4ec996 + 4000,
                chatA: 0
            };
        };
        _0x1c9828.prototype.getSkinImageObj = function(_0x1846d5) {
            var _0x6b89c7 = this.speciesType === 201 ? 1 : this.mopeSeasonID;
            return this.getSkinImageObjForSeason(_0x1846d5, _0x6b89c7);
        };
        _0x35d268.setCustomClassForGameObjType(_0x1c9828, _0x651296, _0x2ea373);
        var _0x28c171 = Animal;
        _0xd7df17.prototype = Object.create(_0x28c171.prototype);
        _0xd7df17.prototype.constructor = _0xd7df17;
        _0xd7df17.superClass = _0x28c171;
        _0xd7df17.prototype.animalInfo = function() {
            var _0x3904ce = {
                aniCol: "#FF9000"
            };
            switch (this.animalSpecies) {
                case 0:
                    _0x3904ce.aniName = "Rattle Snake";
                    break;
                case 111:
                    _0x3904ce.aniName = "Classic Rattle Snake";
                    break;
                case 112:
                    _0x3904ce.aniName = "Gold-trim Rattle Snake";
                    break;
                case 100:
                    _0x3904ce.aniName = "Gummy Viper";
                    break;
            }
            _0x3904ce.upgradeText = "UPGRADED to " + _0x3904ce.aniName + "!\nThe " + _0x3904ce.aniName + " is a very dangerous animal. \nHOLD W to Rattle.";
            _0x3904ce.skinName = this.getSkinName();
            return _0x3904ce;
        };
        _0xd7df17.prototype.getSkinName = function() {
            return this.getSkinPath() + "/rattlesnake" + (this.specType == 0 ? "" : this.specType);
        };
        _0xd7df17.prototype.getSkinPath = function() {
            return "desert/rattlesnake/" + this.animalSpecies + this.getSubSpecies();
        };
        _0xd7df17.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0xd7df17.prototype.biteStart = 0;
        _0xd7df17.prototype.drawUnderSkinImg = function() {
            if (!this.flag_usingAbility) {
                var _0x17650f = this.rad - this.outlineW;
                var _0x4d19a0 = 500 / 340;
                var _0x9c355b = this.getSkinImageObj("skins/" + this.getSkinPath() + "/tongue.png");
                var _0x20e3fb = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x50d193 = _0x5981a2 == _0x4051d6 ? 0 : _0x1b594e(_0x20e3fb, 0.7, 6, 0.5);
                var _0x2c9144 = _0x5981a2 == _0x4051d6 ? 0 : 5;
                if (_0x9c355b) {
                    _0x39e82d.drawImage(_0x9c355b, -_0x17650f * _0x4d19a0, -(_0x17650f + _0x2c9144 + _0x50d193) * _0x4d19a0, _0x17650f * 2 * _0x4d19a0, _0x17650f * 2 * _0x4d19a0);
                }
            }
        };
        _0xd7df17.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                this.biteStart = 0;
                return;
            } else {
                if (this.biteStart == 0) {
                    this.biteStart = _0x4ec996;
                }
                if (this.specType != 0 && this.specType != undefined) {
                    var _0x439142 = this.getSkinImageObj("skins/" + this.getSkinPath() + "/rattlesnake_head.png");
                    var _0x48b7e4 = this.skinScale * 1;
                    var _0x2fa002 = this.skinRad;
                    if (_0x439142) {
                        _0x39e82d.save();
                        var _0x2fa002 = this.rad;
                        _0x39e82d.drawImage(_0x439142, -_0x2fa002 * _0x48b7e4, -_0x2fa002 * 1.2 * _0x48b7e4, _0x2fa002 * 2 * _0x48b7e4, _0x2fa002 * 2 * _0x48b7e4);
                        _0x39e82d.restore();
                    }
                }
                var _0x57f0a8 = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x55a90c = _0x5981a2 != _0x4051d6 ? _0x1b594e(_0x57f0a8, 0.1, 0.2, 2) : 0;
                var _0x2fa002 = this.rad * 1.3;
                var _0x3593f2 = 0;
                var _0xc5aa93 = 0;
                var _0xdbcdb6 = 0;
                var _0x22f3a7 = this.getSkinImageObj("skins/" + this.getSkinPath() + "/rattle.png");
                if (_0x22f3a7) {
                    _0x39e82d.save();
                    var _0x416eda = -(-_0xc5aa93 + _0x55a90c) * _0x4bfce6(-(_0x3593f2 - 5));
                    var _0x48b7e4 = this.skinScale * 1.2;
                    _0x39e82d.rotate(_0x4bfce6(-_0xdbcdb6) + _0x416eda);
                    _0x39e82d.drawImage(_0x22f3a7, -_0x2fa002 * _0x48b7e4, -_0x2fa002 * 0.7 * _0x48b7e4, _0x2fa002 * 2 * _0x48b7e4, _0x2fa002 * 2 * _0x48b7e4);
                    _0x39e82d.restore();
                }
            }
        };
        _0xd7df17.prototype.getAbilityInfo = function(_0x4ebc06) {
            var _0x46832b = {
                abilName: "Rattle!"
            };
            _0x46832b.abilImg = "skins/" + this.getSkinPath() + "/rattlesnake.png";
            _0x46832b.skinThemeID = this.skinThemeID;
            _0x46832b.mopeSeasonID = this.mopeSeasonID;
            return _0x46832b;
        };

        function _0xd7df17() {
            _0xd7df17.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0xd7df17, _0x48c056, _0x64c9a4);
        var _0x5899d5 = _0xbf56ef;
        var _0x28c171 = _0xa0a2ad;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0xbf56ef.prototype.updateZ = function() {
            this.z = 100002;
        };
        _0xbf56ef.prototype.customDraw = function(_0x6ce9ae) {
            _0x39e82d.save();
            var _0x311419 = this.getSkinImageObj("skins/desert/rattlesnake/" + this.speciesType + "/circle.png");
            if (_0x311419) {
                var _0x28376f = _0x4ec996 - this.spawnTime;
                var _0x51e86d = _0x28376f / 1000;
                var _0x23e7fb = 2;
                var _0x46dae1 = 1.5;
                rShift = _0x46dae1 * Math.sin(Math.PI * 2 / _0x23e7fb * _0x51e86d);
                var _0x41c200 = _0x1b594e(_0x51e86d, 5.1, 1, 1);
                _0x41c200 = _0x2944ee(_0x41c200, 0, 1);
                _0x39e82d.globalAlpha = _0x41c200;
                var _0x4502e6 = 1;
                var _0x17fccc = this.rad * 0.8;
                _0x39e82d.drawImage(_0x311419, -_0x17fccc * _0x4502e6, -_0x17fccc * _0x4502e6, _0x17fccc * 2 * _0x4502e6, _0x17fccc * 2 * _0x4502e6);
            }
            _0x39e82d.restore();
        };
        _0xbf56ef.prototype.getSkinImageObj = function(_0x2986b4) {
            var _0x1b8cbe = this.speciesType === 100 ? 1 : this.mopeSeasonID;
            var _0x647faf = "./assets/s/" + _0x1b8cbe + "/" + _0x2986b4;
            if (this.skinThemeID > 0) {
                _0x647faf = "./assets/t/" + this.skinThemeID + "/" + _0x2986b4;
            }
            return _0x4172bb(_0x647faf, function(_0x5db004) {
                console.log(_0x5db004.src);
            });
        };

        function _0xbf56ef() {
            _0xbf56ef.superClass.call(this);
        }
        _0x35d268.setCustomClassForGameObjType(_0xbf56ef, _0x651296, _0x330ea3);
        var _0x28c171 = Animal;
        _0x10bbf7.prototype = Object.create(_0x28c171.prototype);
        _0x10bbf7.prototype.constructor = _0x10bbf7;
        _0x10bbf7.superClass = _0x28c171;
        _0x10bbf7.prototype.getSkinName2 = function() {
            var _0x5e470f = this.getSkinPath() + "/vulture";
            return _0x5e470f;
        };
        _0x10bbf7.prototype.getSkinName = function() {
            let _0x239bdd = this.getSkinPath() + "/vulture";
            if (this.flag_flying && this.flag_usingAbility) {
                _0x239bdd += 2;
            } else {
                _0x239bdd += this.specType == 0 ? "" : this.specType;
            }
            return _0x239bdd;
        };
        _0x10bbf7.prototype.getSkinPath = function() {
            return "desert/vulture/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x10bbf7.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x10bbf7.prototype.getAbilityInfo = function(_0x53b20a) {
            var _0x18195a = {
                abilName: "Fly/ Pickup Bones"
            };
            _0x18195a.abilImg = "skins/" + this.getSkinPath() + "/vulture.png";
            _0x18195a.skinThemeID = this.skinThemeID;
            _0x18195a.mopeSeasonID = this.mopeSeasonID;
            return _0x18195a;
        };
        _0x10bbf7.prototype.animalInfo = function() {
            var _0x281478 = {
                aniName: "Vulture"
            };
            switch (this.animalSpecies) {
                case 1:
                    _0x281478.aniName = "Argentavis";
                    break;
                case 100:
                    _0x281478.aniName = "Vulgeist";
                    break;
                case 111:
                    _0x281478.aniName = "Classic Vulture";
                    break;
                case 112:
                    _0x281478.aniName = "Gold-trim Vulture";
                    break;
                case 204:
                    _0x281478.aniName = "Acid Husk";
                    break;
            }
            _0x281478.aniCol = "#FF9000";
            _0x281478.skinName = this.getSkinName();
            _0x281478.upgradeText = "UPGRADED to " + (this.animalSpecies == 1 ? "Rare " : "") + _0x281478.aniName + "!\nPress W to Grab/Drop bones" + (this.animalSpecies == 1 ? " and animals" : "") + " on other animals,\n Try Eating bones too!";
            return _0x281478;
        };
        _0x10bbf7.prototype.getHead = function(_0x51da63, _0x39a585) {
            var _0x43acdd = this.flag_flying ? "1" : "1";
            var _0x51d7f2 = "skins/" + this.getSkinName2() + "_head" + _0x43acdd + ".png";
            return _0x51d7f2;
        };
        _0x10bbf7.prototype.getWing = function(_0x4aebac, _0x3e58a9, _0xcff6f0) {
            var _0x48c8c5 = "skins/" + this.getSkinName2() + "_wing" + _0x3e58a9 + ".png";
            return _0x48c8c5;
        };
        _0x10bbf7.prototype.flaps = 0;
        _0x10bbf7.prototype.flapsMod = 3;
        _0x10bbf7.prototype.countFlap = true;
        _0x10bbf7.prototype.canFlap = _0x5981a2 != _0x4051d6;
        _0x10bbf7.prototype.resumeFlapT = 0;
        _0x10bbf7.prototype.lastFlapFrame = 0;
        _0x10bbf7.prototype.sF = -1;
        _0x10bbf7.prototype.wF = 1;
        _0x10bbf7.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                return;
            }
            var _0x439c41 = "skins";
            if (!_0x1d523b && _0x5981a2 != _0x4051d6 && !RVJsettings.performance) {
                if (!this.canFlap && this.flag_flying && _0x4ec996 > this.resumeFlapT) {
                    this.canFlap = true;
                }
            } else {
                this.canFlap = false;
            } {
                var _0x50af77 = 500 / 340;
                _0x39e82d.save();
                var _0xc3bdb6 = this.flag_flying ? 45 : 47;
                var _0x32df2a = this.flag_flying ? 90 : 45;
                var _0x4c3244 = this.flag_flying ? 0.2 : 0.001;
                var _0x28ec8e = this.flag_flying ? 2.5 : 2.3;
                var _0x41744c = this.flag_flying ? 2.2 : 2.7;
                var _0x249be3 = this.flag_flying ? 1.2 : 1;
                var _0x536ba5 = this.flag_flying ? 0.35 : 0.2;
                var _0x216e0e = this.flag_flying ? "" : "2";
                var _0x23a260 = (_0x4ec996 - this.resumeFlapT) / 1000;
                var _0x39b6d7 = this.canFlap ? _0x1b594e(_0x23a260, _0x249be3, _0x536ba5, 2) : this.birdNoAnimationFlyWingAngle;
                if (this.flag_flying && _0x39b6d7 < 0 && this.countFlap) {
                    this.countFlap = false;
                    this.flaps++;
                    if (this.flaps % this.flapsMod == 0) {
                        this.lastFlapFrame = _0x39b6d7;
                        this.canFlap = false;
                        this.resumeFlapT = +new Date() + 1500;
                    }
                } else if (_0x39b6d7 > 0 && !this.countFlap) {
                    this.countFlap = true;
                }
                if (!this.canFlap) {
                    _0x39b6d7 = this.lastFlapFrame;
                }
                _0x28ec8e += this.sF * _0x39b6d7;
                _0x41744c += this.wF * _0x39b6d7;
                var _0xc1bfed = this.getSkinImageObj(this.getWing("vulture", _0x216e0e + 1, false));
                if (_0xc1bfed) {
                    _0x39e82d.save();
                    var _0x2b8543 = 1;
                    _0x2b8543 = -(-_0x4c3244 + _0x39b6d7);
                    var _0x7187ab = _0x2b8543 * _0x4bfce6(_0x32df2a);
                    var _0x97c809 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(_0xc3bdb6) + _0x7187ab);
                    var _0x4a8c04 = 0;
                    var _0x42c629 = this.rad;
                    var _0x273c0b = _0x97c809 * _0x41744c * 0.62;
                    var _0x9c9b = _0x97c809 * _0x28ec8e;
                    var _0x404aae = 0.2;
                    var _0x4959c3 = 1.7;
                    _0x39e82d.drawImage(_0xc1bfed, _0x4a8c04 + _0x273c0b * -_0x404aae, _0x42c629 + _0x9c9b * -_0x4959c3, _0x273c0b, _0x9c9b);
                    _0x39e82d.restore();
                }
                var _0xc1bfed = this.getSkinImageObj(this.getWing("vulture", _0x216e0e + 2, false));
                if (_0xc1bfed) {
                    _0x39e82d.save();
                    var _0x2b8543 = 1;
                    _0x2b8543 = -(-_0x4c3244 + _0x39b6d7);
                    var _0x7187ab = _0x2b8543 * _0x4bfce6(-_0x32df2a);
                    var _0x97c809 = this.rad * 0.8;
                    _0x39e82d.rotate(_0x4bfce6(-_0xc3bdb6) + _0x7187ab);
                    var _0x4a8c04 = 0;
                    var _0x42c629 = this.rad;
                    var _0x273c0b = _0x97c809 * _0x41744c * 0.62;
                    var _0x9c9b = _0x97c809 * _0x28ec8e;
                    var _0x404aae = 0.8;
                    var _0x4959c3 = 1.7;
                    _0x39e82d.drawImage(_0xc1bfed, _0x4a8c04 + _0x273c0b * -_0x404aae, _0x42c629 + _0x9c9b * -_0x4959c3, _0x273c0b, _0x9c9b);
                    _0x39e82d.restore();
                }
                _0x39e82d.restore();
                if (this.specType != 0 && this.specType != undefined) {
                    var _0x217b7e = this.getSkinImageObj(this.getHead("vulture", false));
                    if (_0x217b7e) {
                        var _0x97c809 = this.rad;
                        var _0x5d6970 = 0;
                        if (this.flag_flying) {
                            _0x5d6970 = (-_0x97c809 + _0x97c809 * 0.4) * _0x50af77;
                        } else {
                            _0x5d6970 = (-_0x97c809 + _0x97c809 * 0.1) * _0x50af77;
                        }
                        _0x39e82d.save();
                        _0x39e82d.drawImage(_0x217b7e, -_0x97c809 * _0x50af77, _0x5d6970, _0x97c809 * 2 * _0x50af77, _0x97c809 * 2 * _0x50af77);
                        _0x39e82d.restore();
                    }
                }
            }
        };

        function _0x10bbf7() {
            _0x10bbf7.superClass.call(this, _0x48c056);
            if (this.resumeFlapT == 0) {
                this.resumeFlapT = +new Date();
            }
        }
        _0x35d268.setCustomClassForGameObjType(_0x10bbf7, _0x48c056, _0x2e29dc);
        var _0x28c171 = GameObj;
        _0x47e826.prototype = Object.create(_0x28c171.prototype);
        _0x47e826.prototype.constructor = _0x47e826;
        _0x47e826.superClass = _0x28c171;
        _0x47e826.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x47e826.prototype.customDraw = function(_0x4170fe) {
            var _0x4d5448 = "gameobj/" + this.oType + "/" + this.oType + ".png";
            var _0xee7ce1 = this.getSkinImageObj(_0x4d5448);
            if (_0xee7ce1) {
                _0x39e82d.save();
                var _0x3882e0 = this.rad * 1;
                _0x39e82d.rotate(this.rPer * 2 * Math.PI);
                _0x39e82d.drawImage(_0xee7ce1, -_0x3882e0, -_0x3882e0, _0x3882e0 * 2, _0x3882e0 * 2);
                _0x39e82d.restore();
            }
        };

        function _0x47e826() {
            _0x47e826.superClass.call(this, _0x175d6e);
        }
        _0x35d268.setCustomClassForGameObjType(_0x47e826, _0x175d6e);
        var _0x28c171 = Animal;
        _0x1c2fe0.prototype = Object.create(_0x28c171.prototype);
        _0x1c2fe0.prototype.constructor = _0x1c2fe0;
        _0x1c2fe0.superClass = _0x28c171;
        _0x1c2fe0.prototype.animalInfo = function() {
            var _0x3d3401 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x3d3401.aniName = "Bison";
                    break;
                case 111:
                    _0x3d3401.aniName = "Classic Bison";
                    break;
                case 112:
                    _0x3d3401.aniName = "Gold-trim Bison";
                    break;
                case 200:
                    _0x3d3401.aniName = "Titan Bison";
                    break;
                case 202:
                    _0x3d3401.aniName = "Minotaur";
                    break;
            }
            _0x3d3401.aniCol = "#FF9000";
            _0x3d3401.skinName = this.getSkinName();
            _0x3d3401.upgradeText = "UPGRADED to " + _0x3d3401.aniName + "!\nHold W to charge and toss opponent in air.";
            return _0x3d3401;
        };
        _0x1c2fe0.prototype.getSpeciesPath = function(_0x2b768f) {
            return "desert/" + _0x2b768f + "/" + this.animalSpecies;
        };
        _0x1c2fe0.prototype.getAbilityInfo = function(_0x186a50) {
            var _0x305d01 = {
                abilName: "Gores!"
            };
            _0x305d01.abilImg = "skins/desert/bison/" + this.animalSpecies + this.getSubSpecies() + "/bison_ability.png";
            _0x305d01.skinThemeID = this.skinThemeID;
            _0x305d01.mopeSeasonID = this.mopeSeasonID;
            return _0x305d01;
        };
        _0x1c2fe0.prototype.getSkinName = function() {
            return this.getSkin() + "/bison" + (this.specType == 0 ? "" : 1);
        };
        _0x1c2fe0.prototype.getSkin = function() {
            return "desert/bison/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x1c2fe0.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x1c2fe0.prototype.drawUnderSkinImgOutline = function() {
            _0x1c2fe0.superClass.prototype.drawUnderSkinImgOutline.call(this);
            if (this.flag_usingAbility && this.isHitingAnimal) {
                this.showBackLeg();
            }
        };
        _0x1c2fe0.prototype.isHitingAnimal = false;
        _0x1c2fe0.prototype.drawSkinCustomization = function() {
            if (this.flag_usingAbility) {
                if (this.specType != 0 && this.specType != undefined) {
                    if (!this.isHitingAnimal && this.specType == 2) {
                        this.isHitingAnimal = true;
                    } {
                        var _0x13180c = this.getSkinImageObj("skins/" + this.getSkin() + "/body_front.png");
                        var _0x2cecea = this.skinScale * 1;
                        var _0x3faaf0 = this.skinRad;
                        if (_0x13180c) {
                            frame = 0;
                            _0x39e82d.save();
                            var _0x3faaf0 = this.rad;
                            _0x39e82d.drawImage(_0x13180c, -_0x3faaf0 * _0x2cecea, -_0x3faaf0 * _0x2cecea, _0x3faaf0 * 2 * _0x2cecea, _0x3faaf0 * 2 * _0x2cecea);
                            _0x39e82d.restore();
                        }
                    }
                    var _0x13180c = this.getSkinImageObj("skins/" + this.getSkin() + "/bison_head" + this.specType + ".png");
                    var _0x2cecea = this.skinScale * 1.01;
                    var _0x3faaf0 = this.skinRad;
                    if (_0x13180c) {
                        frame = 0;
                        _0x39e82d.save();
                        var _0x3faaf0 = this.rad;
                        _0x39e82d.drawImage(_0x13180c, -_0x3faaf0 * _0x2cecea, (-_0x3faaf0 + _0x3faaf0 * 0.2) * _0x2cecea + frame, _0x3faaf0 * 2 * _0x2cecea, _0x3faaf0 * 2 * _0x2cecea);
                        _0x39e82d.restore();
                    }
                }
            } else {
                this.legYAnchorF = 0;
                this.legHeightF = 0;
                this.isHitingAnimal = false;
            }
        };
        _0x1c2fe0.prototype.legYAnchorF = 2.3;
        _0x1c2fe0.prototype.legStretchW = 1.3;
        _0x1c2fe0.prototype.legStretchH = 1;
        _0x1c2fe0.prototype.legHeightF = 20;
        _0x1c2fe0.prototype.showBackLeg = function() {
            var _0x571d2a = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x1d4ee2 = _0x1b594e(_0x571d2a, 0.3, 1, 0.5);
            var _0x43299e = "front";
            if (_0x1d4ee2 <= 0.5 && _0x1d4ee2 > 0.1) {
                _0x43299e = "front";
                this.legYAnchorF = 1;
                this.legHeightF = 20;
            } else if (_0x1d4ee2 > 0.5) {
                _0x43299e = "back";
                this.legYAnchorF = 2.3;
                this.legHeightF = -5;
            }
            _0x39e82d.save();
            var _0x23c6a2 = _0x39e82d.globalAlpha;
            _0x39e82d.globalAlpha = _0x23c6a2 * 0.1;
            _0x466d9b(0, 0, this.rad, "#755A2A");
            _0x39e82d.globalAlpha = _0x23c6a2 * 1;
            var _0x55beac = this.getSkinImageObj("skins/" + this.getSkin() + "/" + _0x43299e + "_legs.png");
            if (_0x55beac) {
                var _0x12dedd = _0x1d4ee2;
                var _0x3a9033 = this.rad * 0.6;
                var _0x3d8a30 = 0;
                var _0x77d4af = this.rad;
                var _0x264ea7 = _0x3a9033 * 2 * this.legStretchW;
                var _0x444944 = _0x3a9033 * 2 * _0x12dedd;
                var _0x3ba2cb = 0.5;
                var _0x1b7951 = 0.95;
                _0x39e82d.drawImage(_0x55beac, _0x3d8a30 + _0x264ea7 * -_0x3ba2cb, _0x77d4af + (_0x444944 + this.legHeightF) * (-_0x1b7951 * this.legYAnchorF), _0x264ea7, _0x444944 * this.legStretchH);
            }
            _0x39e82d.restore();
        };

        function _0x1c2fe0() {
            _0x1c2fe0.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x1c2fe0, _0x48c056, _0x5ed5f7);
        var _0x28c171 = Animal;
        _0x2f8581.prototype = Object.create(_0x28c171.prototype);
        _0x2f8581.prototype.constructor = _0x2f8581;
        _0x2f8581.superClass = _0x28c171;
        _0x2f8581.prototype.animalInfo = function() {
            var _0x241e64 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x241e64.aniName = "Komodo Dragon";
                    break;
                case 1:
                    _0x241e64.aniName = "Golden Komodo";
                    break;
                case 2:
                    _0x241e64.aniName = "Night Komodo";
                    break;
                case 111:
                    _0x241e64.aniName = "Classic Komodo Dragon";
                    break;
                case 200:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0x241e64.aniName = "Dowager Varande";
                            break;
                        case 1:
                            _0x241e64.aniName = "Emperor Varande";
                            break;
                    }
                    break;
                case 202:
                    _0x241e64.aniName = "Galaxy Komodo Dragon";
                    break;
            }
            _0x241e64.aniCol = "#FF9000";
            _0x241e64.skinName = this.getSkinName();
            _0x241e64.upgradeText = "UPGRADED to " + _0x241e64.aniName + "!\n" + _0x241e64.aniName + " have very poisonous bite. Press W to bite! Also eat bones.";
            return _0x241e64;
        };
        _0x2f8581.prototype.getAbilityInfo = function(_0x13e75d) {
            var _0xabf4d1 = {
                abilName: "Poison Bite\n(Sweat Prey)"
            };
            _0xabf4d1.abilImg = "skins/" + this.getSkinPath() + "/komododragon_ability.png";
            _0xabf4d1.skinThemeID = this.skinThemeID;
            _0xabf4d1.mopeSeasonID = this.mopeSeasonID;
            return _0xabf4d1;
        };
        _0x2f8581.prototype.getSkinName = function() {
            return this.getSkinPath() + "/komododragon";
        };
        _0x2f8581.prototype.getSkinPath = function() {
            return "desert/komododragon/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x2f8581.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            if (this.animalSpecies == 200) {
                return "/" + this.animalSubSpecies;
            } else {
                return "";
            }
        };
        _0x2f8581.prototype.updateZ = function() {
            if (this.flag_eff_grabbedByFlytrap) {
                this.z = 1100 + this.rad;
            } else if (this.flag_usingAbility && !this.flag_underWater) {
                this.z = 1200 + this.rad;
            } else if (this.flag_flying || this.flag_eff_tossedInAir) {
                this.z = 10000;
                if (this.flag_isGrabbed) {
                    this.z -= this.rad;
                } else {
                    this.z += this.rad;
                }
            } else {
                this.z = this.rad;
            }
        };
        _0x2f8581.prototype.straightTongueOffsetY = -0.45;
        _0x2f8581.prototype.straightTongueScaleF = 1.8;
        _0x2f8581.prototype.drawUnderSkinImg = function() {
            if (this.specType != 0) {
                return;
            }
            this.setSkinScale();
            if (+new Date() < this.spawnTime + 5000) {
                return;
            }
            if (!this.flag_usingAbility && !this.wasLicking && +new Date() > this.nextShowT) {
                var _0xc28ea8 = this.skinScale * this.straightTongueScaleF;
                var _0x537c0d = this.skinRad;
                var _0x4614aa = this.getSkinImageObj("skins/" + this.getSkinPath() + "/tongue.png");
                var _0x9e03b5 = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x4b0ad7 = _0x1b594e(_0x9e03b5, 0.7, 12, 0.5);
                if (_0x4614aa) {
                    _0x39e82d.drawImage(_0x4614aa, -_0x537c0d * _0xc28ea8, (-_0x537c0d + _0x537c0d * this.straightTongueOffsetY) * _0xc28ea8 + _0x4b0ad7, _0x537c0d * 2 * _0xc28ea8, _0x537c0d * 2 * _0xc28ea8);
                }
            }
        };
        _0x2f8581.prototype.tongueAnimationDur = 1;
        _0x2f8581.prototype.tongueScaleF = 1.5;
        _0x2f8581.prototype.tongueAncherY = -0.21;
        _0x2f8581.prototype.showTongue = true;
        _0x2f8581.prototype.nextShowT = 0;
        _0x2f8581.prototype.lastLickSide = 0;
        _0x2f8581.prototype.wasLicking = false;
        _0x2f8581.prototype.isLicking = false;
        _0x2f8581.prototype.lickFaceOffsetY = -0.3;
        _0x2f8581.prototype.biteStart = 0;
        var _0x4d18aa = 0;
        var _0x43efcf = 1.2;
        _0x2f8581.prototype.drawSkinCustomization = function() {
            this.setSkinScale();
            var _0xe4b04 = -0.15;
            if (this.flag_usingAbility) {
                if (this.biteStart == 0) {
                    this.biteStart = _0x4ec996;
                }
                if (this.specType == 1) {
                    {
                        var _0x36d397 = this.getSkinImageObj("skins/" + this.getSkinPath() + "/komododragon_neck.png");
                        if (_0x36d397) {
                            var _0x2a31b7 = (_0x4ec996 - this.biteStart) / 1000;
                            var _0x39500a = 5;
                            var _0x47965f = 1;
                            var _0x357173 = _0x1b594e(_0x2a31b7, _0x47965f, _0x39500a, 1);
                            _0x39e82d.save();
                            var _0x4c92ae = this.rad;
                            var _0x24eb35 = this.skinScale * 1;
                            _0x39e82d.drawImage(_0x36d397, -_0x4c92ae * _0x24eb35, (-_0x4c92ae + _0x4c92ae * -0.05) * _0x24eb35 + _0x357173, _0x4c92ae * 2 * _0x24eb35, _0x4c92ae * 2 * _0x24eb35);
                            _0x39e82d.restore();
                        }
                    } {
                        if (!this.flag_underWater) {
                            var _0x3e4bbe = "skins/" + this.getSkinPath() + "/komododragon_tail.png";
                            var _0x398841 = this.getSkinImageObj(_0x3e4bbe);
                            if (_0x398841) {
                                var _0x24eb35 = this.skinScale * _0x43efcf;
                                var _0x4c92ae = this.skinRad;
                                _0x39e82d.drawImage(_0x398841, -_0x4c92ae * _0x24eb35, (-_0x4c92ae + _0x4c92ae * _0x4d18aa) * _0x24eb35, _0x4c92ae * 2 * _0x24eb35, _0x4c92ae * 2 * _0x24eb35);
                            }
                        }
                    } {
                        var _0x5122fe = this.getSkinImageObj("skins/" + this.getSkinPath() + "/komododragon_attack.png");
                        var _0x24eb35 = this.skinScale * 1;
                        var _0x4c92ae = this.skinRad;
                        var _0x39500a = 12;
                        var _0x47965f = 0.9;
                        var _0x357173 = _0x1b594e(_0x2a31b7, _0x47965f, _0x39500a, 1);
                        if (_0x5122fe) {
                            _0x39e82d.save();
                            _0x39e82d.drawImage(_0x5122fe, -_0x4c92ae * _0x24eb35, -_0x4c92ae * _0x24eb35 + _0x357173, _0x4c92ae * 2 * _0x24eb35, _0x4c92ae * 2 * _0x24eb35);
                            _0x39e82d.restore();
                        }
                    }
                }
            }
            if (this.specType == 0) {
                if (!this.flag_underWater) {
                    var _0x3e4bbe = "skins/" + this.getSkinPath() + "/komododragon_tail.png";
                    var _0x398841 = this.getSkinImageObj(_0x3e4bbe);
                    if (_0x398841) {
                        var _0x24eb35 = this.skinScale * _0x43efcf;
                        var _0x4c92ae = this.skinRad;
                        _0x39e82d.drawImage(_0x398841, -_0x4c92ae * _0x24eb35, (-_0x4c92ae + _0x4c92ae * _0x4d18aa) * _0x24eb35, _0x4c92ae * 2 * _0x24eb35, _0x4c92ae * 2 * _0x24eb35);
                    }
                    var _0x5122fe = this.getSkinImageObj("skins/" + this.getSkinPath() + "/komododragon_attack.png");
                    var _0x24eb35 = this.skinScale * 1;
                    var _0x4c92ae = this.skinRad;
                    var _0x39500a = 12;
                    var _0x47965f = 0.9;
                    var _0x357173 = _0x1b594e(_0x2a31b7, _0x47965f, _0x39500a, 1);
                    if (_0x5122fe) {
                        _0x39e82d.save();
                        _0x39e82d.drawImage(_0x5122fe, -_0x4c92ae * _0x24eb35, -_0x4c92ae * _0x24eb35 + _0x357173, _0x4c92ae * 2 * _0x24eb35, _0x4c92ae * 2 * _0x24eb35);
                        _0x39e82d.restore();
                    }
                    _0x39e82d.save();
                    var _0x3e4bbe = "skins/" + this.getSkinPath() + "/licked_face.png";
                    var _0x398841 = this.getSkinImageObj(_0x3e4bbe);
                    if (_0x398841) {
                        var _0x27055e = this.lickedAmt / 100;
                        _0x39e82d.globalAlpha = _0x27055e;
                        _0x39e82d.drawImage(_0x398841, -_0x4c92ae * _0x24eb35, (-_0x4c92ae + _0x4c92ae * _0xe4b04) * _0x24eb35 + _0x357173, _0x4c92ae * 2 * _0x24eb35, _0x4c92ae * 2 * _0x24eb35);
                    }
                    _0x39e82d.restore();
                    _0x39e82d.save();
                    var _0x3e4bbe = "skins/" + this.getSkinPath() + "/komododragon_head.png";
                    var _0x398841 = this.getSkinImageObj(_0x3e4bbe);
                    if (_0x398841) {
                        var _0x24eb35 = this.skinScale;
                        var _0x4c92ae = this.skinRad;
                        _0x39e82d.drawImage(_0x398841, -_0x4c92ae * _0x24eb35, -_0x4c92ae * _0x24eb35, _0x4c92ae * 2 * _0x24eb35, _0x4c92ae * 2 * _0x24eb35);
                    }
                    _0x39e82d.restore();
                }
                if (this.wasLicking) {
                    if (+new Date() > this.nextShowT && !this.showTongue) {
                        this.showTongue = true;
                    }
                    if (this.showTongue) {
                        var _0x2a31b7 = (_0x4ec996 - this.nextShowT) / 1000;
                        var _0x357173 = _0x1b594e(_0x2a31b7, this.tongueAnimationDur, 13, 0.5);
                        _0x357173 = Math.round(_0x357173);
                        if (_0x357173 < 0) {
                            return;
                        }
                        if (_0x357173 == 13) {
                            this.nextShowT = +new Date() + 3000 + Math.random() * 5 * 1000;
                            this.showTongue = false;
                            this.lastLickSide = this.lickSide;
                            this.wasLicking = false;
                        }
                        if (!this.showTongue) {
                            return;
                        }
                        var _0x398841 = this.getSkinImageObj("skins/" + this.getSkinPath() + "/tongue" + _0x357173 + ".png");
                        if (_0x398841) {
                            var _0x24eb35 = this.skinScale * this.tongueScaleF;
                            var _0x4c92ae = this.skinRad;
                            _0x39e82d.save();
                            if (this.lastLickSide == 1) {
                                _0x39e82d.scale(-1, 1);
                            }
                            _0x39e82d.drawImage(_0x398841, -_0x4c92ae * _0x24eb35, (-_0x4c92ae + _0x4c92ae * this.tongueAncherY) * _0x24eb35, _0x4c92ae * 2 * _0x24eb35, _0x4c92ae * 2 * _0x24eb35);
                            _0x39e82d.restore();
                        }
                    }
                }
            }
        };
        _0x2f8581.prototype.lickSide = 0;
        _0x2f8581.prototype.lickedAmt = 0;
        _0x2f8581.prototype.readCustomData_onNewlyVisible = function(_0x4db5f8) {
            _0x2f8581.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x4db5f8);
            var _0x295cf3 = _0x4db5f8.readUInt8() == 1;
            this.nextShowT = +new Date() + 3000;
            this.isLicking = _0x295cf3;
            this.lickSide = _0x4db5f8.readUInt8();
            this.lickedAmt = _0x4db5f8.readUInt8();
        };
        _0x2f8581.prototype.customUpdatedProperty = function(_0x59dda7, _0x139b62) {
            if (_0x59dda7 == _0x19a6c7) {
                var _0xcdce86 = _0x139b62.readUInt8() == 1;
                this.nextShowT = +new Date() + 3000;
                this.isLicking = _0xcdce86;
                if (!this.wasLicking && this.isLicking) {
                    this.wasLicking = true;
                }
            } else if (_0x59dda7 == _0x363ecd) {
                this.lickedAmt = _0x139b62.readUInt8();
            } else if (_0x59dda7 == _0x3f285f) {
                this.lickSide = _0x139b62.readUInt8();
            }
        };

        function _0x2f8581() {
            _0x2f8581.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x2f8581, _0x48c056, _0x4b4e53);
        var _0x28c171 = GameObj;
        _0x55f966.prototype = Object.create(_0x28c171.prototype);
        _0x55f966.prototype.constructor = _0x55f966;
        _0x55f966.superClass = _0x28c171;
        _0x55f966.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x55f966.prototype.customDraw = function(_0x14e21d) {
            _0x39e82d.save();
            this.drawOutlinedCircle("", _0x30755f);
            _0x39e82d.restore();
        };

        function _0x55f966() {
            _0x55f966.superClass.call(this, _0x2402dd);
        }
        _0x35d268.setCustomClassForGameObjType(_0x55f966, _0x2402dd);
        var _0x28c171 = GameObj;
        _0x45cba0.prototype = Object.create(_0x28c171.prototype);
        _0x45cba0.prototype.constructor = _0x45cba0;
        _0x45cba0.superClass = _0x28c171;
        _0x45cba0.prototype.updateZ = function() {
            this.z = -154;
        };
        _0x45cba0.prototype.customDraw = function(_0x5d91c8) {
            _0x39e82d.save();
            this.rPer = 0;
            var _0x5eb6f8 = _0x30755f;
            this.drawOutlinedCircle("", _0x5eb6f8);
            var _0x67566d = 1;
            if (_0x5981a2 != 2) {
                _0x39e82d.rotate(this.rPer * 2 * Math.PI);
            }
            var _0x2fa469 = 0;
            var _0x2e4b2c = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x2ce1cd = 7;
            var _0x2c9706 = 4;
            _0x2fa469 = _0x2c9706 * Math.sin(Math.PI * 2 / _0x2ce1cd * _0x2e4b2c);
            _0x39e82d.beginPath();
            _0x39e82d.arc(0, 0, Math.max(0, this.rad - _0x67566d + _0x2fa469), 0, Math.PI * 2);
            _0x39e82d.fill();
            if (_0x5981a2 != 2) {
                _0x39e82d.beginPath();
                _0x39e82d.arc(0, 0, Math.max(0, this.rad - _0x67566d + _0x2fa469), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.beginPath();
                _0x39e82d.arc(this.rad * 0.45, -this.rad * 0.45 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x2fa469), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.beginPath();
                _0x39e82d.arc(this.rad * 0.5, this.rad * 0.5 + this.rPer * 15, Math.max(0, this.rad * 0.4 + _0x2fa469), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.beginPath();
                _0x39e82d.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x2fa469), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.beginPath();
                _0x39e82d.arc(-this.rad * 0.75, -this.rad * 0.35 + this.rPer * 15, Math.max(0, this.rad * 0.3 + _0x2fa469), 0, Math.PI * 2);
                _0x39e82d.fill();
                if (this.rad > 50) {
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(this.rad + this.rPer * 10, this.rPer * 50, 8, 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(this.rad - this.rPer * 20, this.rPer * 50, 10, 10, 0, Math.PI * 2);
                    _0x39e82d.fill();
                }
            }
            _0x39e82d.restore();
        };

        function _0x45cba0() {
            _0x45cba0.superClass.call(this, _0x26a868);
        }
        _0x35d268.setCustomClassForGameObjType(_0x45cba0, _0x26a868);
        var _0x28c171 = Animal;
        _0xfbee16.prototype = Object.create(_0x28c171.prototype);
        _0xfbee16.prototype.constructor = _0xfbee16;
        _0xfbee16.superClass = _0x28c171;
        _0xfbee16.prototype.updateZ = function() {
            if (this.flag_underWater) {
                this.z = -100;
            } else if (this.flag_isInArena) {
                this.z = 10000 + this.rad;
            } else if (this.flag_eff_tossedInAir) {
                this.z = 1200 + this.rad;
            } else {
                this.z = 1200 + this.rad;
            }
        };
        _0xfbee16.prototype.animalInfo = function() {
            var _0x56126f = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x56126f.aniName = "Giant Scorpion";
                    break;
                case 1:
                    _0x56126f.aniName = "Golden Scorpion";
                    break;
                case 2:
                    _0x56126f.aniName = "Carnelian Scorpion";
                    break;
                case 111:
                    _0x56126f.aniName = "Classic Giant Scorpion";
                    break;
                case 204:
                    _0x56126f.aniName = "Selamorph Scorpion";
                    break;
                case 220:
                    _0x56126f.aniName = "Nebuladon Scorpion";
                    break;
            }
            _0x56126f.aniCol = "#FF9000";
            _0x56126f.skinName = "scorpion";
            _0x56126f.upgradeText = "UPGRADED to " + _0x56126f.aniName + "!\nSting and Shiver your prey to death.\n(Press W to Sting)";
            _0x56126f.skinName = this.getSkinName();
            return _0x56126f;
        };
        _0xfbee16.prototype.getAbilityInfo = function(_0x1b6492) {
            var _0x29b245 = {
                abilName: "Sting!\n(Shivers Prey)",
                abilImg: "skins/desert/scorpion/" + this.animalSpecies + "/scorpion_ability.png",
                skinThemeID: this.skinThemeID,
                mopeSeasonID: this.mopeSeasonID
            };
            return _0x29b245;
        };
        _0xfbee16.prototype.getSkinName = function() {
            var _0x39f741 = "desert/scorpion/" + this.animalSpecies + "/scorpion";
            _0x39f741 += this.specType == 0 ? "" : this.specType;
            return _0x39f741;
        };
        _0xfbee16.prototype.stingerScaleF = 0.7;
        _0xfbee16.prototype.stingerOffsetY = -0.6;
        _0xfbee16.prototype.poison = 50;
        _0xfbee16.prototype.clawAnimation = null;
        _0xfbee16.prototype.stingAnimation = null;
        _0xfbee16.prototype.stingerTailNormal = null;
        _0xfbee16.prototype.stingerTail = null;
        _0xfbee16.prototype.stingerAttack = null;
        _0xfbee16.prototype.stingerAttackFull = null;
        _0xfbee16.prototype.stingerNormal = null;
        _0xfbee16.prototype.stingerNormalFull = null;
        _0xfbee16.prototype.isUsingAbility = false;
        _0xfbee16.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                this.clawAnimation = null;
                this.stingAnimation = null;
                this.isUsingAbility = false;
            }
            if (!this.isUsingAbility && this.flag_eff_aniInClaws) {
                this.isUsingAbility = true;
                this.stingAnimation = null;
            }
            if (this.isUsingAbility && !this.flag_usingDiveAbility) {
                if (this.stingAnimation == null) {
                    this.stingAnimation = new _0x28a15f(this, 1, _0x28a15f.bow, {
                        v1: 5
                    });
                    this.stingAnimation.onFrameEntered = function(_0xd28335) {
                        _0x39e82d.save();
                        var _0x4cfe7c = this.forObj.skinScale * this.forObj.stingerScaleF;
                        var _0x19f9ab = this.forObj.rad;
                        if (this.forObj.stingerTailAttack) {
                            _0x39e82d.drawImage(this.forObj.stingerTailAttack, -_0x19f9ab * _0x4cfe7c, (-_0x19f9ab + _0x19f9ab * this.forObj.stingerOffsetY) * _0x4cfe7c, _0x19f9ab * 2 * _0x4cfe7c, (_0x19f9ab + _0x19f9ab * _0xd28335) * 2 * _0x4cfe7c);
                        }
                        if (this.forObj.stingerTail) {
                            _0x39e82d.drawImage(this.forObj.stingerTail, -_0x19f9ab * _0x4cfe7c, (-_0x19f9ab + _0x19f9ab * _0xd28335) * _0x4cfe7c, _0x19f9ab * 2 * _0x4cfe7c, _0x19f9ab * 2 * _0x4cfe7c);
                        }
                        if (this.forObj.stingerAttack) {
                            _0x39e82d.drawImage(this.forObj.stingerAttack, -_0x19f9ab * _0x4cfe7c, (-_0x19f9ab + _0x19f9ab * _0xd28335) * _0x4cfe7c, _0x19f9ab * 2 * _0x4cfe7c, _0x19f9ab * 2 * _0x4cfe7c);
                        }
                        var _0x7e6ef6 = (_0x4ec996 - this.spawnTime) / 1000;
                        var _0xf68c27 = _0x1b594e(_0x7e6ef6, 5, 1, 1);
                        var _0x3989bf = Math.max(0, _0xf68c27);
                        _0x39e82d.globalAlpha = _0x3989bf * Math.max(0, this.poison / 100);
                        if (this.forObj.stingerAttackFull) {
                            _0x39e82d.drawImage(this.forObj.stingerAttackFull, -_0x19f9ab * _0x4cfe7c, (-_0x19f9ab + _0x19f9ab * _0xd28335) * _0x4cfe7c, _0x19f9ab * 2 * _0x4cfe7c, _0x19f9ab * 2 * _0x4cfe7c);
                        }
                        _0x39e82d.restore();
                    };
                }
                if (this.stingAnimation) {
                    this.stingAnimation.run();
                }
            }
            if (this.stingAnimation == null || this.stingAnimation.hasStopped) {
                if (!this.flag_underWater && !this.flag_usingDiveAbility) {
                    if (this.stingerTailNormal != null && this.stingerNormalFull != null) {
                        var _0x2a9d82 = this.skinScale * this.stingerScaleF;
                        var _0x40a481 = this.skinRad;
                        var _0x423d8e = (_0x4ec996 - this.spawnTime) / 1000;
                        var _0x760caf = 3;
                        var _0x243c8a = 1.5;
                        var _0x1b9daa = 0;
                        var _0x2492be = 0;
                        if (!_0x1d523b && _0x5981a2 != _0x4051d6 && !RVJsettings.performance) {
                            _0x1b9daa = _0x1b594e(_0x423d8e, _0x243c8a, _0x760caf, 2);
                            _0x2492be = _0x1b594e(_0x423d8e, _0x243c8a, 1, 2);
                        }
                        _0x39e82d.save();
                        var _0x40a481 = this.rad - _0x1b9daa * 0.5;
                        _0x39e82d.drawImage(this.stingerTailNormal, -_0x40a481 * _0x2a9d82, (-_0x40a481 + _0x40a481 * this.stingerOffsetY) * _0x2a9d82 + _0x1b9daa * -_0x2492be, _0x40a481 * 2 * _0x2a9d82, _0x40a481 * 2 * _0x2a9d82);
                        var _0x423d8e = (_0x4ec996 - this.spawnTime) / 1000;
                        var _0x4f1456 = _0x1b594e(_0x423d8e, 5, 1, 1);
                        var _0x31c4a0 = Math.max(0, _0x4f1456);
                        _0x39e82d.globalAlpha = _0x31c4a0 * Math.max(0, this.poison / 100);
                        _0x39e82d.drawImage(this.stingerNormalFull, -_0x40a481 * _0x2a9d82, (-_0x40a481 + _0x40a481 * this.stingerOffsetY) * _0x2a9d82 + _0x1b9daa * -_0x2492be, _0x40a481 * 2 * _0x2a9d82, _0x40a481 * 2 * _0x2a9d82);
                        _0x39e82d.restore();
                    }
                }
            }
        };
        _0xfbee16.prototype.tailOffsetY = -0.25;
        _0xfbee16.prototype.tailScaleF = 1.2;
        var _0xe1ec0f = 4;
        var _0xf70db8 = 0.1;
        _0xfbee16.prototype.drawUnderSkinImg = function() {
            var _0xbcae52 = "skins/desert/scorpion/" + this.animalSpecies + "/tail_back.png";
            var _0xbf3d2f = this.getSkinImageObj(_0xbcae52);
            if (_0xbf3d2f) {
                var _0x3c7712 = 0;
                if (this.stingAnimation) {
                    if (this.stingAnimation.frame < 0.5) {
                        _0x3c7712 = -this.stingAnimation.frame * 0.3;
                    }
                }
                var _0x5c5af0 = this.skinScale * this.tailScaleF;
                var _0x154f98 = this.skinRad;
                _0x39e82d.drawImage(_0xbf3d2f, -_0x154f98 * _0x5c5af0, (-_0x154f98 + _0x154f98 * this.tailOffsetY) * _0x5c5af0, _0x154f98 * 2 * _0x5c5af0, (_0x154f98 + _0x154f98 * _0x3c7712) * 2 * _0x5c5af0);
            }
            if (this.flag_usingAbility && !this.flag_underWater) {
                if (this.clawAnimation == null) {
                    this.clawAnimation = new _0x28a15f(this, 0.9, _0x28a15f.bow, {
                        v1: _0xe1ec0f
                    });
                    this.clawAnimation.keepLastFrame = true;
                    this.clawAnimation.onFrameEntered = function(_0x101a58) {
                        var _0x58db89 = 0;
                        if (_0x101a58 < 0.5) {
                            _0x58db89 = -_0x101a58;
                        }
                        var _0x48a1c9 = "skins/desert/scorpion/" + this.forObj.animalSpecies + "/arms.png";
                        if (this.forObj.flag_eff_aniInClaws) {
                            _0x48a1c9 = "skins/desert/scorpion/" + this.forObj.animalSpecies + "/arms-grabbed.png";
                        }
                        var _0x302fe2 = this.forObj.getSkinImageObj(_0x48a1c9);
                        if (_0x302fe2) {
                            var _0x66cc06 = this.forObj.skinScale * this.forObj.tailScaleF;
                            var _0x5e8a15 = this.forObj.skinRad;
                            if (!this.hasStopped && this.timePassed < 0.75) {
                                _0xf70db8 = _0x58db89;
                                _0x39e82d.drawImage(_0x302fe2, -_0x5e8a15 * _0x66cc06, (-_0x5e8a15 + _0x5e8a15 * _0x58db89) * _0x66cc06, _0x5e8a15 * 2 * _0x66cc06, _0x5e8a15 * 2 * _0x66cc06);
                            } else {
                                _0x39e82d.drawImage(_0x302fe2, -_0x5e8a15 * _0x66cc06, (-_0x5e8a15 + _0x5e8a15 * _0xf70db8) * _0x66cc06, _0x5e8a15 * 2 * _0x66cc06, _0x5e8a15 * 2 * _0x66cc06);
                            }
                        }
                    };
                }
                if (this.clawAnimation != null) {
                    this.clawAnimation.run();
                }
            }
        };
        _0xfbee16.prototype.readCustomData_onNewlyVisible = function(_0x16215c) {
            _0xfbee16.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x16215c);
            this.poison = _0x16215c.readUInt8();
        };
        _0xfbee16.prototype.customUpdatedProperty = function(_0x3b692a, _0x2214b4) {
            if (_0x3b692a == _0x363ecd) {
                this.poison = _0x2214b4.readUInt8();
            }
        };

        function _0xfbee16() {
            _0xfbee16.superClass.call(this, _0x48c056);
        }
        _0xfbee16.prototype.preLoad = function() {
            this.getSkinImageObj("skins/desert/scorpion/" + this.animalSpecies + "/scorpion1.png");
            this.stingerTailNormal = this.getSkinImageObj("skins/desert/scorpion/" + this.animalSpecies + "/stinger_normal.png");
            this.stingerTail = this.getSkinImageObj("skins/desert/scorpion/" + this.animalSpecies + "/stinger_tail.png");
            this.stingerTailAttack = this.getSkinImageObj("skins/desert/scorpion/" + this.animalSpecies + "/attack_tail.png");
            this.stingerAttack = this.getSkinImageObj("skins/desert/scorpion/" + this.animalSpecies + "/attack_stinger_dull.png");
            this.stingerAttackFull = this.getSkinImageObj("skins/desert/scorpion/" + this.animalSpecies + "/attack_stinger_full.png");
            this.stingerNormal = this.getSkinImageObj("skins/desert/scorpion/" + this.animalSpecies + "/normal_stinger_dull.png");
            this.stingerNormalFull = this.getSkinImageObj("skins/desert/scorpion/" + this.animalSpecies + "/normal_stinger_full.png");
        };
        _0x35d268.setCustomClassForGameObjType(_0xfbee16, _0x48c056, _0x3f71c6);
        var _0x28c171 = Animal;
        _0x29d63b.prototype = Object.create(_0x28c171.prototype);
        _0x29d63b.prototype.constructor = _0x29d63b;
        _0x29d63b.superClass = _0x28c171;
        _0x29d63b.prototype.updateZ = function() {
            if (this.flag_usingAbility && this.webState > 2) {
                this.z = 1000;
            } else if (this.flag_eff_isOnSpiderWeb) {
                this.z = 1000 + this.rad;
            } else {
                this.z = 1000 + this.rad;
            }
        };
        _0x29d63b.prototype.animalInfo = function() {
            var _0x6fcf7c = {};
            switch (this.animalSubSpecies) {
                case 0:
                    switch (this.animalSpecies) {
                        case 0:
                            _0x6fcf7c.aniName = "Blackwidow Spider";
                            break;
                        case 111:
                            _0x6fcf7c.aniName = "Classic Blackwidow Spider";
                            break;
                    }
                    break;
                case 1:
                    _0x6fcf7c.aniName = "Goldenwidow Spider";
                    break;
                case 2:
                    _0x6fcf7c.aniName = "Queen Blackwidow";
                    break;
                case 204:
                    _0x6fcf7c.aniName = "Blood Widow Spider!";
                    break;
                case 2023:
                    _0x6fcf7c.aniName = "Bot X-303";
                    break;
            }
            _0x6fcf7c.aniCol = "#FF9000";
            _0x6fcf7c.skinName = this.getSkinName();
            _0x6fcf7c.upgradeText = "UPGRADED to " + _0x6fcf7c.aniName + "!\nBlackwidow is a sneaky predator. It traps prey in the web and injects sweat poison.\nPress W to spin and throw web.";
            return _0x6fcf7c;
        };
        _0x29d63b.prototype.getAbilityInfo = function(_0x492a40) {
            var _0x16196b = {
                abilName: "Spin Web & Bite\n(Sweat Prey)",
                abilImg: "skins/desert/blackwidow/" + this.animalSpecies + "/" + this.animalSubSpecies + "/blackwidow.png",
                skinThemeID: this.skinThemeID,
                mopeSeasonID: this.mopeSeasonID
            };
            return _0x16196b;
        };
        _0x29d63b.prototype.readCustomData_onNewlyVisible = function(_0x516b0f) {
            _0x29d63b.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x516b0f);
            this.customUpdatedProperty(_0x340fbf, _0x516b0f);
        };
        _0x29d63b.prototype.webX = 0;
        _0x29d63b.prototype.webY = 0;
        _0x29d63b.prototype.spiderX = 0;
        _0x29d63b.prototype.spiderY = 0;
        _0x29d63b.prototype.webState = 0;
        _0x29d63b.prototype.customUpdatedProperty = function(_0x33cab4, _0xf18566) {
            if (_0x33cab4 == _0x340fbf) {
                this.webState = _0xf18566.readUInt8();
            }
        };
        _0x29d63b.prototype.setStealth = function() {
            if (_0x444fd7 == _0x89f537 && this.flag_usingAbility && (this.flag_stealth || this.flag_inHidingHole || this.flag_eff_isUnderTree)) {
                this.idealOp = 0.01;
            } else {
                _0x29d63b.superClass.prototype.setStealth.call(this);
            }
        };
        _0x29d63b.prototype.readUpdatedPropertyItem = function(_0x5ba034, _0x161b03) {
            _0x29d63b.superClass.prototype.readUpdatedPropertyItem.call(this, _0x5ba034, _0x161b03);
            if (_0x5ba034 == _0x1464b9) {
                if (this.webState == 0) {
                    this.web_nx = this.web_ox = this.webX = this.x;
                    this.web_ny = this.web_oy = this.webY = this.y;
                    this.spider_ox = this.spiderX = this.spider_nx = this.x;
                    this.spider_oy = this.spiderY = this.spider_ny = this.y;
                }
                var _0x3dc3d1 = _0x161b03.readUInt8() == 1;
                if (_0x3dc3d1) {
                    var _0x1e5ab5 = _0x161b03.readUInt16() / 4;
                    var _0x53d971 = _0x161b03.readUInt16() / 4;
                    this.web_ox = this.webX;
                    this.web_oy = this.webY;
                    this.web_nx = _0x1e5ab5;
                    this.web_ny = _0x53d971;
                    var _0xfd120f = _0x161b03.readUInt16() / 4;
                    var _0x2f012a = _0x161b03.readUInt16() / 4;
                    this.spider_ox = this.spiderX;
                    this.spider_oy = this.spiderY;
                    this.spider_nx = _0xfd120f;
                    this.spider_ny = _0x2f012a;
                }
            }
        };
        _0x29d63b.prototype.onLerpUpdate = function(_0x1a3702) {
            if (this.webState > 0) {
                this.webX = _0x1a3702 * (this.web_nx - this.web_ox) + this.web_ox;
                this.webY = _0x1a3702 * (this.web_ny - this.web_oy) + this.web_oy;
                this.spiderX = _0x1a3702 * (this.spider_nx - this.spider_ox) + this.spider_ox;
                this.spiderY = _0x1a3702 * (this.spider_ny - this.spider_oy) + this.spider_oy;
            }
        };
        _0x29d63b.prototype.afterCustomDraw = function(_0x482dea) {
            if (this.webState > 0 && _0x166276 == this.id && this.flag_usingAbility) {
                _0x39e82d.save();
                _0x39e82d.strokeStyle = this.animalSpecies == 1 ? "gold" : "white";
                _0x39e82d.globalAlpha = 0.3;
                _0x39e82d.beginPath();
                _0x39e82d.moveTo(this.webX, this.webY);
                _0x39e82d.lineTo(this.spiderX, this.spiderY);
                _0x39e82d.stroke();
                _0x39e82d.restore();
            }
        };
        _0x29d63b.prototype.getSkinName = function() {
            return "desert/blackwidow/" + this.animalSpecies + "/" + this.animalSubSpecies + "/blackwidow" + (this.specType == 0 ? "" : this.specType);
        };
        _0x29d63b.prototype.drawSkinCustomization = function() {
            if (this.webState == 0 && this.flag_usingAbility) {
                var _0xfe1945 = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x643c50 = 0.75;
                var _0x247346 = 1;
                var _0xc91727 = _0x247346 * Math.sin(Math.PI * 2 / _0x643c50 * _0xfe1945);
                _0x39e82d.globalAlpha = 0.3;
                var _0x3c903e = this.animalSpecies == 1 ? "gold" : "#f2f2f2";
                _0x466d9b(0, -this.rad * 1.07, this.rad * 0.07, _0x3c903e);
                _0x39e82d.globalAlpha = 0.8 - _0xc91727 * 0.2;
                _0x466d9b(0, -this.rad * 1.07, this.rad * 0.07 + (0.05 + _0xc91727), _0x3c903e);
            }
        };

        function _0x29d63b() {
            _0x29d63b.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x29d63b, _0x48c056, _0x27689a);
        var _0x5899d5 = _0xbe4e36;
        var _0x28c171 = _0xa0a2ad;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0xbe4e36.prototype.updateZ = function() {
            this.z = 10000;
        };
        _0xbe4e36.prototype.webAlpha = 0.5;
        _0xbe4e36.prototype.customDraw = function(_0x1ff375) {
            _0x39e82d.save();
            if (this.state > 0) {
                var _0x42d685 = this.getSkinImageObj("img/web/" + this.webType + "/spiderWeb.png");
                var _0x22aaac = this.rad;
                if (_0x42d685) {
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = this.webAlpha;
                    _0x39e82d.drawImage(_0x42d685, -_0x22aaac, -_0x22aaac, _0x22aaac * 2, _0x22aaac * 2);
                    _0x39e82d.restore();
                }
            }
            _0x39e82d.restore();
        };
        _0xbe4e36.prototype.state = 0;
        _0xbe4e36.prototype.spiderX = 0;
        _0xbe4e36.prototype.spiderY = 0;
        _0xbe4e36.prototype.readUpdatedProperty = function(_0x10c1a3, _0x28d56d) {
            if (_0x10c1a3 == _0x340fbf) {
                this.state = _0x28d56d.readUInt8();
            } else if (_0x10c1a3 == _0x2beec8) {
                var _0x3cefdf = _0x28d56d.readUInt8() / 100;
                if (_0x3cefdf < this.webAlpha) {
                    this.webAlpha = _0x3cefdf;
                }
            }
        };
        _0xbe4e36.prototype.readCustomData_onNewlyVisible = function(_0x3a2169) {
            _0xbe4e36.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x3a2169);
            this.state = _0x3a2169.readUInt8();
            var _0x54420c = _0x3a2169.readUInt8() / 100;
            if (_0x54420c < this.webAlpha) {
                this.webAlpha = _0x54420c;
            }
            this.webType = _0x3a2169.readUInt8();
        };

        function _0xbe4e36() {
            _0xbe4e36.superClass.call(this);
        }
        _0x35d268.setCustomClassForGameObjType(_0xbe4e36, _0x651296, _0x4d5d7f);
        var _0x28c171 = Animal;
        _0x4d6e6b.prototype = Object.create(_0x28c171.prototype);
        _0x4d6e6b.prototype.constructor = _0x4d6e6b;
        _0x4d6e6b.superClass = _0x28c171;
        _0x4d6e6b.prototype.skinFolder = function() {
            return "desert/";
        };
        _0x4d6e6b.prototype.animalInfo = function() {
            var _0x4d12c0 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x4d12c0.aniName = "Pterodactyl";
                    break;
                case 1:
                    _0x4d12c0.aniName = "Golden Pterodactyl";
                    break;
                case 2:
                    _0x4d12c0.aniName = "Emerald Pterodactyl";
                    break;
                case 100:
                    _0x4d12c0.aniName = "Carnageodactyl";
                    break;
                case 111:
                    _0x4d12c0.aniName = "Classic Pterodactyl";
                    break;
            }
            _0x4d12c0.aniCol = "#FF9000";
            _0x4d12c0.skinName = this.skinFolder() + "/pterodactyl/" + this.animalSpecies + "/pterodactyl";
            _0x4d12c0.upgradeText = "UPGRADED to " + _0x4d12c0.aniName + "!\nFly and dive onto prey to pick it up.";
            return _0x4d12c0;
        };
        _0x4d6e6b.prototype.getHead = function(_0x27edda, _0x38317b) {
            var _0x287e6c = "";
            var _0x59d226 = "skins/" + this.skinFolder() + "/" + _0x27edda + "/" + this.animalSpecies + "/" + _0x27edda + "_head" + _0x287e6c + ".png";
            return _0x59d226;
        };
        _0x4d6e6b.prototype.getSkinName = function() {
            var _0x4c1c43 = this.skinFolder() + "/pterodactyl/" + this.animalSpecies + "/pterodactyl";
            if (this.specType == 4) {
                _0x4c1c43 += "4";
            } else {
                _0x4c1c43 += this.specType == 0 ? "" : 1;
            }
            return _0x4c1c43;
        };
        _0x4d6e6b.prototype.getWing = function(_0x3fa3d7, _0x2b1f7b) {
            if (!this.flag_flying) {
                _0x2b1f7b = _0x2b1f7b + "" + _0x2b1f7b;
            }
            var _0x57a2af = "skins/" + this.skinFolder() + "/" + _0x3fa3d7 + "/" + this.animalSpecies + "/" + _0x3fa3d7 + "_wing" + _0x2b1f7b + "_nohand.png";
            return _0x57a2af;
        };
        _0x4d6e6b.prototype.getWingBone = function(_0x229629, _0x294025) {
            if (!this.flag_flying) {
                _0x294025 = _0x294025 + "" + _0x294025;
            }
            var _0x204415 = "skins/" + this.skinFolder() + "/" + _0x229629 + "/" + this.animalSpecies + "/" + _0x229629 + "_wing" + _0x294025 + "_bones.png";
            return _0x204415;
        };
        _0x4d6e6b.prototype.getHand = function(_0x483493, _0x1f1e05) {
            if (!this.flag_flying) {
                _0x1f1e05 = _0x1f1e05 + "" + _0x1f1e05;
            }
            if (this.isGliding) {
                _0x1f1e05 = _0x1f1e05 + "3";
            }
            var _0x525ea2 = "skins/" + this.skinFolder() + "/" + _0x483493 + "/" + this.animalSpecies + "/" + _0x483493 + "_hand" + _0x1f1e05 + ".png";
            return _0x525ea2;
        };
        _0x4d6e6b.prototype.biteStart = 0;
        _0x4d6e6b.prototype.flaps = 0;
        _0x4d6e6b.prototype.flapsMod = 5;
        _0x4d6e6b.prototype.countFlap = true;
        _0x4d6e6b.prototype.canFlap = _0x5981a2 != _0x4051d6;
        _0x4d6e6b.prototype.resumeFlapT = 0;
        _0x4d6e6b.prototype.lastFlapFrame = 0;
        _0x4d6e6b.prototype.flapSpeed = 1;
        _0x4d6e6b.prototype.flapAmount = 0.2;
        _0x4d6e6b.prototype.r = 22.5;
        _0x4d6e6b.prototype.ax = 0;
        _0x4d6e6b.prototype.ay = 1;
        _0x4d6e6b.prototype.ww = 4;
        _0x4d6e6b.prototype.wh = 2.5;
        _0x4d6e6b.prototype.ax2 = 1;
        _0x4d6e6b.prototype.rf = -2;
        _0x4d6e6b.prototype.erf = 11.5;
        _0x4d6e6b.prototype.erf_gliding = 30;
        _0x4d6e6b.prototype.lx = -0.05;
        _0x4d6e6b.prototype.famt = 0.5;
        _0x4d6e6b.prototype.yf = 0.15;
        _0x4d6e6b.prototype.xf = -0.2;
        _0x4d6e6b.prototype.legScale = 1.15;
        _0x4d6e6b.prototype.handPerc = 0.9;
        _0x4d6e6b.prototype.handWF = 0;
        _0x4d6e6b.prototype.set = false;
        _0x4d6e6b.prototype.wOffset = 0.1;
        _0x4d6e6b.prototype.headF = 0.5;
        _0x4d6e6b.prototype.headFDisp = -0.6;
        _0x4d6e6b.prototype.headScale = 0.8;
        _0x4d6e6b.prototype.headX = 0.225;
        _0x4d6e6b.prototype.drawLegs = function() {
            var _0x3f1347 = 500 / 340;
            var _0x56ec7f = this.flag_eff_aniInClaws ? "legs2" : "legs";
            var _0x5cf50f = this.getSkinImageObj("skins/" + this.skinFolder() + "/pterodactyl/" + this.animalSpecies + "/" + _0x56ec7f + ".png");
            if (_0x5cf50f) {
                _0x39e82d.save();
                var _0xdc58b9 = this.rad;
                _0x3f1347 *= this.legScale;
                _0x39e82d.drawImage(_0x5cf50f, -_0xdc58b9 * _0x3f1347, (-_0xdc58b9 + _0xdc58b9 * this.lx) * _0x3f1347, _0xdc58b9 * 2 * _0x3f1347, _0xdc58b9 * 2 * _0x3f1347);
                _0x39e82d.restore();
            }
        };
        _0x4d6e6b.prototype.drawUnderSkinImg = function() {
            if (this.flag_usingAbility) {
                this.drawWing(this.frame, 1);
                this.drawWing(this.frame, 2);
            }
            if (this.specType == 2) {
                this.drawLegs();
            }
        };
        _0x4d6e6b.prototype.drawSkinCustomization = function() {
            if (this.flag_usingAbility) {
                this.drawBone(this.frame, 1);
                this.drawBone(this.frame, 2);
                this.drawHand(this.frame, 1);
                this.drawHand(this.frame, 2);
                var _0x277563 = 500 / 340;
                var _0x5a2912 = this.getHead("pterodactyl", false);
                var _0x503478 = this.getSkinImageObj(_0x5a2912);
                if (_0x503478) {
                    _0x39e82d.save();
                    _0x277563 += -(this.headF * 0.1) * this.frame;
                    var _0x42d081 = this.rad;
                    _0x39e82d.drawImage(_0x503478, -_0x42d081 * _0x277563, (-_0x42d081 + _0x42d081 * (0.3 + this.headFDisp * (this.frame / 10)) + this.headF * this.frame) * _0x277563, _0x42d081 * 2 * _0x277563, _0x42d081 * 2 * _0x277563);
                    _0x39e82d.restore();
                }
            } else if (this.animalSpecies == 100) {
                var _0x276673 = _0x4ec996 - this.nextJawAnimT;
                var _0x316694 = Math.trunc(_0x276673 / _0x2298e1) % 16;
                if (_0x4ec996 < this.nextJawAnimT) {
                    _0x316694 = 0;
                }
                if (_0x316694 >= 15) {
                    this.nextJawAnimT = _0x4ec996 + 5000;
                }
                var _0x4e61a1 = this.getSkinImageObj("skins/desert/pterodactyl/100/mouth/pterodactyl_head" + _0x316694 + ".png");
                if (_0x4e61a1) {
                    var _0x277563 = 500 / 340 * this.headScale;
                    _0x39e82d.save();
                    var _0x42d081 = this.rad;
                    _0x39e82d.drawImage(_0x4e61a1, -_0x42d081 * _0x277563, (-_0x42d081 + _0x42d081 * this.headX) * _0x277563, _0x42d081 * 2 * _0x277563, _0x42d081 * 2 * _0x277563);
                    _0x39e82d.restore();
                }
            } else {
                var _0x5a2912 = this.getHead("pterodactyl", false);
                var _0x503478 = this.getSkinImageObj(_0x5a2912);
                if (_0x503478) {
                    var _0x277563 = 500 / 340 * this.headScale;
                    _0x39e82d.save();
                    var _0x42d081 = this.rad;
                    _0x39e82d.drawImage(_0x503478, -_0x42d081 * _0x277563, (-_0x42d081 + _0x42d081 * this.headX) * _0x277563, _0x42d081 * 2 * _0x277563, _0x42d081 * 2 * _0x277563);
                    _0x39e82d.restore();
                }
            }
        };
        _0x4d6e6b.prototype.nextJawAnimT = 0;
        var _0x2298e1 = 70;
        _0x4d6e6b.prototype.drawWing = function(_0x50e554, _0x5c7d24) {
            var _0x4ed508 = _0x5c7d24 == 1 ? 1 : -1;
            var _0x834732 = this.getSkinImageObj(this.getWing("pterodactyl", _0x5c7d24));
            if (_0x834732) {
                var _0x5f11cb = -(-0.2 + _0x50e554) * _0x4bfce6(_0x4ed508 * this.r);
                var _0x206ade = this.rad * 0.8;
                var _0x53180c = 0;
                var _0x4fa7c0 = this.rad;
                var _0x492214 = _0x206ade * this.ww;
                var _0x58424e = _0x206ade * this.wh;
                var _0x3be751 = _0x5c7d24 == 1 ? this.ax : this.ax2;
                var _0x26a2ed = this.ay + this.yf * _0x50e554;
                _0x39e82d.save();
                _0x5f11cb *= this.rf;
                var _0x5b7d06 = this.isGliding ? this.erf_gliding : this.erf;
                _0x39e82d.rotate(_0x4bfce6(_0x4ed508 * _0x5b7d06) + _0x5f11cb);
                var _0x516e06 = _0x50e554 * _0x492214 * _0x4ed508 * this.wOffset;
                _0x39e82d.drawImage(_0x834732, _0x53180c + _0x492214 * -_0x3be751 + _0x516e06, _0x4fa7c0 + _0x58424e * -_0x26a2ed, _0x492214, _0x58424e);
                _0x39e82d.restore();
            }
        };
        _0x4d6e6b.prototype.drawBone = function(_0x303c3d, _0x14e6c2) {
            var _0x12104f = this.getSkinImageObj(this.getWingBone("pterodactyl", _0x14e6c2));
            var _0x41433e = _0x14e6c2 == 1 ? 1 : -1;
            if (_0x12104f) {
                var _0x87834c = -(-0.2 + _0x303c3d) * _0x4bfce6(_0x41433e * this.r);
                var _0x213e09 = this.rad * 0.8;
                var _0x3f6a6e = 0;
                var _0xe90ec1 = this.rad;
                var _0x19143d = _0x213e09 * this.ww;
                var _0xd1978d = _0x213e09 * this.wh;
                var _0x45476b = _0x14e6c2 == 1 ? this.ax : this.ax2;
                var _0x469b29 = this.ay + this.yf * _0x303c3d;
                _0x39e82d.save();
                _0x87834c *= this.rf;
                var _0x522327 = this.isGliding ? this.erf_gliding : this.erf;
                _0x39e82d.rotate(_0x4bfce6(_0x41433e * _0x522327) + _0x87834c);
                var _0x5423cc = _0x303c3d * _0x19143d * _0x41433e * this.wOffset;
                _0x39e82d.drawImage(_0x12104f, _0x3f6a6e + _0x19143d * -_0x45476b + _0x5423cc, _0xe90ec1 + _0xd1978d * -_0x469b29, _0x19143d, _0xd1978d);
                _0x39e82d.restore();
            }
        };
        var _0x3de9fb = 0;
        _0x4d6e6b.prototype.drawHand = function(_0x46ea27, _0x496736) {
            var _0x2240ea = _0x496736 == 1 ? 1 : -1;
            var _0x508591 = this.getSkinImageObj(this.getHand("pterodactyl", _0x496736));
            if (_0x508591) {
                var _0x12c112 = -(-0.2 + _0x46ea27) * _0x4bfce6(_0x2240ea * this.r);
                var _0x241ec4 = this.rad * 0.8;
                var _0x17582c = 0;
                var _0x52c650 = this.rad;
                var _0x558728 = _0x241ec4 * this.ww;
                var _0x3f1552 = _0x241ec4 * this.wh + (!this.flag_flying ? this.wh * _0x3de9fb : 0);
                var _0x4bdf93 = _0x2240ea == 1 ? this.ax : this.ax2;
                var _0x209022 = _0x4bdf93 + _0x2240ea * this.xf * _0x46ea27;
                var _0x14e5b2 = this.ay + this.yf * _0x46ea27;
                _0x12c112 *= this.rf;
                var _0x299344 = this.isGliding ? this.erf_gliding : this.erf;
                _0x39e82d.save();
                this.drawImage(_0x508591, _0x17582c + _0x558728 * -_0x209022, _0x52c650 + _0x3f1552 * -_0x14e5b2, _0x558728 + _0x558728 * _0x2240ea * this.handWF, _0x3f1552, _0x4bfce6(_0x2240ea * _0x299344) + _0x12c112);
                _0x39e82d.restore();
            }
        };
        _0x4d6e6b.prototype.frame = 0;
        _0x4d6e6b.prototype.lastFlapFrame = 0;
        _0x4d6e6b.prototype.getFrame = function() {
            if (!this.canFlap && this.flag_flying && _0x4ec996 > this.resumeFlapT) {
                this.canFlap = true;
            }
            var _0x48bdaf = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x170f9b = _0x5981a2 != _0x4051d6 && this.canFlap ? _0x1b594e(_0x48bdaf, this.flapSpeed, this.flapAmount * this.handPerc, 2) : this.birdNoAnimationFlyWingAngle;
            if (this.flag_flying && _0x170f9b < 0 && this.countFlap) {
                this.countFlap = false;
                this.flaps++;
                if (this.flaps % this.flapsMod == 0) {
                    this.lastFlapFrame = _0x170f9b;
                    this.canFlap = false;
                    this.resumeFlapT = +new Date() + 1500;
                }
            } else if (_0x170f9b > 0 && !this.countFlap) {
                this.countFlap = true;
            }
            if (!this.canFlap) {
                _0x170f9b = this.lastFlapFrame;
            } else {
                this.lastFlapFrame = _0x170f9b;
            }
            return _0x170f9b;
        };
        _0x4d6e6b.prototype.beforeCustomDraw = function() {
            if (!this.flag_usingAbility) {
                return;
            }
            if (!this.flag_flying && !this.set) {
                this.set = true;
                this.r = 11.25;
                this.erf = 5.75;
                this.ww = 3.5;
            } else if (this.flag_flying && this.set) {
                this.set = false;
                this.r = 22.5;
                this.erf = 11.5;
                this.ww = 4.5;
            }
            if (this.isGliding) {
                this.flapAmount = 0;
            } else {
                this.flapAmount = this.famt;
            }
            this.frame = this.getFrame();
        };
        _0x4d6e6b.prototype.updateZ = function() {
            if (this.flag_eff_grabbedByFlytrap) {
                this.z = 1100 + this.rad;
            } else if (!this.flag_flying && this.flag_usingAbility && !this.flag_underWater) {
                this.z = 1200 + this.rad;
            } else if (this.flag_flying || this.flag_eff_tossedInAir) {
                this.z = 110000;
                if (this.flag_isGrabbed) {
                    this.z -= this.rad;
                } else {
                    this.z += this.rad;
                }
                if (this.flag_eff_aniInClaws) {
                    this.z += 100;
                }
            } else {
                this.z = 1000 + this.rad;
            }
        };
        _0x4d6e6b.prototype.getAbilityInfo = function(_0x3df081) {
            var _0x4bef9a = {
                abilName: "Dive Attack\n(Fly with Prey)"
            };
            _0x4bef9a.abilImg = "skins/" + this.skinFolder() + "/pterodactyl/" + this.animalSpecies + "/pterodactyl_ability.png";
            _0x4bef9a.skinThemeID = this.skinThemeID;
            _0x4bef9a.mopeSeasonID = this.mopeSeasonID;
            return _0x4bef9a;
        };
        _0x4d6e6b.prototype.readCustomData_onNewlyVisible = function(_0x12ae9a) {
            _0x4d6e6b.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x12ae9a);
            this.isGliding = _0x12ae9a.readUInt8() == 1;
        };
        _0x4d6e6b.prototype.customUpdatedProperty = function(_0x17f2f1, _0x5469ff) {
            this.isGliding = _0x5469ff.readUInt8() == 1;
        };

        function _0x4d6e6b() {
            _0x4d6e6b.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x4d6e6b, _0x48c056, _0x5b6d09);
        var _0x28c171 = Animal;
        _0x59819c.prototype = Object.create(_0x28c171.prototype);
        _0x59819c.prototype.constructor = _0x59819c;
        _0x59819c.superClass = _0x28c171;
        _0x59819c.prototype.animalInfo = function() {
            var _0x3fb3fa = {
                aniName: "Bullet Ant",
                aniCol: "#FF9000",
                skinName: "desert/bulletant/0/bulletant"
            };
            _0x3fb3fa.upgradeText = "UPGRADED to " + _0x3fb3fa.aniName + "!\nHold 'W' to pick anything and take to your Anthill.";
            return _0x3fb3fa;
        };
        var _0x3eb901 = 1;
        _0x59819c.prototype.drawSkinCustomization = function() {
            var _0x3ed752 = "skins/desert/bulletant/" + this.animalSpecies + "/head.png";
            var _0x17e7fa = this.getSkinImageObj(_0x3ed752);
            if (_0x17e7fa) {
                var _0x4474eb = this.skinScale * 1.2;
                var _0x38a71d = this.skinRad;
                _0x39e82d.drawImage(_0x17e7fa, -_0x38a71d * _0x4474eb, (-_0x38a71d + _0x38a71d * 0.3) * _0x4474eb, _0x38a71d * 2 * _0x4474eb, _0x38a71d * 2 * _0x4474eb);
            }
        };
        var _0x23ad5b = -0.7;
        _0x59819c.prototype.drawUnderSkinImg = function() {
            var _0x3848b1 = "skins/desert/bulletant/" + this.animalSpecies + "/abdomen.png";
            var _0x4d3038 = this.getSkinImageObj(_0x3848b1);
            if (_0x4d3038) {
                var _0x1274b6 = this.skinScale * 0.9;
                var _0x2318df = this.skinRad;
                _0x39e82d.drawImage(_0x4d3038, -_0x2318df * _0x1274b6, (-_0x2318df + _0x2318df * _0x23ad5b) * _0x1274b6, _0x2318df * 2 * _0x1274b6, _0x2318df * 2 * _0x1274b6);
            }
        };
        _0x59819c.prototype.getSkinName = function() {
            var _0x504f2d = "desert/bulletant/" + this.animalSpecies + "/body";
            return _0x504f2d;
        };

        function _0x59819c() {
            _0x59819c.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x59819c, _0x48c056, _0x13312d);
        var _0x28c171 = GameObj;
        _0x2af2e8.prototype = Object.create(_0x28c171.prototype);
        _0x2af2e8.prototype.constructor = _0x2af2e8;
        _0x2af2e8.superClass = _0x28c171;
        _0x2af2e8.prototype.FlytrapType = 0;
        _0x2af2e8.prototype.updateZ = function() {
            this.z = 100;
        };
        _0x2af2e8.prototype.getSkinFolder = function(_0x1b09ab) {
            return "desert/flytrap";
        };
        _0x2af2e8.prototype.customDraw = function(_0x403214) {
            _0x39e82d.save();
            _0x39e82d.globalAlpha = 1;
            var _0x2fa5da = this.getSkinImageObj("img/" + this.getSkinFolder() + "/base.png");
            if (_0x2fa5da) {
                var _0x3fce14 = this.rad * 1.25;
                _0x39e82d.drawImage(_0x2fa5da, -_0x3fce14, -_0x3fce14, _0x3fce14 * 2, _0x3fce14 * 2);
            }
            _0x39e82d.restore();
        };

        function _0x2af2e8() {
            _0x2af2e8.superClass.call(this, _0xcb4cac);
            this.drawEffectScale_Slow = true;
        }
        _0x35d268.setCustomClassForGameObjType(_0x2af2e8, _0xcb4cac);
        var _0x28c171 = GameObj;
        _0x3e671d.prototype = Object.create(_0x28c171.prototype);
        _0x3e671d.prototype.constructor = _0x3e671d;
        _0x3e671d.superClass = _0x28c171;
        _0x3e671d.prototype.FlytrapMouthType = 0;
        _0x3e671d.prototype.updateZ = function() {
            this.z = 1100 + this.rad;
        };
        var _0x5510f9 = 140;
        var _0x4116cd = 1.25;
        var _0x1adca1 = 2.5;
        var _0x372bed = 1.25;
        var _0x80af6a = 1.5;
        var _0x450210 = 180;
        var _0xe3cb02 = 1.5;
        var _0x251244 = 1;
        var _0x1fbbdc = 1;
        var _0x385dd9 = 0;
        var _0x5526ad = 0;
        var _0x3639f6 = -160;
        var _0x4f69e5 = 1;
        var _0x51fce3 = 0;
        _0x3e671d.prototype.topA = 180;
        _0x3e671d.prototype.botA = 180;
        _0x3e671d.prototype.distBeforeAttack = 0;
        _0x3e671d.prototype.maxDist = 0;
        _0x3e671d.prototype.distCovered = 0;
        _0x3e671d.prototype.isAttacking = false;
        _0x3e671d.prototype.isMouthClosed = false;
        _0x3e671d.prototype.grabbedAni = false;
        _0x3e671d.prototype.getSkinFolder = function(_0x424c13) {
            return "desert/flytrap";
        };
        _0x3e671d.prototype.beforeCustomDraw = function(_0x4d1ea4) {
            if (!this.dead) {
                var _0x2ba401 = this.getSkinImageObj("img/" + this.getSkinFolder() + "/mouth/stem.png");
                if (_0x2ba401) {
                    var _0x2889dd = this.rad;
                    _0x39e82d.save();
                    _0x39e82d.translate(this.anchor_x, this.anchor_y);
                    _0x39e82d.rotate(this.angle - _0x4bfce6(_0x450210));
                    var _0x136cb7 = _0x2816a1({
                        x: this.x,
                        y: this.y
                    }, {
                        x: this.anchor_x,
                        y: this.anchor_y
                    });
                    _0x39e82d.drawImage(_0x2ba401, -_0x2889dd * _0x4116cd, -_0x2889dd, _0x2889dd * 2 * _0x372bed, _0x2889dd * 2 + _0x136cb7);
                    _0x39e82d.restore();
                }
            }
        };
        _0x3e671d.prototype.customDraw = function(_0x439374) {
            _0x39e82d.save();
            _0x39e82d.globalAlpha = 1;
            var _0x31225e = "bottom" + (this.isKillable ? "_e" : "");
            var _0x94858b = this.getSkinImageObj("img/" + this.getSkinFolder() + "/mouth/" + _0x31225e + ".png");
            if (_0x94858b) {
                var _0x2c662d = this.rad;
                _0x39e82d.save();
                _0x39e82d.rotate(this.angle - _0x4bfce6(this.botA));
                _0x39e82d.drawImage(_0x94858b, -_0x2c662d * _0x1fbbdc, -_0x2c662d * _0x1fbbdc, _0x2c662d * 2, _0x2c662d * 2);
                _0x39e82d.restore();
            }
            if (!this.grabbedAni) {
                var _0x2964df = this.isMouthClosed ? "closed" : "top";
                var _0x94858b = this.getSkinImageObj("img/" + this.getSkinFolder() + "/mouth/" + _0x2964df + ".png");
                if (_0x94858b) {
                    var _0x2c662d = this.rad;
                    {
                        _0x39e82d.save();
                        _0x39e82d.rotate(this.angle - _0x4bfce6(this.topA));
                        _0x39e82d.drawImage(_0x94858b, -_0x2c662d * _0x251244, -_0x2c662d * _0x251244, _0x2c662d * 2, _0x2c662d * 2);
                        _0x39e82d.restore();
                    }
                }
            }
            _0x39e82d.restore();
        };
        _0x3e671d.prototype.isAttacking = false;
        _0x3e671d.prototype.isMouthClosed = false;
        _0x3e671d.prototype.grabbedAni = false;
        _0x3e671d.prototype.readCustomData_onNewlyVisible = function(_0x53026b) {
            _0x3e671d.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x53026b);
            var _0x3f9801 = _0x53026b.readBitGroup();
            this.isAttacking = _0x3f9801.getBool();
            this.isMouthClosed = _0x3f9801.getBool();
            this.grabbedAni = _0x3f9801.getBool();
            this.anchor_x = _0x53026b.readUInt16() / 4;
            this.anchor_y = _0x53026b.readUInt16() / 4;
        };
        _0x3e671d.prototype.readUpdatedProperty = function(_0x230f39, _0xb29070) {
            if (_0x230f39 == _0x5cfc25) {
                this.isAttacking = _0xb29070.readUInt8() == 1;
            }
            if (_0x230f39 == _0x56245a) {
                this.isMouthClosed = _0xb29070.readUInt8() == 1;
            }
            if (_0x230f39 == _0x52914c) {
                this.grabbedAni = _0xb29070.readUInt8() == 1;
            }
        };

        function _0x3e671d() {
            _0x3e671d.superClass.call(this, _0x5e9917);
            this.doesDrawEffectScale = this.drawEffectScale_Slow = true;
        }
        _0x35d268.setCustomClassForGameObjType(_0x3e671d, _0x5e9917);
        var _0x28c171 = GameObj;
        _0x5ab149.prototype = Object.create(_0x28c171.prototype);
        _0x5ab149.prototype.constructor = _0x5ab149;
        _0x5ab149.superClass = _0x28c171;
        _0x5ab149.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x5ab149.prototype.customDraw = function(_0x76923e) {
            var _0x5e58ea = this.isEdibleOutlined() ? "e" : this.oType;
            var _0x22203c = this.getSkinImageObj("gameobj/" + this.oType + "/" + _0x5e58ea + ".png");
            if (_0x22203c) {
                _0x39e82d.save();
                var _0x4f4f8a = this.rad * 1.2;
                _0x39e82d.rotate(this.rPer * Math.PI * 2);
                _0x39e82d.drawImage(_0x22203c, -_0x4f4f8a, -_0x4f4f8a, _0x4f4f8a * 2, _0x4f4f8a * 2);
                _0x39e82d.restore();
            }
        };

        function _0x5ab149() {
            _0x5ab149.superClass.call(this, _0x46dcc0);
            this.doesDrawEffectScale = false;
        }
        _0x35d268.setCustomClassForGameObjType(_0x5ab149, _0x46dcc0);
        var _0x28c171 = GameObj;
        _0x5ad70e.prototype = Object.create(_0x28c171.prototype);
        _0x5ad70e.prototype.constructor = _0x5ad70e;
        _0x5ad70e.superClass = _0x28c171;
        _0x5ad70e.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x5ad70e.prototype.customDraw = function(_0x54430a) {
            var _0x3baaa4 = this.isEdibleOutlined() ? "e" : this.oType;
            var _0x56f2b5 = this.getSkinImageObj("gameobj/" + this.oType + "/" + _0x3baaa4 + ".png");
            if (_0x56f2b5) {
                _0x39e82d.save();
                var _0x67ebbb = this.rad * 1.15;
                _0x39e82d.rotate(this.rPer * Math.PI * 2);
                _0x39e82d.drawImage(_0x56f2b5, -_0x67ebbb, -_0x67ebbb, _0x67ebbb * 2, _0x67ebbb * 2);
                _0x39e82d.restore();
            }
        };

        function _0x5ad70e() {
            _0x5ad70e.superClass.call(this, _0x187c1b);
            this.doesDrawEffectScale = this.drawEffectScale_Slow = false;
        }
        _0x35d268.setCustomClassForGameObjType(_0x5ad70e, _0x187c1b);
        var _0x28c171 = GameObj;
        _0x3e7ae9.prototype = Object.create(_0x28c171.prototype);
        _0x3e7ae9.prototype.constructor = _0x3e7ae9;
        _0x3e7ae9.superClass = _0x28c171;
        _0x3e7ae9.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x3e7ae9.prototype.customDraw = function(_0x5e1556) {
            var _0x29a225 = this.isEdibleOutlined() ? "e" : "0";
            var _0x3402bd = this.getSkinImageObj("gameobj/" + this.oType + "/" + _0x29a225 + ".png");
            if (_0x3402bd) {
                _0x39e82d.save();
                var _0x588128 = this.rad * 1.15;
                _0x39e82d.rotate(this.rPer * Math.PI * 2);
                _0x39e82d.drawImage(_0x3402bd, -_0x588128, -_0x588128, _0x588128 * 2, _0x588128 * 2);
                _0x39e82d.restore();
            }
        };

        function _0x3e7ae9() {
            _0x3e7ae9.superClass.call(this, _0x5003b0);
            this.doesDrawEffectScale = this.drawEffectScale_Slow = false;
        }
        _0x35d268.setCustomClassForGameObjType(_0x3e7ae9, _0x5003b0);
        var _0x28c171 = GameObj;
        _0x285635.prototype = Object.create(_0x28c171.prototype);
        _0x285635.prototype.constructor = _0x285635;
        _0x285635.superClass = _0x28c171;
        _0x285635.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x285635.prototype.customDraw = function(_0x5d8681) {
            var _0xd52b25 = this.isEdibleOutlined() ? "cactuspear_e" : "cactuspear";
            _0xd52b25 = "gameobj/" + this.oType + "/" + _0xd52b25 + ".png";
            var _0x59c6b5 = this.getSkinImageObj(_0xd52b25);
            if (_0x59c6b5) {
                _0x39e82d.save();
                var _0x3fc5f2 = this.rad;
                _0x39e82d.rotate(this.rPer * Math.PI * 2);
                _0x39e82d.drawImage(_0x59c6b5, -_0x3fc5f2, -_0x3fc5f2, _0x3fc5f2 * 2, _0x3fc5f2 * 2);
                _0x39e82d.restore();
            }
        };

        function _0x285635() {
            _0x285635.superClass.call(this, _0x2d0301);
            this.doesDrawEffectScale = false;
        }
        _0x35d268.setCustomClassForGameObjType(_0x285635, _0x2d0301);
        var _0x28c171 = GameObj;
        _0x16db7f.prototype = Object.create(_0x28c171.prototype);
        _0x16db7f.prototype.constructor = _0x16db7f;
        _0x16db7f.superClass = _0x28c171;
        _0x16db7f.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x16db7f.prototype.customDraw = function(_0x534808) {
            var _0xc7ee3e = this.isEdibleOutlined() ? "e" : this.oType;
            var _0x334b73 = this.getSkinImageObj("gameobj/" + this.oType + "/" + _0xc7ee3e + ".png");
            if (_0x334b73) {
                _0x39e82d.save();
                var _0x1bea20 = this.rad;
                _0x39e82d.rotate(this.rPer * Math.PI * 2);
                _0x39e82d.drawImage(_0x334b73, -_0x1bea20, -_0x1bea20, _0x1bea20 * 2, _0x1bea20 * 2);
                _0x39e82d.restore();
            }
        };

        function _0x16db7f() {
            _0x16db7f.superClass.call(this, _0x146088);
            this.doesDrawEffectScale = false;
        }
        _0x35d268.setCustomClassForGameObjType(_0x16db7f, _0x146088);
        var _0x28c171 = GameObj;
        _0x1855eb.prototype = Object.create(_0x28c171.prototype);
        _0x1855eb.prototype.constructor = _0x1855eb;
        _0x1855eb.superClass = _0x28c171;
        _0x1855eb.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x1855eb.prototype.customDraw = function(_0xc2d68) {
            var _0x4d1585 = this.isEdibleOutlined() ? "e" : this.oType;
            var _0x17dfdd = this.getSkinImageObj("gameobj/" + this.oType + "/" + this.specType + "/" + _0x4d1585 + ".png");
            if (_0x17dfdd) {
                _0x39e82d.save();
                var _0x2cdce1 = this.rad;
                _0x39e82d.rotate(this.rPer * Math.PI * 2);
                _0x39e82d.drawImage(_0x17dfdd, -_0x2cdce1, -_0x2cdce1, _0x2cdce1 * 2, _0x2cdce1 * 2);
                _0x39e82d.restore();
            }
        };

        function _0x1855eb() {
            _0x1855eb.superClass.call(this, _0x476229);
            this.doesDrawEffectScale = false;
        }
        _0x35d268.setCustomClassForGameObjType(_0x1855eb, _0x476229);
        var _0x28c171 = GameObj;
        _0x4b2b06.prototype = Object.create(_0x28c171.prototype);
        _0x4b2b06.prototype.constructor = _0x4b2b06;
        _0x4b2b06.superClass = _0x28c171;
        _0x4b2b06.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x4b2b06.prototype.customDraw = function(_0x5e5a14) {
            var _0x5de8f0 = this.isEdibleOutlined() ? "e" : this.oType;
            var _0x40b653 = this.getSkinImageObj("gameobj/" + this.oType + "/" + _0x5de8f0 + ".png");
            if (_0x40b653) {
                _0x39e82d.save();
                var _0x400ee6 = this.rad;
                _0x39e82d.rotate(this.rPer * Math.PI * 2);
                _0x39e82d.drawImage(_0x40b653, -_0x400ee6, -_0x400ee6, _0x400ee6 * 2, _0x400ee6 * 2);
                _0x39e82d.restore();
            }
        };

        function _0x4b2b06() {
            _0x4b2b06.superClass.call(this, _0x320d56);
            this.doesDrawEffectScale = false;
        }
        _0x35d268.setCustomClassForGameObjType(_0x4b2b06, _0x320d56);
        var _0x28c171 = GameObj;
        _0x4abc0c.prototype = Object.create(_0x28c171.prototype);
        _0x4abc0c.prototype.constructor = _0x4abc0c;
        _0x4abc0c.superClass = _0x28c171;
        _0x4abc0c.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x4abc0c.prototype.customDraw = function(_0x42a63d) {
            var _0x554d62 = this.isEdibleOutlined() ? "e" : this.oType;
            var _0x1dbc0b = this.getSkinImageObj("gameobj/" + this.oType + "/" + _0x554d62 + ".png");
            if (_0x1dbc0b) {
                _0x39e82d.save();
                var _0x5f5b6f = this.rad;
                _0x39e82d.rotate(this.rPer * Math.PI * 2);
                _0x39e82d.drawImage(_0x1dbc0b, -_0x5f5b6f, -_0x5f5b6f, _0x5f5b6f * 2, _0x5f5b6f * 2);
                _0x39e82d.restore();
            }
        };

        function _0x4abc0c() {
            _0x4abc0c.superClass.call(this, _0x40152e);
            this.doesDrawEffectScale = false;
        }
        _0x35d268.setCustomClassForGameObjType(_0x4abc0c, _0x40152e);
        var _0x28c171 = GameObj;
        _0x780a56.prototype = Object.create(_0x28c171.prototype);
        _0x780a56.prototype.constructor = _0x780a56;
        _0x780a56.superClass = _0x28c171;
        _0x780a56.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x780a56.prototype.customDraw = function(_0x41b7e5) {
            var _0x1e4a07 = this.isEdibleOutlined() ? "e" : this.oType;
            var _0x1b67cb = this.getSkinImageObj("gameobj/" + this.oType + "/" + _0x1e4a07 + ".png");
            if (_0x1b67cb) {
                _0x39e82d.save();
                var _0x2a3f36 = this.rad;
                _0x39e82d.rotate(this.rPer * Math.PI * 2);
                _0x39e82d.drawImage(_0x1b67cb, -_0x2a3f36, -_0x2a3f36, _0x2a3f36 * 2, _0x2a3f36 * 2);
                _0x39e82d.restore();
            }
        };
        _0x780a56.prototype.updateZ = function() {
            this.z = 1000 + this.rad;
        };

        function _0x780a56() {
            _0x780a56.superClass.call(this, _0x5ab1c8);
            this.doesDrawEffectScale = false;
        }
        _0x35d268.setCustomClassForGameObjType(_0x780a56, _0x5ab1c8);
        var _0x28c171 = GameObj;
        _0xc7178b.prototype = Object.create(_0x28c171.prototype);
        _0xc7178b.prototype.constructor = _0xc7178b;
        _0xc7178b.superClass = _0x28c171;
        _0xc7178b.prototype.updateZ = function() {
            this.z = -158;
        };
        _0xc7178b.prototype.customDraw = function(_0x2cc137) {
            _0x39e82d.save();
            if (_0x5981a2 != _0x4051d6) {
                _0x39e82d.rotate(this.rPer * 2 * Math.PI);
            }
            var _0x4c28ce = 0;
            var _0x11b1a3 = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x22f839 = 6;
            var _0x2f5a9a = 1.5;
            _0x4c28ce = _0x2f5a9a * Math.sin(Math.PI * 2 / _0x22f839 * _0x11b1a3);
            var _0xe39306 = 4;
            if (_0x2cc137) {
                _0x39e82d.fillStyle = "#b0a13b";
                _0x39e82d.beginPath();
                _0x39e82d.arc(0, 0, this.rad, 0, Math.PI * 2);
                _0x39e82d.fill();
            } else {
                _0x39e82d.fillStyle = "#bdae47";
                _0x39e82d.beginPath();
                _0x39e82d.arc(0, 0, Math.max(0, this.rad - _0xe39306 + _0x4c28ce), 0, Math.PI * 2);
                _0x39e82d.fill();
                if (_0x5981a2 != _0x4051d6) {
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(this.rad * 0.45, -this.rad * 0.45 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x4c28ce), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(this.rad * 0.5, this.rad * 0.5 + this.rPer * 15, Math.max(0, this.rad * 0.4 + _0x4c28ce), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x4c28ce), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(-this.rad * 0.75, -this.rad * 0.35 + this.rPer * 15, Math.max(0, this.rad * 0.3 + _0x4c28ce), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    if (this.rad > 50) {
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad + this.rPer * 10, this.rPer * 50, 8, 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad - this.rPer * 20, this.rPer * 50, 10, 10, 0, Math.PI * 2);
                        _0x39e82d.fill();
                    }
                }
            }
            _0x39e82d.restore();
        };

        function _0xc7178b() {
            _0xc7178b.superClass.call(this, _0x3f0029);
            this.animateRadOnSpawn = false;
        }
        _0x35d268.setCustomClassForGameObjType(_0xc7178b, _0x3f0029);
        var _0x28c171 = GameObj;
        _0x21419a.prototype = Object.create(_0x28c171.prototype);
        _0x21419a.prototype.constructor = _0x21419a;
        _0x21419a.superClass = _0x28c171;
        _0x21419a.prototype.updateZ = function() {
            this.z = -158;
        };
        _0x21419a.prototype.customDraw = function(_0x19ddb5) {
            var _0x501627 = 4;
            _0x39e82d.save();
            if (_0x5981a2 != _0x4051d6) {
                _0x39e82d.rotate(this.rPer * 2 * Math.PI);
            }
            var _0x1657b0 = 0;
            var _0x3bcf12 = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x5fcd59 = 6;
            var _0x4591df = 1.5;
            _0x1657b0 = _0x4591df * Math.sin(Math.PI * 2 / _0x5fcd59 * _0x3bcf12);
            if (this.isOasisWater && _0x19ddb5) {
                _0x39e82d.fillStyle = "#AE9F43";
                _0x39e82d.beginPath();
                _0x39e82d.arc(0, 0, this.rad, 0, Math.PI * 2);
                _0x39e82d.fill();
            } else {
                var _0x3a0acc = "#3881C4";
                var _0x501627 = 4;
                _0x39e82d.fillStyle = this.isOasisWater ? _0x3a0acc : "#AE9F43";
                _0x39e82d.beginPath();
                _0x39e82d.arc(0, 0, this.rad, 0, Math.PI * 2);
                _0x39e82d.fill();
                if (_0x5981a2 != _0x4051d6) {
                    _0x39e82d.fillStyle = this.isOasisWater ? _0x3a0acc : "#bdae47";
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(0, 0, Math.max(0, this.rad - _0x501627 + _0x1657b0), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(this.rad * 0.45, -this.rad * 0.45 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x1657b0), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(this.rad * 0.5, this.rad * 0.5 + this.rPer * 15, Math.max(0, this.rad * 0.4 + _0x1657b0), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x1657b0), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(-this.rad * 0.75, -this.rad * 0.35 + this.rPer * 15, Math.max(0, this.rad * 0.3 + _0x1657b0), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    if (this.rad > 50) {
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad + this.rPer * 10, this.rPer * 50, 8, 0, Math.PI * 2);
                        _0x39e82d.fill();
                        _0x39e82d.beginPath();
                        _0x39e82d.arc(this.rad - this.rPer * 20, this.rPer * 50, 10, 10, 0, Math.PI * 2);
                        _0x39e82d.fill();
                    }
                }
            }
            _0x39e82d.restore();
        };
        _0x21419a.prototype.afterCustomDraw = function() {};

        function _0x21419a() {
            _0x21419a.superClass.call(this, _0x27ccb3);
            this.animateRadOnSpawn = false;
        }
        _0x21419a.prototype.readCustomData_onNewlyVisible = function(_0x1ad0c0) {
            _0x21419a.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x1ad0c0);
            this.isOasisWater = _0x1ad0c0.readUInt8() == 1;
            if (this.isOasisWater) {
                var _0x41c12f = _0x1ad0c0.readUInt16() / 10;
                this.setNewRad(_0x41c12f);
            }
        };
        _0x21419a.prototype.readUpdatedProperty = function(_0x460897, _0x50e195) {
            if (_0x460897 == _0xbf72aa) {
                var _0x592fee = _0x50e195.readUInt16() / 10;
                this.setNewRad(_0x592fee);
            }
        };
        _0x21419a.prototype.circles = new Array();
        _0x21419a.prototype.isOasisWater = false;
        _0x35d268.setCustomClassForGameObjType(_0x21419a, _0x27ccb3);
        var _0x28c171 = Animal;
        _0x119924.prototype = Object.create(_0x28c171.prototype);
        _0x119924.prototype.constructor = _0x119924;
        _0x119924.superClass = _0x28c171;
        _0x119924.prototype.getSkinName = function() {
            let _0x26d41b = this.getSpeciesPath() + "/lion";
            _0x26d41b += this.specType == 0 ? "" : this.specType;
            return _0x26d41b;
        };
        _0x119924.prototype.getSpeciesPath = function() {
            return "land/lion/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x119924.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            var _0x301e80 = "";
            if (this.animalSpecies == 1 || this.animalSpecies == 2 || this.animalSpecies == 200) {
                _0x301e80 = "/" + this.animalSubSpecies;
            }
            return _0x301e80;
        };
        _0x119924.prototype.getAbilityInfo = function(_0x1a3618) {
            var _0x3a7beb = {
                abilName: "Loud " + (this.animalSpecies == 2 ? "Meow" : "Noise")
            };
            if (this.animalSpecies == 1 || this.animalSpecies == 2 && this.animalSubSpecies == 2) {
                _0x3a7beb.abilName += "\n& Camouflage";
            }
            var _0x10c5a8 = this.getSubSpecies();
            _0x3a7beb.abilImg = "skins/" + this.getSpeciesPath() + "/lion_roar.png";
            _0x3a7beb.skinThemeID = this.skinThemeID;
            _0x3a7beb.mopeSeasonID = this.mopeSeasonID;
            return _0x3a7beb;
        };
        _0x119924.prototype.animalInfo = function() {
            var _0x1e1cc0 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x1e1cc0.aniName = "Lion";
                    break;
                case 1:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0x1e1cc0.aniName = "Lioness";
                            break;
                        case 1:
                            _0x1e1cc0.aniName = "White Lioness";
                            break;
                        case 2:
                            _0x1e1cc0.aniName = "Black Lioness";
                            break;
                    }
                    break;
                case 2:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0x1e1cc0.aniName = "Lion Cub";
                            break;
                        case 1:
                            _0x1e1cc0.aniName = "White Lion Cub";
                            break;
                        case 2:
                            _0x1e1cc0.aniName = "Black Lion Cub";
                            break;
                    }
                    break;
                case 3:
                    _0x1e1cc0.aniName = "Black-Maned\nLion";
                    break;
                case 4:
                    _0x1e1cc0.aniName = "White Lion";
                    break;
                case 5:
                    _0x1e1cc0.aniName = "Black Lion";
                    break;
                case 100:
                    _0x1e1cc0.aniName = "The Mantalian";
                    break;
                case 200:
                    if (this.animalSubSpecies == 0) {
                        _0x1e1cc0.aniName = "Clowoud Lion";
                    } else if (this.animalSubSpecies == 1) {
                        _0x1e1cc0.aniName = "Sunset Clowoud Lion";
                    } else if (this.animalSubSpecies == 2) {
                        _0x1e1cc0.aniName = "Storm Clowoud Lion";
                    }
                    break;
                case 111:
                    _0x1e1cc0.aniName = "Classic Lion";
                    break;
                case 112:
                    _0x1e1cc0.aniName = "Gold-trim Lion";
                    break;
                case 202:
                    _0x1e1cc0.aniName = "Chimera Lion";
                    break;
                case 220:
                    _0x1e1cc0.aniName = "Ghastly Jade Lion";
                    break;
            }
            _0x1e1cc0.aniDesc = "";
            if (this.animalSpecies == 1) {
                _0x1e1cc0.upgradeText = "UPGRADED to " + _0x1e1cc0.aniName + "!\n Lioness are fast and can launch an ambush attack. (Stop moving to camouflage!)";
            } else if (this.animalSpecies == 2) {
                _0x1e1cc0.upgradeText = "UPGRADED to " + _0x1e1cc0.aniName + "!\n Press W to release a mighty MEOW!";
                if (this.animalSubSpecies == 2) {
                    _0x1e1cc0.upgradeText += " (Stop moving to camouflage!)";
                }
            } else {
                _0x1e1cc0.upgradeText = "UPGRADED to " + _0x1e1cc0.aniName + "!\n Press W to release a mighty ROAR (Rawr!)";
            }
            _0x1e1cc0.aniCol = "#FF9000";
            _0x1e1cc0.skinName = this.getSkinName();
            return _0x1e1cc0;
        };
        _0x119924.prototype.setStealth = function() {
            _0x119924.superClass.prototype.setStealth.call(this);
            if (this.flag_stealth) {
                if (this.animalSpecies == 1) {
                    this.idealOp = _0x166276 == this.id ? 0.1 : 0;
                }
            }
        };
        _0x119924.prototype.biteStart = 0;
        _0x119924.prototype.flapAmount = 3;
        _0x119924.prototype.flapDur = 1.5;
        _0x119924.prototype.roarStartT = -500;
        var _0x53deb1 = 1;
        var _0x1f0b23 = 1;
        _0x119924.prototype.drawSkinCustomization = function() {
            this.setSkinScale();
            if (!this.flag_usingAbility) {
                this.biteStart = 0;
                return;
            } else {
                if (this.biteStart == 0) {
                    this.biteStart = _0x4ec996 + this.roarStartT;
                }
                if (this.specType != 0 && this.specType != undefined) {
                    var _0x3fef39 = "skins/" + this.getSpeciesPath() + "/lion_head1.png";
                    var _0x1694dc = this.getSkinImageObj(_0x3fef39);
                    var _0x16b793 = (_0x4ec996 - this.biteStart) / 1000;
                    var _0x5515a3 = this.skinScale * 1.07;
                    var _0x589f58 = this.skinRad;
                    if (_0x1694dc) {
                        var _0x2f5680 = 0;
                        var _0x408388 = this.flapAmount - (this.animalSpecies == 2 ? 0.5 : 0);
                        _0x2f5680 = _0x5981a2 != _0x4051d6 ? _0x1b594e(_0x16b793, this.flapDur, _0x408388, 2) : this.flapAmount;
                        _0x39e82d.save();
                        var _0x589f58 = this.rad;
                        _0x39e82d.drawImage(_0x1694dc, -_0x589f58 * _0x5515a3, (-_0x589f58 + _0x589f58 * 0.1) * _0x5515a3 - _0x2f5680, _0x589f58 * 2 * _0x5515a3, _0x589f58 * 2 * _0x5515a3);
                        _0x39e82d.restore();
                    }
                }
            }
        };
        _0x119924.prototype.drawNickName = function(_0xe2f482) {
            if (this.flag_stealth) {
                _0xe2f482 = 0;
            }
            _0x119924.superClass.prototype.drawNickName.call(this, _0xe2f482);
        };

        function _0x119924() {
            _0x119924.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x119924, _0x48c056, _0x3bf8ca);
        var _0x28c171 = Animal;
        _0x11d1ad.prototype = Object.create(_0x28c171.prototype);
        _0x11d1ad.prototype.constructor = _0x11d1ad;
        _0x11d1ad.superClass = _0x28c171;
        _0x11d1ad.prototype.animalInfo = function() {
            var _0x10631f = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x10631f.aniName = "Rhino";
                    break;
                case 1:
                    _0x10631f.aniName = "White Rhino";
                    break;
                case 2:
                    _0x10631f.aniName = "Black Rhino";
                    break;
                case 3:
                    _0x10631f.aniName = "Woolly Rhino";
                    break;
                case 111:
                    _0x10631f.aniName = "Classic Rhino";
                    break;
                case 112:
                    _0x10631f.aniName = "Gold-trim Rhino";
                    break;
                case 201:
                    _0x10631f.aniName = "Shrub Rhino";
                    break;
                case 202:
                    _0x10631f.aniName = "Cotton Candy Rhino";
                    break;
                case 204:
                    _0x10631f.aniName = "Acuti Rhino";
                    break;
                case 220:
                    _0x10631f.aniName = "Ink Rhino";
                    break;
            }
            _0x10631f.skinName = this.getSkinName();
            _0x10631f.aniDesc = "";
            _0x10631f.upgradeText = "UPGRADED to " + _0x10631f.aniName + "!\n Press W to CHARGE with your mighty horn!";
            _0x10631f.aniCol = "#94a3a9";
            return _0x10631f;
        };
        _0x11d1ad.prototype.getAbilityInfo = function(_0x3b1477) {
            var _0x3cf9fe = {
                abilName: "Charge!"
            };
            _0x3cf9fe.abilImg = "skins/" + this.getSpeciesPath() + "/rhino_charge.png";
            _0x3cf9fe.skinThemeID = this.skinThemeID;
            _0x3cf9fe.mopeSeasonID = this.mopeSeasonID;
            return _0x3cf9fe;
        };
        _0x11d1ad.prototype.getSkinName = function() {
            let _0x503686 = this.getSpeciesPath() + "/rhino";
            _0x503686 += this.specType == 0 ? "" : 1;
            return _0x503686;
        };
        _0x11d1ad.prototype.getSpeciesPath = function() {
            return "land/rhino/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x11d1ad.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        var _0x3eb901 = 0.1;
        _0x11d1ad.prototype.drawOnTopOfSkinImg = function() {
            if (_0x2480f7) {
                _0x11d1ad.superClass.prototype.drawOnTopOfSkinImg.call(this);
            }
        };
        _0x11d1ad.prototype.drawSkinCustomization = function() {
            if (_0x2480f7) {
                _0x11d1ad.superClass.prototype.drawSkinCustomization.call(this);
            } else if (this.flag_usingAbility) {
                var _0x211df8 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/rhino_head1.png");
                var _0x3eee9f = this.skinScale * 0.98;
                var _0x5498ee = this.skinRad;
                if (_0x211df8) {
                    frame = 0;
                    _0x39e82d.save();
                    var _0x5498ee = this.rad;
                    _0x39e82d.drawImage(_0x211df8, -_0x5498ee * _0x3eee9f, (-_0x5498ee + _0x5498ee * _0x3eb901) * _0x3eee9f + frame, _0x5498ee * 2 * _0x3eee9f, _0x5498ee * 2 * _0x3eee9f);
                    _0x39e82d.restore();
                }
            }
        };

        function _0x11d1ad() {
            _0x11d1ad.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x11d1ad, _0x48c056, _0x273128);
        var _0x28c171 = Animal;
        _0x3ca5e9.prototype = Object.create(_0x28c171.prototype);
        _0x3ca5e9.prototype.constructor = _0x3ca5e9;
        _0x3ca5e9.superClass = _0x28c171;
        _0x3ca5e9.prototype.animalInfo = function() {
            var _0x1894b8 = {};
            _0x1894b8.skinName = "land/pig/" + this.animalSpecies + this.getSubSpecies() + "/pig";
            _0x1894b8.aniName = "Pig";
            switch (this.animalSpecies) {
                case 0:
                    _0x1894b8.aniName = "Pig";
                    _0x1894b8.upgradeText = "UPGRADED to " + _0x1894b8.aniName + "!\n  Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)";
                    break;
                case 1:
                    _0x1894b8.aniName = "Pinky Pig";
                    _0x1894b8.upgradeText = "UPGRADED to " + _0x1894b8.aniName + "!\n  Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)";
                    break;
                case 111:
                    _0x1894b8.aniName = "Classic Pig";
                    _0x1894b8.upgradeText = "UPGRADED to " + _0x1894b8.aniName + "!\n  Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)";
                    break;
                case 112:
                    _0x1894b8.aniName = "Gold-trim Pig";
                    _0x1894b8.upgradeText = "UPGRADED to " + _0x1894b8.aniName + "!\n  Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)";
                    break;
                    break;
                case 201:
                    _0x1894b8.aniName = "Floaty Pig";
                    _0x1894b8.upgradeText = "UPGRADED to " + _0x1894b8.aniName + "!\n  Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)";
                    break;
                case 204:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0x1894b8.aniName = "Butcher Pig";
                            break;
                        case 1:
                            _0x1894b8.aniName = "Hot Dog Pig";
                    }
                    _0x1894b8.upgradeText = "UPGRADED to " + _0x1894b8.aniName + "!\n  Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)";
                    break;
                case 2: {
                    _0x1894b8.aniName = "Stinky Pig";
                    _0x1894b8.upgradeText = "UPGRADED to " + _0x1894b8.aniName + "!\n " + _0x1894b8.aniName + " dives through MUD (can use stink everywhere!)";
                }
                break;
                case 202:
                    _0x1894b8.aniName = "Piggy Bank";
                    _0x1894b8.upgradeText = "UPGRADED to " + _0x1894b8.aniName + "!\n  Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)";
                    break;
                case 220:
                    _0x1894b8.aniName = "Fumigator Pig";
                    _0x1894b8.upgradeText = "UPGRADED to " + _0x1894b8.aniName + "!\n  Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)";
                    break;
            }
            _0x1894b8.aniCol = "#DD6BD4";
            return _0x1894b8;
        };
        _0x3ca5e9.prototype.getAbilityInfo = function(_0x2530ed) {
            var _0x5f0818 = {
                abilName: "Stink cloud"
            };
            _0x5f0818.abilImg = "skins/" + this.getSpeciesPath() + "/pig.png";
            _0x5f0818.skinThemeID = this.skinThemeID;
            _0x5f0818.mopeSeasonID = this.mopeSeasonID;
            return _0x5f0818;
        };
        _0x3ca5e9.prototype.getSkinName = function() {
            let _0x4ce0d8 = this.getSpeciesPath() + "/pig";
            return _0x4ce0d8;
        };
        _0x3ca5e9.prototype.getSpeciesPath = function() {
            return "land/pig/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x3ca5e9.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            if (this.animalSpecies === 204) {
                return "/" + this.animalSubSpecies;
            } else {
                return "";
            }
        };
        _0x3ca5e9.prototype.animalDiveColor = function() {
            if (this.flag_underWater) {
                if (this.flag_eff_isInMud) {
                    return "#7E6A35";
                } else {
                    return "#4E71C3";
                }
            }
            return "";
        };
        _0x3ca5e9.prototype.animalDivesInMud = function() {
            return true;
        };

        function _0x3ca5e9() {
            _0x3ca5e9.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x3ca5e9, _0x48c056, _0x2bdc31);
        var _0x28c171 = Animal;
        _0x5ef000.prototype = Object.create(_0x28c171.prototype);
        _0x5ef000.prototype.constructor = _0x5ef000;
        _0x5ef000.superClass = _0x28c171;
        _0x5ef000.prototype.animalInfo = function() {
            var _0x510008 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x510008.aniName = "Deer";
                    break;
                case 1:
                    _0x510008.aniName = "Doe";
                    break;
                case 2:
                    _0x510008.aniName = "Marsh Deer";
                    break;
                case 100:
                    _0x510008.aniName = "The Wendigo";
                    break;
                case 111:
                    _0x510008.aniName = "Classic Deer";
                    break;
                case 112:
                    _0x510008.aniName = "Gold-trim Deer";
                    break;
                case 202:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0x510008.aniName = "Mezavor";
                            break;
                        case 1:
                            _0x510008.aniName = "Divine Deer";
                    }
                    break;
            }
            _0x510008.aniDesc = "";
            _0x510008.upgradeText = "UPGRADED to " + _0x510008.aniName + "! \nPress W to dig up food! \nDig in mud for better food!";
            _0x510008.aniCol = "#C4773E";
            _0x510008.skinName = this.getSkinName();
            return _0x510008;
        };
        _0x5ef000.prototype.getSkinName = function() {
            let _0x2414d6 = this.getSpeciesPath() + "/deer";
            return _0x2414d6;
        };
        _0x5ef000.prototype.getSpeciesPath = function() {
            return "land/deer/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x5ef000.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            if (this.animalSpecies === 202) {
                return "/" + this.animalSubSpecies;
            } else {
                return "";
            }
        };
        _0x5ef000.prototype.getAbilityInfo = function(_0x516a4d) {
            var _0x5004b1 = {
                abilName: "Dig Food!"
            };
            _0x5004b1.abilImg = "skins/" + this.getSpeciesPath() + "/deer.png";
            _0x5004b1.skinThemeID = this.skinThemeID;
            _0x5004b1.mopeSeasonID = this.mopeSeasonID;
            return _0x5004b1;
        };
        _0x5ef000.prototype.moveF = 0.08;
        _0x5ef000.prototype.jumpAnim = null;
        _0x5ef000.prototype.frame = 0;
        _0x5ef000.prototype.drawUnderSkinImg = function() {
            if (this.flag_usingAbility) {
                if (this.animalType == _0x52cad3 || this.animalType == _0x1171ab) {
                    var _0x5c28fa = (_0x4ec996 - this.spawnTime) / 1000;
                    var _0x41b08c = 1.5;
                    var _0x3b30c4 = 1;
                    var _0x5d693f = _0x3b30c4 * Math.sin(Math.PI * 2 / _0x41b08c * _0x5c28fa);
                    var _0x2c2acc = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha *= 0.8;
                    _0x466d9b(0, this.rad * 0.3, this.rad * (0.9 + _0x5d693f * 0.12), "#7F582B");
                    _0x466d9b(0, -this.rad * 0.3, this.rad * (1.05 + _0x5d693f * 0.09), "#7F582B");
                    _0x39e82d.globalAlpha = _0x2c2acc;
                }
            }
        };

        function _0x5ef000() {
            _0x5ef000.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x5ef000, _0x48c056, _0x52cad3);
        var _0x28c171 = Animal;
        _0x5bb07a.prototype = Object.create(_0x28c171.prototype);
        _0x5bb07a.prototype.constructor = _0x5bb07a;
        _0x5bb07a.superClass = _0x28c171;
        _0x5bb07a.prototype.animalInfo = function() {
            var _0x4a42e6 = {
                aniCol: "#755A2A"
            };
            switch (this.animalSpecies) {
                case 0:
                    _0x4a42e6.aniName = "Donkey";
                    _0x4a42e6.upgradeText = "UPGRADED to " + _0x4a42e6.aniName + "!\nPress 'W' to give RARE kick and stun your opponents";
                    break;
                case 1:
                    _0x4a42e6.aniName = "Jackass";
                    _0x4a42e6.aniCol = "#000";
                    _0x4a42e6.upgradeText = "UPGRADED to " + _0x4a42e6.aniName + "!\nPress 'W' to give RARE kick and stun your opponents.\n(Keep mouse close to your animal along with boosting to become a mad donkey!)";
                    break;
                case 2:
                    _0x4a42e6.aniName = "Zonkey";
                    _0x4a42e6.aniCol = "#755A2A";
                    _0x4a42e6.upgradeText = "UPGRADED to " + _0x4a42e6.aniName + "!\nPress 'W' to give RARE kick and stun your opponents";
                    break;
                case 100:
                    _0x4a42e6.aniName = "Equusthulhu";
                    _0x4a42e6.aniCol = "#755A2A";
                    _0x4a42e6.upgradeText = "UPGRADED to " + _0x4a42e6.aniName + "!\nPress 'W' to give RARE kick and stun your opponents";
                    break;
                case 111:
                    _0x4a42e6.aniName = "Classic Donkey";
                    _0x4a42e6.aniCol = "#755A2A";
                    _0x4a42e6.upgradeText = "UPGRADED to " + _0x4a42e6.aniName + "!\nPress 'W' to give RARE kick and stun your opponents";
                    break;
                case 112:
                    _0x4a42e6.aniName = "Gold-trim Donkey";
                    _0x4a42e6.aniCol = "#755A2A";
                    _0x4a42e6.upgradeText = "UPGRADED to " + _0x4a42e6.aniName + "!\nPress 'W' to give RARE kick and stun your opponents";
                    break;
                case 202:
                    _0x4a42e6.aniName = "Headless Mule";
                    _0x4a42e6.upgradeText = "UPGRADED to " + _0x4a42e6.aniName + "!\nPress 'W' to give RARE kick and stun your opponents";
                    break;
            }
            _0x4a42e6.skinName = this.getSkinName();
            _0x4a42e6.aniDesc = "";
            return _0x4a42e6;
        };
        _0x5bb07a.prototype.getAbilityInfo = function(_0x793c14) {
            var _0x12540f = {
                abilName: "Back Kick!"
            };
            _0x12540f.abilImg = "skins/" + this.getSpeciesPath() + "/donkey.png";
            _0x12540f.skinThemeID = this.skinThemeID;
            _0x12540f.mopeSeasonID = this.mopeSeasonID;
            return _0x12540f;
        };
        _0x5bb07a.prototype.getSkinName = function() {
            let _0x5c879c = this.getSpeciesPath() + "/donkey";
            if (this.specType != 0) {
                if (this.specType > 2) {
                    _0x5c879c += 3;
                } else {
                    _0x5c879c += this.specType;
                }
            }
            return _0x5c879c;
        };
        _0x5bb07a.prototype.getSpeciesPath = function() {
            return "land/donkey/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x5bb07a.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x5bb07a.prototype.drawUnderSkinImg = function() {
            if (this.flag_usingAbility && this.biteStart > 0) {
                _0x39e82d.save();
                var _0xc994f8 = _0x39e82d.globalAlpha;
                _0x39e82d.globalAlpha = _0xc994f8 * 1;
                var _0x298152 = "skins/" + this.getSpeciesPath() + "/legs.png";
                var _0x51e6f0 = this.getSkinImageObj(_0x298152);
                if (_0x51e6f0) {
                    var _0x32122d = Math.min(1, (_0x4ec996 - this.biteStart) / 1350);
                    var _0x17de5b = this.rad;
                    var _0x1a74a0 = 0;
                    var _0x2a5ffe = this.rad * 1;
                    var _0x4d0109 = _0x17de5b * 2;
                    var _0xa43327 = _0x17de5b * 2 * _0x32122d;
                    var _0x4d914a = 0.5;
                    var _0x530dc8 = 2.5;
                    _0x39e82d.drawImage(_0x51e6f0, _0x1a74a0 + _0x4d0109 * -_0x4d914a, _0x2a5ffe + _0xa43327 * -_0x530dc8, _0x4d0109, _0xa43327);
                }
                _0x39e82d.restore();
            }
        };
        _0x5bb07a.prototype.biteStart = 0;
        _0x5bb07a.prototype.flapAmount = 0.3;
        _0x5bb07a.prototype.flapDur = 1;
        _0x5bb07a.prototype.roarStartT = -500;
        _0x5bb07a.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                this.biteStart = 0;
                if (this.specType == 0) {
                    return;
                }
                var _0x5ea0a4 = this.specType - 2;
                var _0x568b25 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/donkey_head" + _0x5ea0a4 + ".png");
                var _0xdf1d5 = this.skinRad;
                if (_0x568b25) {
                    _0x39e82d.save();
                    var _0xdf1d5 = this.rad * 1.3;
                    var _0x5ab252 = 0;
                    var _0x113fdf = this.rad;
                    var _0x1f613d = 1;
                    var _0x5cafc1 = _0xdf1d5 * 2 * _0x1f613d;
                    var _0x4a3199 = _0xdf1d5 * 2 * _0x1f613d;
                    var _0x2e862e = 0.5;
                    var _0x19bca9 = 0.7;
                    _0x39e82d.drawImage(_0x568b25, _0x5ab252 + _0x5cafc1 * -_0x2e862e, _0x113fdf + _0x4a3199 * -_0x19bca9, _0x5cafc1, _0x4a3199);
                    _0x39e82d.restore();
                }
            } else {
                if (this.biteStart == 0) {
                    this.biteStart = _0x4ec996 + this.roarStartT;
                }
                var _0xc5e5c = (_0x4ec996 - this.biteStart) / 1000;
                var _0x38b6dc = 0;
                _0x38b6dc = _0x1b594e(_0xc5e5c, this.flapDur, this.flapAmount, 2);
                var _0x568b25 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/donkey_head" + this.specType + ".png");
                var _0xdf1d5 = this.skinRad;
                if (_0x568b25) {
                    _0x39e82d.save();
                    var _0x1f613d = 0;
                    var _0x2b03bf = 1;
                    var _0x30fc6b = 0.85;
                    var _0x53a020 = 1.2;
                    if (this.specType == 1) {
                        _0x1f613d = -25;
                        _0x2b03bf = 1.2 - _0x38b6dc * 0.3;
                        _0x30fc6b = 0.8 + _0x38b6dc * 0.3;
                        _0x53a020 = 1.4 - _0x38b6dc * 0.3;
                    } else if (this.specType == 2) {
                        _0x1f613d = 25;
                        _0x2b03bf = 0.8 - _0x38b6dc * 0.3;
                        _0x30fc6b = 0.8 + _0x38b6dc * 0.3;
                        _0x53a020 = 1.4 - _0x38b6dc * 0.3;
                        _0x38b6dc *= -1;
                    }
                    var _0xdf1d5 = this.rad * 1;
                    var _0x5ab252 = 0;
                    var _0x113fdf = this.rad;
                    var _0x5cafc1 = _0xdf1d5 * 2 * _0x53a020;
                    var _0x4a3199 = _0xdf1d5 * 2 * _0x53a020;
                    var _0x2e862e = _0x2b03bf * 0.5;
                    var _0x19bca9 = _0x30fc6b * 1;
                    _0x39e82d.rotate(_0x4bfce6(_0x1f613d) + _0x38b6dc);
                    _0x39e82d.drawImage(_0x568b25, _0x5ab252 + _0x5cafc1 * -_0x2e862e, _0x113fdf + _0x4a3199 * -_0x19bca9, _0x5cafc1, _0x4a3199);
                    _0x39e82d.restore();
                }
            }
        };

        function _0x5bb07a() {
            _0x5bb07a.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x5bb07a, _0x48c056, _0x2a825f);
        var _0x28c171 = Animal;
        _0x459e87.prototype = Object.create(_0x28c171.prototype);
        _0x459e87.prototype.constructor = _0x459e87;
        _0x459e87.superClass = _0x28c171;
        _0x459e87.prototype.animalInfo = function() {
            var _0x26d4df = {
                aniCol: "#755A2A"
            };
            switch (this.animalSpecies) {
                case 0:
                    _0x26d4df.aniName = "Zebra";
                    break;
                case 1:
                    _0x26d4df.aniName = "Okapi";
                    break;
                case 2:
                    _0x26d4df.aniName = "Okapi";
                    break;
                case 100:
                    _0x26d4df.aniName = "Unicornze";
                    break;
                case 111:
                    _0x26d4df.aniName = "Classic Zebra";
                    break;
                case 112:
                    _0x26d4df.aniName = "Gold-trim Zebra";
                    break;
                case 201:
                    _0x26d4df.aniName = "Playground Zebra";
                    break;
                case 202:
                    _0x26d4df.aniName = "Synth Zebra";
                    break;
            }
            _0x26d4df.aniCol = "#000";
            _0x26d4df.skinName = this.getSkinName();
            _0x26d4df.upgradeText = "UPGRADED to " + _0x26d4df.aniName + "!\n Press 'W' to give RARE kick and stun your opponents";
            _0x26d4df.aniDesc = "";
            return _0x26d4df;
        };
        _0x459e87.prototype.getSkinImageObj = function(_0x541c53) {
            var _0x50e7b3 = this.animalSpecies === 201 || this.animalSpecies === 2 || this.animalSpecies === 1 || this.animalSpecies === 100 ? 1 : this.mopeSeasonID;
            return this.getSkinImageObjForSeason(_0x541c53, _0x50e7b3);
        };
        _0x459e87.prototype.getAbilityInfo = function(_0x5abf1c) {
            var _0x7ed00a = {
                abilName: "Side Kick!"
            };
            _0x7ed00a.abilImg = "skins/" + this.getSpeciesPath() + "/ability.png";
            _0x7ed00a.skinThemeID = this.skinThemeID;
            _0x7ed00a.mopeSeasonID = this.mopeSeasonID;
            return _0x7ed00a;
        };
        _0x459e87.prototype.getSkinName = function() {
            let _0x4e881c = this.getSpeciesPath() + "/zebra";
            return _0x4e881c;
        };
        _0x459e87.prototype.getSpeciesPath = function() {
            return "land/zebra/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x459e87.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };

        function _0x459e87() {
            _0x459e87.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x459e87, _0x48c056, _0x2cd75a);
        var _0x28c171 = Animal;
        _0x4ae87b.prototype = Object.create(_0x28c171.prototype);
        _0x4ae87b.prototype.constructor = _0x4ae87b;
        _0x4ae87b.superClass = _0x28c171;
        _0x4ae87b.prototype.objSkinSpotsCanvas = null;
        _0x4ae87b.prototype.animalInfo = function() {
            var _0x1c131b = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x1c131b.aniName = "Mouse";
                    break;
                case 1:
                    _0x1c131b.aniName = "Golden Mouse";
                    break;
                case 2:
                    _0x1c131b.aniName = "Purple Mouse";
                    break;
                case 100:
                    _0x1c131b.aniName = "Robo Mouse";
                    break;
                case 112:
                    _0x1c131b.aniName = "Gold-trim Mouse";
                    break;
                case 201:
                    _0x1c131b.aniName = "Bubbly Mouse";
                    break;
                case 111:
                    _0x1c131b.aniName = "Classic Mouse";
                    break;
                case 202:
                    _0x1c131b.aniName = "Super Mouse";
                    break;
                case 204:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0x1c131b.aniName = "Dark Plague Rat";
                            break;
                        case 1:
                            _0x1c131b.aniName = "Light Plague Rat";
                    }
                    break;
                case 250:
                    _0x1c131b.aniName = "Sample Mouse";
                    break;
            }
            _0x1c131b.upgradeText = "You're a tiny " + _0x1c131b.aniName + "- Eat food to grow!";
            _0x1c131b.aniCol = "gray";
            _0x1c131b.skinName = "land/mouse/" + this.animalSpecies + this.getSubSpecies() + "/mouse";
            return _0x1c131b;
        };
        _0x4ae87b.prototype.getSkinName = function() {
            return "land/mouse/" + this.animalSpecies + this.getSubSpecies() + "/mouse";
        };
        _0x4ae87b.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            if (this.animalSpecies === 204) {
                return "/" + this.animalSubSpecies;
            } else {
                return "";
            }
        };

        function _0x4ae87b() {
            _0x4ae87b.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x4ae87b, _0x48c056, _0x473f55);
        var _0x28c171 = Animal;
        _0x2a67eb.prototype = Object.create(_0x28c171.prototype);
        _0x2a67eb.prototype.constructor = _0x2a67eb;
        _0x2a67eb.superClass = _0x28c171;
        _0x2a67eb.prototype.objSkinSpotsCanvas = null;
        _0x2a67eb.prototype.getSkinName = function() {
            let _0x3b2585 = this.getSpeciesPath() + "/bear";
            return _0x3b2585;
        };
        _0x2a67eb.prototype.getSpeciesPath = function() {
            return "land/bear/" + this.animalSpecies + "/" + this.animalSubSpecies;
        };
        _0x2a67eb.prototype.animalInfo = function() {
            var _0x12d4c5 = {};
            var _0x287ab1 = "";
            switch (this.animalSubSpecies) {
                case 0:
                    switch (this.animalSpecies) {
                        case 0:
                            _0x12d4c5.aniName = "Bear";
                            _0x12d4c5.upgradeText = "UPGRADED to BEAR!\n Bears climb through green hills! (Press W to use your claw!)";
                            _0x12d4c5.aniCol = "#99591C";
                            _0x287ab1 = "bear";
                            break;
                        case 111:
                            _0x12d4c5.aniName = "Classic Bear";
                            _0x12d4c5.upgradeText = "UPGRADED to " + _0x12d4c5.aniName + "!\n " + _0x12d4c5.aniName + " climb through green hills! (Press W to use your claw!)";
                            break;
                        case 112:
                            _0x12d4c5.aniName = "Gold-trim Bear";
                            _0x12d4c5.upgradeText = "UPGRADED to " + _0x12d4c5.aniName + "!\n " + _0x12d4c5.aniName + " climb through green hills! (Press W to use your claw!)";
                            break;
                    }
                    break;
                case 1:
                    _0x12d4c5.aniName = "Panda";
                    _0x12d4c5.upgradeText = "UPGRADED to " + _0x12d4c5.aniName + "!\n " + _0x12d4c5.aniName + " climb through green hills! (Press W to use your claw!)";
                    _0x12d4c5.aniCol = "#99591C";
                    _0x287ab1 = "bear";
                    break;
                case 202:
                    _0x12d4c5.aniName = "Beekeeper Bear";
                    _0x12d4c5.upgradeText = "UPGRADED to " + _0x12d4c5.aniName + "!\n " + _0x12d4c5.aniName + " climb through green hills! (Press W to use your claw!)";
                    break;
                case 2023:
                    _0x12d4c5.aniName = "Spooky Bear";
                    _0x12d4c5.upgradeText = "UPGRADED to " + _0x12d4c5.aniName + "!\n " + _0x12d4c5.aniName + " climb through green hills! (Press W to use your claw!)";
                    break;
                case 204:
                    _0x12d4c5.aniName = "Mr. Teddy";
                    _0x12d4c5.upgradeText = "UPGRADED to " + _0x12d4c5.aniName + "!\n " + _0x12d4c5.aniName + " climb through green hills! (Press W to use your claw!)";
                    _0x12d4c5.aniCol = "#99591C";
                    _0x287ab1 = "mr_teddy";
                    break;
            }
            _0x12d4c5.aniCol = "#CAC05B";
            _0x12d4c5.skinName = this.getSkinName();
            return _0x12d4c5;
        };
        _0x2a67eb.prototype.getAbilityInfo = function(_0x2ff752) {
            var _0xe33526 = {
                abilName: "Claw Slash!"
            };
            _0xe33526.abilImg = "skins/" + this.getSpeciesPath() + "/slash.png";
            _0xe33526.skinThemeID = this.skinThemeID;
            _0xe33526.mopeSeasonID = this.mopeSeasonID;
            return _0xe33526;
        };

        function _0x2a67eb() {
            _0x2a67eb.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x2a67eb, _0x48c056, _0x28396e);
        var _0x28c171 = Animal;
        _0x25486b.prototype = Object.create(_0x28c171.prototype);
        _0x25486b.prototype.constructor = _0x25486b;
        _0x25486b.superClass = _0x28c171;
        _0x25486b.prototype.objSkinSpotsCanvas = null;
        _0x25486b.prototype.animalInfo = function() {
            var _0x4507bf = {};
            switch (this.animalSubSpecies) {
                case 0:
                    _0x4507bf.aniName = "Crocodile";
                    _0x4507bf.aniCol = "#30F51C";
                    break;
                case 1:
                    _0x4507bf.aniName = "Giant Crocodile";
                    _0x4507bf.aniCol = "#757e71";
                    break;
                case 100:
                    _0x4507bf.aniName = "Uncle Sam";
                    _0x4507bf.aniCol = "#757e71";
                    break;
                case 201:
                    _0x4507bf.aniName = "Big Hoss";
                    _0x4507bf.aniCol = "#757e71";
                    break;
                case 202:
                    _0x4507bf.aniName = "Croczilla";
                    break;
                case 203:
                    _0x4507bf.aniName = "Ammit";
                    break;
                case 2023:
                    _0x4507bf.aniName = "Sharkzilla";
                    break;
            }
            if (this.animalSpecies == 111) {
                _0x4507bf.aniName = "Classic Crocodile";
            }
            if (this.animalSpecies == 112) {
                _0x4507bf.aniName = "Gold-trim Crocodile";
            }
            _0x4507bf.upgradeText = "UPGRADED to " + _0x4507bf.aniName + "!\n Press W to bite and drag around animals! \n+ (Now hide in water spots)+ Swim well in Mud, Lakes & Oceans!";
            _0x4507bf.skinName = this.getSkinName();
            return _0x4507bf;
        };
        _0x25486b.prototype.getSkinName = function() {
            let _0x1a160d = this.getSpeciesPath() + "/croc";
            return _0x1a160d;
        };
        _0x25486b.prototype.getSpeciesPath = function() {
            return "land/croc/" + this.animalSpecies + "/" + this.animalSubSpecies;
        };
        _0x25486b.prototype.setStealth = function() {
            _0x25486b.superClass.prototype.setStealth.call(this);
            if (this.isCamouflage) {
                this.idealOp = _0x166276 == this.id ? 0.1 : 0;
            }
        };
        _0x25486b.prototype.isCamouflage = false;
        _0x25486b.prototype.drawUnderSkinTail = function(_0x3ee369) {
            if (!this.isCamouflage) {
                _0x25486b.superClass.prototype.drawUnderSkinTail.call(this, _0x3ee369);
            }
        };
        _0x25486b.prototype.drawHealthBar = function() {
            if (!this.isCamouflage) {
                _0x25486b.superClass.prototype.drawHealthBar.call(this);
            }
        };
        _0x25486b.prototype.customUpdatedProperty = function(_0x1dd5fe, _0x56b45a) {
            if (_0x1dd5fe == _0x1db639) {
                this.isCamouflage = _0x56b45a.readUInt8() == 1;
                this.setStealth();
            }
        };
        _0x25486b.prototype.readCustomData_onNewlyVisible = function(_0x1e2507) {
            _0x25486b.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x1e2507);
            this.isCamouflage = _0x1e2507.readUInt8() == 1;
            this.setStealth();
        };
        _0x25486b.prototype.getAbilityInfo = function(_0x483844) {
            var _0x317739 = {
                abilName: "Bite Grab!"
            };
            _0x317739.abilImg = "skins/" + this.getSpeciesPath() + "/croc.png";
            _0x317739.skinThemeID = this.skinThemeID;
            _0x317739.mopeSeasonID = this.mopeSeasonID;
            return _0x317739;
        };

        function _0x25486b() {
            _0x25486b.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x25486b, _0x48c056, _0xce5aa0);
        var _0x28c171 = Animal;
        _0x119c4b.prototype = Object.create(_0x28c171.prototype);
        _0x119c4b.prototype.constructor = _0x119c4b;
        _0x119c4b.superClass = _0x28c171;
        _0x119c4b.prototype.updateZ = function() {
            this.z = 100000;
        };
        _0x119c4b.prototype.canUseTailslap = false;
        _0x119c4b.prototype.tailState = 0;
        _0x119c4b.prototype.lava = 100;
        _0x119c4b.prototype.getSkinName = function() {
            var _0x19c653 = _0x1d523b || _0x5981a2 == _0x4051d6 ? "kingdragon" : "kingdragon_body";
            return "volcano/kingdragon/" + this.animalSpecies + "/" + _0x19c653;
        };
        _0x119c4b.prototype.customUpdatedProperty = function(_0x40ced2, _0x1f2c63) {
            if (_0x40ced2 == _0x43c0e1) {
                this.canUseTailslap = _0x1f2c63.readUInt8() == 1;
            } else if (_0x40ced2 == _0x1995af) {
                this.tailState = _0x1f2c63.readUInt16() / 100;
            }
        };
        _0x119c4b.prototype.leftWingAnim = null;
        _0x119c4b.prototype.flapAngleDiff = 3;
        _0x119c4b.prototype.flapAngle = 3;
        _0x119c4b.prototype.flapF = 0.1;
        _0x119c4b.prototype.flapDur = 2;
        _0x119c4b.prototype.sF = 0.02;
        _0x119c4b.prototype.drawWings = function() {
            if (_0x5981a2 == _0x4051d6 || _0x1d523b) {
                return;
            }
            if (this.leftWingAnim == null) {
                this.leftWingAnim = new _0x28a15f(this, this.flapDur, _0x28a15f.wave);
                this.leftWingAnim.keepLastFrame = true;
                this.leftWingAnim.loop = true;
                this.leftWingAnim.onFrameEntered = function(_0x2eb8e3) {
                    this.forObj.frame1 = _0x2eb8e3;
                };
            }
            if (this.leftWingAnim != null) {
                this.leftWingAnim.run();
            }
            var _0x5a20e7 = this.rad - this.outlineW;
            var _0x39625d = this.frame1 * this.sF * _0x5a20e7;
            var _0x4bf602 = -(-this.flapF + this.frame1);
            var _0x18a4c1 = _0x4bf602 * _0x4bfce6(this.flapAngle);
            var _0x3b2684 = 500 / 340;
            var _0x113c13 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/left_wing.png");
            var _0x1d033a = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/right_wing.png");
            if (_0x113c13 && _0x1d033a) {
                _0x39e82d.save();
                _0x39e82d.rotate(_0x4bfce6(this.flapAngleDiff) + _0x18a4c1);
                _0x39e82d.drawImage(_0x113c13, -_0x5a20e7 * _0x3b2684, -_0x5a20e7 * _0x3b2684 + _0x39625d, _0x5a20e7 * 2 * _0x3b2684, _0x5a20e7 * 2 * _0x3b2684 + _0x39625d * 1.5);
                _0x39e82d.restore();
                _0x39e82d.save();
                _0x39e82d.rotate(-(_0x4bfce6(this.flapAngleDiff) + _0x18a4c1));
                _0x39e82d.drawImage(_0x1d033a, -_0x5a20e7 * _0x3b2684, -_0x5a20e7 * _0x3b2684 + _0x39625d, _0x5a20e7 * 2 * _0x3b2684, _0x5a20e7 * 2 * _0x3b2684 + _0x39625d * 1.5);
                _0x39e82d.restore();
                if (this.animalSpecies == 4) {
                    let _0x34a756 = _0x4e4bab("kd", this.spawnTime);
                    if (_0x34a756 !== undefined && _0x34a756 != null) {
                        this.theFrame = _0x34a756;
                    }
                    let _0xc7bb18 = _0x5981a2 != _0x4051d6 && !_0x1d523b ? this.theFrame : this.birdNoAnimationFlyWingAngle;
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = Math.max(0, _0xc7bb18);
                    var _0x1bf620 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/left_wing_tips.png");
                    var _0x4a0e66 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/right_wing_tips.png");
                    if (_0x1bf620 && _0x4a0e66) {
                        _0x39e82d.save();
                        _0x39e82d.rotate(_0x4bfce6(this.flapAngleDiff) + _0x18a4c1);
                        _0x39e82d.drawImage(_0x1bf620, -_0x5a20e7 * _0x3b2684, -_0x5a20e7 * _0x3b2684 + _0x39625d, _0x5a20e7 * 2 * _0x3b2684, _0x5a20e7 * 2 * _0x3b2684 + _0x39625d * 1.5);
                        _0x39e82d.restore();
                        _0x39e82d.save();
                        _0x39e82d.rotate(-(_0x4bfce6(this.flapAngleDiff) + _0x18a4c1));
                        _0x39e82d.drawImage(_0x4a0e66, -_0x5a20e7 * _0x3b2684, -_0x5a20e7 * _0x3b2684 + _0x39625d, _0x5a20e7 * 2 * _0x3b2684, _0x5a20e7 * 2 * _0x3b2684 + _0x39625d * 1.5);
                        _0x39e82d.restore();
                    }
                    _0x39e82d.restore();
                }
            }
            var _0x120b3b = this.lava;
            var _0x4a69aa = 50;
            if (_0x120b3b < _0x4a69aa) {
                var _0x199281 = _0x120b3b / _0x4a69aa;
                var _0x3f9d30 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/left_wing1.png");
                var _0x394acc = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/right_wing2.png");
                if (_0x3f9d30 && _0x394acc) {
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = 1 - _0x199281;
                    _0x39e82d.save();
                    _0x39e82d.rotate(_0x4bfce6(this.flapAngleDiff) + _0x18a4c1);
                    _0x39e82d.drawImage(_0x3f9d30, -_0x5a20e7 * _0x3b2684, -_0x5a20e7 * _0x3b2684 + _0x39625d, _0x5a20e7 * 2 * _0x3b2684, _0x5a20e7 * 2 * _0x3b2684 + _0x39625d * 1.5);
                    _0x39e82d.restore();
                    _0x39e82d.save();
                    _0x39e82d.rotate(-(_0x4bfce6(this.flapAngleDiff) + _0x18a4c1));
                    _0x39e82d.drawImage(_0x394acc, -_0x5a20e7 * _0x3b2684, -_0x5a20e7 * _0x3b2684 + _0x39625d, _0x5a20e7 * 2 * _0x3b2684, _0x5a20e7 * 2 * _0x3b2684 + _0x39625d * 1.5);
                    _0x39e82d.restore();
                    _0x39e82d.restore();
                }
            }
        };
        _0x119c4b.prototype.drawSkinCustomization = function() {
            if (this.flag_underWater) {
                return;
            }
            if (_0x5981a2 == _0x4051d6 || _0x1d523b) {
                return;
            }
            var _0x475ee4 = 500 / 340;
            let _0x4a8bfa = _0x4e4bab("kd", this.spawnTime);
            if (_0x4a8bfa !== undefined && _0x4a8bfa != null) {
                this.theFrame = _0x4a8bfa;
            }
            let _0x5172a7 = _0x5981a2 != _0x4051d6 && !_0x1d523b ? this.theFrame : this.birdNoAnimationFlyWingAngle;
            var _0x8976c5 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/nostrils.png");
            if (_0x8976c5) {
                _0x39e82d.save();
                var _0x205eca = this.lava;
                var _0x364ab7 = 100;
                var _0x5458d9 = _0x205eca / _0x364ab7;
                _0x39e82d.globalAlpha = Math.max(0, _0x5172a7) * _0x5458d9;
                var _0x36a4d0 = this.rad - this.outlineW;
                _0x39e82d.drawImage(_0x8976c5, -_0x36a4d0 * _0x475ee4, -_0x36a4d0 * _0x475ee4, _0x36a4d0 * 2 * _0x475ee4, _0x36a4d0 * 2 * _0x475ee4);
                _0x39e82d.restore();
            }
            if (!this.canUseTailslap) {
                var _0x474bd6 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/bone1.png");
                if (_0x474bd6) {
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = 1;
                    var _0x36a4d0 = this.rad - this.outlineW;
                    _0x39e82d.drawImage(_0x474bd6, -_0x36a4d0 * _0x475ee4, -_0x36a4d0 * _0x475ee4, _0x36a4d0 * 2 * _0x475ee4, _0x36a4d0 * 2 * _0x475ee4);
                    _0x39e82d.restore();
                }
                var _0x4b0c2e = 0;
                if (this.tailState < 11 && this.tailState > 5) {
                    var _0x1cb6a1 = this.tailState - 5;
                    _0x4b0c2e = _0x1cb6a1 / 6;
                } else if (this.tailState <= 3) {
                    _0x4b0c2e = this.tailState / 3;
                }
                var _0x2775fd = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/bone3.png");
                if (this.tailState < 11) {
                    if (_0x2775fd) {
                        _0x39e82d.save();
                        if (this.tailState > 5) {
                            _0x39e82d.globalAlpha = 1 - _0x4b0c2e;
                        } else {
                            _0x39e82d.globalAlpha = 1;
                        }
                        var _0x36a4d0 = this.rad - this.outlineW;
                        _0x39e82d.drawImage(_0x2775fd, -_0x36a4d0 * _0x475ee4, -_0x36a4d0 * _0x475ee4, _0x36a4d0 * 2 * _0x475ee4, _0x36a4d0 * 2 * _0x475ee4);
                        _0x39e82d.restore();
                    }
                }
                var _0x2288b1 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/bone2.png");
                if (this.tailState < 3) {
                    if (_0x2288b1) {
                        _0x39e82d.save();
                        _0x39e82d.globalAlpha = 1 - _0x4b0c2e;
                        var _0x36a4d0 = this.rad - this.outlineW;
                        _0x39e82d.drawImage(_0x2288b1, -_0x36a4d0 * _0x475ee4, -_0x36a4d0 * _0x475ee4, _0x36a4d0 * 2 * _0x475ee4, _0x36a4d0 * 2 * _0x475ee4);
                        _0x39e82d.restore();
                    }
                }
            } else {
                var _0x2288b1 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/bone2.png");
                if (_0x2288b1) {
                    _0x39e82d.save();
                    var _0x2a8fdb = Math.max(0.3, _0x5172a7);
                    _0x39e82d.globalAlpha = _0x2a8fdb;
                    var _0x36a4d0 = this.rad - this.outlineW;
                    _0x39e82d.drawImage(_0x2288b1, -_0x36a4d0 * _0x475ee4, -_0x36a4d0 * _0x475ee4, _0x36a4d0 * 2 * _0x475ee4, _0x36a4d0 * 2 * _0x475ee4);
                    _0x39e82d.restore();
                }
            }
            this.drawWings();
        };
        _0x119c4b.prototype.drawLowWaterDrop = function() {
            if (this.flag_underWater) {
                return;
            }
            if (this.flag_lowWat) {
                var _0x39e225 = 1.2;
                var _0x464d32 = 0.2;
                var _0x430061 = 0.8;
                var _0x592c41 = (_0x430061 - _0x464d32) * 0.5;
                var _0x4cc44b = _0x464d32 + _0x592c41 + _0x592c41 * Math.sin(Math.PI * 2 / _0x39e225 * (_0x4ec996 / 1000));
                _0x39e82d.save();
                _0x39e82d.globalAlpha = _0x4cc44b;
                _0x39e82d.fillStyle = _0x51276a;
                _0x39e82d.beginPath();
                _0x39e82d.arc(0, this.rad + 5, 5, 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.restore();
            }
        };
        _0x119c4b.prototype.animalInfo = function() {
            var _0x4a0735 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x4a0735.aniName = "King Dragon";
                    break;
                case 1:
                    _0x4a0735.aniName = "Golden King Dragon";
                    break;
                case 2:
                    _0x4a0735.aniName = "King Ripper";
                    break;
                case 3:
                    _0x4a0735.aniName = "King Stan";
                    break;
                case 4:
                    _0x4a0735.aniName = "King Shah";
                    break;
                case 5:
                    _0x4a0735.aniName = "Queen Scarlet";
                    break;
                case 6:
                    _0x4a0735.aniName = "Queen Celeste";
                    break;
                case 8:
                    _0x4a0735.aniName = "King Mistik";
                    break;
                case 111:
                    _0x4a0735.aniName = "Classic King Dragon";
                    break;
                case 200:
                    _0x4a0735.aniName = "Queen Flame";
                    break;
                case 202:
                    _0x4a0735.aniName = "King Graveyard";
                    break;
            }
            _0x4a0735.aniCol = "#FF9000";
            _0x4a0735.skinName = this.getSkinName();
            _0x4a0735.upgradeText = "UPGRADED to " + _0x4a0735.aniName;
            _0x4a0735.upgradeText += "!\nYou got firestream that burns your victim alive! Watch your tail and slap them hard.";
            _0x4a0735.aniCol = "black";
            return _0x4a0735;
        };
        _0x119c4b.prototype.getAbilityInfo = function(_0x294eeb) {
            var _0x5487e2 = {
                abilName: "Firestream\n& Tail slap"
            };
            var _0x2ceab2 = 0;
            switch (this.animalSpecies) {
                case 0:
                    _0x2ceab2 = 1;
                    break;
                case 1:
                    _0x2ceab2 = 2;
                    break;
                case 2:
                    _0x2ceab2 = 4;
                    break;
                case 3:
                    _0x2ceab2 = 5;
                    break;
                case 4:
                    _0x2ceab2 = 6;
                    break;
                case 5:
                    _0x2ceab2 = 9;
                    break;
                case 6:
                    _0x2ceab2 = 8;
                    break;
            }
            _0x5487e2.speciesType = _0x2ceab2;
            _0x5487e2.abilImg = "img/fire/" + _0x2ceab2 + "/0.png";
            _0x5487e2.skinThemeID = this.skinThemeID;
            _0x5487e2.mopeSeasonID = this.mopeSeasonID;
            return _0x5487e2;
        };

        function _0x119c4b() {
            this.lava = 100;
            _0x119c4b.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x119c4b, _0x48c056, _0x370aae);
        var _0x28c171 = Animal;
        _0x5148e0.prototype = Object.create(_0x28c171.prototype);
        _0x5148e0.prototype.constructor = _0x5148e0;
        _0x5148e0.superClass = _0x28c171;
        _0x5148e0.prototype.animalInfo = function() {
            var _0x2d9679 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x2d9679.aniName = "The Yeti!";
                    break;
                case 1:
                    _0x2d9679.aniName = "Golden Yeti!";
                    break;
                case 2:
                    _0x2d9679.aniName = "Emerald Yeti!";
                    break;
                case 3:
                    _0x2d9679.aniName = "Aqua Yeti";
                    break;
                case 111:
                    _0x2d9679.aniName = "Classic Yeti";
                    break;
                case 201:
                    _0x2d9679.aniName = "Squishy Yeti";
                    break;
                case 202:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0x2d9679.aniName = "Lovely Yeti";
                            break;
                        case 1:
                            _0x2d9679.aniName = "Frosty Eye Demon";
                    }
                    break;
                case 204:
                    _0x2d9679.aniName = "Frost Wolf";
                    break;
                case 220:
                    _0x2d9679.aniName = "Glacial Demon";
                    break;
            }
            _0x2d9679.skinName = this.getSkinName();
            _0x2d9679.aniDesc = "";
            _0x2d9679.upgradeText = "UPGRADED to " + _0x2d9679.aniName + "!\n So it really exists... \n Hold W to turn into snow, press W to freeeeeze!";
            _0x2d9679.aniCol = "#839eb5";
            return _0x2d9679;
        };
        _0x5148e0.prototype.getAbilityInfo = function(_0x15d6ed) {
            var _0xfcc209 = {
                abilName: "Yeti Roar" + (this.animalSpecies == 3 ? " &\n Ice Statue" : "") + ""
            };
            _0xfcc209.abilImg = "skins/arctic/yeti/" + this.animalSpecies + this.getSubSpecies() + "/ability.png";
            _0xfcc209.skinThemeID = this.skinThemeID;
            _0xfcc209.mopeSeasonID = this.mopeSeasonID;
            return _0xfcc209;
        };
        _0x5148e0.prototype.getSkinName = function() {
            var _0x2b6bca = this.specType == 0 ? "" : 1;
            return this.getSpeciesPath("yeti") + "/yeti" + _0x2b6bca;
        };
        _0x5148e0.prototype.getSubSpecies = function() {
            if (this.animalSpecies === 202) {
                return "/" + this.animalSubSpecies;
            } else {
                return "";
            }
        };
        _0x5148e0.prototype.getSpeciesPath = function(_0x558282) {
            return "arctic/" + _0x558282 + "/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x5148e0.prototype.drawOnTopOfSkinImg = function() {};
        _0x5148e0.prototype.isTransforming = false;
        _0x5148e0.prototype.readCustomData_onNewlyVisible = function(_0xb80484) {
            _0x5148e0.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0xb80484);
            this.isTransforming = _0xb80484.readUInt8() == 1;
        };
        _0x5148e0.prototype.customUpdatedProperty = function(_0x456120, _0x414bd0) {
            if (_0x456120 == _0x4231d7) {
                this.isTransforming = _0x414bd0.readUInt8() == 1;
            }
        };
        _0x5148e0.prototype.getIdealOpacity = function() {
            var _0x5b1a40 = this.flag_underWater || this.flag_usingAbility && this.isTransforming || this.isCamouflage ? 0 : 1;
            return _0x5b1a40;
        };
        _0x5148e0.prototype.biteStart = 0;
        _0x5148e0.prototype.flapAmount = 3;
        _0x5148e0.prototype.flapDur = 1.5;
        _0x5148e0.prototype.roarStartT = -500;
        _0x5148e0.prototype.drawSkinCustomization = function() {
            if (this.flag_usingAbility && this.isTransforming) {
                if (this.isTransforming) {
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = 1;
                    var _0xf4c86c = this.getSkinImageObjForSeason("img/snowball.png", _0x24df61);
                    if (_0xf4c86c) {
                        var _0x354406 = this.rad;
                        _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        _0x39e82d.drawImage(_0xf4c86c, -_0x354406, -_0x354406, _0x354406 * 2, _0x354406 * 2);
                    } else {
                        this.drawOutlinedCircle("", "white");
                    }
                    _0x39e82d.restore();
                }
            } else {
                if (this.animalSpecies == 4) {
                    return;
                }
                this.setSkinScale();
                if (!this.flag_usingAbility) {
                    this.biteStart = 0;
                    return;
                } else {
                    if (this.biteStart == 0) {
                        this.biteStart = _0x4ec996 + this.roarStartT;
                    }
                    if (this.specType != 0 && this.specType != undefined) {
                        var _0x168833 = "skins/arctic/yeti/" + this.animalSpecies + "/yeti_head1.png";
                        var _0x4816d6 = this.getSkinImageObj(_0x168833);
                        var _0x497d1f = (_0x4ec996 - this.biteStart) / 1000;
                        var _0x5afb3a = this.skinScale * 1.07;
                        var _0x354406 = this.skinRad;
                        if (_0x4816d6) {
                            var _0x2268ac = 0;
                            var _0x289066 = this.flapAmount - (this.animalSpecies == 1 ? 0.5 : 0);
                            _0x2268ac = _0x5981a2 != _0x4051d6 ? _0x1b594e(_0x497d1f, this.flapDur, _0x289066, 2) : this.flapAmount;
                            _0x39e82d.save();
                            var _0x354406 = this.rad;
                            _0x39e82d.drawImage(_0x4816d6, -_0x354406 * _0x5afb3a, (-_0x354406 + _0x354406 * 0.1) * _0x5afb3a - _0x2268ac, _0x354406 * 2 * _0x5afb3a, _0x354406 * 2 * _0x5afb3a);
                            _0x39e82d.restore();
                        }
                    }
                }
            }
        };

        function _0x5148e0() {
            _0x5148e0.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x5148e0, _0x48c056, _0x174cd3);
        var _0x28c171 = Animal;
        _0x51b691.prototype = Object.create(_0x28c171.prototype);
        _0x51b691.prototype.constructor = _0x51b691;
        _0x51b691.superClass = _0x28c171;
        _0x51b691.prototype.animalInfo = function() {
            var _0x5d01ec = {};
            switch (this.animalSpecies) {
                case 0:
                    switch (this.animalSubSpecies) {
                        case 223:
                            _0x5d01ec.aniName = "Valentine Mammoth";
                            break;
                        case 0:
                        default:
                            _0x5d01ec.aniName = "Mammoth!";
                            break;
                    }
                    break;
                case 1:
                    _0x5d01ec.aniName = "Golden Mammoth!";
                    break;
                case 111:
                    _0x5d01ec.aniName = "Classic Mammoth";
                    break;
                case 2:
                    _0x5d01ec.aniName = "Black Mammoth!";
                    break;
                case 201:
                    _0x5d01ec.aniName = "Lost Tourist!";
                    break;
                case 202:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0x5d01ec.aniName = "Acid Mammoth";
                            break;
                        case 1:
                            _0x5d01ec.aniName = "Crystal Golem";
                    }
                    break;
                case 220:
                    _0x5d01ec.aniName = " Golem Mammoth";
                    break;
            }
            _0x5d01ec.skinName = this.getSkinName();
            _0x5d01ec.aniDesc = "";
            _0x5d01ec.upgradeText = "UPGRADED to " + _0x5d01ec.aniName + "\n Press W to roll snowballs with your trunk!\n The bigger the snowball gets, the longer the freeze!";
            _0x5d01ec.aniCol = "#9d4717";
            return _0x5d01ec;
        };
        _0x51b691.prototype.getAbilityInfo = function(_0x14d4fb) {
            var _0x136db3 = {
                abilName: "Roll snow",
                abilImg: "img/snowball.png",
                skinThemeID: this.skinThemeID,
                mopeSeasonID: this.mopeSeasonID
            };
            return _0x136db3;
        };
        _0x51b691.prototype.getSkinName = function() {
            var _0x2a1caa = this.specType == 0 ? "" : 1;
            return "arctic/mammoth/" + this.animalSpecies + this.getSubSpecies() + "/mammoth" + _0x2a1caa;
        };
        _0x51b691.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            if (this.animalSpecies === 202) {
                return "/" + this.animalSubSpecies;
            } else {
                return "";
            }
        };

        function _0x51b691() {
            _0x51b691.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x51b691, _0x48c056, _0x145a21);
        var _0x28c171 = Animal;
        _0x3530e9.prototype = Object.create(_0x28c171.prototype);
        _0x3530e9.prototype.constructor = _0x3530e9;
        _0x3530e9.superClass = _0x28c171;
        _0x3530e9.prototype.animalInfo = function() {
            var _0x5a2eba = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x5a2eba.aniName = "Sabertooth Tiger!";
                    break;
                case 1:
                    _0x5a2eba.aniName = "Golden Tiger!";
                    break;
                case 2:
                    _0x5a2eba.aniName = "Margala Sabertooth!";
                    break;
                case 111:
                    _0x5a2eba.aniName = "Classic Sabertooth";
                    break;
                case 200:
                    _0x5a2eba.aniName = "Techno Saber!";
                    break;
                case 201:
                    _0x5a2eba.aniName = "Strawbertooth!";
                    break;
                case 202:
                    _0x5a2eba.aniName = "Ice-Fang Sabertooth";
                    break;
                case 204:
                    _0x5a2eba.aniName = "Shadow Sabeertooth!";
                    break;
            }
            _0x5a2eba.skinName = this.getSkinName();
            _0x5a2eba.aniDesc = "";
            _0x5a2eba.upgradeText = "UPGRADED to " + _0x5a2eba.aniName + "\nSabertooth Tigers can slash their opponents and prey.";
            _0x5a2eba.aniCol = "#945A99";
            return _0x5a2eba;
        };
        _0x3530e9.prototype.getAbilityInfo = function(_0x42911a) {
            var _0x43caa4 = {
                abilName: "Claw Slash!"
            };
            _0x43caa4.abilImg = "skins/arctic/sabertooth/" + this.animalSpecies + this.getSubSpecies() + "/sabertooth.png";
            _0x43caa4.skinThemeID = this.skinThemeID;
            _0x43caa4.mopeSeasonID = this.mopeSeasonID;
            return _0x43caa4;
        };
        _0x3530e9.prototype.getSkinName = function() {
            return "arctic/sabertooth/" + this.animalSpecies + this.getSubSpecies() + "/sabertooth" + (this.specType == 0 ? "" : this.specType);
        };
        _0x3530e9.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };

        function _0x3530e9() {
            _0x3530e9.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x3530e9, _0x48c056, _0x2ffcd2);
        var _0x28c171 = Animal;
        _0x3c7671.prototype = Object.create(_0x28c171.prototype);
        _0x3c7671.prototype.constructor = _0x3c7671;
        _0x3c7671.superClass = _0x28c171;
        _0x3c7671.prototype.animalInfo = function() {
            var _0x56cc4c = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x56cc4c.aniName = "Penguin";
                    break;
                case 111:
                    _0x56cc4c.aniName = "Classic Penguin";
                    break;
                case 112:
                    _0x56cc4c.aniName = "Gold-trim Penguin";
                    break;
                case 201:
                    _0x56cc4c.aniName = "Surfer Penguin";
                    break;
                case 202:
                    _0x56cc4c.aniName = "UFO Pigeon";
                    break;
            }
            _0x56cc4c.skinName = this.getSkinName();
            _0x56cc4c.aniDesc = "";
            _0x56cc4c.upgradeText = "UPGRADED to " + _0x56cc4c.aniName + "!\n Left-click to run!\n (HOLD W to slide FAST on ice)!";
            _0x56cc4c.aniCol = "#FFFFFF";
            return _0x56cc4c;
        };
        _0x3c7671.prototype.getAbilityInfo = function(_0x2fd3ef) {
            var _0x550687 = {
                abilName: "Slide on ice"
            };
            _0x550687.abilImg = "skins/arctic/penguin/" + this.animalSpecies + this.getSubSpecies() + "/penguin1.png";
            _0x550687.skinThemeID = this.skinThemeID;
            _0x550687.mopeSeasonID = this.mopeSeasonID;
            return _0x550687;
        };
        _0x3c7671.prototype.getSkinName = function() {
            return "arctic/penguin/" + this.animalSpecies + this.getSubSpecies() + "/penguin" + (this.specType == 0 ? "" : 1);
        };
        _0x3c7671.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };

        function _0x3c7671() {
            _0x3c7671.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x3c7671, _0x48c056, _0x45fb63);
        var _0x28c171 = Animal;
        _0x12d74b.prototype = Object.create(_0x28c171.prototype);
        _0x12d74b.prototype.constructor = _0x12d74b;
        _0x12d74b.superClass = _0x28c171;
        _0x12d74b.prototype.animalInfo = function() {
            var _0x42bbe9 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x42bbe9.aniName = "Seal";
                    break;
                case 111:
                    _0x42bbe9.aniName = "Classic Seal";
                    break;
                case 112:
                    _0x42bbe9.aniName = "Gold-trim Seal";
                    break;
                case 201:
                    _0x42bbe9.aniName = "Hawaiian Monk";
                    break;
                case 202:
                    _0x42bbe9.aniName = "Soapy Seal";
                    break;
            }
            _0x42bbe9.skinName = this.getSkinName();
            _0x42bbe9.aniDesc = "";
            _0x42bbe9.upgradeText = "UPGRADED to " + _0x42bbe9.aniName + "!\n You can slide on ice (Hold W) + can climb hills (rocks too!)";
            _0x42bbe9.aniCol = "#633838";
            return _0x42bbe9;
        };
        _0x12d74b.prototype.getAbilityInfo = function(_0x18a3fb) {
            var _0x686d72 = {
                abilName: "Slide on ice"
            };
            _0x686d72.abilImg = "skins/arctic/seal/" + this.animalSpecies + this.getSubSpecies() + "/seal1.png";
            _0x686d72.skinThemeID = this.skinThemeID;
            _0x686d72.mopeSeasonID = this.mopeSeasonID;
            return _0x686d72;
        };
        _0x12d74b.prototype.getSkinName = function() {
            return "arctic/seal/" + this.animalSpecies + this.getSubSpecies() + "/seal" + (this.specType == 0 ? "" : 1);
        };
        _0x12d74b.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };

        function _0x12d74b() {
            _0x12d74b.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x12d74b, _0x48c056, _0x2e1cf4);
        var _0x28c171 = Animal;
        _0x2df95e.prototype = Object.create(_0x28c171.prototype);
        _0x2df95e.prototype.constructor = _0x2df95e;
        _0x2df95e.superClass = _0x28c171;
        _0x2df95e.prototype.animalInfo = function() {
            var _0x4d35ad = {};
            switch (this.animalSpecies) {
                case 0:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0x4d35ad.aniName = "Walrus!";
                            break;
                        case 223:
                            _0x4d35ad.aniName = "Valentine Walrus!";
                            break;
                    }
                    break;
                case 100:
                    _0x4d35ad.aniName = "Candy Rus!";
                    break;
                case 111:
                    _0x4d35ad.aniName = "Classic Walrus";
                    break;
                case 112:
                    _0x4d35ad.aniName = "Gold-trim Walrus";
                    break;
                case 201:
                    _0x4d35ad.aniName = "Walrusmelon!";
                    break;
                case 202:
                    _0x4d35ad.aniName = "Potato Walrus";
                    break;
            }
            _0x4d35ad.skinName = this.getSkinName();
            _0x4d35ad.aniDesc = "";
            _0x4d35ad.upgradeText = "UPGRADED to " + _0x4d35ad.aniName + "\n You can slide on ice (Hold W) + can climb hills (rocks too!)";
            _0x4d35ad.aniCol = "#633838";
            return _0x4d35ad;
        };
        _0x2df95e.prototype.getAbilityInfo = function(_0x11ff15) {
            var _0x47db1a = {
                abilName: "Slide on ice"
            };
            _0x47db1a.abilImg = "skins/arctic/walrus/" + this.animalSpecies + this.getSubSpecies() + "/walrus1.png";
            _0x47db1a.skinThemeID = this.skinThemeID;
            _0x47db1a.mopeSeasonID = this.mopeSeasonID;
            return _0x47db1a;
        };
        _0x2df95e.prototype.getSkinName = function() {
            return "arctic/walrus/" + this.animalSpecies + this.getSubSpecies() + "/walrus" + (this.specType == 0 ? "" : 1);
        };
        _0x2df95e.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };

        function _0x2df95e() {
            _0x2df95e.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x2df95e, _0x48c056, _0x52eaad);
        var _0x28c171 = Animal;
        _0x3d1cf6.prototype = Object.create(_0x28c171.prototype);
        _0x3d1cf6.prototype.constructor = _0x3d1cf6;
        _0x3d1cf6.superClass = _0x28c171;
        _0x3d1cf6.prototype.animalInfo = function() {
            var _0x52039c = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x52039c.aniName = "Wolf!";
                    break;
                case 111:
                    _0x52039c.aniName = "Classic Wolf";
                    break;
                case 112:
                    _0x52039c.aniName = "Gold-trim Wolf";
                    break;
                case 201:
                    _0x52039c.aniName = "Pineapple Wolf!";
                    break;
                case 220:
                    _0x52039c.aniName = "Okami Wolf";
                    break;
            }
            _0x52039c.skinName = this.getSkinName();
            _0x52039c.upgradeText = "UPGRADED to " + _0x52039c.aniName + "\n Wolf paws turn very well on ice!\n Press W to howl!";
            _0x52039c.aniCol = "#6B6B6B";
            return _0x52039c;
        };
        _0x3d1cf6.prototype.getAbilityInfo = function(_0x230d28) {
            var _0x51f19f = {
                abilName: "Howl!"
            };
            _0x51f19f.abilImg = "skins/arctic/wolf/" + this.animalSpecies + this.getSubSpecies() + "/wolf1.png";
            _0x51f19f.skinThemeID = this.skinThemeID;
            _0x51f19f.mopeSeasonID = this.mopeSeasonID;
            return _0x51f19f;
        };
        _0x3d1cf6.prototype.getSkinName = function() {
            var _0x38d150 = this.specType == 0 ? "" : 1;
            return "arctic/wolf/" + this.animalSpecies + this.getSubSpecies() + "/wolf" + _0x38d150;
        };
        _0x3d1cf6.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };

        function _0x3d1cf6() {
            _0x3d1cf6.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x3d1cf6, _0x48c056, _0x57e1d4);
        var _0x28c171 = Animal;
        _0xf1260.prototype = Object.create(_0x28c171.prototype);
        _0xf1260.prototype.constructor = _0xf1260;
        _0xf1260.superClass = _0x28c171;
        _0xf1260.prototype.animalInfo = function() {
            var _0x34d1be = {
                aniName: "Wolverine!"
            };
            switch (this.animalSpecies) {
                case 111:
                    _0x34d1be.aniName = "Classic Wolverine";
                    break;
                case 202:
                    _0x34d1be.aniName = "Floral Wolverine";
                    break;
                case 112:
                    _0x34d1be.aniName = "Gold-trim Wolverine";
                    break;
                case 220:
                    _0x34d1be.aniName = "Summoner Wolverine";
                    break;
            }
            if (this.animalSubSpecies == 223) {
                _0x34d1be.aniName = "Valentine Wolverine";
            }
            _0x34d1be.skinName = this.getSkinName();
            _0x34d1be.upgradeText = "UPGRADED to " + _0x34d1be.aniName + "!\n Press W to Let out a Powerful GROWL! (Knocks back prey!)";
            _0x34d1be.aniCol = "#843A0F";
            return _0x34d1be;
        };
        _0xf1260.prototype.getAbilityInfo = function(_0x4a15ac) {
            var _0x433978 = {
                abilName: "Roar!"
            };
            _0x433978.abilImg = "skins/arctic/wolverine/" + this.animalSpecies + this.getSubSpecies() + "/wolverine1.png";
            _0x433978.skinThemeID = this.skinThemeID;
            _0x433978.mopeSeasonID = this.mopeSeasonID;
            return _0x433978;
        };
        _0xf1260.prototype.getSkinName = function() {
            return "arctic/wolverine/" + this.animalSpecies + this.getSubSpecies() + "/wolverine" + (this.specType == 0 ? "" : this.specType);
        };
        _0xf1260.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };

        function _0xf1260() {
            _0xf1260.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0xf1260, _0x48c056, _0x4372c1);
        var _0x28c171 = Animal;
        _0xf80880.prototype = Object.create(_0x28c171.prototype);
        _0xf80880.prototype.constructor = _0xf80880;
        _0xf80880.superClass = _0x28c171;
        _0xf80880.prototype.animalInfo = function() {
            var _0x54e73c = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x54e73c.aniName = "Muskox!";
                    break;
                case 111:
                    _0x54e73c.aniName = "Classic Muskox";
                    break;
                case 112:
                    _0x54e73c.aniName = "Gold-trim Muskox";
                    break;
                case 200:
                    _0x54e73c.aniName = "Brazen Bull!";
                    break;
                case 201:
                    _0x54e73c.aniName = "Fireworks Ox!";
                    break;
                case 202:
                    _0x54e73c.aniName = "Monitor Muskox";
                    break;
            }
            _0x54e73c.skinName = this.getSkinName();
            _0x54e73c.aniDesc = "";
            _0x54e73c.upgradeText = "UPGRADED to " + _0x54e73c.aniName + "\n Press W to charge with your horns! \nPlus move decently on ice!";
            _0x54e73c.aniCol = "#231f18";
            return _0x54e73c;
        };
        _0xf80880.prototype.getAbilityInfo = function(_0x5b3a4e) {
            var _0x351f0b = {
                abilName: "Charge!",
                abilImg: "skins/arctic/muskox/" + this.animalSpecies + "/muskox2.png",
                skinThemeID: this.skinThemeID,
                mopeSeasonID: this.mopeSeasonID
            };
            return _0x351f0b;
        };
        _0xf80880.prototype.getSkinName = function() {
            return "arctic/muskox/" + this.animalSpecies + this.getSubSpecies() + "/muskox" + (this.flag_usingAbility ? "2" : "");
        };
        _0xf80880.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };

        function _0xf80880() {
            _0xf80880.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0xf80880, _0x48c056, _0x36539e);
        var _0x28c171 = Animal;
        _0x2ca5cf.prototype = Object.create(_0x28c171.prototype);
        _0x2ca5cf.prototype.constructor = _0x2ca5cf;
        _0x2ca5cf.superClass = _0x28c171;
        _0x2ca5cf.prototype.animalInfo = function() {
            var _0x39bf31 = {};
            if (this.animalSpecies == 1) {
                _0x39bf31.aniName = "The Snowman";
                _0x39bf31.skinName = "arctic/snowman/" + this.animalSpecies + "/snowman";
            } else if (this.animalSpecies == 2) {
                _0x39bf31.aniName = "The Snowgirl";
                _0x39bf31.skinName = "arctic/snowman/" + this.animalSpecies + "/snowgirl";
            }
            _0x39bf31.aniDesc = "";
            _0x39bf31.upgradeText = "UPGRADED to " + _0x39bf31.aniName + "!\n So it really exists... \n Hold W to turn into snow, press W to freeeeeze!";
            _0x39bf31.aniCol = "#839eb5";
            return _0x39bf31;
        };
        _0x2ca5cf.prototype.getAbilityInfo = function(_0x3d394f) {
            var _0x1581bc = {
                abilName: "Freeze Prey!",
                abilImg: "skins/arctic/snowman/" + this.animalSpecies + "/ability.png",
                skinThemeID: this.skinThemeID,
                mopeSeasonID: this.mopeSeasonID
            };
            return _0x1581bc;
        };
        _0x2ca5cf.prototype.getSkinName = function() {
            var _0x5bb71b = "";
            if (this.animalSpecies == 2) {
                _0x5bb71b = "arctic/snowman/" + this.animalSpecies + "/snowgirl";
            } else {
                _0x5bb71b = "arctic/snowman/" + this.animalSpecies + "/snowman";
            }
            _0x5bb71b += this.specType == 0 ? "" : 1;
            return _0x5bb71b;
        };
        _0x2ca5cf.prototype.drawUnderSkinTail = function(_0x39da12) {
            if (!this.isCamouflage) {
                _0x2ca5cf.superClass.prototype.drawUnderSkinTail.call(this, _0x39da12);
            }
        };
        _0x2ca5cf.prototype.drawHealthBar = function() {
            if (!this.isCamouflage) {
                _0x2ca5cf.superClass.prototype.drawHealthBar.call(this);
            }
        };
        _0x2ca5cf.prototype.isTransforming = false;
        _0x2ca5cf.prototype.isCamouflage = false;
        _0x2ca5cf.prototype.carrotAlpha = 0;
        _0x2ca5cf.prototype.getIdealOpacity = function() {
            var _0x231f8f = this.flag_underWater || this.flag_usingAbility && this.isTransforming || this.isCamouflage ? 0 : 1;
            return _0x231f8f;
        };
        _0x2ca5cf.prototype.biteStart = 0;
        _0x2ca5cf.prototype.flapAmount = 3;
        _0x2ca5cf.prototype.flapDur = 1.5;
        _0x2ca5cf.prototype.roarStartT = -500;
        _0x2ca5cf.prototype.drawSkinCustomization = function() {
            if (this.flag_usingAbility && this.isTransforming) {
                if (this.isTransforming) {
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = 1;
                    var _0x19b1ae = this.getSkinImageObj("img/snowball.png");
                    if (_0x19b1ae) {
                        var _0x3b6061 = this.rad;
                        _0x39e82d.rotate(this.rPer * Math.PI * 2);
                        _0x39e82d.drawImage(_0x19b1ae, -_0x3b6061, -_0x3b6061, _0x3b6061 * 2, _0x3b6061 * 2);
                    } else {
                        this.drawOutlinedCircle("", "white");
                    }
                    _0x39e82d.restore();
                }
            } else {
                this.setSkinScale();
                if (!this.flag_usingAbility && !this.isCamouflage) {
                    if (this.carrotAlpha > 0) {
                        var _0x2c4d56 = this.getSkinImageObj("skins/arctic/snowman/" + this.animalSpecies + "/carrot_nose.png");
                        var _0x30062a = this.skinScale;
                        var _0x3b6061 = this.skinRad;
                        if (_0x2c4d56) {
                            _0x39e82d.save();
                            var _0x3b6061 = this.rad;
                            _0x39e82d.globalAlpha = this.carrotAlpha;
                            _0x39e82d.drawImage(_0x2c4d56, -_0x3b6061 * _0x30062a, -_0x3b6061 * _0x30062a, _0x3b6061 * 2 * _0x30062a, _0x3b6061 * 2 * _0x30062a);
                            _0x39e82d.restore();
                        }
                    }
                    this.biteStart = 0;
                    return;
                } else {
                    if (this.biteStart == 0) {
                        this.biteStart = _0x4ec996 + this.roarStartT;
                    }
                    if (this.specType != 0 && this.specType != undefined) {
                        var _0x18e962 = this.animalSpecies == 2 ? "snowgirl" : "snowman";
                        var _0x357868 = "skins/arctic/snowman/" + this.animalSpecies + "/" + _0x18e962 + "_head1.png";
                        var _0x2c4d56 = this.getSkinImageObj(_0x357868);
                        var _0x1b378f = (_0x4ec996 - this.biteStart) / 1000;
                        var _0x30062a = this.skinScale * 1.07;
                        var _0x3b6061 = this.skinRad;
                        if (_0x2c4d56) {
                            var _0x477cab = 0;
                            var _0x57ce35 = this.flapAmount - (this.animalSpecies == 1 ? 0.5 : 0);
                            _0x477cab = _0x5981a2 != _0x4051d6 ? _0x1b594e(_0x1b378f, this.flapDur, _0x57ce35, 2) : this.flapAmount;
                            _0x39e82d.save();
                            var _0x3b6061 = this.rad;
                            _0x39e82d.drawImage(_0x2c4d56, -_0x3b6061 * _0x30062a, (-_0x3b6061 + _0x3b6061 * 0.1) * _0x30062a - _0x477cab, _0x3b6061 * 2 * _0x30062a, _0x3b6061 * 2 * _0x30062a);
                            _0x39e82d.restore();
                        }
                    }
                }
            }
        };
        _0x2ca5cf.prototype.customUpdatedProperty = function(_0x3aaeb4, _0x5568b5) {
            if (_0x3aaeb4 == _0x4231d7) {
                this.isTransforming = _0x5568b5.readUInt8() == 1;
            } else if (_0x3aaeb4 == _0x1db639) {
                this.isCamouflage = _0x5568b5.readUInt8() == 1;
            } else if (_0x3aaeb4 == _0xf08029) {
                this.carrotAlpha = _0x5568b5.readUInt16() / 1000;
            } else if (_0x3aaeb4 == _0x17f107) {
                this.lights = _0x5568b5.readUInt8();
            }
        };
        _0x2ca5cf.prototype.readCustomData_onNewlyVisible = function(_0x2fb777) {
            _0x2ca5cf.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x2fb777);
            this.isTransforming = _0x2fb777.readUInt8() == 1;
            this.isCamouflage = _0x2fb777.readUInt8() == 1;
            this.carrotAlpha = _0x2fb777.readUInt16() / 1000;
            this.lights = _0x2fb777.readUInt8();
        };

        function _0x2ca5cf() {
            _0x2ca5cf.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x2ca5cf, _0x48c056, _0x44140d);
        var _0x28c171 = Animal;
        _0x56d5a0.prototype = Object.create(_0x28c171.prototype);
        _0x56d5a0.prototype.constructor = _0x56d5a0;
        _0x56d5a0.superClass = _0x28c171;
        _0x56d5a0.prototype.updateZ = function() {
            this.z = this.rad;
            if (this.flag_underWater) {
                this.z = -100;
            } else if (this.flag_eff_tossedInAir) {
                this.z = 1200 + this.rad;
            } else if (this.flag_flying) {
                this.z = 100000;
                if (this.flag_isGrabbed) {
                    this.z -= this.rad;
                }
            } else if (this.flag_canClimbHill) {
                this.z = 1003;
            } else {
                this.z = this.rad;
            }
        };
        _0x56d5a0.prototype.animalInfo = function() {
            var _0xc06ba = {
                aniName: "Markhor"
            };
            switch (this.animalSpecies) {
                case 204:
                    switch (this.animalSubSpecies) {
                        case 2:
                            _0xc06ba.aniName = "Golden Devil Goat";
                            break;
                    }
                    break;
                case 111:
                    _0xc06ba.aniName = "Classic Markhor";
                    break;
                case 112:
                    _0xc06ba.aniName = "Gold-trim Markhor";
                    break;
                case 201:
                    switch (this.animalSubSpecies) {
                        case 1:
                            _0xc06ba.aniName = "Fruity Ice Markhor";
                            break;
                    }
                    break;
                case 1:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0xc06ba.aniName = "Markhor";
                            break;
                    }
                    break;
                case 2:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0xc06ba.aniName = "Big Goat";
                    }
                    break;
            }
            _0xc06ba.aniCol = "#FF9000";
            _0xc06ba.skinName = this.getSkinName();
            _0xc06ba.upgradeText = "UPGRADED to " + _0xc06ba.aniName + "!\nPress 'W' to Jump High from hills. Ram in the preys on land.";
            return _0xc06ba;
        };
        _0x56d5a0.prototype.moveF = 0.08;
        _0x56d5a0.prototype.jumpAnim = null;
        _0x56d5a0.prototype.frame = 0;
        _0x56d5a0.prototype.getSkinImageObj = function(_0x268bcd) {
            var _0x22b275 = this.mopeSeasonID;
            return this.getSkinImageObjForSeason(_0x268bcd, _0x22b275);
        };
        _0x56d5a0.prototype.getAbilityInfo = function(_0x204191) {
            var _0x3c5f58 = {};
            _0x3c5f58.abilImg = "skins/" + this.getSpeciesPath("markhor") + "/ability.png";
            _0x3c5f58.abilName = "Head Butt";
            _0x3c5f58.skinThemeID = this.skinThemeID;
            _0x3c5f58.mopeSeasonID = this.mopeSeasonID;
            return _0x3c5f58;
        };
        _0x56d5a0.prototype.getSpeciesPath = function(_0x9188eb) {
            var _0x1b49cf = "/" + this.animalSubSpecies;
            return "arctic/" + _0x9188eb + "/" + this.animalSpecies + _0x1b49cf;
        };
        _0x56d5a0.prototype.moveF = 0.08;
        _0x56d5a0.prototype.jumpAnim = null;
        _0x56d5a0.prototype.frame = 0;
        _0x56d5a0.prototype.drawUnderSkinImg = function() {
            if (this.flag_usingAbility && this.specType > 2) {
                var _0x23bf9b = 1;
                if (this.jumpAnim == null) {
                    this.jumpAnim = new _0x28a15f(this, 0.5, _0x28a15f.halfWave);
                    this.jumpAnim.keepLastFrame = true;
                    this.jumpAnim.loop = true;
                    this.jumpAnim.onFrameEntered = function(_0xc0f7df) {
                        this.forObj.frame = _0xc0f7df;
                    };
                    this.jumpAnim.onStop = function() {};
                }
                if (this.jumpAnim != null) {
                    this.jumpAnim.run();
                }
                var _0x47d267 = this.rad - this.outlineW;
                var _0x5a2bba = 500 / 340;
                this.setSkinScale();
                var _0x3e02a6 = "skins/" + this.getSpeciesPath("markhor") + "/front_legs.png";
                var _0x2ce68f = "skins/" + this.getSpeciesPath("markhor") + "/back_legs.png";
                var _0x3f34e1 = this.getSkinImageObj(_0x3e02a6);
                var _0x57f325 = this.getSkinImageObj(_0x2ce68f);
                if (_0x3f34e1 && _0x57f325) {
                    var _0x5a2bba = this.skinScale + this.skinScale * 0.15 * this.frame;
                    var _0x47d267 = this.skinRad;
                    if (this.specType == 3) {
                        _0x39e82d.drawImage(_0x3f34e1, -_0x47d267 * _0x5a2bba, -_0x47d267 * _0x5a2bba, _0x47d267 * 2 * _0x5a2bba, _0x47d267 * 2 * _0x5a2bba);
                        _0x39e82d.drawImage(_0x57f325, -_0x47d267 * _0x5a2bba, (-_0x47d267 - _0x47d267 * this.moveF * this.frame) * _0x5a2bba, _0x47d267 * 2 * _0x5a2bba, _0x47d267 * 2 * _0x5a2bba);
                    } else {
                        _0x39e82d.drawImage(_0x57f325, -_0x47d267 * _0x5a2bba, -_0x47d267 * _0x5a2bba, _0x47d267 * 2 * _0x5a2bba, _0x47d267 * 2 * _0x5a2bba);
                        _0x39e82d.drawImage(_0x3f34e1, -_0x47d267 * _0x5a2bba, (-_0x47d267 + _0x47d267 * this.moveF * this.frame) * _0x5a2bba, _0x47d267 * 2 * _0x5a2bba, _0x47d267 * 2 * _0x5a2bba);
                    }
                }
            } else {
                this.jumpAnim = null;
            }
        };
        _0x56d5a0.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                return;
            }
            var _0x2830c3 = 500 / 340;
            var _0x5b83b3 = 0.1;
            if (this.specType > 2) {
                _0x5b83b3 = this.frame * 0.2;
            } {
                var _0x182b94 = this.getSkinImageObj(this.getHead("markhor", true));
                if (_0x182b94) {
                    _0x39e82d.save();
                    var _0x456dd1 = this.rad;
                    _0x39e82d.drawImage(_0x182b94, -_0x456dd1 * _0x2830c3, (-_0x456dd1 + _0x456dd1 * _0x5b83b3) * _0x2830c3, _0x456dd1 * 2 * _0x2830c3, _0x456dd1 * 2 * _0x2830c3);
                    _0x39e82d.restore();
                }
            }
        };
        _0x56d5a0.prototype.getHead = function(_0x56dc16, _0x499f4f) {
            var _0x1896c6 = "skins/" + (_0x499f4f ? this.getSpeciesPath(_0x56dc16) + "/" : _0x56dc16 + "/");
            _0x1896c6 += _0x56dc16 + "_head";
            if (this.specType == 2) {
                _0x1896c6 += "_charging";
            }
            _0x1896c6 += ".png";
            return _0x1896c6;
        };
        _0x56d5a0.prototype.getSkinName = function() {
            var _0x3a7429 = this.getSpeciesPath("markhor") + "/markhor";
            _0x3a7429 += this.specType == 0 ? "" : 1;
            return _0x3a7429;
        };

        function _0x56d5a0() {
            _0x56d5a0.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x56d5a0, _0x48c056, _0x4d63e3);
        var _0x28c171 = Animal;
        _0x3b8f44.prototype = Object.create(_0x28c171.prototype);
        _0x3b8f44.prototype.constructor = _0x3b8f44;
        _0x3b8f44.superClass = _0x28c171;
        _0x3b8f44.prototype.animalInfo = function() {
            var _0x14de74 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x14de74.aniName = "Reindeer";
                    break;
                case 1:
                    _0x14de74.aniName = "Musk Deer";
                    break;
                case 111:
                    _0x14de74.aniName = "Classic Reindeer";
                    break;
                case 112:
                    _0x14de74.aniName = "Gold-trim Reindeer";
                    break;
                case 201:
                    _0x14de74.aniName = "Sunburn Reindeer";
                    break;
                case 202:
                    _0x14de74.aniName = "Piebald Cosmos";
                    break;
                case 204:
                    _0x14de74.aniName = "Spideer";
                    break;
            }
            _0x14de74.aniDesc = "";
            _0x14de74.upgradeText = "UPGRADED to " + _0x14de74.aniName + "!\n Press W to dig up food! \n Your sharp hooves let you turn very well on ice!";
            _0x14de74.aniCol = "#a68976";
            _0x14de74.skinName = this.getSkinName();
            return _0x14de74;
        };
        _0x3b8f44.prototype.getAbilityInfo = function(_0x2df437) {
            var _0x471fea = {
                abilName: "Dig Food!"
            };
            _0x471fea.abilImg = "skins/arctic/reindeer/" + this.animalSpecies + this.getSubSpecies() + "/reindeer.png";
            _0x471fea.skinThemeID = this.skinThemeID;
            _0x471fea.mopeSeasonID = this.mopeSeasonID;
            return _0x471fea;
        };
        _0x3b8f44.prototype.getSkinName = function() {
            return "arctic/reindeer/" + this.animalSpecies + this.getSubSpecies() + "/reindeer";
        };
        _0x3b8f44.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };

        function _0x3b8f44() {
            _0x3b8f44.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x3b8f44, _0x48c056, _0x1171ab);
        var _0x28c171 = Animal;
        _0x1653f4.prototype = Object.create(_0x28c171.prototype);
        _0x1653f4.prototype.constructor = _0x1653f4;
        _0x1653f4.superClass = _0x28c171;
        _0x1653f4.prototype.getSkinName = function() {
            return this.getSpeciesPath("trex") + "/trex";
        };
        _0x1653f4.prototype.animalInfo = function() {
            var _0x53e892 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x53e892.aniName = "The T.Rex";
                    break;
                case 1:
                    _0x53e892.aniName = "Golden T.Rex";
                    break;
                case 2:
                    _0x53e892.aniName = "Ember T.Rex";
                    break;
                case 100:
                    _0x53e892.aniName = "Mr. Dollar";
                    break;
                case 111:
                    _0x53e892.aniName = "Classic T.Rex";
                    break;
                case 200:
                    _0x53e892.aniName = "Kaiju Rex";
                    break;
                case 202:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0x53e892.aniName = "Hyporevenant Rex";
                            break;
                    }
                    break;
                case 204:
                    _0x53e892.aniName = "Tartarus Rex";
                    break;
                case 220:
                    _0x53e892.aniName = "Bio Mutant T-rex";
                    break;
            }
            _0x53e892.skinName = this.getSkinName();
            _0x53e892.upgradeText = "UPGRADED to " + _0x53e892.aniName + " The Dinosaur!\n This ancient dinosaur has powerful jaws that can drag prey around!!";
            _0x53e892.aniCol = "#862A2A";
            return _0x53e892;
        };
        _0x1653f4.prototype.getSubSpecies = function() {
            if (this.animalSpecies === 202) {
                return "/" + this.animalSubSpecies;
            } else {
                return "";
            }
        };
        _0x1653f4.prototype.getSpeciesPath = function(_0x456885) {
            return "land/" + _0x456885 + "/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x1653f4.prototype.getAbilityInfo = function(_0x3d9391) {
            var _0xbf273e = {
                abilName: "Jaws Bite"
            };
            _0xbf273e.abilImg = "skins/" + this.getSkinName() + ".png";
            _0xbf273e.skinThemeID = this.skinThemeID;
            _0xbf273e.mopeSeasonID = this.mopeSeasonID;
            return _0xbf273e;
        };
        _0x1653f4.prototype.getAniRadius = function(_0x20be34) {
            return _0x20be34;
        };
        _0x1653f4.prototype.basicDrawSkinImg = function() {
            this.setSkinScale();
            var _0x2c252f = this.mopeSeasonID < 2 ? 0 : 1.5;
            var _0x4fbbba = this.skinScale;
            var _0x277a83 = this.getAniRadius(this.skinRad);
            if (this.loadedSkinImg) {
                var _0x2d5ba5 = _0x277a83 / 2;
                _0x39e82d.drawImage(this.loadedSkinImg, -_0x277a83 - _0x2d5ba5 + _0x2c252f, -_0x277a83 - _0x2d5ba5 + _0x2c252f, _0x277a83 * 2 * _0x4fbbba, _0x277a83 * 2 * (_0x4fbbba * 1.2));
            }
        };

        function _0x1653f4() {
            _0x1653f4.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x1653f4, _0x48c056, _0x4a37d4);
        var _0x28c171 = Animal;
        _0x274b9c.prototype = Object.create(_0x28c171.prototype);
        _0x274b9c.prototype.constructor = _0x274b9c;
        _0x274b9c.superClass = _0x28c171;
        _0x274b9c.prototype.getSkinName = function() {
            var _0xd8646a = "land/dragon/" + this.animalSpecies + "/" + this.animalSubSpecies + "/dragon";
            return _0xd8646a;
        };
        _0x274b9c.prototype.animalInfo = function() {
            var _0xf15bda = {};
            switch (this.animalSpecies) {
                case 0:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0xf15bda.aniName = "Dragon!";
                            break;
                        case 2023:
                            _0xf15bda.aniName = "Storm Dragon";
                            break;
                    }
                    break;
                case 1:
                    _0xf15bda.aniName = "Golden Dragon!";
                    break;
                case 2:
                    _0xf15bda.aniName = "Knight Dragon!";
                    break;
                case 3:
                    _0xf15bda.aniName = "Boss Dragon!";
                    break;
                case 100:
                    _0xf15bda.aniName = "The Gargon!";
                    break;
                case 111:
                    _0xf15bda.aniName = "Classic Dragon";
                    break;
                case 202:
                    _0xf15bda.aniName = "Aberrant Dragon";
                    break;
                case 203:
                    _0xf15bda.aniName = "Ghoul Dragon";
                    break;
                case 204:
                    _0xf15bda.aniName = "Magma Dragon!";
                    break;
                case 200:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0xf15bda.aniName = "Goofy Dragon!";
                            break;
                        case 1:
                            _0xf15bda.aniName = "Desert Dragon!";
                            break;
                        case 2:
                            _0xf15bda.aniName = "Forge Dragon!";
                            break;
                        case 3:
                            _0xf15bda.aniName = "Mythical Serpent!";
                            break;
                        case 4:
                            _0xf15bda.aniName = "Fiery Dragon!";
                            break;
                    }
                    break;
                case 201:
                    _0xf15bda.aniName = "Squishy Dragon!";
                    break;
                case 206:
                    _0xf15bda.aniName = "AG Dragon!";
                    break;
                case 220:
                    _0xf15bda.aniName = "Behemoth Hive Dragon";
                    break;
                case 224:
                    _0xf15bda.aniName = "Astral Dragon";
                    break;
                case 225:
                    _0xf15bda.aniName = "Rose Dragon";
                    break;
                case 226:
                    _0xf15bda.aniName = "Purple Haze";
                    break;
                case 254:
                    _0xf15bda.aniName = "Santa Dragon!";
                    break;
            }
            _0xf15bda.aniCol = "#FF9000";
            _0xf15bda.skinName = this.getSkinName();
            _0xf15bda.upgradeText = "UPGRADED to " + _0xf15bda.aniName + "\n (You're amazing!) \nFly over everything, Hold W to shoot fire!";
            _0xf15bda.aniCol = "#22FF8A";
            return _0xf15bda;
        };
        _0x274b9c.prototype.getAbilityInfo = function(_0x3e42de) {
            var _0x317918 = {
                abilName: "Fire"
            };
            _0x317918.abilImg = this.getSkinName() + ".png";
            _0x317918.speciesType = this.animalSpecies == 1 ? 2 : 0;
            _0x317918.skinThemeID = this.skinThemeID;
            _0x317918.mopeSeasonID = this.mopeSeasonID;
            return _0x317918;
        };
        _0x274b9c.prototype.diveColor1 = "#64a034";
        _0x274b9c.prototype.diveColor2 = "#598b30";
        _0x274b9c.prototype.onAnimalSpeciesSet = function() {
            switch (this.animalSpecies) {
                case 1:
                    this.diveColor1 = "#dbb300";
                    this.diveColor2 = "#bf9d04";
                    break;
                case 2:
                    this.diveColor1 = "#79c9a8";
                    this.diveColor2 = "#6fad9f";
                    break;
            }
        };

        function _0x274b9c() {
            _0x274b9c.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x274b9c, _0x48c056, _0x5642bc);
        var _0x28c171 = Animal;
        _0x23a128.prototype = Object.create(_0x28c171.prototype);
        _0x23a128.prototype.constructor = _0x23a128;
        _0x23a128.superClass = _0x28c171;
        _0x23a128.prototype.animalInfo = function() {
            var _0x36301e = {
                skinName: "land/elephant/" + this.animalSpecies + "/elephant"
            };
            switch (this.animalSubSpecies) {
                case 0:
                    switch (this.animalSpecies) {
                        case 0:
                            _0x36301e.aniName = "Elephant!";
                            break;
                        case 111:
                            _0x36301e.aniName = "Classic Elephant!";
                            break;
                    }
                    break;
                case 2023:
                    _0x36301e.aniName = "Carnival Elephant!";
                    break;
                case 1:
                    _0x36301e.aniName = "Golden Elephant!";
                    break;
                case 2:
                    _0x36301e.aniName = "Albino Elephant!";
                    break;
                case 201:
                    _0x36301e.aniName = "Leiphant!";
                    break;
                case 202:
                    _0x36301e.aniName = "Ice Wizard Elephant";
                    break;
                case 220:
                    _0x36301e.aniName = "Lightwave Elephant";
                    break;
            }
            _0x36301e.skinName = "land/elephant/" + this.animalSpecies + "/" + this.animalSubSpecies + "/elephant";
            _0x36301e.aniDesc = "";
            _0x36301e.upgradeText = "UPGRADED to " + _0x36301e.aniName + "\n Use your long trunk to attack and eat food!";
            _0x36301e.aniCol = "#945A99";
            return _0x36301e;
        };
        _0x23a128.prototype.getAbilityInfo = function(_0x9f1ea2) {
            var _0x573a79 = {};
            _0x573a79.abilImg = "skins/" + this.getSpeciesPath() + "/elephant.png";
            _0x573a79.abilName = "Trunk Hit";
            _0x573a79.skinThemeID = this.skinThemeID;
            _0x573a79.mopeSeasonID = this.mopeSeasonID;
            return _0x573a79;
        };
        _0x23a128.prototype.getSkinName = function() {
            let _0xe9b71f = this.getSpeciesPath() + "/elephant";
            _0xe9b71f += this.specType == 0 ? "" : 1;
            return _0xe9b71f;
        };
        _0x23a128.prototype.getSpeciesPath = function() {
            return "land/elephant/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x23a128.prototype.getSubSpecies = function() {
            return "/" + this.animalSubSpecies;
        };

        function _0x23a128() {
            _0x23a128.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x23a128, _0x48c056, _0x1bba03);
        var _0x28c171 = Animal;
        _0x4d7800.prototype = Object.create(_0x28c171.prototype);
        _0x4d7800.prototype.constructor = _0x4d7800;
        _0x4d7800.superClass = _0x28c171;
        _0x4d7800.prototype.animalInfo = function() {
            var _0x213ef3 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x213ef3.aniName = "Hippo!";
                    break;
                case 1:
                    _0x213ef3.aniName = "Golden Hippo!";
                    break;
                case 2:
                    _0x213ef3.aniName = "Pygmy Hippo!";
                    break;
                case 100:
                    _0x213ef3.aniName = "Swampster!";
                    break;
                case 111:
                    _0x213ef3.aniName = "Classic Hippo";
                    break;
                case 202:
                    _0x213ef3.aniName = "Planet Hippo";
                    break;
                case 204:
                    _0x213ef3.aniName = "Sun Hippo!";
                    break;
            }
            _0x213ef3.skinName = this.getSkinName();
            _0x213ef3.upgradeText = "UPGRADED to " + _0x213ef3.aniName + "!\nHippos are great swimmers, dominate the Lakes/Oceans/Mud!";
            _0x213ef3.aniCol = "#945A99";
            return _0x213ef3;
        };
        _0x4d7800.prototype.getAbilityInfo = function(_0x515b78) {
            var _0x3e77dd = {
                abilName: "Loud Grown!"
            };
            _0x3e77dd.abilImg = "skins/" + this.getSpeciesPath() + "/hippo1.png";
            _0x3e77dd.skinThemeID = this.skinThemeID;
            _0x3e77dd.mopeSeasonID = this.mopeSeasonID;
            return _0x3e77dd;
        };
        _0x4d7800.prototype.getSkinName = function() {
            let _0x4ab884 = this.getSpeciesPath() + "/hippo";
            _0x4ab884 += this.specType == 0 ? "" : 1;
            return _0x4ab884;
        };
        _0x4d7800.prototype.getSpeciesPath = function() {
            return "land/hippo/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x4d7800.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };

        function _0x4d7800() {
            _0x4d7800.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x4d7800, _0x48c056, _0x478075);
        var _0x28c171 = Animal;
        _0x5be1f2.prototype = Object.create(_0x28c171.prototype);
        _0x5be1f2.prototype.constructor = _0x5be1f2;
        _0x5be1f2.superClass = _0x28c171;
        _0x5be1f2.prototype.animalInfo = function() {
            var _0x5b8e8e = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x5b8e8e.aniName = "Giant Spider!";
                    break;
                case 1:
                    _0x5b8e8e.aniName = "Golden Spider!";
                    break;
                case 2:
                    _0x5b8e8e.aniName = "Goliath Spider!";
                    break;
                case 111:
                    _0x5b8e8e.aniName = "Classic Giant Spider";
                    break;
                case 202:
                    _0x5b8e8e.aniName = "Sapphire Cave Spider";
                    break;
                case 204:
                    _0x5b8e8e.aniName = "Smile Spider!";
                    break;
            }
            _0x5b8e8e.skinName = this.getSkinName();
            _0x5b8e8e.upgradeText = "UPGRADED to " + _0x5b8e8e.aniName + "!\n Place web around the game to catch prey!";
            _0x5b8e8e.aniCol = "black";
            return _0x5b8e8e;
        };
        _0x5be1f2.prototype.getAbilityInfo = function(_0x22d36c) {
            var _0x1c6bb3 = {
                abilName: "Spin Web!",
                abilImg: "img/web/0/spiderWeb.png",
                skinThemeID: this.skinThemeID,
                mopeSeasonID: this.mopeSeasonID
            };
            return _0x1c6bb3;
        };
        _0x5be1f2.prototype.getSkinName = function() {
            let _0x40d4e7 = this.getSpeciesPath() + "/giantspider";
            return _0x40d4e7;
        };
        _0x5be1f2.prototype.getSpeciesPath = function() {
            return "land/giantspider/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x5be1f2.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };

        function _0x5be1f2() {
            _0x5be1f2.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x5be1f2, _0x48c056, _0x21b167);
        var _0x28c171 = Animal;
        _0x2b393d.prototype = Object.create(_0x28c171.prototype);
        _0x2b393d.prototype.constructor = _0x2b393d;
        _0x2b393d.superClass = _0x28c171;
        _0x2b393d.prototype.animalInfo = function() {
            var _0x39f37f = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x39f37f.aniName = "Boa Constrictor!";
                    break;
                case 1:
                    _0x39f37f.aniName = "Golden Boa!";
                    break;
                case 2:
                    _0x39f37f.aniName = "Tree Boa!";
                    break;
                case 111:
                    _0x39f37f.aniName = "Classic Boa";
                    break;
            }
            _0x39f37f.skinName = this.getSkinName();
            _0x39f37f.aniDesc = "";
            _0x39f37f.upgradeText = "UPGRADED to " + _0x39f37f.aniName + "!\n Coil and suffocate other animals!";
            _0x39f37f.aniCol = "black";
            return _0x39f37f;
        };
        _0x2b393d.prototype.getSkinName = function() {
            let _0x243dcf = this.getSpeciesPath() + "/boaconstrictor";
            return _0x243dcf;
        };
        _0x2b393d.prototype.getSpeciesPath = function() {
            return "land/boaconstrictor/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x2b393d.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x2b393d.prototype.getAbilityInfo = function(_0x262d1c) {
            var _0x4d34d3 = {
                abilName: "Suffocate prey"
            };
            _0x4d34d3.abilImg = "skins/" + this.getSpeciesPath() + "/constrict.png";
            _0x4d34d3.skinThemeID = this.skinThemeID;
            _0x4d34d3.mopeSeasonID = this.mopeSeasonID;
            return _0x4d34d3;
        };
        _0x2b393d.prototype.getSkinName = function() {
            var _0x19dc8d = this.getSpeciesPath("boaconstrictor") + "/boaconstrictor";
            if (this.flag_usingAbility && this.specType == 1) {
                _0x19dc8d += "2";
            } else {
                _0x19dc8d += this.specType == 0 ? "" : 1;
            }
            return _0x19dc8d;
        };
        _0x2b393d.prototype.drawUnderSkinImg = function() {
            if (this.flag_usingAbility) {
                return;
            }
            var _0x859d8f = this.rad - this.outlineW;
            var _0x26bec4 = 500 / 340;
            var _0x10428c = this.getSkinImageObj("skins/" + this.getSpeciesPath("boaconstrictor") + "/tongue.png");
            var _0x2ca840 = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x48b499 = _0x5981a2 == _0x4051d6 ? 0 : _0x1b594e(_0x2ca840, 0.5, 5, 0.5);
            var _0x4393f7 = _0x5981a2 == _0x4051d6 ? 0 : 5;
            if (_0x10428c) {
                _0x39e82d.drawImage(_0x10428c, -_0x859d8f * _0x26bec4, -(_0x859d8f + _0x4393f7 + _0x48b499) * _0x26bec4, _0x859d8f * 2 * _0x26bec4, _0x859d8f * 2 * _0x26bec4);
            }
        };
        _0x2b393d.prototype.getSkinImageObj = function(_0x33f285) {
            var _0x10b823 = this.animalSpecies === 1 || this.animalSpecies === 2 ? 1 : this.mopeSeasonID;
            return this.getSkinImageObjForSeason(_0x33f285, _0x10b823);
        };

        function _0x2b393d() {
            _0x2b393d.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x2b393d, _0x48c056, _0x471048);
        var _0x28c171 = Animal;
        _0x3b4b4e.prototype = Object.create(_0x28c171.prototype);
        _0x3b4b4e.prototype.constructor = _0x3b4b4e;
        _0x3b4b4e.superClass = _0x28c171;
        _0x3b4b4e.prototype.animalInfo = function() {
            var _0x2b3f86 = {
                aniName: "Gorilla!"
            };
            switch (this.animalSubSpecies) {
                case 0:
                    switch (this.animalSpecies) {
                        case 111:
                            _0x2b3f86.aniName = "Classic Gorilla";
                            break;
                        case 112:
                            _0x2b3f86.aniName = "Gold-trim Gorilla";
                            break;
                    }
                    break;
                case 2023:
                    _0x2b3f86.aniName = "Mafia Gorilla";
                    break;
                case 100:
                    _0x2b3f86.aniName = "Grim Reaper";
                    break;
                case 201:
                    _0x2b3f86.aniName = "Explorer Ape";
                    break;
                case 202:
                    _0x2b3f86.aniName = "Kongrilla";
                    break;
                case 223:
                    _0x2b3f86.aniName = "Valentine Gorilla";
                    break;
                case 204:
                    _0x2b3f86.aniName = "Phantom Gorilla";
                    break;
            }
            _0x2b3f86.skinName = this.getSkinName();
            _0x2b3f86.upgradeText = "UPGRADED to " + _0x2b3f86.aniName + "!\n" + _0x2b3f86.aniName + "s are very fast on hills/trees!\n Press W to throw bananas! (from trees)";
            _0x2b3f86.aniCol = "#945A99";
            return _0x2b3f86;
        };
        _0x3b4b4e.prototype.getAbilityInfo = function(_0x3c2248) {
            var _0x6a1a75 = {
                abilName: "Fruit Throw!"
            };
            _0x6a1a75.abilImg = "skins/" + this.getSpeciesPath() + "/gorilla.png";
            _0x6a1a75.skinThemeID = this.skinThemeID;
            _0x6a1a75.mopeSeasonID = this.mopeSeasonID;
            return _0x6a1a75;
        };
        _0x3b4b4e.prototype.getSkinName = function() {
            let _0x4eef20 = this.getSpeciesPath() + "/gorilla";
            return _0x4eef20;
        };
        _0x3b4b4e.prototype.getSpeciesPath = function() {
            return "land/gorilla/" + this.animalSpecies + "/" + this.animalSubSpecies;
        };
        _0x3b4b4e.prototype.drawSkinCustomization = function() {
            this.setSkinScale();
            if (this.animalSubSpecies == 204) {
                var _0x402247 = "skins/" + this.getSpeciesPath();
                var _0x4ba99a = this.skinScale * 1.07;
                var _0x5df4c9 = this.skinRad;
                var _0x102ce4 = 1 + Math.trunc(_0x4ec996 / 120) % 7;
                var _0x5a98c4 = this.getSkinImageObj(_0x402247 + "/gorilla_head.png");
                if (_0x5a98c4) {
                    var _0x55448e = 0;
                    var _0x30c6c0 = this.getSkinImageObj(_0x402247 + "/fire" + _0x102ce4 + ".png");
                    if (_0x30c6c0) {
                        _0x39e82d.save();
                        _0x39e82d.drawImage(_0x30c6c0, -_0x5df4c9 * _0x4ba99a, (-_0x5df4c9 + _0x5df4c9 * 0.05) * _0x4ba99a - _0x55448e, _0x5df4c9 * 2 * _0x4ba99a, _0x5df4c9 * 2 * _0x4ba99a);
                        _0x39e82d.restore();
                    }
                    _0x39e82d.save();
                    var _0x5df4c9 = this.rad;
                    _0x39e82d.drawImage(_0x5a98c4, -_0x5df4c9 * _0x4ba99a, (-_0x5df4c9 + _0x5df4c9 * 0.05) * _0x4ba99a - _0x55448e, _0x5df4c9 * 2 * _0x4ba99a, _0x5df4c9 * 2 * _0x4ba99a);
                    _0x39e82d.restore();
                }
            }
        };

        function _0x3b4b4e() {
            _0x3b4b4e.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x3b4b4e, _0x48c056, _0x4d8eda);
        var _0x28c171 = Animal;
        _0x3f3314.prototype = Object.create(_0x28c171.prototype);
        _0x3f3314.prototype.constructor = _0x3f3314;
        _0x3f3314.superClass = _0x28c171;
        _0x3f3314.prototype.animalInfo = function() {
            var _0x53b8da = {};
            switch (this.animalSpecies) {
                case 0:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0x53b8da.aniName = "The Kraken!";
                            break;
                        case 2023:
                            _0x53b8da.aniName = " Beach Battle Kraken!";
                            break;
                    }
                    break;
                case 1:
                    _0x53b8da.aniName = "Golden Kraken!";
                    break;
                case 2:
                    _0x53b8da.aniName = "Chromatic Kraken!";
                    break;
                case 111:
                    _0x53b8da.aniName = "Classic Kraken";
                    break;
                case 201:
                    _0x53b8da.aniName = "Squishy Kraken!";
                    break;
                case 202:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0x53b8da.aniName = "Giant Squid";
                            break;
                        case 1:
                            _0x53b8da.aniName = "Hydrothoth Kraken";
                            break;
                    }
                    break;
                case 204:
                    _0x53b8da.aniName = "Cthulhu Kraken!";
                    break;
                case 220:
                    _0x53b8da.aniName = "Dr. Brainiopod";
                    break;
                case 222:
                    _0x53b8da.aniName = "Gingerbread Kraken";
                    break;
            }
            _0x53b8da.aniCol = "#FF9000";
            _0x53b8da.skinName = this.getSkinName();
            _0x53b8da.upgradeText = "UPGRADED to THE " + _0x53b8da.aniName + "!\n Terrorize the oceans, and be feared by all!\n (Release W to use whirlpool ability!)";
            _0x53b8da.aniCol = "#64a034";
            return _0x53b8da;
        };
        _0x3f3314.prototype.getSkinName = function() {
            return this.getSpeciesPath("kraken") + "/kraken";
        };
        _0x3f3314.prototype.getSubSpecies = function() {
            if (this.animalSpecies === 202 || this.animalSpecies === 0 || this.animalSpecies === 111) {
                return "/" + this.animalSubSpecies;
            } else {
                return "";
            }
        };
        _0x3f3314.prototype.getSpeciesPath = function(_0x452f66) {
            return "ocean/" + _0x452f66 + "/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x3f3314.prototype.getAbilityInfo = function(_0x12eb5d) {
            var _0x78a617 = {
                abilName: "Whirlpool"
            };
            _0x78a617.abilImg = "skins/" + this.getSpeciesPath("kraken") + "/kraken.png";
            _0x78a617.skinThemeID = this.skinThemeID;
            _0x78a617.mopeSeasonID = this.mopeSeasonID;
            return _0x78a617;
        };
        _0x3f3314.prototype.diveColor1 = "#64a034";
        _0x3f3314.prototype.diveColor2 = "#598b30";
        _0x3f3314.prototype.onAnimalSpeciesSet = function() {
            switch (this.animalSpecies) {
                case 1:
                    this.diveColor1 = "#dbb300";
                    this.diveColor2 = "#bf9d04";
                    break;
                case 2:
                    this.diveColor1 = "#79c9a8";
                    this.diveColor2 = "#6fad9f";
                    break;
            }
        };

        function _0x3f3314() {
            _0x3f3314.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x3f3314, _0x48c056, _0x519f92);
        var _0x28c171 = Animal;
        _0x23e0bb.prototype = Object.create(_0x28c171.prototype);
        _0x23e0bb.prototype.constructor = _0x23e0bb;
        _0x23e0bb.superClass = _0x28c171;
        _0x23e0bb.prototype.animalInfo = function() {
            var _0x5e86b6 = {};
            switch (this.animalSubSpecies) {
                case 0:
                    switch (this.animalSpecies) {
                        case 0:
                            _0x5e86b6.aniName = "Bluewhale!";
                            break;
                        case 111:
                            _0x5e86b6.aniName = "Classic Blue Whale";
                            break;
                    }
                    break;
                case 1:
                    _0x5e86b6.aniName = "Golden Whale!";
                    break;
                case 2:
                    _0x5e86b6.aniName = "Albino Whale!";
                    break;
                case 201:
                    _0x5e86b6.aniName = "Mermaid Whale!";
                    break;
                case 202:
                    _0x5e86b6.aniName = "Whale Boat";
                    break;
                case 203:
                    _0x5e86b6.aniName = "Ancient Island Monster";
                    break;
                case 220:
                    _0x5e86b6.aniName = "Sailor Whale";
                    break;
                case 223:
                    _0x5e86b6.aniName = "Valentine Whale";
                    break;
                case 2023:
                    _0x5e86b6.aniName = "Molten Frost Whale";
                    break;
            }
            _0x5e86b6.skinName = this.getSkinName();
            _0x5e86b6.aniDesc = "";
            _0x5e86b6.upgradeText = "UPGRADED to " + _0x5e86b6.aniName + "\n Smash with your powerful tail!";
            _0x5e86b6.aniCol = "#945A99";
            return _0x5e86b6;
        };
        _0x23e0bb.prototype.getSkinName = function() {
            return this.getSpeciesPath() + "/bluewhale" + (this.specType == 0 ? "" : this.specType);
        };
        _0x23e0bb.prototype.getSpeciesPath = function() {
            return "ocean/bluewhale/" + this.animalSpecies + "/" + this.animalSubSpecies;
        };
        _0x23e0bb.prototype.getAbilityInfo = function(_0x30a732) {
            var _0x33547b = {
                abilName: "Tail Slap"
            };
            _0x33547b.abilImg = "skins/" + this.getSpeciesPath() + "/ability_whaleTailHit.png";
            _0x33547b.skinThemeID = this.skinThemeID;
            _0x33547b.mopeSeasonID = this.mopeSeasonID;
            return _0x33547b;
        };

        function _0x23e0bb() {
            _0x23e0bb.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x23e0bb, _0x48c056, _0x1d87e9);
        var _0x28c171 = Animal;
        _0x1ed2eb.prototype = Object.create(_0x28c171.prototype);
        _0x1ed2eb.prototype.constructor = _0x1ed2eb;
        _0x1ed2eb.superClass = _0x28c171;
        _0x1ed2eb.prototype.animalInfo = function() {
            var _0x120fd1 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x120fd1.aniName = "King Crab!";
                    break;
                case 1:
                    _0x120fd1.aniName = "Golden Crab!";
                    break;
                case 2:
                    _0x120fd1.aniName = "Amethyst Crab!";
                    break;
                case 111:
                    _0x120fd1.aniName = "Classic King Crab!";
                    break;
                case 202:
                    _0x120fd1.aniName = "Abyssal King Crab";
                    break;
                case 204:
                    _0x120fd1.aniName = "Plasma-core King Crab!";
                    break;
                case 220:
                    _0x120fd1.aniName = "Star Crusher Crab";
                    break;
            }
            _0x120fd1.skinName = "ocean/kingcrab/" + this.animalSpecies + "/kingcrab";
            _0x120fd1.aniDesc = "";
            _0x120fd1.upgradeText = "UPGRADED to " + _0x120fd1.aniName + "!\n Use your powerful arms to smack your prey!";
            _0x120fd1.aniCol = "#971f0e";
            return _0x120fd1;
        };
        _0x1ed2eb.prototype.getSkinImageObj = function(_0x301310) {
            var _0x7544ec = this.mopeSeasonID;
            var _0x5e9253 = "./assets/s/" + _0x7544ec + "/" + _0x301310;
            if (this.skinThemeID > 0) {
                _0x5e9253 = "./assets/t/" + this.skinThemeID + "/" + _0x301310;
            }
            return _0x4172bb(_0x5e9253, function(_0x243bc8) {
                console.log(_0x243bc8.src);
            });
        };
        _0x1ed2eb.prototype.getAbilityInfo = function(_0x172d7c) {
            var _0x47d8f8 = {
                abilName: "Arm Smash",
                abilImg: "skins/ocean/kingcrab/" + this.animalSpecies + "/ability_crabSmashSkin.png",
                skinThemeID: this.skinThemeID,
                mopeSeasonID: this.mopeSeasonID
            };
            return _0x47d8f8;
        };
        _0x1ed2eb.prototype.getSkinName = function() {
            return "ocean/kingcrab/" + this.animalSpecies + "/kingcrab";
        };

        function _0x1ed2eb() {
            _0x1ed2eb.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x1ed2eb, _0x48c056, _0x50431e);
        var _0x28c171 = Animal;
        _0xe71fcd.prototype = Object.create(_0x28c171.prototype);
        _0xe71fcd.prototype.constructor = _0xe71fcd;
        _0xe71fcd.superClass = _0x28c171;
        _0xe71fcd.prototype.animalInfo = function() {
            var _0xf75722 = {};
            switch (this.animalSpecies) {
                case 0:
                    switch (this.animalSubSpecies) {
                        case 0:
                        default:
                            _0xf75722.aniName = "Killerwhale!";
                            break;
                        case 223:
                            _0xf75722.aniName = "Valentine Orca";
                            break;
                    }
                    break;
                case 1:
                    _0xf75722.aniName = "Golden Orca!";
                    break;
                case 2:
                    _0xf75722.aniName = "Albino Orca!";
                    break;
                case 111:
                    _0xf75722.aniName = "Classic Killerwhale!";
                    break;
                case 201:
                    _0xf75722.aniName = "Lifeguard Orca!";
                    break;
                case 202:
                    _0xf75722.aniName = "Sea Angel Orca";
                    break;
            }
            _0xf75722.skinName = this.getSkinName();
            _0xf75722.aniDesc = "";
            _0xf75722.upgradeText = "UPGRADED to " + _0xf75722.aniName + "\nWhales blow out water when diving! (And sometimes other loot!)";
            _0xf75722.aniCol = "#141414";
            return _0xf75722;
        };
        _0xe71fcd.prototype.getAbilityInfo = function(_0x182a00) {
            var _0xeac908 = {
                abilName: "Cause Wave"
            };
            _0xeac908.abilImg = "skins/" + this.getSpeciesPath() + "/killerwhale.png";
            _0xeac908.skinThemeID = this.skinThemeID;
            _0xeac908.mopeSeasonID = this.mopeSeasonID;
            return _0xeac908;
        };
        _0xe71fcd.prototype.getSkinName = function() {
            let _0x125fc7 = this.getSpeciesPath() + "/killerwhale";
            _0x125fc7 += this.specType == 0 ? "" : 1;
            return _0x125fc7;
        };
        _0xe71fcd.prototype.getSpeciesPath = function() {
            return "ocean/killerwhale/" + this.animalSpecies + this.getSubSpecies();
        };
        _0xe71fcd.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };

        function _0xe71fcd() {
            _0xe71fcd.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0xe71fcd, _0x48c056, _0x563e19);
        var _0x28c171 = Animal;
        _0x2da22d.prototype = Object.create(_0x28c171.prototype);
        _0x2da22d.prototype.constructor = _0x2da22d;
        _0x2da22d.superClass = _0x28c171;
        _0x2da22d.prototype.animalInfo = function() {
            var _0x264d37 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x264d37.aniName = "Jellyfish";
                    break;
                case 111:
                    _0x264d37.aniName = "Classic Jellyfish";
                    break;
                case 112:
                    _0x264d37.aniName = "Gold-trim Jellyfish";
                    break;
                case 201:
                    _0x264d37.aniName = "Seafoam Jellyfish";
                    break;
                case 202:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0x264d37.aniName = "Disco Jellyfish";
                            break;
                        case 1:
                            _0x264d37.aniName = "Twisted Horror";
                    }
                    break;
            }
            _0x264d37.skinName = this.getSkinName();
            _0x264d37.aniDesc = "";
            _0x264d37.upgradeText = "UPGRADED to " + _0x264d37.aniName + "!\n A slowly-turning animal that can grow quite large!";
            _0x264d37.aniCol = "#FDB9BA";
            return _0x264d37;
        };
        _0x2da22d.prototype.getAbilityInfo = function(_0x52bdb6) {
            var _0x83f55b = {
                abilName: "Touch prey to sting!"
            };
            _0x83f55b.abilImg = "skins/" + this.getSpeciesPath() + "/jellyfish.png";
            _0x83f55b.isPassive = true;
            _0x83f55b.skinThemeID = this.skinThemeID;
            _0x83f55b.mopeSeasonID = this.mopeSeasonID;
            return _0x83f55b;
        };
        _0x2da22d.prototype.getSkinName = function() {
            let _0x518007 = this.getSpeciesPath() + "/jellyfish";
            return _0x518007;
        };
        _0x2da22d.prototype.getSpeciesPath = function() {
            return "ocean/jellyfish/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x2da22d.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            if (this.animalSpecies === 202) {
                return "/" + this.animalSubSpecies;
            } else {
                return "";
            }
        };
        _0x2da22d.prototype.getSkinImageObj = function(_0x452eec) {
            var _0xeaf5cc = this.animalSpecies === 201 ? 1 : this.mopeSeasonID;
            return this.getSkinImageObjForSeason(_0x452eec, _0xeaf5cc);
        };
        _0x2da22d.prototype.basicDrawSkinImg = function() {
            this.setSkinScale();
            var _0x1d77a5 = -0;
            var _0x58df19 = -0.3;
            var _0x201ef0 = 1;
            var _0x4151a4 = 1.2;
            if (this.animalSpecies == 201) {
                _0x58df19 = -0.3;
                _0x201ef0 = 1.05;
            }
            if (this.mopeSeasonID == 0) {
                _0x58df19 = 0;
                _0x201ef0 = 1;
                _0x4151a4 = 1;
            }
            var _0x1023e6 = this.skinScale * _0x201ef0;
            var _0x4076ae = this.skinRad;
            if (this.loadedSkinImg) {
                _0x39e82d.drawImage(this.loadedSkinImg, -_0x4076ae * _0x1023e6 + _0x4076ae * _0x1d77a5, -_0x4076ae * _0x1023e6 + _0x4076ae * _0x58df19, _0x4076ae * 2 * _0x1023e6, _0x4076ae * 2 * _0x1023e6 * _0x4151a4);
            }
            if (this.animalSpecies == 202) {
                if (_0x5981a2 != _0x4051d6 && !_0x1d523b) {
                    var _0x8284fe = Math.trunc(_0x4ec996 / 500) % 2;
                    if (_0x8284fe == 1) {
                        var _0x25c767 = this.getSkinImageObj("skins/" + this.getSkinName() + "_shine.png");
                        if (_0x25c767) {
                            _0x39e82d.drawImage(_0x25c767, -_0x4076ae * _0x1023e6 + _0x4076ae * _0x1d77a5, -_0x4076ae * _0x1023e6 + _0x4076ae * _0x58df19, _0x4076ae * 2 * _0x1023e6, _0x4076ae * 2 * (_0x1023e6 * 1.2));
                        }
                    }
                }
            }
        };

        function _0x2da22d() {
            _0x2da22d.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x2da22d, _0x48c056, _0x29d150);
        var _0x28c171 = Animal;
        _0x413b91.prototype = Object.create(_0x28c171.prototype);
        _0x413b91.prototype.constructor = _0x413b91;
        _0x413b91.superClass = _0x28c171;
        _0x413b91.prototype.animalInfo = function() {
            var _0x20f588 = {};
            switch (this.animalSpecies) {
                case 0:
                    switch (this.animalSubSpecies) {
                        default:
                        case 0:
                            _0x20f588.aniName = "Stingray!";
                            break;
                        case 223:
                            _0x20f588.aniName = "Valentine Stingray!";
                            break;
                    }
                    break;
                case 100:
                    _0x20f588.aniName = "Phantom Ray!";
                    break;
                case 111:
                    _0x20f588.aniName = "Classic Stingray";
                    break;
                case 112:
                    _0x20f588.aniName = "Gold-trim Stingray";
                    break;
                case 201:
                    _0x20f588.aniName = "Chocolate Ray!";
                    break;
                case 202:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0x20f588.aniName = "Ether Stingray";
                            break;
                        case 1:
                            _0x20f588.aniName = "Pancake Stingray";
                    }
                    break;
            }
            _0x20f588.skinName = this.getSkinName();
            _0x20f588.upgradeText = "UPGRADED to " + _0x20f588.aniName + "\n Use electic shock (Release W key!) to shock animals! \n(Takes time to recharge)";
            _0x20f588.aniCol = "#164336";
            return _0x20f588;
        };
        _0x413b91.prototype.getAbilityInfo = function(_0xc2c786) {
            var _0x19db1a = {
                abilName: "Shock!"
            };
            _0x19db1a.abilImg = "skins/" + this.getSpeciesPath() + "/ability.png";
            _0x19db1a.skinThemeID = this.skinThemeID;
            _0x19db1a.mopeSeasonID = this.mopeSeasonID;
            return _0x19db1a;
        };
        _0x413b91.prototype.getSkinName = function() {
            let _0x416fc7 = this.getSpeciesPath() + "/stingray";
            return _0x416fc7;
        };
        _0x413b91.prototype.getSpeciesPath = function() {
            return "ocean/stingray/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x413b91.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            if (this.animalSpecies === 202) {
                return "/" + this.animalSubSpecies;
            } else {
                return "";
            }
        };
        _0x413b91.prototype.drawUnderSkinImg = function() {
            var _0x1a47a3 = 1.6;
            var _0x3bbe3b = 1.2;
            var _0x55d8db = 0.8;
            var _0x500a23 = 500 / 340;
            var _0x56f2a7 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/tail.png");
            if (_0x56f2a7) {
                _0x39e82d.save();
                var _0x1547c5 = this.rad - this.outlineW;
                _0x39e82d.drawImage(_0x56f2a7, -_0x1547c5 * _0x500a23, -_0x1547c5 * _0x1a47a3 * _0x500a23, _0x1547c5 * 2 * _0x500a23, _0x1547c5 * 2 * _0x500a23);
                _0x39e82d.restore();
            }
            if (this.animalSpecies == 100) {
                var _0x365934 = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x1233b6 = _0x5981a2 != _0x4051d6 && !_0x1d523b ? _0x1b594e(_0x365934, 5, 1, 1) : this.birdNoAnimationFlyWingAngle;
                var _0x56f2a7 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/tail2.png");
                if (_0x56f2a7) {
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = Math.max(0, _0x1233b6);
                    var _0x1547c5 = this.rad - this.outlineW;
                    _0x39e82d.drawImage(_0x56f2a7, -_0x1547c5 * _0x500a23, -_0x1547c5 * _0x1a47a3 * _0x500a23, _0x1547c5 * 2 * _0x500a23, _0x1547c5 * 2 * _0x500a23);
                    _0x39e82d.restore();
                }
                return;
            }
            var _0x56f2a7 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/leftwing.png");
            if (_0x56f2a7) {
                _0x39e82d.save();
                var _0x553d43 = 1;
                var _0x1547c5 = this.rad - this.outlineW;
                _0x39e82d.drawImage(_0x56f2a7, -_0x1547c5 * _0x3bbe3b * _0x500a23, -_0x1547c5 * _0x500a23, _0x1547c5 * 2 * _0x500a23, _0x1547c5 * 2 * _0x500a23);
                _0x39e82d.restore();
            }
            var _0x56f2a7 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/rightwing.png");
            if (_0x56f2a7) {
                _0x39e82d.save();
                var _0x553d43 = 1;
                var _0x1547c5 = this.rad - this.outlineW;
                _0x39e82d.drawImage(_0x56f2a7, -_0x1547c5 * _0x55d8db * _0x500a23, -_0x1547c5 * _0x500a23, _0x1547c5 * 2 * _0x500a23, _0x1547c5 * 2 * _0x500a23);
                _0x39e82d.restore();
            }
        };

        function _0x413b91() {
            _0x413b91.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x413b91, _0x48c056, _0x245c67);
        var _0x28c171 = Animal;
        _0xe12f0c.prototype = Object.create(_0x28c171.prototype);
        _0xe12f0c.prototype.constructor = _0xe12f0c;
        _0xe12f0c.superClass = _0x28c171;
        _0xe12f0c.prototype.animalInfo = function() {
            var _0x4ac3aa = {
                aniName: "Puffer Fish"
            };
            switch (this.animalSpecies) {
                case 2:
                    _0x4ac3aa.aniName = "Demon Fish";
                    break;
                case 100:
                    _0x4ac3aa.aniName = "Puffermace";
                    break;
                case 111:
                    _0x4ac3aa.aniName = "Classic Pufferfish";
                    break;
                case 112:
                    _0x4ac3aa.aniName = "Gold-trim Pufferfish";
                    break;
                case 201:
                    _0x4ac3aa.aniName = "Omniball Puffer";
                    break;
                case 202:
                    _0x4ac3aa.aniName = "Balloon Pufferfish";
                    break;
            }
            _0x4ac3aa.skinName = this.getSkinName();
            _0x4ac3aa.aniDesc = "";
            _0x4ac3aa.upgradeText = "UPGRADED to " + _0x4ac3aa.aniName + "!\n(Hold W to inflate - become spiky, and dangerous to touch!)";
            _0x4ac3aa.aniCol = "#94a3a9";
            return _0x4ac3aa;
        };
        _0xe12f0c.prototype.getAbilityInfo = function(_0x470e4d) {
            var _0x14378e = {
                abilName: "Puff!"
            };
            _0x14378e.abilImg = "skins/" + this.getSpeciesPath() + "/pufferfish2.png";
            _0x14378e.skinThemeID = this.skinThemeID;
            _0x14378e.mopeSeasonID = this.mopeSeasonID;
            return _0x14378e;
        };
        _0xe12f0c.prototype.getSkinName = function() {
            let _0x118cd4 = this.getSpeciesPath() + "/pufferfish";
            if (this.flag_usingAbility) {
                _0x118cd4 += "2";
            }
            return _0x118cd4;
        };
        _0xe12f0c.prototype.getSpeciesPath = function() {
            return "ocean/pufferfish/" + this.animalSpecies + this.getSubSpecies();
        };
        _0xe12f0c.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0xe12f0c.prototype.drawUnderSkinImg = function() {
            var _0x32c35c = 1.6;
            var _0x3d71f7 = 500 / 340;
            var _0x3e6e57 = "";
            if (this.animalSpecies == 100) {
                _0x3e6e57 = "/100";
                var _0x5caba0 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/tail.png");
                if (_0x5caba0) {
                    _0x39e82d.save();
                    var _0x40b222 = this.rad - this.outlineW;
                    _0x39e82d.drawImage(_0x5caba0, -_0x40b222 * _0x3d71f7, -_0x40b222 * _0x32c35c * _0x3d71f7, _0x40b222 * 2 * _0x3d71f7, _0x40b222 * 2 * _0x3d71f7);
                    _0x39e82d.restore();
                }
            }
        };

        function _0xe12f0c() {
            _0xe12f0c.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0xe12f0c, _0x48c056, _0x2b36cf);
        var _0x28c171 = Animal;
        _0x38857b.prototype = Object.create(_0x28c171.prototype);
        _0x38857b.prototype.constructor = _0x38857b;
        _0x38857b.superClass = _0x28c171;
        _0x38857b.prototype.animalInfo = function() {
            var _0x42fcd2 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x42fcd2.aniName = "Squid";
                    break;
                case 111:
                    _0x42fcd2.aniName = "Classic Squid";
                    break;
                case 112:
                    _0x42fcd2.aniName = "Gold-trim Squid";
                    break;
                case 200:
                    _0x42fcd2.aniName = "Cuttle Fish";
                    break;
                case 201:
                    _0x42fcd2.aniName = "Seacoast Squid";
                    break;
                case 202:
                    _0x42fcd2.aniName = "Psychedelic Squid";
                    break;
                case 204:
                    _0x42fcd2.aniName = "Void Scuttling Squid";
                    break;
            }
            _0x42fcd2.skinName = this.getSkinName();
            _0x42fcd2.aniDesc = "";
            _0x42fcd2.upgradeText = "UPGRADED to " + _0x42fcd2.aniName + "!\n " + _0x42fcd2.aniName + " can use INK when injured (press W!) \n+ you can hide in plankton bushes!";
            _0x42fcd2.aniCol = "#40dda4";
            return _0x42fcd2;
        };
        _0x38857b.prototype.getSkinName = function() {
            let _0x5dcf87 = this.getSpeciesPath() + "/squid";
            _0x5dcf87 += this.specType == 0 ? "" : 1;
            return _0x5dcf87;
        };
        _0x38857b.prototype.getSpeciesPath = function() {
            return "ocean/squid/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x38857b.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x38857b.prototype.getAbilityInfo = function(_0x1a82bf) {
            var _0x400ad0 = {
                abilName: "INK!"
            };
            _0x400ad0.abilImg = "skins/" + this.getSpeciesPath() + "/ability.png";
            _0x400ad0.skinThemeID = this.skinThemeID;
            _0x400ad0.mopeSeasonID = this.mopeSeasonID;
            return _0x400ad0;
        };
        _0x38857b.prototype.drawUnderSkinImg = function() {
            if (this.animalSpecies == 0 || this.animalSpecies == 201) {
                var _0x15c414 = 500 / 340;
                var _0x1506b4 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/cape.png");
                if (_0x1506b4) {
                    _0x39e82d.save();
                    var _0x2adfe9 = 1.1;
                    var _0x150e99 = this.rad - this.outlineW;
                    _0x39e82d.drawImage(_0x1506b4, -_0x150e99 * _0x15c414, -_0x150e99 * _0x2adfe9 * _0x15c414, _0x150e99 * 2 * _0x15c414, _0x150e99 * 2 * _0x15c414);
                    _0x39e82d.restore();
                }
            }
        };

        function _0x38857b() {
            _0x38857b.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x38857b, _0x48c056, _0x51851f);
        var _0x28c171 = Animal;
        _0x633847.prototype = Object.create(_0x28c171.prototype);
        _0x633847.prototype.constructor = _0x633847;
        _0x633847.superClass = _0x28c171;
        _0x633847.prototype.updateZ = function() {
            if (this.flag_underWater) {
                this.z = -151;
            } else {
                this.z = this.rad;
            }
        };
        _0x633847.prototype.animalInfo = function() {
            var _0x4a53c9 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x4a53c9.aniName = "Shark!";
                    break;
                case 1:
                    _0x4a53c9.aniName = "Tiger Shark!";
                    break;
                case 2:
                    _0x4a53c9.aniName = "Hammerhead Shark!";
                    break;
                case 111:
                    _0x4a53c9.aniName = "Classic Shark";
                    break;
                case 112:
                    _0x4a53c9.aniName = "Gold-trim Shark";
                    break;
                case 201:
                    _0x4a53c9.aniName = "Surfboard Chomper!";
                    break;
            }
            _0x4a53c9.skinName = this.getSkinName();
            _0x4a53c9.upgradeText = "UPGRADED to " + _0x4a53c9.aniName + "\n A vicious predator of the oceans!";
            _0x4a53c9.aniCol = "#999fc6";
            return _0x4a53c9;
        };
        _0x633847.prototype.getAbilityInfo = function(_0x3b30b6) {
            var _0x5855cb = {
                abilName: "Jaws Bite"
            };
            _0x5855cb.abilImg = "skins/" + this.getSpeciesPath() + "/ability.png";
            _0x5855cb.skinThemeID = this.skinThemeID;
            _0x5855cb.mopeSeasonID = this.mopeSeasonID;
            return _0x5855cb;
        };
        _0x633847.prototype.getSkinName = function() {
            let _0x53f76e = this.getSpeciesPath() + "/shark";
            return _0x53f76e;
        };
        _0x633847.prototype.getSpeciesPath = function() {
            return "ocean/shark/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x633847.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x633847.prototype.getSkinImageObj = function(_0x4b0af2) {
            var _0xb98deb = this.mopeSeasonID;
            return this.getSkinImageObjForSeason(_0x4b0af2, _0xb98deb);
        };
        _0x633847.prototype.drawUnderSkinImg = function() {
            if (this.flag_underWater) {
                return;
            }
            var _0x413a19 = 1.33;
            var _0x44b6a9 = 1;
            var _0xae9015 = 500 / 340 * _0x44b6a9;
            var _0x33ace8 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/tail.png");
            if (_0x33ace8) {
                _0x39e82d.save();
                var _0x1b8224 = this.rad - this.outlineW;
                _0x39e82d.drawImage(_0x33ace8, -_0x1b8224 * _0xae9015, -_0x1b8224 * _0x413a19 * _0xae9015, _0x1b8224 * 2 * _0xae9015, _0x1b8224 * 2 * _0xae9015);
                _0x39e82d.restore();
            }
        };

        function _0x633847() {
            _0x633847.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x633847, _0x48c056, _0x78a6fc);
        var _0x28c171 = Animal;
        _0x2dae98.prototype = Object.create(_0x28c171.prototype);
        _0x2dae98.prototype.constructor = _0x2dae98;
        _0x2dae98.superClass = _0x28c171;
        _0x2dae98.prototype.animalInfo = function() {
            var _0x2160ae = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x2160ae.aniName = "Turtle!";
                    break;
                case 111:
                    _0x2160ae.aniName = "Classic Turtle";
                    break;
                case 112:
                    _0x2160ae.aniName = "Gold-trim Turtle";
                    break;
                case 200:
                    _0x2160ae.aniName = "Leather Back Turtle!";
                    break;
                case 201:
                    _0x2160ae.aniName = "Kiwi Turtle!";
                    break;
                case 202:
                    _0x2160ae.aniName = "Molten Lava Turtle";
                    break;
            }
            _0x2160ae.skinName = this.getSkinName();
            _0x2160ae.aniDesc = "";
            _0x2160ae.upgradeText = "UPGRADED to " + _0x2160ae.aniName + "\n Lives well on land & water! (On land, Press W to go into your shell!)";
            _0x2160ae.aniCol = "#502E1A";
            return _0x2160ae;
        };
        _0x2dae98.prototype.getAbilityInfo = function(_0x4aeb8d) {
            var _0x34c48 = {
                abilName: "Hide in Shell!"
            };
            _0x34c48.abilImg = "skins/" + this.getSpeciesPath() + "/turtle2.png";
            _0x34c48.skinThemeID = this.skinThemeID;
            _0x34c48.mopeSeasonID = this.mopeSeasonID;
            return _0x34c48;
        };
        _0x2dae98.prototype.getSkinName = function() {
            let _0x29c2a7 = this.getSpeciesPath() + "/turtle";
            if (this.flag_usingAbility) {
                _0x29c2a7 += "2";
            } else {
                _0x29c2a7 += this.specType == 0 ? "" : 1;
            }
            return _0x29c2a7;
        };
        _0x2dae98.prototype.getSpeciesPath = function() {
            return "ocean/turtle/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x2dae98.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x2dae98.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                if (this.specType == 1) {
                    var _0x3f12b1 = 500 / 340;
                    var _0x24e916 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/head.png");
                    if (_0x24e916) {
                        var _0x4e6b56 = 0.88;
                        _0x39e82d.save();
                        var _0x54bebe = this.rad - this.outlineW;
                        _0x39e82d.drawImage(_0x24e916, -_0x54bebe * _0x3f12b1, -_0x54bebe * _0x4e6b56 * _0x3f12b1, _0x54bebe * 2 * _0x3f12b1, _0x54bebe * 2 * _0x3f12b1);
                        _0x39e82d.restore();
                    }
                }
            }
        };

        function _0x2dae98() {
            _0x2dae98.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x2dae98, _0x48c056, _0x499275);
        var _0x28c171 = Animal;
        _0xab4137.prototype = Object.create(_0x28c171.prototype);
        _0xab4137.prototype.constructor = _0xab4137;
        _0xab4137.superClass = _0x28c171;
        _0xab4137.prototype.getAniRadius = function(_0x1efbc0) {
            return _0x1efbc0;
        };
        _0xab4137.prototype.animalInfo = function() {
            var _0x2d6136 = {};
            switch (this.animalSubSpecies) {
                case 0:
                    switch (this.animalSpecies) {
                        case 0:
                            _0x2d6136.aniName = "Swordfish!";
                            break;
                        case 111:
                            _0x2d6136.aniName = "Classic Swordfish!";
                            break;
                        case 112:
                            _0x2d6136.aniName = "Gold-trim Swordfish!";
                            break;
                        case 201:
                            _0x2d6136.aniName = "Surfboardfish";
                            break;
                    }
                    break;
                case 202:
                    _0x2d6136.aniName = "Rocket Swordfish";
                    break;
                case 204:
                    _0x2d6136.aniName = "Chainsaw Fish";
                case 2023:
                    _0x2d6136.aniName = "Soda Fish";
                    break;
            }
            _0x2d6136.skinName = this.getSkinName();
            _0x2d6136.upgradeText = "UPGRADED to " + _0x2d6136.aniName + "\n (Press W to rush with your sharp nose!)";
            _0x2d6136.aniCol = "#689CD7";
            return _0x2d6136;
        };
        _0xab4137.prototype.getAbilityInfo = function(_0x270f9d) {
            var _0x3bd58a = {
                abilName: "Charge!"
            };
            _0x3bd58a.abilImg = "skins/" + this.getSpeciesPath() + "/ability.png";
            _0x3bd58a.skinThemeID = this.skinThemeID;
            _0x3bd58a.mopeSeasonID = this.mopeSeasonID;
            return _0x3bd58a;
        };
        _0xab4137.prototype.getSkinName = function() {
            let _0x2e0e53 = this.getSpeciesPath() + "/swordfish";
            if (this.flag_usingAbility) {
                _0x2e0e53 += "2";
            } else {
                _0x2e0e53 += this.specType == 0 ? "" : 1;
            }
            return _0x2e0e53;
        };
        _0xab4137.prototype.getSpeciesPath = function() {
            return "ocean/swordfish/" + this.animalSpecies + "/" + this.animalSubSpecies;
        };
        _0xab4137.prototype.drawSkinCustomization = function() {};
        _0xab4137.prototype.oldBasicDrawSkinImg = _0xab4137.prototype.basicDrawSkinImg;
        _0xab4137.prototype.basicDrawSkinImg = function() {
            if (this.mopeSeasonID < 2) {
                this.oldBasicDrawSkinImg();
            } else {
                this.setSkinScale();
                var _0xef07ef = this.skinScale;
                var _0xde3686 = this.rad;
                var _0x460eba = 0;
                var _0x959cc = 1.2;
                var _0x5ea548 = -_0x959cc / 4;
                if (this.loadedSkinImg) {
                    _0x39e82d.drawImage(this.loadedSkinImg, -_0xde3686 * _0xef07ef + _0xde3686 * _0x460eba, -_0xde3686 * _0xef07ef + _0xde3686 * _0x5ea548, _0xde3686 * 2 * _0xef07ef, _0xde3686 * 2 * (_0xef07ef * _0x959cc));
                }
            }
        };
        _0xab4137.prototype.drawUnderSkinImg = function() {
            if (this.mopeSeasonID >= 2) {
                return;
            }
            var _0x396de3 = 0.7;
            var _0x5268fa = 1.15;
            var _0x4e355b = 500 / 340;
            var _0x45c176 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/nose.png");
            if (_0x45c176) {
                _0x39e82d.save();
                var _0x40b124 = this.rad - this.outlineW;
                _0x39e82d.drawImage(_0x45c176, -_0x40b124 * _0x4e355b, -_0x40b124 * _0x396de3 * _0x4e355b, _0x40b124 * 2 * _0x4e355b, _0x40b124 * 2 * _0x4e355b);
                _0x39e82d.restore();
            }
            var _0x45c176 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/tail.png");
            if (_0x45c176) {
                _0x39e82d.save();
                var _0x40b124 = this.rad - this.outlineW;
                _0x39e82d.drawImage(_0x45c176, -_0x40b124 * _0x4e355b, -_0x40b124 * _0x5268fa * _0x4e355b, _0x40b124 * 2 * _0x4e355b, _0x40b124 * 2 * _0x4e355b);
                _0x39e82d.restore();
            }
        };
        _0xab4137.prototype.getSkinImageObj = function(_0x4f78bf) {
            var _0x321389 = this.animalSpecies === 201 ? 1 : this.mopeSeasonID;
            return this.getSkinImageObjForSeason(_0x4f78bf, _0x321389);
        };

        function _0xab4137() {
            _0xab4137.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0xab4137, _0x48c056, _0x371ea0);
        var _0x28c171 = Animal;
        _0x43c5f7.prototype = Object.create(_0x28c171.prototype);
        _0x43c5f7.prototype.constructor = _0x43c5f7;
        _0x43c5f7.superClass = _0x28c171;
        _0x43c5f7.prototype.animalInfo = function() {
            var _0xb5d0c5 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0xb5d0c5.aniName = "Crab!";
                    break;
                case 111:
                    _0xb5d0c5.aniName = "Classic Crab";
                    break;
                case 112:
                    _0xb5d0c5.aniName = "Gold-trim Crab";
                    break;
                case 200:
                    _0xb5d0c5.aniName = "Metallic Crab!";
                    break;
                case 201:
                    _0xb5d0c5.aniName = "Coconut Crab!";
                    break;
                case 204:
                    _0xb5d0c5.aniName = "Dark Matter Crab!";
                    break;
            }
            _0xb5d0c5.skinName = this.getSkinName();
            _0xb5d0c5.aniDesc = "";
            _0xb5d0c5.upgradeText = "UPGRADED to " + _0xb5d0c5.aniName + "\n Crabs can survive on dry land!\n (On land, Press W to go into your shell!)";
            _0xb5d0c5.aniCol = "#bf2408";
            return _0xb5d0c5;
        };
        _0x43c5f7.prototype.getAbilityInfo = function(_0x5e783b) {
            var _0xcfb35e = {
                abilName: "Hide in Shell!"
            };
            _0xcfb35e.abilImg = "skins/" + this.getSpeciesPath() + "/crab2.png";
            _0xcfb35e.skinThemeID = this.skinThemeID;
            _0xcfb35e.mopeSeasonID = this.mopeSeasonID;
            return _0xcfb35e;
        };
        _0x43c5f7.prototype.getSkinName = function() {
            let _0x3ee51b = this.getSpeciesPath() + "/crab";
            if (this.flag_usingAbility) {
                _0x3ee51b += "2";
            } else {
                _0x3ee51b += this.specType == 0 ? "" : 1;
            }
            return _0x3ee51b;
        };
        _0x43c5f7.prototype.getSpeciesPath = function() {
            return "ocean/crab/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x43c5f7.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x43c5f7.prototype.basicDrawSkinImg = function() {
            this.setSkinScale();
            var _0x51f940 = this.skinScale;
            var _0x5af7cf = this.skinRad;
            _0x39e82d.save();
            if (this.id > 0) {
                _0x39e82d.rotate(_0x4bfce6(90));
            }
            if (this.loadedSkinImg) {
                _0x39e82d.drawImage(this.loadedSkinImg, -_0x5af7cf * _0x51f940, -_0x5af7cf * _0x51f940, _0x5af7cf * 2 * _0x51f940, _0x5af7cf * 2 * _0x51f940);
            } else {
                _0x39e82d.fillStyle = this.skinNotLoadedColor;
                _0x39e82d.beginPath();
                _0x39e82d.arc(0, 0, Math.max(0, this.rad - this.outlineW), 0, Math.PI * 2);
                _0x39e82d.fill();
            }
            _0x39e82d.restore();
        };

        function _0x43c5f7() {
            _0x43c5f7.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x43c5f7, _0x48c056, _0x9f0228);
        var _0x28c171 = Animal;
        _0x36f51e.prototype = Object.create(_0x28c171.prototype);
        _0x36f51e.prototype.constructor = _0x36f51e;
        _0x36f51e.superClass = _0x28c171;
        _0x36f51e.prototype.animalInfo = function() {
            var _0x2cabb6 = {
                aniName: "Snail",
                aniCol: "#FF9000",
                skinName: "ocean/snail/snail"
            };
            _0x2cabb6.upgradeText = "UPGRADED to " + _0x2cabb6.aniName + "!\n Press W to hide in your shell!";
            return _0x2cabb6;
        };
        _0x36f51e.prototype.getSkinName = function() {
            var _0x462f9e = "ocean/snail/snail";
            return _0x462f9e;
        };
        _0x36f51e.prototype.dir = 1;
        _0x36f51e.prototype.snail_yOffset = 0.75;
        _0x36f51e.prototype.wasUsingAbility = false;
        _0x36f51e.prototype.animateHead = false;
        _0x36f51e.prototype.animationIn = null;
        _0x36f51e.prototype.animationOut = null;
        _0x36f51e.prototype.offset = 0;
        _0x36f51e.prototype.drawUnderSkinImg = function() {
            if (this.flag_usingAbility && !this.wasUsingAbility && this.animationIn == null) {
                this.wasUsingAbility = true;
                this.animationIn = new _0x28a15f(this, 1, _0x28a15f.arc);
                this.animationIn.keepLastFrame = true;
                this.animationIn.onFrameEntered = function(_0x525d9f) {
                    if (!isNaN(_0x525d9f)) {
                        if (this.forObj.offset < 0.35) {
                            this.forObj.offset = _0x525d9f * 0.35 * 10;
                        }
                    }
                };
                this.animationIn.onStop = function() {
                    this.forObj.offset = 0.35;
                    this.forObj.wasUsingAbility = true;
                    this.forObj.animationIn = null;
                };
            } else if (!this.flag_usingAbility && this.wasUsingAbility && this.animationOut == null) {
                this.wasUsingAbility = true;
                this.animationOut = new _0x28a15f(this, 3, _0x28a15f.halfWave);
                this.animationOut.keepLastFrame = true;
                this.animationOut.onFrameEntered = function(_0x574d7b) {
                    if (!isNaN(_0x574d7b)) {
                        this.forObj.offset = (1 - _0x574d7b) * 0.35;
                    }
                };
                this.animationOut.onStop = function() {
                    this.forObj.offset = 0;
                    this.forObj.wasUsingAbility = false;
                    this.forObj.animationOut = null;
                };
            }
            if (this.animationIn) {
                this.animationIn.run();
            }
            if (this.animationOut) {
                this.animationOut.run();
            }
            if (this.animationIn == null && this.animationOut == null && !this.wasUsingAbility) {
                this.offset = 0;
            }
            var _0x1d1e20 = 0.75 + this.offset;
            var _0x20c504 = 500 / 340;
            var _0x1e63e7 = this.getSkinImageObj("skins/ocean/snail/snail_head.png");
            if (_0x1e63e7) {
                _0x39e82d.save();
                var _0x5f2215 = this.rad - this.outlineW;
                _0x39e82d.drawImage(_0x1e63e7, -_0x5f2215 * _0x20c504, -_0x5f2215 * _0x1d1e20 * _0x20c504, _0x5f2215 * 2 * _0x20c504, _0x5f2215 * 2 * _0x20c504);
                _0x39e82d.restore();
            }
        };

        function _0x36f51e() {
            _0x36f51e.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x36f51e, _0x48c056, _0x346a56);
        var _0x28c171 = GameObj;
        _0x146f51.prototype = Object.create(_0x28c171.prototype);
        _0x146f51.prototype.constructor = _0x146f51;
        _0x146f51.superClass = _0x28c171;
        _0x146f51.prototype.updateZ = function() {
            this.z = -140;
        };
        _0x146f51.prototype.shiverF = 0.015;
        _0x146f51.prototype.drawTranslate = function() {
            _0x39e82d.translate(this.x, this.y);
            _0x39e82d.save();
            if (this.eruption >= this.shakeStart && this.eruption <= this.shakeEnd + 1) {
                if (this.eruption >= this.shakeStart + 2) {
                    this.shiverF = 0.025;
                } else {
                    this.shiverF = 0.015;
                }
                var _0x316f87 = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x5ce4e4 = 0.2;
                var _0x218aac = this.rad * this.shiverF;
                this.shakeOffsetX = _0x218aac * Math.sin(Math.PI * 2 / _0x5ce4e4 * _0x316f87);
                var _0x5ce4e4 = 0.3;
                var _0x218aac = this.rad * this.shiverF;
                this.shakeOffsetY = _0x218aac * Math.sin(Math.PI * 2 / _0x5ce4e4 * _0x316f87);
                _0x39e82d.translate(-this.shakeOffsetX, -this.shakeOffsetY);
            }
        };
        _0x146f51.prototype.drawHealthBar = function() {
            _0x39e82d.restore();
        };
        _0x146f51.prototype.customDraw2 = function(_0x188013) {};
        _0x146f51.prototype.customDraw = function(_0x40e39c) {
            if (this.curBiome == _0x16f106) {
                _0x466d9b(0, 0, Math.max(0, this.rad * 1), "#faf6f2");
                _0x466d9b(0, 0, Math.max(0, this.rad * 0.6), "#e0dbd5");
                _0x466d9b(0, 0, Math.max(0, this.rad * 0.5), "#9DDADE");
                _0x466d9b(0, 0, Math.max(0, this.rad * 0.45), "#9DDADE");
            } else if (this.curBiome == _0x36f07b) {
                _0x466d9b(0, 0, Math.max(0, this.rad * 1), "#cebe58");
                _0x466d9b(0, 0, Math.max(0, this.rad * 0.75), "#b4a53e");
                _0x466d9b(0, 0, Math.max(0, this.rad * 0.5), "#ca6423");
                _0x466d9b(0, 0, Math.max(0, this.rad * 0.45), "#923c04");
            } else {
                _0x466d9b(0, 0, Math.max(0, this.rad * 1), "#815427");
                _0x466d9b(0, 0, Math.max(0, this.rad * 0.6), "#6e4b29");
                _0x466d9b(0, 0, Math.max(0, this.rad * 0.5), "#543d28");
                _0x466d9b(0, 0, Math.max(0, this.rad * 0.45), "#3f3124");
            }
            var _0x7751ba = 0;
            switch (Math.round(this.erruption)) {
                case 0:
                    _0x7751ba = 0;
                    break;
                case 1:
                    _0x7751ba = 0;
                    break;
                case 2:
                    _0x7751ba = 1;
                    _0x466d9b(0, 0, Math.max(0, this.rad * 0.25), _0x51276a);
                    break;
                case 3:
                    _0x7751ba = 2;
                    _0x466d9b(0, 0, Math.max(0, this.rad * 0.25), _0x51276a);
                    break;
                case 4:
                case 5:
                case 6:
                    _0x7751ba = 3;
                    _0x466d9b(0, 0, Math.max(0, this.rad * 0.33), _0x51276a);
                    break;
                case 7:
                    _0x7751ba = 2;
                    _0x466d9b(0, 0, Math.max(0, this.rad * 0.25), _0x51276a);
                    break;
                case 8:
                    _0x7751ba = 1;
                    _0x466d9b(0, 0, Math.max(0, this.rad * 0.25), _0x51276a);
                    break;
                case 9:
                    _0x7751ba = 0;
                    break;
                case 10:
                    _0x7751ba = 0;
                    break;
            }
            _0x466d9b(0, 0, Math.max(0, this.rad * 0.33), "#241e19");
            _0x466d9b(0, 0, Math.max(0, this.rad * 0.25), "#120f0d");
            _0x466d9b(0, 0, Math.max(0, this.rad * 0.33), _0x51276a);
            if (this.erruption > 1 && this.erruption < 10) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = 1 - this.underwaterA;
                var _0x1cf4c4 = (_0x4ec996 - this.spawnTime) / 1000;
                var _0xc67aa2 = 1.5;
                var _0x36dd9a = 2;
                var _0xe6c045 = _0x36dd9a * Math.sin(Math.PI * 2 / _0xc67aa2 * _0x1cf4c4);
                _0x39e82d.fillStyle = "yellow";
                var _0xaddda = Math.max(0, this.rad * 0.2) * 0.15;
                _0x39e82d.beginPath();
                var _0x557ed4 = 1;
                for (i = 1; i <= _0x557ed4; i++) {
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = 0.2;
                    _0x39e82d.rotate(this.rPer * Math.PI * 2 * i);
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(_0xaddda * -0.35, _0xaddda * -0.33, Math.max(0, _0xaddda + _0xe6c045), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(_0xaddda * 0.35, _0xaddda * -0.32, Math.max(0, _0xaddda - _0xe6c045), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(_0xaddda * 0.35, _0xaddda * 0.36, Math.max(0, _0xaddda + _0xe6c045), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(_0xaddda * -0.35, _0xaddda * 0.35, Math.max(0, _0xaddda - _0xe6c045), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.restore();
                }
                _0x39e82d.restore();
            }
            if (this.curBiome == _0x16f106) {
                _0x39e82d.save();
                var _0x5e6525 = this.getSkinImageObj("img/arcticano/" + _0x7751ba + ".png");
                if (_0x5e6525) {
                    var _0x403418 = this.rad * 0.35;
                    _0x39e82d.rotate(this.angle);
                    _0x39e82d.drawImage(_0x5e6525, -_0x403418, -_0x403418, _0x403418 * 2, _0x403418 * 2);
                }
                _0x39e82d.restore();
            }
        };
        _0x146f51.prototype.readCustomData_onNewlyVisible = function(_0x4cb415) {
            _0x146f51.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x4cb415);
            this.maxLvl = _0x4cb415.readUInt8() / 10;
            this.shakeStart = _0x4cb415.readUInt8() / 10;
            this.shakeEnd = _0x4cb415.readUInt8() / 10;
            this.eruption = _0x4cb415.readUInt16() / 100;
            this.spitLevelMin = this.maxLvl * 0.2;
            this.spitLevelMax = this.maxLvl * 0.8;
        };
        _0x146f51.prototype.readUpdatedProperty = function(_0x2c885f, _0x3837f1) {
            if (_0x2c885f == _0x328d78) {
                this.eruption = _0x3837f1.readUInt16() / 100;
            }
        };

        function _0x146f51() {
            _0x146f51.superClass.call(this, _0x5983d9);
        }
        _0x35d268.setCustomClassForGameObjType(_0x146f51, _0x5983d9);
        var _0x5899d5 = _0x1df74a;
        var _0x28c171 = GameObj;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x1df74a.prototype.customDraw = function(_0x521b52) {
            _0x39e82d.save();
            _0x39e82d.rotate(this.angle + _0x4bfce6(180));
            _0x39e82d.globalAlpha = 1;
            var _0x53b32c = this.getSkinImageObj("img/raindrop.png");
            if (_0x53b32c) {
                var _0x187281 = this.rad * 2;
                _0x39e82d.drawImage(_0x53b32c, -_0x187281, -_0x187281, _0x187281 * 2, _0x187281 * 2);
            }
            _0x39e82d.restore();
        };
        _0x1df74a.prototype.updateZ = function() {
            this.z = 10000 + this.rad;
        };

        function _0x1df74a() {
            _0x1df74a.superClass.call(this);
            this.spawnTime = _0x4ec996;
        }
        _0x35d268.setCustomClassForGameObjType(_0x1df74a, _0x2b90a2);
        var _0x28c171 = GameObj;
        _0x2569ea.prototype = Object.create(_0x28c171.prototype);
        _0x2569ea.prototype.constructor = _0x2569ea;
        _0x2569ea.superClass = _0x28c171;
        _0x2569ea.prototype.updateZ = function() {
            this.z = 1005;
        };
        _0x2569ea.prototype.customDraw = function(_0x47687e) {
            if (_0x5981a2 != _0x4051d6) {
                var _0x3f2bad = 1;
                var _0x406802 = 0.15;
                var _0x50798f = 0.8;
                var _0x5ed62b = (_0x50798f - _0x406802) * 0.5;
                var _0x2b72d = _0x406802 + _0x5ed62b + _0x5ed62b * Math.sin(Math.PI * 2 / _0x3f2bad * (_0x4ec996 / 1000));
                _0x39e82d.save();
                {
                    _0x39e82d.globalAlpha *= _0x2b72d;
                }
                _0x39e82d.restore();
                var _0x3f2bad = 1;
                var _0x406802 = 0.85;
                var _0x50798f = 1;
                var _0x5ed62b = (_0x50798f - _0x406802) * 0.5;
                var _0x32bd67 = _0x406802 + _0x5ed62b + _0x5ed62b * Math.sin(Math.PI * 2 / _0x3f2bad * (_0x4ec996 / 1000));
                var _0x47b359 = Math.trunc(_0x4ec996 / 120) % 5;
                var _0x2cef81 = this.getSkinImageObj("gameobj/" + this.oType + "/" + _0x47b359 + ".png");
                if (_0x2cef81) {
                    var _0x1cb516 = 0;
                    var _0x420e19 = this.rad * 0.4;
                    var _0x95833e = this.rad * 2 * (2 + _0x32bd67 * 2) / 3;
                    var _0x5e97e8 = this.rad * 3.5 * _0x32bd67;
                    var _0xc0d798 = 0.5;
                    var _0x439d29 = 0.95;
                    _0x39e82d.save();
                    {
                        _0x39e82d.globalAlpha *= this.onFireEffA * _0x32bd67;
                        _0x39e82d.rotate(this.angle);
                        _0x39e82d.drawImage(_0x2cef81, _0x1cb516 + _0x95833e * -_0xc0d798, _0x420e19 + _0x5e97e8 * -_0x439d29, _0x95833e, _0x5e97e8);
                    }
                    _0x39e82d.restore();
                } else {}
            } else {
                var _0x2cef81 = this.getSkinImageObj("gameobj/" + this.oType + "/0.png");
                if (_0x2cef81) {
                    var _0x3f2bad = 1;
                    var _0x406802 = 0.85;
                    var _0x50798f = 1;
                    var _0x5ed62b = (_0x50798f - _0x406802) * 0.5;
                    var _0x32bd67 = _0x406802 + _0x5ed62b + _0x5ed62b * Math.sin(Math.PI * 2 / _0x3f2bad * (_0x4ec996 / 1000));
                    var _0x1cb516 = 0;
                    var _0x420e19 = this.rad * 0.4;
                    var _0x95833e = this.rad * 2 * (2 + _0x32bd67 * 2) / 3;
                    var _0x5e97e8 = this.rad * 3.5 * _0x32bd67;
                    var _0xc0d798 = 0.5;
                    var _0x439d29 = 0.95;
                    _0x39e82d.save();
                    {
                        _0x39e82d.rotate(this.angle);
                        _0x39e82d.drawImage(_0x2cef81, _0x1cb516 + _0x95833e * -_0xc0d798, _0x420e19 + _0x5e97e8 * -_0x439d29, _0x95833e, _0x5e97e8);
                    }
                    _0x39e82d.restore();
                }
            }
        };

        function _0x2569ea() {
            _0x2569ea.superClass.call(this, _0x15bbe6);
        }
        _0x35d268.setCustomClassForGameObjType(_0x2569ea, _0x15bbe6);
        var _0x28c171 = Animal;
        _0x571262.prototype = Object.create(_0x28c171.prototype);
        _0x571262.prototype.constructor = _0x571262;
        _0x571262.superClass = _0x28c171;
        _0x571262.prototype.animalInfo = function() {
            var _0x5b8d0f = {};
            switch (this.animalSpecies) {
                default:
                    _0x5b8d0f.aniName = "The BigFoot";
                    break;
            }
            _0x5b8d0f.skinName = "land/bigfoot/" + this.animalSpecies + "/bigfoot";
            _0x5b8d0f.aniDesc = "";
            _0x5b8d0f.upgradeText = "UPGRADED to " + _0x5b8d0f.aniName + "! So it really exists... \n Right click/W to throw Spears. \nHold to make a fire (every 11s)";
            _0x5b8d0f.aniCol = "#839eb5";
            return _0x5b8d0f;
        };
        _0x571262.prototype.getAbilityInfo = function(_0x386d47) {
            var _0xdb94cd = {
                abilName: "Throw Spear\n (Hold for fire!)",
                abilImg: "skins/land/bigfoot/" + this.animalSpecies + "/ability.png",
                skinThemeID: this.skinThemeID,
                mopeSeasonID: this.mopeSeasonID
            };
            return _0xdb94cd;
        };
        _0x571262.prototype.getSkinName = function() {
            var _0x424ead = "";
            _0x424ead = "land/bigfoot/" + this.animalSpecies + "/";
            if (this.flag_underWater || this.flag_isInArena) {
                _0x424ead += "thebigfoot";
            } else {
                _0x424ead += "bigfoot";
            }
            return _0x424ead;
        };
        _0x571262.prototype.drawUnderSkinTail = function(_0x166ad3) {
            if (!this.isCamouflage) {
                _0x571262.superClass.prototype.drawUnderSkinTail.call(this, _0x166ad3);
            }
        };
        _0x571262.prototype.drawHealthBar = function() {
            if (!this.isCamouflage) {
                _0x571262.superClass.prototype.drawHealthBar.call(this);
            }
        };
        _0x571262.prototype.isTransforming = false;
        _0x571262.prototype.isCamouflage = false;
        _0x571262.prototype.carrotAlpha = 0;
        _0x571262.prototype.getIdealOpacity = function() {
            var _0x212da5 = this.flag_underWater || this.flag_usingAbility && this.isTransforming || this.isCamouflage ? 0 : 1;
            return _0x212da5;
        };
        _0x571262.prototype.biteStart = 0;
        _0x571262.prototype.flapAmount = 3;
        _0x571262.prototype.flapDur = 1.5;
        _0x571262.prototype.roarStartT = -500;
        _0x571262.prototype.spearThrow = function() {
            _0x39e82d.save();
            var _0x26e50d = this.getSkinImageObj("skins/land/bigfoot/" + this.animalSpecies + "/arm21.png");
            if (_0x26e50d) {
                var _0x304c51 = Math.min(1, (_0x4ec996 - this.biteStart) / 200);
                var _0x1c2170 = _0x2944ee((_0x4ec996 - this.biteStart) / 300, 0, 1);
                var _0x12f71c = -_0x1c2170 * _0x439930;
                _0x39e82d.rotate(this.angle + _0x12f71c);
                var _0x3eb6e0 = -this.rad * 1.75;
                var _0x347bde = this.rad / 2;
                var _0x147b9a = this.rad;
                var _0x146e53 = _0x3eb6e0 * 2;
                var _0x34f742 = _0x3eb6e0 * 2 * _0x304c51;
                var _0x262608 = 0.3;
                var _0x57d454 = 0.8;
                _0x39e82d.drawImage(_0x26e50d, _0x347bde + _0x146e53 * -_0x262608, _0x147b9a + _0x34f742 * -_0x57d454 + _0x3eb6e0, _0x146e53, _0x34f742);
            }
            _0x39e82d.restore();
        };
        _0x571262.prototype.showSpear = false;
        _0x571262.prototype.showHand = true;
        _0x571262.prototype.drawSkinCustomization = function() {
            if (this.flag_underWater || this.flag_isInArena) {
                return;
            }
            this.setSkinScale();
            if (!this.flag_usingAbility) {
                this.biteStart = 0;
            }
            if (this.showSpear) {
                this.spearHandAnimation(0);
            } else if (this.showHand || this.id == 0) {
                this.leftHandAnimation(0);
            }
            this.rightHandAnimation(0);
            this.bigfootHead(0);
            if (!this.flag_usingAbility && !this.flag_inHidingHole) {
                this.oogaBoogaAnimation(0);
            }
        };
        _0x571262.prototype.oogaBoogaNextT = +new Date() + 15000;
        _0x571262.prototype.oogaBoogaFrame = 0;
        _0x571262.prototype.oogaBoogaFrameT = 0;
        _0x571262.prototype.oogaBoogaAnimation = function(_0x5803bc) {
            if (_0x4ec996 > this.oogaBoogaNextT) {
                if (_0x4ec996 > this.oogaBoogaFrameT) {
                    this.oogaBoogaFrameT = _0x4ec996 + 300;
                    this.oogaBoogaFrame += 1;
                    if (this.oogaBoogaFrame == 1) {
                        this.gotChat("OOGA!");
                    } else if (this.oogaBoogaFrame == 3) {
                        this.gotChat("BOOGA!");
                    }
                }
                if (this.oogaBoogaFrame > 4) {
                    this.oogaBoogaFrame = 0;
                    this.oogaBoogaNextT = +new Date() + 15000;
                }
            }
            if (this.oogaBoogaFrame > 0) {
                var _0x467731 = 0;
                var _0x792980 = 500 / 340;
                var _0x55de77 = this.getSkinImageObj("skins/land/bigfoot/" + this.animalSpecies + "/mouth" + this.oogaBoogaFrame + ".png");
                if (_0x55de77) {
                    _0x39e82d.save();
                    var _0x5c9e29 = this.rad;
                    _0x39e82d.drawImage(_0x55de77, -_0x5c9e29 * _0x792980, (-_0x5c9e29 + _0x5c9e29 * _0x467731) * _0x792980, _0x5c9e29 * 2 * _0x792980, _0x5c9e29 * 2 * _0x792980);
                    _0x39e82d.restore();
                }
            }
        };
        _0x571262.prototype.spearInHand = false;
        _0x571262.prototype.canCreateFire = false;
        _0x571262.prototype.readCustomData_onUpdate = function(_0x3089dd) {
            _0x571262.superClass.prototype.readCustomData_onUpdate.call(this, _0x3089dd);
            var _0xe4580b = _0x3089dd.readBitGroup();
            this.showHand = _0xe4580b.getBool();
            this.showSpear = this.showHand && _0xe4580b.getBool();
            this.canCreateFire = _0xe4580b.getBool();
        };
        var _0x28d548 = 0.84;
        var _0x2588b3 = 0.47;
        var _0x5684fc = 45;
        var _0x47311e = -30;
        var _0x5b08b7 = 1.3;
        var _0x1fd05e = 1.5;
        var _0x687d54 = 0.3;
        _0x571262.prototype.bigfootHead = function(_0x46da51) {
            var _0x4904d3 = 0;
            var _0x502670 = 500 / 340;
            var _0x244cbb = this.flag_usingAbility ? "head2" : "head";
            if (!this.flag_usingAbility) {
                _0x4904d3 = 0;
            }
            var _0x4df83b = this.getSkinImageObj("skins/land/bigfoot/" + this.animalSpecies + "/" + _0x244cbb + ".png");
            if (_0x4df83b) {
                _0x39e82d.save();
                var _0x198b3c = this.rad;
                _0x39e82d.drawImage(_0x4df83b, -_0x198b3c * _0x502670, (-_0x198b3c + _0x198b3c * _0x4904d3) * _0x502670, _0x198b3c * 2 * _0x502670, _0x198b3c * 2 * _0x502670);
                _0x39e82d.restore();
            }
        };
        _0x571262.prototype.spearHandAnimation = function(_0x237648) {
            var _0x58be3f = (_0x4ec996 - this.spawnTime) / 1000;
            var _0xfeb8e = 0;
            if (!_0x1d523b && _0x5981a2 != _0x4051d6 && !RVJsettings.performance) {
                _0xfeb8e = _0x1b594e(_0x58be3f, _0x1fd05e, _0x687d54, 2);
            }
            var _0x454d5c = this.getSkinImageObj("skins/land/bigfoot/" + this.animalSpecies + "/arm2.png");
            if (_0x454d5c) {
                _0x39e82d.save();
                var _0x49552c = -(-0.2 + _0xfeb8e) * _0x4bfce6(_0x5684fc);
                var _0x32facf = this.rad * _0x5b08b7;
                _0x39e82d.rotate(_0x4bfce6(_0x47311e) + _0x49552c);
                var _0x41ede7 = 0;
                var _0x1c0086 = this.rad;
                var _0x2e37b3 = _0x32facf * 2;
                var _0x593882 = _0x32facf * 2;
                var _0x36837a = _0x2588b3;
                var _0x12f1e8 = _0x28d548;
                _0x39e82d.drawImage(_0x454d5c, _0x41ede7 + _0x2e37b3 * -_0x36837a, _0x1c0086 + _0x593882 * -_0x12f1e8, _0x2e37b3, _0x593882);
                if (this.canCreateFire) {
                    var _0x23eff4 = this.getSkinImageObj("skins/land/bigfoot/" + this.animalSpecies + "/arm2-fire.png");
                    if (_0x23eff4) {
                        var _0x58be3f = (_0x4ec996 - this.spawnTime) / 1000;
                        var _0xfeb8e = _0x1b594e(_0x58be3f, 5, 1, 1);
                        _0x39e82d.globalAlpha = Math.max(0, _0xfeb8e);
                        _0x39e82d.drawImage(_0x23eff4, _0x41ede7 + _0x2e37b3 * -_0x36837a, _0x1c0086 + _0x593882 * -_0x12f1e8, _0x2e37b3, _0x593882);
                    }
                }
                _0x39e82d.restore();
            }
        };
        _0x571262.prototype.rightHandAnimation = function(_0x103cf0) {
            var _0xc03387 = (_0x4ec996 - this.spawnTime) / 1000;
            var _0xd076de = 0;
            if (!_0x1d523b && _0x5981a2 != _0x4051d6 && !RVJsettings.performance) {
                _0xd076de = _0x1b594e(_0xc03387, _0x1fd05e, _0x687d54, 2);
            }
            var _0x4b990c = this.getSkinImageObj("skins/land/bigfoot/" + this.animalSpecies + "/arm1.png");
            if (_0x4b990c) {
                _0x39e82d.save();
                var _0x3c81fc = -_0xd076de * _0x4bfce6(-10);
                var _0x3a5f9b = this.rad * _0x5b08b7;
                _0x39e82d.rotate(_0x4bfce6(-5) + _0x3c81fc);
                var _0x575e43 = 0;
                var _0x351e04 = this.rad;
                var _0x19287d = _0x3a5f9b * 2;
                var _0x111e15 = _0x3a5f9b * 2;
                var _0x528d63 = 0.55;
                var _0x23d692 = 0.85;
                _0x39e82d.drawImage(_0x4b990c, _0x575e43 + _0x19287d * -_0x528d63, _0x351e04 + _0x111e15 * -_0x23d692, _0x19287d, _0x111e15);
                _0x39e82d.restore();
            }
        };
        _0x571262.prototype.leftHandAnimation = function(_0x323e09) {
            var _0xc81109 = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x1b53b4 = 0;
            if (!_0x1d523b && _0x5981a2 != _0x4051d6 && !RVJsettings.performance) {
                if (this.id != _0x166276 || !_0x1d523b) {
                    _0x1b53b4 = _0x1b594e(_0xc81109, _0x1fd05e, _0x687d54, 2);
                }
            }
            var _0x45ec1f = this.getSkinImageObj("skins/land/bigfoot/" + this.animalSpecies + "/arm21.png");
            if (_0x45ec1f) {
                _0x39e82d.save();
                var _0x546827 = -_0x1b53b4 * _0x4bfce6(-10);
                var _0x228cc1 = this.rad * _0x5b08b7;
                _0x39e82d.rotate(_0x4bfce6(-5) + _0x546827);
                var _0x679d87 = 0;
                var _0x373e5e = this.rad;
                var _0x1d87e1 = _0x228cc1 * 2;
                var _0x49d423 = _0x228cc1 * 2;
                var _0x1b09d1 = 0.47;
                var _0x5d1c8c = 0.8;
                _0x39e82d.drawImage(_0x45ec1f, _0x679d87 + _0x1d87e1 * -_0x1b09d1, _0x373e5e + _0x49d423 * -_0x5d1c8c, _0x1d87e1, _0x49d423);
                _0x39e82d.restore();
            }
        };

        function _0x571262() {
            _0x571262.superClass.call(this, _0x48c056);
            this.oogaBoogaNextT = +new Date() + 15000;
        }
        _0x35d268.setCustomClassForGameObjType(_0x571262, _0x48c056, _0x42c2ee);
        var _0x5899d5 = _0x32918f;
        var _0x28c171 = _0xa0a2ad;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x32918f.prototype.victimID = 0;
        _0x32918f.prototype.updateZ = function() {
            if (this.effect_flying) {
                this.z = 100000;
            } else if (this.victimID == 0) {
                this.z = 1100;
            }
        };
        var _0x3478a1 = 1;
        var _0x34e44c = 2;
        var _0x4c6cbc = 3;
        _0x32918f.prototype.customDraw = function(_0x221ad6) {
            _0x39e82d.save();
            if (this.spearState == _0x34e44c) {
                var _0x377cee = this.getSkinImageObj("skins/land/bigfoot/" + this.speciesType + "/spear.png");
                if (_0x377cee) {
                    _0x39e82d.save();
                    var _0x5a2d40 = this.rad * 2;
                    _0x39e82d.rotate(this.angle + _0x439930);
                    _0x39e82d.drawImage(_0x377cee, -_0x5a2d40 / 2, -_0x5a2d40 / 2, _0x5a2d40, _0x5a2d40 * 4);
                    _0x39e82d.restore();
                }
            } else if (this.spearState == _0x4c6cbc) {
                _0x39e82d.save();
                var _0x377cee = this.getSkinImageObj("skins/land/bigfoot/" + this.speciesType + "/spear2.png");
                if (_0x377cee) {
                    var _0x5a2d40 = this.rad * 2;
                    _0x39e82d.rotate(this.angle + _0x439930);
                    _0x39e82d.drawImage(_0x377cee, -_0x5a2d40 / 2, -_0x5a2d40 / 2, _0x5a2d40, _0x5a2d40 * 4);
                }
                _0x39e82d.restore();
            } else if (this.spearState == _0x3478a1) {
                var _0x485d50 = this.spearState;
                var _0x377cee = this.getSkinImageObj("skins/land/bigfoot/" + this.speciesType + "/arm2.png");
                if (_0x377cee) {
                    var _0x4645c4 = Math.min(1, (_0x4ec996 - this.spawnTime) / 200);
                    var _0x5079a9 = _0x2944ee((_0x4ec996 - this.spawnTime) / 300, 0, 1);
                    var _0x40e5ad = -_0x5079a9 * _0x439930;
                    _0x39e82d.rotate(this.angle + _0x40e5ad * (this.specType == 1 ? 1 : -1));
                    var _0x5a2d40 = -this.rad * 1.5;
                    var _0x3012a7 = this.rad / 2;
                    var _0x5951b4 = this.rad;
                    var _0x30a8b8 = _0x5a2d40 * 2;
                    var _0x4a9788 = _0x5a2d40 * 2 * _0x4645c4;
                    var _0x2a25b4 = 0.3;
                    var _0x5b055c = 0.8;
                    _0x39e82d.drawImage(_0x377cee, _0x3012a7 + _0x30a8b8 * -_0x2a25b4, _0x5951b4 + _0x4a9788 * -_0x5b055c + _0x5a2d40, _0x30a8b8, _0x4a9788);
                }
            }
            _0x39e82d.restore();
        };
        _0x32918f.prototype.spearState = 0;
        _0x32918f.prototype.effect_flying = false;
        _0x32918f.prototype.readUpdatedProperty = function(_0x417c8e, _0x475a22) {
            if (_0x417c8e == _0x126a7e) {
                this.spearState = _0x475a22.readUInt8();
            } else if (_0x417c8e == _0x279fd6) {
                this.victimID = _0x475a22.readUInt32();
                if (this.victimID != 0) {
                    if (_0xb3e9be[this.victimID]) {
                        this.z = _0xb3e9be[this.victimID].z + 1;
                    }
                }
            } else if (_0x417c8e == _0x9e03e7) {
                this.effect_flying = _0x475a22.readUInt8() == 1;
            }
        };
        _0x32918f.prototype.readCustomData_onNewlyVisible = function(_0x49836f) {
            _0x32918f.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x49836f);
            this.spearState = _0x49836f.readUInt8();
            this.victimID = _0x49836f.readUInt32();
            if (this.victimID != 0) {
                if (_0xb3e9be[this.victimID]) {
                    this.z = _0xb3e9be[this.victimID].z + 1;
                }
            }
            this.effect_flying = _0x49836f.readUInt8() == 1;
        };

        function _0x32918f() {
            _0x32918f.superClass.call(this);
            _0x32918f.prototype.easeAngleChanges = true;
        }
        _0x35d268.setCustomClassForGameObjType(_0x32918f, _0x651296, _0x4ca408);
        var _0x28c171 = GameObj;
        _0x595eb3.prototype = Object.create(_0x28c171.prototype);
        _0x595eb3.prototype.constructor = _0x595eb3;
        _0x595eb3.superClass = _0x28c171;
        _0x595eb3.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x595eb3.prototype.setSkinPath = function() {
            this.objSkinPath = "skins/land/bigfoot/" + this.speciesType + "/firewood.png";
        };
        _0x595eb3.prototype.customDraw = function(_0x266bde) {
            _0x39e82d.save();
            var _0xb94b5c = this.rad * 2.2;
            var _0x326dc1 = this.getSkinImageObj(this.objSkinPath);
            if (_0x326dc1) {
                _0x39e82d.drawImage(_0x326dc1, -_0xb94b5c / 2, -_0xb94b5c / 2, _0xb94b5c, _0xb94b5c);
            }
            _0x39e82d.restore();
        };
        var _0x2eb651 = 121;

        function _0x595eb3() {
            _0x595eb3.superClass.call(this, _0x2eb651);
        }
        _0x35d268.setCustomClassForGameObjType(_0x595eb3, _0x2eb651);
        var _0x28c171 = GameObj;
        _0x307a7c.prototype = Object.create(_0x28c171.prototype);
        _0x307a7c.prototype.constructor = _0x307a7c;
        _0x307a7c.superClass = _0x28c171;
        _0x307a7c.prototype.updateZ = function() {
            this.z = 1100;
        };
        _0x307a7c.prototype.alpha = 1;
        _0x307a7c.prototype.trunkW = 0.5;
        _0x307a7c.prototype.customDraw = function(_0x2a5048) {
            _0x39e82d.save();
            var _0x50cf14 = 0;
            var _0x4c167c = 0;
            let _0x4df607 = _0x5aef35[this.id] == 1;
            var _0x5f5d78 = 1;
            try {
                if (_0x4df607) {
                    this.alpha += (0.4 - this.alpha) * 0.1;
                } else {
                    this.alpha += (1 - this.alpha) * 0.1;
                    if (this.alpha > 0.99) {
                        this.alpha = 1;
                    }
                }
            } catch (_0x5a3806) {}
            var _0x5c965d = this.getTreeName();
            if (_0x5981a2 != _0x4051d6) {
                var _0x447cfc = this.getSkinImageObj("gameobj/101/" + _0x5c965d + "/" + this.getTrunk() + ".png");
                if (_0x447cfc) {
                    var _0x4ce69e = this.rad / 2;
                    var _0x3db9cc = this.rPer * Math.PI * 2;
                    _0x39e82d.rotate(this.angle);
                    _0x39e82d.drawImage(_0x447cfc, -_0x4ce69e, -_0x4ce69e, _0x4ce69e * 2, _0x4ce69e * 2);
                }
            }
            if (this.canopy) {
                var _0x5070c9 = "canopy";
                if (_0x5c965d == "default") {
                    _0x5070c9 += this.curBiome;
                }
                var _0x4ce69e = (this.foodType == _0x52e535 ? this.rad * 1.25 : this.rad) + _0x50cf14;
                if (this.eventType == 2 && this.treeType != "default") {
                    this.drawEventDecorations(_0x5c965d, _0x5070c9, _0x4ce69e, _0x3db9cc);
                } else {
                    if (this.xmasTree) {
                        this.drawXmasProp(_0x5c965d, _0x4ce69e, _0x3db9cc, "ornament", _0x4c167c);
                    }
                    if (!_0x1d523b && _0x5981a2 != _0x4051d6) {
                        var _0x447cfc = this.getSkinImageObj(this.getCanopySkin(_0x5c965d, _0x5070c9));
                        if (_0x447cfc) {
                            _0x39e82d.save();
                            _0x39e82d.globalAlpha *= this.alpha;
                            if (this.curBiome !== _0x36f07b || this.speciesType !== 1) {
                                _0x39e82d.rotate(this.angle);
                            }
                            _0x39e82d.drawImage(_0x447cfc, -_0x4ce69e + _0x4c167c, -_0x4ce69e - _0x4c167c, _0x4ce69e * 2, _0x4ce69e * 2);
                            _0x39e82d.restore();
                        } else {}
                    } else {
                        _0x39e82d.save();
                        _0x466d9b(0, 0, this.rad * 0.2, "brown");
                        this.drawNoImageTree(this.rad);
                        _0x39e82d.restore();
                    }
                    if (this.xmasTree) {
                        this.drawXmasProps(_0x5c965d, _0x4ce69e, _0x3db9cc, _0x4c167c);
                    }
                }
            }
            _0x39e82d.restore();
        };
        _0x307a7c.prototype.drawNoImageTree = function(_0x321d41) {
            _0x39e82d.save();
            _0x39e82d.globalAlpha = this.alpha;
            var _0x5ebb17 = this.getBiomeColors();
            _0x466d9b(-_0x321d41 * 0.5, -_0x321d41 * 0.5, _0x321d41 * 0.65, _0x5ebb17.dark);
            _0x466d9b(_0x321d41 * 0.5, -_0x321d41 * 0.5, _0x321d41 * 0.73, _0x5ebb17.dark);
            _0x466d9b(_0x321d41 * 0.6, _0x321d41 * 0.4, Math.max(0, _0x321d41 * 0.78), _0x5ebb17.dark);
            _0x466d9b(-_0x321d41 * 0.5, _0x321d41 * 0.5, Math.max(0, _0x321d41 * 0.6), _0x5ebb17.dark);
            _0x466d9b(-_0x321d41 * 0.5, -_0x321d41 * 0.5, (_0x321d41 - 2) * 0.65, _0x5ebb17.light);
            _0x466d9b(_0x321d41 * 0.5, -_0x321d41 * 0.5, (_0x321d41 - 2) * 0.73, _0x5ebb17.light);
            _0x466d9b(_0x321d41 * 0.6, _0x321d41 * 0.4, (_0x321d41 - 2) * 0.78, _0x5ebb17.light);
            _0x466d9b(-_0x321d41 * 0.5, _0x321d41 * 0.5, (_0x321d41 - 2) * 0.6, _0x5ebb17.light);
            _0x39e82d.restore();
            return;
            _0x39e82d.save();
            this.rPer = 0;
            var _0x179f4a = 0;
            var _0x5312b6 = "#45D157";
            _0x39e82d.fillStyle = color;
            _0x39e82d.globalAlpha = this.alpha;
            _0x39e82d.beginPath();
            _0x39e82d.arc(_0x321d41 * 0.5, -_0x321d41 * 0.5, Math.max(0, _0x321d41 * 0.73), 0, Math.PI * 2);
            _0x39e82d.fill();
            _0x39e82d.beginPath();
            _0x39e82d.arc(_0x321d41 * 0.6, _0x321d41 * 0.4, Math.max(0, _0x321d41 * 0.78), 0, Math.PI * 2);
            _0x39e82d.fill();
            _0x39e82d.beginPath();
            _0x39e82d.arc(-_0x321d41 * 0.5, _0x321d41 * 0.5, Math.max(0, _0x321d41 * 0.6), 0, Math.PI * 2);
            _0x39e82d.fill();
            _0x39e82d.restore();
        };
        _0x307a7c.prototype.lights = 0;
        _0x307a7c.prototype.drawXmasProps = function(_0x28619a, _0x1dde63, _0x462a43, _0xd875c9) {
            this.setChristmasLight();
            this.drawXmasProp(_0x28619a, _0x1dde63, _0x462a43, "decoration", _0xd875c9);
            if (this.lights == 1 || this.lights == 3) {
                this.drawXmasProp(_0x28619a, _0x1dde63, _0x462a43, "light", _0xd875c9);
            }
            if (this.lights == 2 || this.lights == 3) {
                this.drawXmasProp(_0x28619a, _0x1dde63, _0x462a43, "light1", _0xd875c9);
            }
        };
        _0x307a7c.prototype.drawXmasProp = function(_0x1ea29d, _0x546edc, _0x336692, _0x497ff9, _0x4921b4) {
            const _0x512677 = "gameobj/101/" + _0x1ea29d + "/xmas/" + _0x497ff9 + ".png";
            var _0x2b0e7c = this.getSkinImageObj(_0x512677);
            if (_0x2b0e7c) {
                _0x39e82d.save();
                _0x39e82d.rotate(this.angle);
                _0x39e82d.drawImage(_0x2b0e7c, -_0x546edc + _0x4921b4, -_0x546edc - _0x4921b4, _0x546edc * 2, _0x546edc * 2);
                _0x39e82d.restore();
            }
        };
        _0x307a7c.prototype.drawEventDecorations = function(_0xad153c, _0x30f962, _0x4a6337, _0x60523a) {
            let _0x1e78a0 = "gameobj/101/" + _0xad153c + "/" + _0x30f962 + "_" + this.eventType + ".png";
            var _0x12657b = this.getSkinImageObj(_0x1e78a0);
            if (_0x12657b) {
                _0x39e82d.save();
                _0x39e82d.rotate(this.angle);
                _0x39e82d.drawImage(_0x12657b, -_0x4a6337 + _0x60523a, -_0x4a6337 - _0x60523a, _0x4a6337 * 2, _0x4a6337 * 2);
                _0x39e82d.restore();
            } else {
                console.log("not found: " + _0x1e78a0);
            }
        };
        _0x307a7c.prototype.drawEventDecorations = function(_0x1fdd50, _0x5e085b, _0x2be66b, _0xfece7b) {
            let _0x467b9e = "gameobj/101/" + _0x1fdd50 + "/" + _0x5e085b + "_" + this.eventType + ".png";
            var _0x5737ed = this.getSkinImageObj(_0x467b9e);
            console.log(_0x467b9e);
            if (_0x5737ed) {
                _0x39e82d.save();
                _0x39e82d.rotate(this.angle);
                _0x39e82d.drawImage(_0x5737ed, -_0x2be66b + _0xfece7b, -_0x2be66b - _0xfece7b, _0x2be66b * 2, _0x2be66b * 2);
                _0x39e82d.restore();
            }
        };
        _0x307a7c.prototype.getTreeName = function() {
            switch (this.foodType) {
                case _0x52e535:
                    return "coco";
                case _0x76f666:
                    return "banana";
                case _0xddc401:
                    return "fir";
            }
            return "default";
        };
        _0x307a7c.prototype.getBiomeColors = function() {
            var _0x559d63 = {
                dark: "#09992f",
                light: "#1cba34"
            };
            switch (this.curBiome) {
                case _0x16f106:
                    _0x559d63 = {
                        dark: "#808080",
                        light: "#f7f7f7"
                    };
                    break;
                case _0x47e33a:
                case _0x36f07b:
                    _0x559d63 = {
                        dark: "#a59215",
                        light: "#fffff"
                    };
                    break;
                case _0x360ff8:
                    _0x559d63 = {
                        dark: "#09992f",
                        light: "#1cba34"
                    };
                    break;
                case _0x1ddf2f:
                    _0x559d63 = {
                        dark: "#09992f",
                        light: "limegreen"
                    };
                    break;
                case _0x5d8525:
                    _0x559d63 = {
                        dark: "#1aae31",
                        light: "limegreen"
                    };
                    break;
                default:
            }
            return _0x559d63;
        };
        _0x307a7c.prototype.getTrunk = function() {
            return "trunk";
        };
        _0x307a7c.prototype.foodType = 0;
        _0x307a7c.prototype.canopy = true;
        _0x307a7c.prototype.readCustomStaticData = function(_0xce84ed) {
            this.readCustomData_onNewlyVisible(_0xce84ed);
        };
        _0x307a7c.prototype.readCustomData_onNewlyVisible = function(_0x287151) {
            this.foodType = _0x287151.readUInt16();
            this.canopy = _0x287151.readUInt8() == 1;
            this.eventType = _0x287151.readUInt8();
        };
        _0x307a7c.prototype.readUpdatedProperty = function(_0x4db785, _0x430e14) {
            if (_0x4db785 == _0x31f7ca) {
                this.lights = _0x430e14.readUInt8();
            }
        };
        _0x307a7c.prototype.setChristmasLight = function() {
            const _0x50f733 = performance.now();
            if (_0x50f733 - this.lastLightChange > 1000) {
                this.lights = 1 + Math.round(Math.random());
                this.lastLightChange = _0x50f733 + Math.random() * 100;
            }
        };
        _0x307a7c.prototype.treeCanopySkin = null;
        _0x307a7c.prototype.getCanopySkin = function(_0x357f57, _0x4d9950) {
            if (this.treeCanopySkin == null) {
                this.treeCanopySkin = "gameobj/101/" + _0x357f57 + "/" + _0x4d9950 + ".png";
            }
            return this.treeCanopySkin;
        };

        function _0x307a7c() {
            _0x307a7c.superClass.call(this, _0x2a77cf);
            this.lastLightChange = 0;
            this.xmasTree = Math.random() > 0.33 && _0x41f468;
            this.lights = 1;
        }
        _0x35d268.setCustomClassForGameObjType(_0x307a7c, _0x2a77cf);
        var _0x5899d5 = _0x471b49;
        var _0x28c171 = GameObj;
        _0x471b49.prototype = Object.create(_0x28c171.prototype);
        _0x471b49.prototype.constructor = _0x471b49;
        _0x471b49.superClass = _0x28c171;
        _0x471b49.prototype.updateZ = function() {
            this.z = -215;
        };
        _0x471b49.prototype.customDraw = function(_0x4ee272) {
            _0x39e82d.save();
            _0x39e82d.globalAlpha = 0.5;
            {
                _0x39e82d.fillStyle = _0x504cbf;
                var _0x3f057e = -this.rectW / 2;
                var _0x10584d = this.rectW / 2;
                var _0x166af6 = -this.rectH / 2;
                var _0x5c4b62 = this.rectH / 2;
                _0x39e82d.beginPath();
                _0x39e82d.moveTo(_0x3f057e, _0x166af6);
                var _0x57c3d = 20;
                var _0x1aaf45 = [-15, 10, -10, 12, 0, 5, -10, 5, -12, 5, 10, 0, -6];
                var _0x38d495 = 45;
                var _0x501609 = 0;
                var _0x2e1f7f = _0x5039a5 - this.x;
                var _0x3370f9 = 0 - this.x;
                var _0x302688 = _0x396098 - this.y;
                var _0x4f635d = 0 - this.y;
                var _0x41d7db;
                var _0x1afdb8 = _0x3f057e - _0x57c3d;
                for (_0x41d7db = _0x166af6; _0x41d7db < _0x5c4b62; _0x41d7db += _0x38d495) {
                    _0x39e82d.lineTo(Math.min(_0x2e1f7f, Math.max(_0x3370f9, _0x1afdb8 + _0x1aaf45[_0x501609])), _0x41d7db);
                    _0x501609 = (_0x501609 + 1) % _0x1aaf45.length;
                }
                _0x39e82d.lineTo(_0x3f057e, _0x5c4b62);
                _0x41d7db = _0x5c4b62 + _0x57c3d;
                for (_0x1afdb8 = _0x3f057e; _0x1afdb8 < _0x10584d; _0x1afdb8 += _0x38d495) {
                    _0x39e82d.lineTo(_0x1afdb8, Math.min(_0x302688, Math.max(_0x4f635d, _0x41d7db + _0x1aaf45[_0x501609])));
                    _0x501609 = (_0x501609 + 1) % _0x1aaf45.length;
                }
                _0x39e82d.lineTo(_0x10584d, _0x5c4b62);
                _0x1afdb8 = _0x10584d + _0x57c3d;
                for (_0x41d7db = _0x5c4b62; _0x41d7db > _0x166af6; _0x41d7db -= _0x38d495) {
                    _0x39e82d.lineTo(Math.min(_0x2e1f7f, Math.max(_0x3370f9, _0x1afdb8 + _0x1aaf45[_0x501609])), _0x41d7db);
                    _0x501609 = (_0x501609 + 1) % _0x1aaf45.length;
                }
                _0x39e82d.lineTo(_0x10584d, _0x166af6);
                _0x41d7db = _0x166af6 - _0x57c3d;
                for (_0x1afdb8 = _0x10584d; _0x1afdb8 > _0x3f057e; _0x1afdb8 -= _0x38d495) {
                    _0x39e82d.lineTo(_0x1afdb8, Math.min(_0x302688, Math.max(_0x4f635d, _0x41d7db + _0x1aaf45[_0x501609])));
                    _0x501609 = (_0x501609 + 1) % _0x1aaf45.length;
                }
                _0x39e82d.closePath();
                _0x39e82d.fill();
            }
            _0x39e82d.restore();
        };
        _0x471b49.prototype.edge = function() {
            _0x39e82d.save();
            var _0x11a6b8 = 15;
            {
                _0x39e82d.fillStyle = "red";
                var _0x562671 = -this.rectW / 2;
                var _0x3ec138 = this.rectW / 2;
                var _0x15ae07 = -this.rectH / 2 + 3;
                var _0x20813c = -this.rectH / 2 - _0x11a6b8;
                _0x39e82d.beginPath();
                _0x39e82d.moveTo(_0x562671, _0x15ae07);
                var _0x53512f = 0;
                var _0x11782a = [-15, 5, 10, 0, -10, 3, 12, 4, 0, 3, 5, -10, 5, -12, 5, 10, 0, -6];
                var _0x2f7299 = 60;
                var _0x5f1111 = 0;
                var _0x3d40e9 = _0x5039a5 - this.x;
                var _0x4a73d7 = 0 - this.x;
                var _0x50205c = _0x396098 - this.y;
                var _0x149d10 = 0 - this.y;
                var _0x5a1f57;
                var _0x5c3eff = _0x562671 - _0x53512f;
                _0x39e82d.lineTo(_0x562671, _0x20813c);
                _0x5a1f57 = _0x20813c + _0x53512f;
                for (_0x5c3eff = _0x562671; _0x5c3eff < _0x3ec138; _0x5c3eff += _0x2f7299) {
                    _0x39e82d.lineTo(_0x5c3eff, Math.min(_0x50205c, Math.max(_0x149d10, _0x5a1f57 + _0x11782a[_0x5f1111])));
                    _0x5f1111 = (_0x5f1111 + 1) % _0x11782a.length;
                }
                _0x39e82d.lineTo(_0x3ec138, _0x20813c);
                _0x39e82d.lineTo(_0x3ec138, _0x15ae07);
                _0x39e82d.closePath();
            }
            _0x39e82d.restore();
        };

        function _0x471b49() {
            _0x471b49.superClass.call(this, _0x45aeb2);
        }
        _0x35d268.setCustomClassForGameObjType(_0x471b49, _0x45aeb2);
        var _0x28c171 = GameObj;
        _0x1abfab.prototype = Object.create(_0x28c171.prototype);
        _0x1abfab.prototype.constructor = _0x1abfab;
        _0x1abfab.superClass = _0x28c171;
        _0x1abfab.prototype.updateZ = function() {
            this.z = 1005;
        };
        _0x1abfab.prototype.customDraw = function(_0xc072d3) {
            _0x39e82d.save();
            _0x39e82d.globalAlpha = 1;
            _0x466d9b(0, 0, this.rad, "#000");
            _0x39e82d.restore();
        };

        function _0x1abfab() {
            _0x1abfab.superClass.call(this, _0x476d4d);
        }
        _0x35d268.setCustomClassForGameObjType(_0x1abfab, _0x476d4d);
        var _0x28c171 = GameObj;
        River.prototype = Object.create(_0x28c171.prototype);
        River.prototype.constructor = River;
        River.superClass = _0x28c171;
        River.prototype.updateZ = function() {
            this.z = -159;
            if (this.specType == 0 || 1) {
                this.z = -158;
            }
        };
        River.prototype.currentWidth = 90;
        River.prototype.currentPadding = 0;
        River.prototype.padding = 50;
        River.prototype.isFloatingRiver = false;
        River.prototype.customDraw = function(_0x46ee1b) {
            if (_0x46ee1b) {
                this.jaggedSidesForRect(_0x335e4d, this.getStreamMargin());
            } else {
                this.drawStream(_0x1afbdd);
                this.drawCurrent(this.isFloatingRiver, this.riverSize);
            }
        };
        River.prototype.drawCurrent = function(_0x1be729, _0x4c4a36) {
            if (!_0x1be729) {
                return;
            }
            const _0x1e0221 = this.getSkinImageObj("gameobj/40/current" + this.getDirectionName() + ".png");
            if (!_0x1e0221) {
                return;
            }
            this.currentPadding = this.padding * _0x4c4a36 / 2;
            const _0x1fe3e4 = 60;
            const _0x2aac40 = 1000;
            const _0x4186b2 = this.currentWidth;
            _0x39e82d.save();
            _0x39e82d.globalAlpha = 1;
            const _0x3e87ec = this.getFlowSpeed() * (_0x4186b2 / _0x1fe3e4) * _0x2aac40;
            const _0x22ab3a = (_0x4ec996 - this.spawnTime) % _0x3e87ec / _0x3e87ec;
            const _0x918896 = _0x4186b2;
            const _0x565c33 = this.riverStreamHeight * _0x4c4a36 - 8;
            const _0x2e7c6d = this.isVertical() ? this.rectH : this.rectW;
            const _0x2f3c56 = (_0x2e7c6d / _0x4186b2 | 0) - 1;
            const _0x1f8973 = this.getStartPosition();
            let _0x1cc9a0 = _0x1f8973;
            for (let _0x555cac = 0; _0x555cac < _0x2f3c56; _0x555cac++) {
                const _0x358171 = _0x1cc9a0 + _0x918896 * _0x22ab3a;
                if (this.isVertical()) {
                    if (_0x55a369(this.x + this.currentPadding + -this.rectW * _0x4c4a36 / 2, this.y + _0x358171, _0x4186b2 * _0x4c4a36) && _0x1a5b63(this.x + this.currentPadding + -this.rectW * _0x4c4a36 / 2, this.y + _0x358171, -_0x4186b2 * _0x4c4a36)) {
                        _0x39e82d.drawImage(_0x1e0221, this.currentPadding + -this.rectW * _0x4c4a36 / 2, _0x358171, _0x565c33, _0x4186b2 * _0x4c4a36);
                    }
                    _0x1cc9a0 += (this.specType === 2 ? 1 : -1) * _0x4186b2;
                } else {
                    if (_0x55a369(this.x + _0x358171, this.y + this.currentPadding + -this.rectH * _0x4c4a36 / 2, _0x4186b2 * _0x4c4a36) && _0x1a5b63(this.x + _0x358171, this.y + this.currentPadding + -this.rectH * _0x4c4a36 / 2, -_0x4186b2 * _0x4c4a36)) {
                        _0x39e82d.drawImage(_0x1e0221, _0x358171, this.currentPadding + -this.rectH * _0x4c4a36 / 2, _0x4186b2 * _0x4c4a36, _0x565c33);
                    }
                    _0x1cc9a0 += (this.specType === 0 ? 1 : -1) * _0x4186b2;
                }
            }
            _0x39e82d.restore();
        };
        River.prototype.isVertical = function() {
            return this.specType >= 2;
        };
        River.prototype.getDirectionName = function() {
            const _0xfbf03d = ["Right", "Left", "Down", "Up"];
            return _0xfbf03d[this.specType];
        };
        River.prototype.getFlowSpeed = function() {
            if (this.isVertical()) {
                return this.speedY;
            } else {
                return this.speedX;
            }
        };
        River.prototype.getStartPosition = function() {
            if (this.isVertical()) {
                if (this.specType === 2) {
                    return -this.rectH / 2 - 50;
                } else {
                    return this.rectH / 2 + 50;
                }
            }
            if (this.specType === 0) {
                return -this.rectW / 2 + 50;
            } else {
                return this.rectW / 2 - 100;
            }
        };
        River.prototype.getStreamMargin = function() {
            return this.margin;
        };
        River.prototype.getRectWidth = function() {
            var _0x4d1852 = this.rectW;
            return _0x4d1852;
        };
        River.prototype.getRectHeight = function() {
            var _0x4d8514 = this.rectH;
            return _0x4d8514;
        };
        River.prototype.jaggedSidesForRect = function(_0xb6a4c2, _0x4e6736) {
            _0x39e82d.fillStyle = _0xb6a4c2;
            var _0x17709f = false;
            if (_0x4e6736) {
                _0x17709f = true;
            }
            var _0x298525 = -this.getRectWidth() / 2 + (_0x17709f ? _0x4e6736.x_min : 0);
            var _0x3963d7 = this.getRectWidth() / 2 + (_0x17709f ? _0x4e6736.x_max : 0);
            var _0x204d92 = -this.getRectHeight() / 2 + (_0x17709f ? _0x4e6736.y_min : 0);
            var _0x283543 = this.getRectHeight() / 2 + (_0x17709f ? _0x4e6736.y_max : 0);
            _0x39e82d.save();
            _0x39e82d.fillStyle = _0xb6a4c2;
            this.drawRandomEdges(_0x298525, _0x204d92, _0x3963d7, _0x283543);
            _0x39e82d.restore();
        };
        River.prototype.drawStream = function(_0x1a8bdf) {
            _0x39e82d.save();
            _0x39e82d.fillStyle = _0x1a8bdf;
            const _0x311c08 = this.isVertical() ? -this.riverStreamHeight / 2 * this.riverSize : -this.rectW / 2;
            const _0x46b7f8 = this.isVertical() ? this.riverStreamHeight * this.riverSize : this.rectW;
            const _0x5cf976 = this.isVertical() ? -this.rectH / 2 : -this.riverStreamHeight / 2 * this.riverSize;
            const _0xbada58 = this.isVertical() ? this.rectH : this.riverStreamHeight * this.riverSize;
            this.drawRandomEdges(_0x311c08, _0x5cf976, _0x46b7f8 / 2, _0xbada58 / 2);
            _0x39e82d.restore();
        };
        River.prototype.drawRandomEdges = function(_0x2d9eb0, _0x509d17, _0x535a4f, _0x2f6a8d) {
            const _0xd5ebef = this.specType === 2 || this.specType === 3;
            const _0x653c09 = [-8, 10, -10, 12, 0, 5, -10, 5, -12, 5, 10, 0, -6];
            const _0x13e95e = _0x653c09.length;
            const _0x4478bd = 150;
            const _0x41740e = 10;
            _0x39e82d.beginPath();
            _0x39e82d.moveTo(_0x2d9eb0, _0x509d17);
            let _0x303675 = 0;
            if (_0xd5ebef) {
                let _0x47f87a = _0x509d17;
                const _0x1b1a6a = _0x2d9eb0 - _0x41740e;
                for (; _0x47f87a < _0x2f6a8d; _0x47f87a += _0x4478bd) {
                    if (_0x55a369(this.x + _0x1b1a6a + _0x653c09[_0x303675], this.y + _0x47f87a, _0x4478bd + _0x41740e)) {
                        _0x39e82d.lineTo(_0x1b1a6a + _0x653c09[_0x303675], _0x47f87a);
                    }
                    _0x303675 = (_0x303675 + 1) % _0x13e95e;
                }
            }
            _0x39e82d.lineTo(_0x2d9eb0, _0x2f6a8d);
            if (!_0xd5ebef) {
                const _0x4dba30 = _0x2f6a8d + _0x41740e;
                for (let _0x194ce7 = _0x2d9eb0; _0x194ce7 < _0x535a4f; _0x194ce7 += _0x4478bd) {
                    if (_0x55a369(this.x + _0x194ce7, this.y + _0x4dba30 + _0x653c09[_0x303675], _0x4478bd + _0x41740e)) {
                        _0x39e82d.lineTo(_0x194ce7, _0x4dba30 + _0x653c09[_0x303675]);
                    }
                    _0x303675 = (_0x303675 + 1) % _0x13e95e;
                }
            }
            _0x39e82d.lineTo(_0x535a4f, _0x2f6a8d);
            if (_0xd5ebef) {
                const _0xc5d6d5 = _0x535a4f + _0x41740e;
                for (let _0x457e9a = _0x2f6a8d; _0x457e9a > _0x509d17; _0x457e9a -= _0x4478bd) {
                    if (_0x55a369(this.x + _0xc5d6d5 + _0x653c09[_0x303675], this.y + _0x457e9a, _0x4478bd + _0x41740e)) {
                        _0x39e82d.lineTo(_0xc5d6d5 + _0x653c09[_0x303675], _0x457e9a);
                    }
                    _0x303675 = (_0x303675 + 1) % _0x13e95e;
                }
            }
            _0x39e82d.lineTo(_0x535a4f, _0x509d17);
            if (!_0xd5ebef) {
                const _0x4a7f0a = _0x509d17 - _0x41740e;
                for (let _0x1b7573 = _0x535a4f; _0x1b7573 > _0x2d9eb0; _0x1b7573 -= _0x4478bd) {
                    if (_0x55a369(this.x + _0x1b7573, this.y + _0x4a7f0a + _0x653c09[_0x303675], _0x4478bd + _0x41740e)) {
                        _0x39e82d.lineTo(_0x1b7573, _0x4a7f0a + _0x653c09[_0x303675]);
                    }
                    _0x303675 = (_0x303675 + 1) % _0x13e95e;
                }
            }
            _0x39e82d.closePath();
            _0x39e82d.fill();
        };
        River.prototype.drawBody = function(_0x38b8b1, _0x405c17, _0x476a2a) {
            var _0x3527cc = _0x39e82d.globalAlpha;
            {
                _0x39e82d.fillStyle = _0x38b8b1;
                var _0x44a180 = 0;
                if (_0x405c17 > 1) {
                    _0x44a180 = 100;
                }
                _0x39e82d.fillRect(-this.rectW / 2, -this.riverStreamHeight / 2 * _0x405c17, this.rectW, this.riverStreamHeight * _0x405c17);
                var _0x4c2105 = 15;
                {
                    _0x39e82d.fillStyle = _0x38b8b1;
                    var _0x2be782 = -this.rectW / 2;
                    var _0x3ec6b6 = this.rectW / 2;
                    var _0x13992a = (-this.riverStreamHeight / 2 + 3) * _0x405c17;
                    var _0x3b90ff = (-this.riverStreamHeight / 2 - _0x4c2105) * _0x405c17;
                    _0x39e82d.beginPath();
                    _0x39e82d.moveTo(_0x2be782, _0x13992a);
                    var _0x326ee1 = 0;
                    var _0x1e1c0a = [-15, 5, 10, 0, -10, 3, 12, 4, 0, 3, 5, -10, 5, -12, 5, 10, 0, -6];
                    var _0x2a68cd = 150;
                    var _0x2f82d1 = 0;
                    var _0x20cabb = _0x5039a5 - this.x;
                    var _0x5deb78 = 0 - this.x;
                    var _0x5c293d = _0x396098 - this.y;
                    var _0x5b73b2 = 0 - this.y;
                    var _0x3ac24c;
                    var _0x9f1e63 = _0x2be782 - _0x326ee1;
                    _0x39e82d.lineTo(_0x2be782, _0x3b90ff);
                    _0x3ac24c = _0x3b90ff + _0x326ee1;
                    for (_0x9f1e63 = _0x2be782; _0x9f1e63 < _0x3ec6b6; _0x9f1e63 += _0x2a68cd) {
                        _0x39e82d.lineTo(_0x9f1e63, Math.min(_0x5c293d, Math.max(_0x5b73b2, _0x3ac24c + _0x1e1c0a[_0x2f82d1])));
                        _0x2f82d1 = (_0x2f82d1 + 1) % _0x1e1c0a.length;
                    }
                    _0x39e82d.lineTo(_0x3ec6b6, _0x3b90ff);
                    _0x39e82d.lineTo(_0x3ec6b6, _0x13992a);
                    _0x39e82d.closePath();
                    _0x39e82d.fill();
                } {
                    _0x39e82d.fillStyle = _0x38b8b1;
                    var _0x2be782 = -this.rectW / 2;
                    var _0x3ec6b6 = this.rectW / 2;
                    var _0x13992a = (this.riverStreamHeight / 2 - 3) * _0x405c17;
                    var _0x3b90ff = (this.riverStreamHeight / 2 + _0x4c2105) * _0x405c17;
                    _0x39e82d.beginPath();
                    _0x39e82d.moveTo(_0x2be782, _0x13992a);
                    var _0x326ee1 = 0;
                    var _0x1e1c0a = [-15, 5, 10, 0, -10, 3, 12, 4, 0, 3, 5, -10, 5, -12, 5, 10, 0, -6];
                    var _0x2a68cd = 150;
                    var _0x2f82d1 = 0;
                    var _0x20cabb = _0x5039a5 - this.x;
                    var _0x5deb78 = 0 - this.x;
                    var _0x5c293d = _0x396098 - this.y;
                    var _0x5b73b2 = 0 - this.y;
                    var _0x3ac24c;
                    var _0x9f1e63 = _0x2be782 - _0x326ee1;
                    _0x39e82d.lineTo(_0x2be782, _0x3b90ff);
                    _0x3ac24c = _0x3b90ff + _0x326ee1;
                    for (_0x9f1e63 = _0x2be782; _0x9f1e63 < _0x3ec6b6; _0x9f1e63 += _0x2a68cd) {
                        _0x39e82d.lineTo(_0x9f1e63, Math.min(_0x5c293d, Math.max(_0x5b73b2, _0x3ac24c + _0x1e1c0a[_0x2f82d1])));
                        _0x2f82d1 = (_0x2f82d1 + 1) % _0x1e1c0a.length;
                    }
                    _0x39e82d.lineTo(_0x3ec6b6, _0x3b90ff);
                    _0x39e82d.lineTo(_0x3ec6b6, _0x13992a);
                    _0x39e82d.closePath();
                    _0x39e82d.fill();
                }
            }
            if (_0x476a2a && _0x405c17 > 0.3) {
                var _0x2609e9 = this.getSkinImageObj("gameobj/40/currentRight.png");
                if (_0x2609e9) {
                    var _0x4884d3 = -this.rectW / 2;
                    var _0x1f73d1 = 100;
                    _0x39e82d.save();
                    _0x39e82d.fillStyle = "yellow";
                    _0x39e82d.globalAlpha = 1;
                    var _0x536f80 = 60;
                    for (i = 0; i < 80; i++) {
                        var _0x104a3f = this.speedX * (_0x1f73d1 / _0x536f80) * 1000;
                        var _0x4538ae = (_0x4ec996 - this.spawnTime) % _0x104a3f / _0x104a3f;
                        var _0x3450b5 = _0x1f73d1;
                        var _0xad345a = _0x4884d3 + _0x3450b5 * _0x4538ae;
                        _0x39e82d.drawImage(_0x2609e9, _0xad345a, 15 + -this.rectH * _0x405c17 / 2, _0x1f73d1 * _0x405c17, this.riverStreamHeight * _0x405c17 - 8);
                        _0x4884d3 += _0x1f73d1;
                    }
                    _0x39e82d.restore();
                }
            }
        };
        River.prototype.speedX = 1;
        River.prototype.speedY = 1;
        River.prototype.onLerpUpdate = function(_0x1e1993) {
            this.riverSize = _0x1e1993 * (this.n_riverSize - this.o_riverSize) + this.o_riverSize;
        };
        River.prototype.readUpdatedProperty = function(_0x171787, _0x47ef00) {
            if (_0x171787 == _0xa1b7bd) {
                this.n_riverSize = _0x47ef00.readUInt16() / 1000;
                this.o_riverSize = this.riverSize;
            }
        };
        River.prototype.worldUpd_readMsgNewlyVisible = function(_0xc644e, _0x293123, _0x7f3ca8) {
            this.setObjTypes(_0x293123, _0x7f3ca8);
            this.id = _0xc644e.readUInt32();
            var _0x25e09d = _0xc644e.readUInt16() / 4;
            var _0x318973 = _0xc644e.readUInt16() / 4;
            this.rectW = _0xc644e.readUInt16();
            this.rectH = _0xc644e.readUInt16();
            this.curBiome = _0xc644e.readUInt8();
            this.clientBatchDrawID = _0xc644e.readUInt16();
            this.specType = _0xc644e.readUInt8();
            this.riverStreamHeight = _0xc644e.readUInt16();
            this.isRectangle = true;
            this.ox = this.x = this.nx = _0x25e09d;
            this.oy = this.y = this.ny = _0x318973;
            this.clientBatchDraw = true;
            this.isFloatingRiver = _0xc644e.readUInt8() == 1;
            if (this.specType == 1) {
                this.speedX = -1;
            }
            if (this.specType == 3) {
                this.speedY = -1;
            }
            this.riverSize = this.o_riverSize = this.n_riverSize = _0xc644e.readUInt16() / 1000;
            var _0x44984b = 0;
            var _0x37262a = 0;
            var _0x3d3f34 = 0;
            var _0x4faa3e = 0;
            if (this.specType == 2) {
                _0x4faa3e = -100;
            } else if (this.specType == 3) {
                _0x3d3f34 = 100;
            } else {
                _0x44984b = 100;
                _0x37262a = -100;
            }
            this.margin = {
                x_min: _0x44984b,
                x_max: _0x37262a,
                y_min: _0x3d3f34,
                y_max: _0x4faa3e
            };
            console.log(this.margin);
            this.mopeSeasonID = 1;
            this.generateTerrainFeatures();
        };
        River.prototype.biomePattern = null;
        River.prototype.generateTerrainFeatures = function() {
            var _0x11e516 = [];
            var _0x1f10eb = 300;
            var _0x265c97 = 1.5;
            if (this.specType == 2 || this.specType == 3) {
                var _0x21e546 = 0;
                var _0x5846ea = -this.rectH / 2;
                while (_0x5846ea + _0x1f10eb < this.rectH / 2) {
                    _0x21e546 = -_0x1f10eb / 2;
                    var _0x2c33e3 = Math.max(0, Math.round(_0x14db03(0, 3)) - 1);
                    _0x11e516.push({
                        x: _0x21e546,
                        y: _0x5846ea,
                        w: _0x1f10eb,
                        h: _0x1f10eb,
                        img: _0x2c33e3,
                        r: _0x14db03(0, 180)
                    });
                    _0x5846ea += _0x1f10eb * _0x265c97;
                }
            } else {
                var _0x5846ea = 0;
                var _0x21e546 = _0x1f10eb / 4 - this.rectW / 2;
                while (_0x21e546 + _0x1f10eb < this.rectW / 2) {
                    _0x5846ea = -_0x1f10eb / 2;
                    var _0x2c33e3 = Math.max(0, Math.round(_0x14db03(0, 3)) - 1);
                    _0x11e516.push({
                        x: _0x21e546,
                        y: _0x5846ea,
                        w: _0x1f10eb,
                        h: _0x1f10eb,
                        img: _0x2c33e3,
                        r: _0x14db03(0, 180)
                    });
                    _0x21e546 += _0x1f10eb * _0x265c97;
                }
            }
            this.biomePattern = _0x11e516;
        };
        River.prototype.drawTerrainFeatures = function() {};
        River.prototype.drawBox = function(_0x4f4de4, _0x335027, _0x2231ab, _0x376dce) {
            _0x39e82d.beginPath();
            _0x39e82d.fillStyle = "red";
            _0x39e82d.moveTo(_0x4f4de4, _0x335027);
            _0x39e82d.lineTo(_0x4f4de4, _0x376dce);
            _0x39e82d.lineTo(_0x2231ab, _0x376dce);
            _0x39e82d.lineTo(_0x2231ab, _0x335027);
            _0x39e82d.closePath();
            _0x39e82d.fill();
        };

        function River() {
            River.superClass.call(this, _0x5075c2);
            this.clientBatchDraw = true;
        }
        _0x35d268.setCustomClassForGameObjType(River, _0x5075c2);
        var _0x28c171 = GameObj;
        _0xe0710d.prototype = Object.create(_0x28c171.prototype);
        _0xe0710d.prototype.constructor = _0xe0710d;
        _0xe0710d.superClass = _0x28c171;
        _0xe0710d.prototype.LakeSize = 1;
        _0xe0710d.prototype.isEmptyLake = false;
        _0xe0710d.prototype.isDeathLake = false;
        _0xe0710d.prototype.updateZ = function() {
            if (this.isEmptyLake) {
                this.z = -157;
            } else {
                this.z = -160;
            }
        };
        _0xe0710d.prototype.customDraw = function(_0x35275f) {
            if (this.isDeathLake) {
                _0x39e82d.fillStyle = _0x335e4d;
                _0x39e82d.beginPath();
                _0x39e82d.arc(0, 0, this.rad, 0, Math.PI * 2);
                _0x39e82d.fill();
                this.poisonBody(_0x1afbdd, this.LakeSize, this.poison);
            } else {
                this.drawBody(_0x1afbdd, 1);
            }
        };
        _0xe0710d.prototype.poisonBody = function(_0x16971d, _0x5dbd11, _0x53a36a) {
            {
                var _0x54a640 = "#547d24";
                var _0x492dca = this.rad * _0x5dbd11;
                _0x39e82d.save();
                _0x39e82d.globalAlpha = 1;
                if (_0x5981a2 != _0x4051d6) {
                    _0x39e82d.rotate(this.rPer * 2 * Math.PI);
                }
                var _0x4949d1 = _0x4ec996 - this.spawnTime;
                var _0x43c997 = _0x2f34bb.lake[_0x4949d1 % _0x2f34bb.lake.length];
                if (_0x43c997 !== undefined && _0x43c997 != null) {
                    this.theFrame = _0x43c997;
                    rShift = this.theFrame;
                }
                var _0x3a1bf0 = 4;
                _0x39e82d.fillStyle = _0x335e4d;
                _0x39e82d.beginPath();
                _0x39e82d.arc(0, 0, _0x492dca, 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.fillStyle = _0x16971d;
                var _0x323854 = _0x492dca * 0.45;
                var _0x1d9f74 = _0x492dca * 0.45 + this.rPer * 15;
                var _0x354a4a = _0x492dca * 0.5;
                var _0x132dd2 = _0x492dca * 0.5 + this.rPer * 15;
                var _0x936107 = -_0x492dca * 0.55 * 0.707;
                var _0x3c181e = +_0x492dca * 0.55 * 0.707 + this.rPer * 15;
                var _0x486e5c = -_0x492dca * 0.75;
                var _0x2ea029 = -_0x492dca * 0.35 + this.rPer * 15;
                var _0x8a7b80 = _0x492dca + this.rPer * 10;
                var _0xc80a41 = this.rPer * 50;
                var _0x1370f0 = _0x492dca - this.rPer * 20;
                var _0x5783a7 = this.rPer * 50;
                _0x39e82d.beginPath();
                _0x39e82d.arc(0, 0, Math.max(0, _0x492dca - _0x3a1bf0 + rShift), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.save();
                _0x39e82d.fillStyle = _0x54a640;
                _0x39e82d.globalAlpha = _0x53a36a;
                _0x39e82d.beginPath();
                _0x39e82d.arc(0, 0, Math.max(0, _0x492dca - _0x3a1bf0 + rShift), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.restore();
                _0x39e82d.restore();
            }
        };
        _0xe0710d.prototype.drawBody = function(_0x38eebd, _0x4be31e, _0x36aaec) {
            {
                var _0x510878 = this.rad * _0x4be31e;
                _0x39e82d.save();
                _0x39e82d.globalAlpha = _0x36aaec;
                if (!_0x1d523b) {
                    if (_0x5981a2 != _0x4051d6) {
                        _0x39e82d.rotate(this.rPer * 2 * Math.PI);
                    }
                }
                var _0x1ff65c = 0;
                if (!_0x1d523b && !this.isEmptyLake) {
                    var _0x30f6d9 = _0x4ec996 - this.spawnTime;
                    _0x1ff65c = _0x2f34bb.lake[_0x30f6d9 % _0x2f34bb.lake.length];
                }
                var _0x51f6d7 = 4;
                if (!this.isEmptyLake) {
                    _0x39e82d.fillStyle = _0x335e4d;
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(0, 0, _0x510878, 0, Math.PI * 2);
                    _0x39e82d.fill();
                }
                if (this.curBiome == _0x16f106) {
                    _0x39e82d.fillStyle = "#8da0d6";
                } else {
                    _0x39e82d.fillStyle = _0x1afbdd;
                }
                _0x39e82d.beginPath();
                _0x39e82d.arc(0, 0, Math.max(0, _0x510878 - _0x51f6d7 + _0x1ff65c), 0, Math.PI * 2);
                _0x39e82d.fill();
                if (!_0x1d523b || _0x5981a2 != _0x4051d6) {
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(_0x510878 * 0.45, -_0x510878 * 0.45 + this.rPer * 15, Math.max(0, _0x510878 * 0.5 + _0x1ff65c), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(_0x510878 * 0.5, _0x510878 * 0.5 + this.rPer * 15, Math.max(0, _0x510878 * 0.4 + _0x1ff65c), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(-_0x510878 * 0.55 * 0.707, +_0x510878 * 0.55 * 0.707 + this.rPer * 15, Math.max(0, _0x510878 * 0.5 + _0x1ff65c), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(-_0x510878 * 0.75, -_0x510878 * 0.35 + this.rPer * 15, Math.max(0, _0x510878 * 0.3 + _0x1ff65c), 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(_0x510878 + this.rPer * 10, this.rPer * 50, this.specType == 0 ? 8 : 4, 0, Math.PI * 2);
                    _0x39e82d.fill();
                    _0x39e82d.beginPath();
                    _0x39e82d.arc(_0x510878 - this.rPer * 20, this.rPer * 50, 10, 0, Math.PI * 2);
                    _0x39e82d.fill();
                }
                _0x39e82d.restore();
            }
        };
        _0xe0710d.prototype.onLerpUpdate = function(_0x45b1c5) {
            this.LakeSize = _0x45b1c5 * (this.n_LakeSize - this.o_LakeSize) + this.o_LakeSize;
        };
        _0xe0710d.prototype.readUpdatedProperty = function(_0xd567fa, _0x48032c) {
            if (_0xd567fa == _0x3b7247) {
                this.n_LakeSize = _0x48032c.readUInt16() / 1000;
                this.o_LakeSize = this.LakeSize;
            } else if (_0xd567fa == _0x65bdc9) {
                this.poison = _0x48032c.readUInt16() / 1000;
            } else if (_0xd567fa == _0x4ecddd) {
                this.isEmptyLake = _0x48032c.readUInt8() == 1;
            }
        };
        _0xe0710d.prototype.readCustomData_onNewlyVisible = function(_0x53acfd) {
            this.isEmptyLake = _0x53acfd.readUInt8() == 1;
            this.isDeathLake = _0x53acfd.readUInt8() == 1;
            this.LakeSize = this.o_LakeSize = this.n_LakeSize = _0x53acfd.readUInt16() / 1000;
            if (this.isDeathLake) {
                this.poison = _0x53acfd.readUInt16() / 1000;
                this.LakeStream = _0x53acfd.readUInt16();
            }
        };

        function _0xe0710d() {
            _0xe0710d.superClass.call(this, _0x2c3383);
        }
        _0x35d268.setCustomClassForGameObjType(_0xe0710d, _0x2c3383);
        var _0x28c171 = GameObj;
        _0x3cb087.prototype = Object.create(_0x28c171.prototype);
        _0x3cb087.prototype.constructor = _0x3cb087;
        _0x3cb087.superClass = _0x28c171;
        _0x3cb087.prototype.updateZ = function() {
            this.z = 1010;
        };
        _0x3cb087.prototype.customDraw = function(_0x21b154) {
            var _0x4cf37b = 0;
            var _0x3b133f = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x361068 = _0x1b594e(_0x3b133f, 1, 0.3, 2);
            var _0x3829dd = this.getSkinImageObj("img/viralpandemic/virus.png");
            if (_0x3829dd) {
                var _0x3b128c = this.rad * 1.2 + _0x361068;
                if (this.stickyVirus) {
                    _0x39e82d.rotate(this.angle);
                } else {
                    if (this.angleR == undefined) {
                        this.angleR = _0x5be054(0.01, 0.09);
                    }
                    this.angleR += 0.01;
                    _0x39e82d.rotate(this.angleR);
                }
                _0x39e82d.drawImage(_0x3829dd, -_0x3b128c, -_0x3b128c, _0x3b128c * 2, _0x3b128c * 2);
            } else {
                this.drawOutlinedCircle("", "white");
            }
        };
        _0x3cb087.prototype.stickyVirus = false;
        _0x3cb087.prototype.readUpdatedProperty = function(_0x31f345, _0x4279c2) {
            if (_0x31f345 == _0x23641b) {
                this.stickyVirus = _0x4279c2.readUInt8() == 1;
            }
        };

        function _0x3cb087() {
            _0x3cb087.superClass.call(this, _0x22d5a8);
            _0x3cb087.prototype.easeAngleChanges = true;
        }
        _0x35d268.setCustomClassForGameObjType(_0x3cb087, _0x22d5a8);
        var _0x28c171 = GameObj;
        _0x3bb222.prototype = Object.create(_0x28c171.prototype);
        _0x3bb222.prototype.constructor = _0x3bb222;
        _0x3bb222.superClass = _0x28c171;
        _0x3bb222.prototype.foodType = 0;
        _0x3bb222.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x3bb222.prototype.customDraw = function(_0x52dd69) {
            _0x39e82d.save();
            var _0x3d3c32 = this.getImmunityFoodName();
            var _0x5de022 = this.getSkinImageObj("img/viralpandemic/" + _0x3d3c32 + "_e.png");
            if (_0x5de022) {
                var _0x80386f = this.rad;
                _0x39e82d.save();
                _0x39e82d.rotate(this.rPer * 0.5 * Math.PI * 2);
                _0x39e82d.drawImage(_0x5de022, -_0x80386f, -_0x80386f, _0x80386f * 2, _0x80386f * 2);
                _0x39e82d.restore();
            }
            _0x39e82d.restore();
        };
        _0x3bb222.prototype.getImmunityFoodName = function() {
            var _0x2c2249 = "cabbage";
            switch (this.foodType) {
                case 1:
                    _0x2c2249 = "cabbage";
                    break;
                case 2:
                    _0x2c2249 = "dragonfruit";
                    break;
                case 3:
                    _0x2c2249 = "onion";
                    break;
                case 4:
                    _0x2c2249 = "papaya";
                    break;
                case 5:
                    _0x2c2249 = "papayaslice";
                    break;
                case 6:
                    _0x2c2249 = "peach";
                    break;
                case 7:
                    _0x2c2249 = "peapod";
                    break;
                case 8:
                    _0x2c2249 = "peapod1";
                    break;
            }
            return _0x2c2249;
        };
        _0x3bb222.prototype.readCustomData_onNewlyVisible = function(_0x4253e7) {
            this.foodType = _0x4253e7.readUInt8();
        };

        function _0x3bb222() {
            _0x3bb222.superClass.call(this, _0x579325);
            this.doesDrawEffectScale = true;
        }
        _0x35d268.setCustomClassForGameObjType(_0x3bb222, _0x579325);
        var _0x28c171 = GameObj;
        _0x2a4167.prototype = Object.create(_0x28c171.prototype);
        _0x2a4167.prototype.constructor = _0x2a4167;
        _0x2a4167.superClass = _0x28c171;
        var _0x30264e = 0;
        var _0x1d5531 = 0;
        _0x2a4167.prototype.updateZ = function() {
            this.z = 100102;
        };
        _0x2a4167.prototype.customDraw = function(_0x5d19a6) {
            _0x39e82d.save();
            if (this.isEnabled) {
                _0x39e82d.globalAlpha = 0.4;
            } else {
                _0x39e82d.globalAlpha = 0.2;
            }
            _0x39e82d.fillStyle = "black";
            _0x39e82d.fillRect(-this.rectW / 2, -this.rectH / 2, this.rectW, this.rectH);
            _0x39e82d.strokeRect(-this.rectW / 2, -this.rectH / 2, this.rectW, this.rectH);
            if (this.isEnabled) {
                _0x39e82d.globalAlpha = this.opacity * 0.5;
            } else {
                _0x39e82d.globalAlpha = this.opacity * 0.2;
            }
            _0x39e82d.fillStyle = this.color;
            _0x39e82d.fillRect(-this.rectW / 2, -this.rectH / 2, this.rectW, this.rectH);
            _0x39e82d.lineWidth = "3";
            if (this.btnStroke > 0) {
                _0x39e82d.globalAlpha = this.opacity * 0.9;
                _0x39e82d.strokeStyle = this.color;
                _0x39e82d.strokeRect(-this.rectW / 2, -this.rectH / 2, this.rectW, this.rectH);
            }
            _0x39e82d.restore();
            if (this.isEnabled) {
                var _0x4ef7a9 = this.x - this.rectW / 2;
                var _0x475c5b = this.x + this.rectW / 2;
                var _0x21a1e4 = this.y - this.rectH / 2;
                var _0x5a3d1b = this.y + this.rectH / 2;
                var _0x20e18b = false;
                if (_0x4a8be2 > _0x4ef7a9 && _0x4a8be2 < _0x475c5b && _0x227e1d > _0x21a1e4 && _0x227e1d < _0x5a3d1b || _0x50fc4c == this.hotkey) {
                    _0x20e18b = true;
                    _0x1d5531 = _0x30264e = this.id;
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = this.opacity;
                    _0x39e82d.fillStyle = this.color;
                    _0x39e82d.fillRect(-this.rectW / 2, -this.rectH / 2, this.rectW, this.rectH);
                    if (this.hoverStroke > 0) {
                        _0x39e82d.globalAlpha = 1;
                        _0x39e82d.lineWidth = this.hoverStroke;
                        _0x39e82d.strokeStyle = _0x556e31;
                        _0x39e82d.strokeRect(-this.rectW / 2, -this.rectH / 2, this.rectW, this.rectH);
                    }
                    _0x39e82d.restore();
                } else if (_0x1d5531 == this.id) {
                    _0x30264e = 0;
                }
            }
            if (this.txtLabel != null) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = _0x20e18b ? 1 : 0.6;
                if (_0x20e18b) {
                    this.txtLabel.setFontSize(12);
                    this.txtLabel.setColor("white");
                    this.txtLabel.setStroke(2);
                } else {
                    this.txtLabel.setColor(this.isEnabled ? "white" : "black");
                    this.txtLabel.setStroke(0);
                }
                this.txtLabel.draw();
                _0x39e82d.restore();
            }
            if (this.isEnabled && this.hotkey != "") {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = 0.2;
                _0x39e82d.fillStyle = "white";
                var _0x5e75fa = -this.rectW / 2 + 2;
                var _0xca3581 = this.rectH / 2 - 12;
                _0x39e82d.fillRect(_0x5e75fa, _0xca3581, 10, 10);
                this.txtHotkey.x = _0x5e75fa + 5;
                this.txtHotkey.y = _0xca3581 + 5;
                _0x39e82d.globalAlpha = 0.7;
                this.txtHotkey.draw();
                _0x39e82d.restore();
            }
        };
        _0x2a4167.prototype.optionID = 0;
        _0x2a4167.prototype.optionType = 0;
        _0x2a4167.prototype.label = 0;
        _0x2a4167.prototype.highlight = 0;
        _0x2a4167.prototype.txtLabel = null;
        _0x2a4167.prototype.txtHotkey = null;
        _0x2a4167.prototype.isEnabled = true;
        _0x2a4167.prototype.hotkey = "";
        _0x2a4167.prototype.readCustomData_onNewlyVisible = function(_0x338a57) {
            _0x50fc4c = null;
            _0x1510cb = +new Date() + 1000;
            this.optionID = _0x338a57.readUInt32();
            var _0x3c7338 = _0x338a57.readString();
            _0x3c7338 = _0x3c7338.replaceAll("\n", "newline");
            console.log(_0x3c7338);
            var _0x1f2dfb = JSON.parse(_0x3c7338);
            this.label = _0x1f2dfb.label.replaceAll("newline", "\n");
            this.optionType = _0x1f2dfb.value;
            this.color = _0x1f2dfb.color;
            this.opacity = _0x1f2dfb.opacity / 100;
            this.hoverStroke = _0x1f2dfb.hoverStroke;
            this.btnStroke = _0x1f2dfb.btnStroke;
            this.isEnabled = Number(_0x1f2dfb.enabled) == 1;
            this.hotkey = _0x1f2dfb.hotkey;
            if (!this.isEnabled) {
                this.opacity *= 0.5;
            }
            if (this.txtLabel == null) {
                this.txtLabel = new _0x123582(12, "#FFFFFF");
                this.txtLabel.x = 0;
                this.txtLabel.y = 0;
                this.txtLabel.strokeW = 0;
                this.txtLabel.multiLine = true;
                this.txtLabel.renderScale = 2;
                this.txtLabel.setText(this.label);
            }
            if (this.isEnabled && this.hotkey != "" && this.txtHotkey == null) {
                this.txtHotkey = new _0x123582(8, "#FFFFFF");
                this.txtHotkey.x = 0;
                this.txtHotkey.y = 0;
                this.txtHotkey.strokeW = 0;
                this.txtHotkey.multiLine = false;
                this.txtHotkey.renderScale = 2;
                this.txtHotkey.setText(this.hotkey);
                this.txtHotkey.setColor("white");
                this.txtHotkey.setStroke(0);
            }
        };
        var _0x5bfc32 = 129;

        function _0x2a4167() {
            _0x2a4167.superClass.call(this, _0x5bfc32);
        }
        _0x35d268.setCustomClassForGameObjType(_0x2a4167, _0x5bfc32);
        var _0x28c171 = GameObj;
        _0x19320a.prototype = Object.create(_0x28c171.prototype);
        _0x19320a.prototype.constructor = _0x19320a;
        _0x19320a.superClass = _0x28c171;
        _0x19320a.prototype.updateZ = function() {
            this.z = 100102;
        };
        _0x19320a.prototype.customDraw = function(_0x3f4159) {
            _0x39e82d.save();
            var _0x1f6574 = this.rectW;
            var _0xb7ba3a = this.rectH;
            _0x39e82d.globalAlpha = 0.3;
            _0x39e82d.fillStyle = "black";
            _0x39e82d.fillRect(-_0x1f6574 / 2, -_0xb7ba3a / 2, _0x1f6574, _0xb7ba3a);
            _0x39e82d.globalAlpha = 0.15;
            _0x39e82d.fillStyle = "white";
            _0x1f6574 -= 3;
            _0xb7ba3a -= 3;
            _0x39e82d.fillRect(-_0x1f6574 / 2, -_0xb7ba3a / 2, _0x1f6574, _0xb7ba3a);
            _0x39e82d.stroke();
            _0x39e82d.restore();
            if (this.txtTitle != null) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = 1;
                this.txtTitle.setFontSize(18);
                this.txtTitle.setColor("white");
                this.txtTitle.setStroke(2);
                this.txtTitle.draw();
                _0x39e82d.restore();
            }
            if (this.txtMessage != null) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = 1;
                this.txtMessage.draw();
                _0x39e82d.restore();
            }
            if (this.timerTxt != null) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = 1;
                var _0x1f6574 = 25;
                var _0xb7ba3a = 25;
                _0x39e82d.globalAlpha = 0.5;
                _0x39e82d.fillStyle = "red";
                var _0x5a893 = this.rectW / 2 - _0x1f6574 - 1.5;
                var _0x30a62b = -this.rectH / 2 + 1.5;
                _0x39e82d.fillRect(_0x5a893, _0x30a62b, _0x1f6574, _0xb7ba3a);
                _0x39e82d.globalAlpha = 1;
                this.timerTxt.setFontSize(16);
                this.timerTxt.setColor("white");
                this.timerTxt.setStroke(2);
                var _0x2284fd = this.timeoutTime - Math.round((+new Date() - this.spawnTime) / 1000);
                this.timerTxt.setText(_0x2284fd);
                this.timerTxt.x = _0x5a893 + 12.5;
                this.timerTxt.y = _0x30a62b + 12.5;
                this.timerTxt.draw();
                _0x39e82d.restore();
            }
            _0x39e82d.save();
            _0x394eb0(this);
            _0x39e82d.restore();
        };
        _0x19320a.prototype.option1 = null;
        _0x19320a.prototype.option2 = null;
        _0x19320a.prototype.option3 = null;
        _0x19320a.prototype.option4 = null;

        function _0x394eb0(_0x181844) {
            var _0x5d9e29 = _0x181844.rectW * 0.5;
            var _0x2a2bed = _0x181844.rectH * 0.35;
            var _0x20554f = -_0x5d9e29 / 2;
            var _0x15b464 = -20;
            _0x39e82d.globalAlpha = 0.2;
            _0x39e82d.fillStyle = "black";
            _0x39e82d.fillRect(_0x20554f, _0x15b464, _0x5d9e29, _0x2a2bed);
            _0x39e82d.globalAlpha = 0.7;
            _0x39e82d.fillStyle = "limegreen";
            _0x39e82d.fillRect(_0x20554f, _0x15b464, _0x5d9e29, 20);
            _0x491b27("options", _0x181844, _0x20554f, _0x15b464 + 2.5, _0x5d9e29, _0x2a2bed, "ARENA OPTIONS", "white", 2);
            _0x5d9e29 = 100;
            _0x2a2bed = 15;
            _0x20554f = -_0x5d9e29 / 2;
            _0x15b464 += 7;
            _0x39e82d.globalAlpha = 1;
            _0x39e82d.fillStyle = "green";
            _0x15b464 += _0x2a2bed + 5;
            _0x39e82d.globalAlpha = 0.7;
            _0x491b27("option2", _0x181844, _0x20554f, _0x15b464, _0x5d9e29, _0x2a2bed, (_0x181844.data.watr == Number(1) ? "INFINITE" : "LIMITED") + " WATER", "white", 0);
            _0x15b464 += _0x2a2bed;
            _0x491b27("option3", _0x181844, _0x20554f, _0x15b464, _0x5d9e29, _0x2a2bed, (_0x181844.data.hp == Number(1) ? "ENABLE" : "DISABLE") + " HEALTH REGEN", "white", 0);
            _0x15b464 += _0x2a2bed;
            _0x491b27("option4", _0x181844, _0x20554f, _0x15b464, _0x5d9e29, _0x2a2bed, "TURN " + (_0x181844.data.speed == Number(1) ? "NORMAL" : "FAST"), "white", 0);
            _0x15b464 += _0x2a2bed;
            _0x491b27("option5", _0x181844, _0x20554f, _0x15b464, _0x5d9e29, _0x2a2bed, _0x181844.data.climax == Number(1) ? "LAST MAN STANDING" : _0x181844.data.bites + " BITES WINS", "white", 0);
            _0x15b464 += _0x2a2bed;
            _0x491b27("option6", _0x181844, _0x20554f, _0x15b464, _0x5d9e29, _0x2a2bed, _0x181844.data.wall == Number(1) ? "WALL DAMAGE" : "NO WALL DAMAGE", "white", 0);
        }

        function _0x491b27(_0x38a74a, _0x224e2b, _0x2c9143, _0x3735a4, _0x5b0458, _0x2e81f7, _0x5a86aa, _0xc355bb, _0x2bd3e1) {
            if (_0x2bd3e1 == undefined) {
                _0x2bd3e1 = 0;
            }
            if (_0x224e2b[_0x38a74a] == null) {
                _0x224e2b[_0x38a74a] = new _0x123582(10, _0xc355bb);
                _0x224e2b[_0x38a74a].x = _0x2c9143;
                _0x224e2b[_0x38a74a].y = _0x3735a4;
                _0x224e2b[_0x38a74a].strokeW = 0;
                _0x224e2b[_0x38a74a].multiLine = true;
                _0x224e2b[_0x38a74a].renderScale = 2;
                _0x224e2b[_0x38a74a].setStroke(_0x2bd3e1);
                _0x224e2b[_0x38a74a].setText(_0x5a86aa);
            } else {
                _0x224e2b[_0x38a74a].x = _0x2c9143 + _0x5b0458 / 2;
                _0x224e2b[_0x38a74a].y = _0x3735a4 + 7;
                _0x224e2b[_0x38a74a].draw();
            }
        }
        _0x19320a.prototype.timeoutTime = 0;
        _0x19320a.prototype.optionType = 0;
        _0x19320a.prototype.label = 0;
        _0x19320a.prototype.highlight = 0;
        _0x19320a.prototype.txtTitle = null;
        _0x19320a.prototype.txtMessage = null;
        _0x19320a.prototype.timerTxt = null;
        _0x19320a.prototype.screenMsg = null;
        _0x19320a.prototype.screenTitle = null;
        _0x19320a.prototype.invitee_id = null;
        _0x19320a.prototype.spiderX = null;
        _0x19320a.prototype.spiderY = null;
        _0x19320a.prototype.beforeCustomDraw = function(_0x53506f) {
            _0x39e82d.save();
            _0x39e82d.strokeStyle = "white";
            _0x39e82d.globalAlpha = 1;
            _0x39e82d.beginPath();
            _0x39e82d.moveTo(this.x, this.y);
            _0x39e82d.lineTo(this.spiderX, this.spiderY);
            _0x39e82d.stroke();
            _0x39e82d.restore();
        };
        _0x19320a.prototype.worldUpd_readMsgUpdate = function(_0x5b9883) {
            var _0x2f8cc2 = _0x5b9883.readUInt16() / 4;
            var _0x281959 = _0x5b9883.readUInt16() / 4;
            this.setMovedToPos(_0x2f8cc2, _0x281959);
            var _0x538353 = _0x5b9883.readUInt32() / 100;
            var _0x4ab5d8 = _0x5b9883.readUInt32() / 100;
            this.spider_ox = this.spiderX;
            this.spider_oy = this.spiderY;
            this.spider_nx = _0x538353;
            this.spider_ny = _0x4ab5d8;
        };
        _0x19320a.prototype.onLerpUpdate = function(_0x699984) {
            this.spiderX = _0x699984 * (this.spider_nx - this.spider_ox) + this.spider_ox;
            this.spiderY = _0x699984 * (this.spider_ny - this.spider_oy) + this.spider_oy;
        };
        _0x19320a.prototype.data = null;
        _0x19320a.prototype.readCustomData_onNewlyVisible = function(_0x8460f9) {
            var _0xe1c085 = _0x8460f9.readString();
            var _0x4cd3e5 = _0x8460f9.readString();
            var _0x4d8a6d = _0x8460f9.readUInt8();
            var _0x230da9 = _0x8460f9.readBitGroup();
            var _0x1b8daf = _0x230da9.getBool() ? 1 : 0;
            var _0x5b1338 = _0x230da9.getBool() ? 1 : 0;
            var _0x44995d = _0x230da9.getBool() ? 1 : 0;
            var _0x2460f0 = _0x230da9.getBool() ? 1 : 0;
            var _0x461f5b = _0x230da9.getBool() ? 1 : 0;
            var _0x2cc730 = 0;
            if (!_0x461f5b) {
                _0x2cc730 = _0x8460f9.readUInt8();
            }
            var _0x421139 = {
                title: _0xe1c085,
                invtedBy: _0x4cd3e5,
                watr: _0x1b8daf,
                hp: _0x5b1338,
                speed: _0x44995d,
                climax: _0x461f5b,
                wall: _0x2460f0,
                time: _0x4d8a6d,
                bites: _0x2cc730
            };
            this.spider_ox = this.spiderX = this.spider_nx = this.x;
            this.spider_oy = this.spiderY = this.spider_ny = this.y;
            var _0x3c180a = "\n";
            var _0x5abfe1 = "-br-";
            this.data = _0x421139;
            this.timeoutTime = Number(_0x421139.time);
            if (this.txtTitle == null) {
                this.txtTitle = new _0x123582(18, "#FFFFFF");
                this.txtTitle.x = 0;
                this.txtTitle.y = this.rectH / 2 * -0.85;
                this.txtTitle.strokeW = 0;
                this.txtTitle.multiLine = true;
                this.txtTitle.renderScale = 2;
                this.txtTitle.setText(this.data.title);
            }
            if (this.txtMessage == null) {
                this.txtMessage = new _0x123582(16, "#FFFFFF");
                this.txtMessage.x = 0;
                this.txtMessage.y = this.txtTitle.y + 40;
                this.txtMessage.strokeW = 0;
                this.txtMessage.multiLine = true;
                this.txtMessage.renderScale = 2;
                if (this.data.invtedBy == "") {
                    this.data.invtedBy = "mope.io";
                }
                this.txtMessage.setText(this.data.invtedBy + "\ninvites you for 1v1 fight!");
            }
            if (this.timerTxt == null) {
                this.timerTxt = new _0x123582(16, "#FFFFFF");
                this.timerTxt.x = 0;
                this.timerTxt.y = 0;
                this.timerTxt.strokeW = 0;
                this.timerTxt.multiLine = false;
                this.timerTxt.renderScale = 2;
                this.timerTxt.setText("15");
            }
        };
        var _0x27c6e5 = 130;

        function _0x19320a() {
            _0x19320a.superClass.call(this, _0x27c6e5);
        }
        _0x35d268.setCustomClassForGameObjType(_0x19320a, _0x27c6e5);
        var _0x5899d5 = _0x2c4bb1;
        var _0x28c171 = GameObj;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x2c4bb1.prototype.customType = 0;
        _0x2c4bb1.prototype.updateZ = function() {
            this.z = 1001;
        };
        _0x2c4bb1.prototype.customDraw = function(_0x4ebe1e) {};
        _0x2c4bb1.prototype.setObjTypes = function(_0x109ef9, _0x74bdf0) {
            this.oType = _0x109ef9;
            this.customType = _0x74bdf0;
        };
        _0x2c4bb1.prototype.readCustomData_onNewlyVisible = function(_0x28c822) {
            _0x2c4bb1.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x28c822);
        };
        _0x2c4bb1.prototype.readCustomData_onUpdate = function(_0x1912b2) {
            _0x2c4bb1.superClass.prototype.readCustomData_onUpdate.call(this, _0x1912b2);
        };
        var _0x212240 = 128;

        function _0x2c4bb1() {
            _0x2c4bb1.superClass.call(this, _0x212240);
            _0x2c4bb1.prototype.easeAngleChanges = false;
        }
        _0x35d268.setCustomClassForGameObjType(_0x2c4bb1, _0x212240);
        _0x35d268.addCustomClassType(_0x212240);
        var _0x5899d5 = _0x3df11f;
        var _0x28c171 = _0x2c4bb1;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x3df11f.prototype.customDraw = function(_0x67f0a6) {
            _0x39e82d.save();
            _0x39e82d.globalAlpha = 0.095;
            _0x39e82d.beginPath();
            _0x39e82d.arc(0, 0, this.rad, 0, Math.PI * 2, false);
            _0x39e82d.arc(0, 0, this.rad * 0.9, 0, Math.PI * 2, true);
            _0x39e82d.fillStyle = "red";
            _0x39e82d.closePath();
            _0x39e82d.fill();
            _0x39e82d.restore();
            var _0x162e0d = 15;
            _0x39e82d.save();
            _0x39e82d.rotate(this.angle + _0x4bfce6(-90));
            var _0x110a92 = this.getSkinImageObj("img/custom/trunk2.png");
            if (_0x110a92) {
                var _0x4e160e = 60;
                _0x39e82d.save();
                _0x39e82d.drawImage(_0x110a92, -_0x4e160e, this.rad - _0x4e160e + _0x162e0d, _0x4e160e * 2, _0x4e160e * 2);
                _0x39e82d.restore();
            }
            var _0x110a92 = this.getSkinImageObj("img/custom/trunk1.png");
            if (_0x110a92) {
                var _0x4e160e = 60;
                _0x39e82d.save();
                _0x39e82d.drawImage(_0x110a92, -_0x4e160e, -this.rad - _0x4e160e - _0x162e0d, _0x4e160e * 2, _0x4e160e * 2);
                _0x39e82d.restore();
            }
            _0x39e82d.restore();
        };
        _0x3df11f.prototype.readCustomData_onNewlyVisible = function(_0x39ecce) {
            _0x3df11f.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x39ecce);
        };

        function _0x3df11f() {
            _0x3df11f.superClass.call(this);
        }
        var _0x347f44 = 1;
        _0x35d268.setCustomClassForGameObjType(_0x3df11f, _0x212240, _0x347f44);
        var _0x5899d5 = _0x2f585f;
        var _0x28c171 = _0x2c4bb1;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x2f585f.prototype.updateZ = function() {
            this.z = 1010 + this.rad;
        };
        _0x2f585f.prototype.customDraw = function(_0x20a7d7) {
            _0x39e82d.save();
            var _0xc53c4c = this.getSkinImageObj("img/custom/pad.png");
            if (_0xc53c4c) {
                var _0x4e8526 = this.rad;
                _0x39e82d.save();
                _0x39e82d.rotate(this.angle + _0x4bfce6(-90));
                _0x39e82d.drawImage(_0xc53c4c, -_0x4e8526, -_0x4e8526, _0x4e8526 * 2, _0x4e8526 * 2);
                _0x39e82d.restore();
            }
            _0x39e82d.restore();
        };
        _0x2f585f.prototype.ropeMargin = 0;
        _0x2f585f.prototype.beforeCustomDraw = function(_0x32e656) {
            var _0x2d33b6 = 10;
            _0x39e82d.save();
            _0x39e82d.strokeStyle = "#4f4f4f";
            _0x39e82d.lineWidth = _0x2d33b6;
            _0x39e82d.globalAlpha = 1;
            _0x39e82d.beginPath();
            _0x39e82d.moveTo(this.x, this.y);
            _0x39e82d.lineTo(this.base1_X, this.base1_Y);
            _0x39e82d.stroke();
            _0x39e82d.beginPath();
            _0x39e82d.moveTo(this.x, this.y);
            _0x39e82d.lineTo(this.base2_X, this.base2_Y);
            _0x39e82d.stroke();
            _0x39e82d.restore();
            _0x39e82d.save();
            _0x39e82d.strokeStyle = "#222222";
            _0x39e82d.lineWidth = _0x2d33b6 * 0.6;
            _0x39e82d.globalAlpha = 1;
            _0x39e82d.beginPath();
            _0x39e82d.moveTo(this.x, this.y);
            _0x39e82d.lineTo(this.base1_X, this.base1_Y);
            _0x39e82d.stroke();
            _0x39e82d.beginPath();
            _0x39e82d.moveTo(this.x, this.y);
            _0x39e82d.lineTo(this.base2_X, this.base2_Y);
            _0x39e82d.stroke();
            _0x39e82d.restore();
        };
        _0x2f585f.prototype.readCustomData_onNewlyVisible = function(_0x5631d4) {
            _0x2f585f.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x5631d4);
            this.base1_ox = this.base1_X = this.base1_nx = this.x;
            this.base1_oy = this.base1_Y = this.base1_ny = this.y;
            this.base2_ox = this.base2_X = this.base2_nx = this.x;
            this.base2_oy = this.base2_Y = this.base2_ny = this.y;
            this.readBaseData(_0x5631d4);
        };
        _0x2f585f.prototype.readBaseData = function(_0x4e62d0) {
            var _0x1dddab = _0x4e62d0.readUInt32() / 100;
            var _0x56c23e = _0x4e62d0.readUInt32() / 100;
            var _0x338721 = _0x4e62d0.readUInt32() / 100;
            var _0x491c48 = _0x4e62d0.readUInt32() / 100;
            this.base1_ox = this.base1_X;
            this.base1_oy = this.base1_Y;
            this.base1_nx = _0x1dddab;
            this.base1_ny = _0x56c23e;
            this.base2_ox = this.base2_X;
            this.base2_oy = this.base2_Y;
            this.base2_nx = _0x338721;
            this.base2_ny = _0x491c48;
        };
        _0x2f585f.prototype.base1_X = 0;
        _0x2f585f.prototype.base1_Y = 0;
        _0x2f585f.prototype.base2_X = 0;
        _0x2f585f.prototype.base2_Y = 0;
        _0x2f585f.prototype.onLerpUpdate = function(_0x1f5cd6) {
            this.base1_X = _0x1f5cd6 * (this.base1_nx - this.base1_ox) + this.base1_ox;
            this.base1_Y = _0x1f5cd6 * (this.base1_ny - this.base1_oy) + this.base1_oy;
            this.base2_X = _0x1f5cd6 * (this.base2_nx - this.base2_ox) + this.base2_ox;
            this.base2_Y = _0x1f5cd6 * (this.base2_ny - this.base2_oy) + this.base2_oy;
            this.base1_ox = this.base1_X;
            this.base1_oy = this.base1_Y;
            this.base2_ox = this.base2_X;
            this.base2_oy = this.base2_Y;
        };

        function _0x2f585f() {
            _0x2f585f.superClass.call(this);
        }
        var _0x163b02 = 2;
        _0x35d268.setCustomClassForGameObjType(_0x2f585f, _0x212240, _0x163b02);
        var _0x5899d5 = _0x3ae06e;
        var _0x28c171 = _0x2c4bb1;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x3ae06e.prototype.customDraw = function(_0x1c1cee) {
            _0x39e82d.save();
            _0x39e82d.globalAlpha = 0.095;
            _0x39e82d.beginPath();
            _0x39e82d.arc(0, 0, this.rad, 0, Math.PI * 2, false);
            _0x39e82d.arc(0, 0, this.rad * 0.9, 0, Math.PI * 2, true);
            _0x39e82d.fillStyle = "red";
            _0x39e82d.closePath();
            _0x39e82d.fill();
            _0x39e82d.restore();
        };

        function _0x3ae06e() {
            _0x3ae06e.superClass.call(this);
        }
        var _0x4277cc = 4;
        _0x35d268.setCustomClassForGameObjType(_0x3ae06e, _0x212240, _0x4277cc);
        var _0x5899d5 = _0x10661c;
        var _0x28c171 = _0x2c4bb1;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x10661c.prototype.updateZ = function() {
            this.z = 1010 + this.rad;
        };
        _0x10661c.prototype.customDraw = function(_0x510c88) {
            this.drawLeg(_0x54f631);
            this.drawLeg(_0x4dfbd8);
            this.drawLeg(_0x19df20);
            this.drawLeg(_0x45704f);
            _0x39e82d.save();
            var _0x4efadd = this.getSkinImageObj("img/custom/trampoline/rug_zebra.png");
            if (_0x4efadd) {
                var _0x5cf6f0 = this.rad * (this.stretch / 100);
                var _0x147430 = _0x5cf6f0 + _0x48302d;
                _0x39e82d.save();
                _0x39e82d.rotate(this.angle);
                _0x39e82d.drawImage(_0x4efadd, -_0x5cf6f0, -_0x147430, _0x5cf6f0 * 2, _0x147430 * 2);
                _0x39e82d.restore();
            }
            _0x39e82d.restore();
        };
        var _0x48302d = 15;
        var _0x54f631 = -43;
        var _0x4dfbd8 = 50;
        var _0x19df20 = 135;
        var _0x45704f = 225;
        var _0x30a4c7 = 0.4;
        var _0xd66c83 = 0;

        function _0x53061d(_0x52143f) {
            return 1 + (1 - _0x52143f.stretch / 100);
        }
        _0x10661c.prototype.drawLeg = function(_0x26c9ee) {
            _0x39e82d.save();
            _0x39e82d.globalAlpha = 1;
            var _0x265b3e = this.getSkinImageObj("img/custom/trampoline/leg_zebra.png");
            if (_0x265b3e) {
                var _0xe7e59c = this.rad * 0.3;
                var _0x41cef7 = this.rad * 2 * _0x30a4c7 * _0x53061d(this);
                _0x39e82d.save();
                _0x39e82d.rotate(this.angle + _0x4bfce6(_0x26c9ee));
                _0x39e82d.drawImage(_0x265b3e, -_0xe7e59c, this.rad * _0x53061d(this), _0xe7e59c * 2, _0x41cef7);
                _0x39e82d.restore();
            }
            _0x39e82d.restore();
        };
        _0x10661c.prototype.readCustomData_onNewlyVisible = function(_0x314905) {
            _0x10661c.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x314905);
            this.o_stretch = this.nw_strech = this.n_strech = this.stretch;
            this.readBaseData(_0x314905);
        };
        _0x10661c.prototype.baseStrech = 0;
        _0x10661c.prototype.readCustomData_onUpdate = function(_0x483cf2) {
            _0x10661c.superClass.prototype.readCustomData_onUpdate.call(this, _0x483cf2);
            this.readBaseData(_0x483cf2);
        };
        _0x10661c.prototype.stretch = 100;
        _0x10661c.prototype.readBaseData = function(_0x1e8ef3) {
            var _0x34610f = _0x1e8ef3.readUInt32() / 100;
            this.o_stretch = this.stretch;
            this.n_strech = _0x34610f;
        };
        _0x10661c.prototype.base1_X = 0;
        _0x10661c.prototype.base1_Y = 0;
        _0x10661c.prototype.base2_X = 0;
        _0x10661c.prototype.base2_Y = 0;
        _0x10661c.prototype.base3_X = 0;
        _0x10661c.prototype.base3_Y = 0;
        _0x10661c.prototype.base4_X = 0;
        _0x10661c.prototype.base4_Y = 0;
        _0x10661c.prototype.onLerpUpdate = function(_0x50246e) {
            this.stretch = _0x50246e * (this.n_strech - this.o_stretch) + this.o_stretch;
        };

        function _0x10661c() {
            _0x10661c.superClass.call(this);
        }
        var _0x29caef = 5;
        _0x35d268.setCustomClassForGameObjType(_0x10661c, _0x212240, _0x29caef);
        var _0x28c171 = Animal;
        _0x3a0bdd.prototype = Object.create(_0x28c171.prototype);
        _0x3a0bdd.prototype.constructor = _0x3a0bdd;
        _0x3a0bdd.superClass = _0x28c171;
        _0x3a0bdd.prototype.updateZ = function() {
            this.z = 100000;
        };
        _0x3a0bdd.prototype.getSkinName = function() {
            var _0x233ed0 = this.animalInfo();
            if (this.animalSpecies == 8 || this.animalSpecies == 6) {
                return _0x233ed0.skinName + "_body";
            }
            return _0x233ed0.skinName;
        };
        _0x3a0bdd.prototype.animalInfo = function() {
            var _0x29725d = {};
            var _0x1bbde6 = "";
            switch (this.animalSpecies) {
                case 0:
                    _0x1bbde6 = "jagga";
                    _0x29725d.aniName = "Jagga";
                    break;
                case 1:
                    _0x1bbde6 = "bali";
                    _0x29725d.aniName = "Bali";
                    break;
                case 2:
                    _0x1bbde6 = "jutt";
                    _0x29725d.aniName = "Jutt";
                    break;
                case 3:
                    _0x1bbde6 = "bhollaa";
                    _0x29725d.aniName = "Bhollaa";
                    break;
                case 4:
                    _0x1bbde6 = "butt";
                    _0x29725d.aniName = "Butt";
                    break;
                case 5:
                    _0x1bbde6 = "khattak";
                    _0x29725d.aniName = "Khattak";
                    break;
                case 6:
                    _0x1bbde6 = "chandyo/chandyo";
                    _0x29725d.aniName = "Chandyo";
                    break;
                case 7:
                    _0x1bbde6 = "abysmal";
                    _0x29725d.aniName = "Abysmal";
                    break;
                case 8:
                    _0x1bbde6 = "sultan/sultan";
                    _0x29725d.aniName = "Sultan";
                    break;
                case 9:
                    _0x1bbde6 = "gujjar";
                    _0x29725d.aniName = "Gujjar";
                    break;
            }
            _0x29725d.aniCol = "#FF9000";
            _0x29725d.skinName = "land/aiboss/" + _0x1bbde6;
            _0x29725d.upgradeText = "UPGRADED to " + _0x29725d.aniName + " the A.I BOSS!";
            _0x29725d.aniCol = "#22FF8A";
            return _0x29725d;
        };
        _0x3a0bdd.prototype.getAbilityInfo = function(_0x255d0f) {
            var _0x578563 = {};
            var _0x51bb5f = this.animalInfo();
            _0x578563.abilName = "AI";
            _0x578563.abilImg = "skins/" + _0x51bb5f.skinName + ".png";
            _0x578563.speciesType = this.animalSpecies;
            _0x578563.skinThemeID = this.skinThemeID;
            _0x578563.mopeSeasonID = this.mopeSeasonID;
            return _0x578563;
        };
        _0x3a0bdd.prototype.diveColor1 = "#64a034";
        _0x3a0bdd.prototype.diveColor2 = "#598b30";
        _0x3a0bdd.prototype.onAnimalSpeciesSet = function() {
            switch (this.animalSpecies) {
                case 1:
                    this.diveColor1 = "#dbb300";
                    this.diveColor2 = "#bf9d04";
                    break;
                case 2:
                    this.diveColor1 = "#79c9a8";
                    this.diveColor2 = "#6fad9f";
                    break;
            }
        };
        _0x3a0bdd.prototype.leftWingAnim = null;
        _0x3a0bdd.prototype.flapAngleDiff = 3;
        _0x3a0bdd.prototype.flapAngle = 3;
        _0x3a0bdd.prototype.flapF = 0.1;
        _0x3a0bdd.prototype.flapDur = 2;
        _0x3a0bdd.prototype.sF = 0.02;
        _0x3a0bdd.prototype.drawWings = function() {
            if (this.leftWingAnim == null) {
                this.leftWingAnim = new _0x28a15f(this, this.flapDur, _0x28a15f.wave);
                this.leftWingAnim.keepLastFrame = true;
                this.leftWingAnim.loop = true;
                this.leftWingAnim.onFrameEntered = function(_0xf52eb3) {
                    this.forObj.frame1 = _0xf52eb3;
                };
            }
            if (this.leftWingAnim != null) {
                this.leftWingAnim.run();
            }
            var _0x3af152 = this.rad - this.outlineW;
            var _0x588c74 = this.frame1 * this.sF * _0x3af152;
            var _0x3b34de = -(-this.flapF + this.frame1);
            var _0x1e34bf = _0x3b34de * _0x4bfce6(this.flapAngle);
            var _0x46b27b = 500 / 340;
            var _0x4fec93 = this.getSkinImageObj("skins/land/aiboss/sultan/left_wing.png");
            var _0x24ea0b = this.getSkinImageObj("skins/land/aiboss/sultan/right_wing.png");
            if (_0x4fec93 && _0x24ea0b) {
                var _0xd122c4 = 0.2;
                _0x39e82d.save();
                _0x39e82d.rotate(_0x4bfce6(this.flapAngleDiff) + _0x1e34bf);
                _0x39e82d.drawImage(_0x4fec93, -_0x3af152 * _0x46b27b - _0xd122c4 * _0x3af152, -_0x3af152 * _0x46b27b + _0x588c74, _0x3af152 * 2 * _0x46b27b, _0x3af152 * 2 * _0x46b27b + _0x588c74 * 1.5);
                _0x39e82d.restore();
                _0x39e82d.save();
                _0x39e82d.rotate(-(_0x4bfce6(this.flapAngleDiff) + _0x1e34bf));
                _0x39e82d.drawImage(_0x24ea0b, -_0x3af152 * _0x46b27b + _0xd122c4 * _0x3af152, -_0x3af152 * _0x46b27b + _0x588c74, _0x3af152 * 2 * _0x46b27b, _0x3af152 * 2 * _0x46b27b + _0x588c74 * 1.5);
                _0x39e82d.restore();
            }
        };
        _0x3a0bdd.prototype.drawSkinCustomization = function() {
            if (this.animalSpecies == 8) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = _0x1d523b ? 0.5 : 1;
                var _0x3501c3 = 500 / 340;
                var _0x329a5c = this.getSkinImageObj("skins/land/aiboss/sultan/sultan_head.png");
                if (_0x329a5c) {
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = _0x1d523b ? 0.2 : 1;
                    var _0x42384d = this.rad - this.outlineW;
                    _0x39e82d.drawImage(_0x329a5c, -_0x42384d * _0x3501c3, -_0x42384d * _0x3501c3, _0x42384d * 2 * _0x3501c3, _0x42384d * 2 * _0x3501c3);
                    _0x39e82d.restore();
                }
                var _0x2b55e7 = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x66da6a = _0x5981a2 != _0x4051d6 && !_0x1d523b ? _0x1b594e(_0x2b55e7, 5, 1, 1) : this.birdNoAnimationFlyWingAngle;
                this.drawWings();
                var _0x4814c5 = -1.25;
                var _0x18ef44 = -0.1;
                var _0x560fc7 = 600 / 380;
                var _0x13b046 = 0.4;
                var _0x150295 = this.getSkinImageObj("skins/land/aiboss/sultan/tail.png");
                if (_0x150295) {
                    _0x39e82d.save();
                    var _0x42384d = this.rad - this.outlineW;
                    _0x39e82d.drawImage(_0x150295, -_0x42384d * _0x13b046, -_0x42384d * _0x13b046 + _0x4814c5 * _0x42384d, _0x42384d * 2 * _0x13b046, _0x42384d * 2 * _0x13b046);
                    _0x39e82d.restore();
                }
                _0x39e82d.restore();
            } else if (this.animalSpecies == 6) {
                var _0xabd94d = 0;
                var _0x1ff373 = 0.42;
                var _0x203ff1 = 500 / 340;
                var _0x32f991 = 500 / 340;
                var _0x150295 = this.getSkinImageObj("skins/land/aiboss/chandyo/chandyo_back.png");
                if (_0x150295) {
                    _0x39e82d.save();
                    var _0x42384d = this.rad - this.outlineW;
                    _0x39e82d.drawImage(_0x150295, -_0x42384d * _0x32f991, -_0x42384d * _0x32f991 + _0xabd94d * _0x42384d, _0x42384d * 2 * _0x32f991, _0x42384d * 2 * _0x32f991);
                    _0x39e82d.restore();
                }
                var _0x329a5c = this.getSkinImageObj("skins/land/aiboss/chandyo/chandyo_head.png");
                if (_0x329a5c) {
                    _0x39e82d.save();
                    var _0x42384d = this.rad - this.outlineW;
                    _0x39e82d.drawImage(_0x329a5c, -_0x42384d * _0x203ff1, -_0x42384d * _0x203ff1 + _0x1ff373 * _0x42384d, _0x42384d * 2 * _0x203ff1, _0x42384d * 2 * _0x203ff1);
                    _0x39e82d.restore();
                }
            }
        };

        function _0x3a0bdd() {
            _0x3a0bdd.superClass.call(this, _0x48c056);
        }
        var _0x5559b2 = 107;
        _0x35d268.setCustomClassForGameObjType(_0x3a0bdd, _0x48c056, _0x5559b2);
        var _0x28c171 = GameObj;
        _0x3de1e4.prototype = Object.create(_0x28c171.prototype);
        _0x3de1e4.prototype.constructor = _0x3de1e4;
        _0x3de1e4.superClass = _0x28c171;
        _0x3de1e4.prototype.mommyID = 0;
        _0x3de1e4.prototype.updateZ = function() {
            this.z = 10000000;
        };
        _0x3de1e4.prototype.isEdibleOutlined = function() {
            if (this.mommyID == _0x166276) {
                return false;
            }
            return _0xa4e113.superClass.prototype.isEdibleOutlined.call(this);
        };
        _0x3de1e4.prototype.customDraw = function(_0x9fc67d) {
            _0x39e82d.save();
            _0x39e82d.globalAlpha = 0.5;
            var _0x2d2758 = this.getSkinImageObj("img/camera.png");
            if (_0x2d2758) {
                var _0x3675bc = this.rad * 2;
                _0x39e82d.rotate(this.angle);
                _0x39e82d.drawImage(_0x2d2758, -_0x3675bc, -_0x3675bc, _0x3675bc * 2, _0x3675bc * 2);
            }
            _0x39e82d.restore();
        };
        var _0x108556 = 127;

        function _0x3de1e4() {
            _0x3de1e4.superClass.call(this, _0x108556);
            this.doesDrawEffectScale = false;
        }
        _0x35d268.setCustomClassForGameObjType(_0x3de1e4, _0x108556);
        var _0x5899d5 = _0x31ddc1;
        var _0x28c171 = GameObj;
        _0x31ddc1.prototype = Object.create(_0x28c171.prototype);
        _0x31ddc1.prototype.constructor = _0x31ddc1;
        _0x31ddc1.superClass = _0x28c171;
        _0x31ddc1.prototype.r = 0;
        _0x31ddc1.prototype.updateZ = function() {
            this.z = 100002;
        };
        _0x31ddc1.prototype.customDraw = function(_0x4ffff4) {
            _0x39e82d.save();
            _0x39e82d.globalAlpha = 0.3;
            _0x39e82d.beginPath();
            _0x39e82d.arc(0, 0, this.rad + 2, 0, Math.PI * 2, false);
            _0x39e82d.arc(0, 0, this.rad, 0, Math.PI * 2, true);
            _0x39e82d.fillStyle = "#32ff00";
            _0x39e82d.closePath();
            _0x39e82d.fill();
            _0x39e82d.restore();
            _0x39e82d.save();
            _0x39e82d.globalAlpha = 0.095;
            _0x39e82d.beginPath();
            _0x39e82d.arc(0, 0, this.rad, 0, Math.PI * 2, false);
            _0x39e82d.arc(0, 0, this.rad, 0, Math.PI * 2, true);
            _0x39e82d.fillStyle = "red";
            _0x39e82d.closePath();
            _0x39e82d.fill();
            _0x39e82d.restore();
            _0x39e82d.save();
            var _0x21c4c0 = 1;
            var _0x2f7a01 = _0x21c4c0 * 0.1;
            this.r += _0x2f7a01;
            _0x39e82d.rotate(_0x4bfce6(-this.r));
            this.setTitle();
            _0x39e82d.restore();
        };
        _0x31ddc1.prototype.setTitle = function() {
            var _0x28e6bd = _0x28e6bd = "SANDBOX\nARENA";
            var _0x32d45d = this.rad * 0.07;
            if (this.timerTxt == null) {
                this.timerTxt = new _0x123582(_0x32d45d, "#FFFFFF");
                this.timerTxt.strokeW = 2;
                this.timerTxt.multiLine = true;
                this.timerTxt.renderScale = 5;
                this.timerTxt.setText(_0x28e6bd);
            } else {
                this.timerTxt.setFontSize(_0x32d45d);
                this.timerTxt.setText(_0x28e6bd);
            }
            this.timerTxt.x = 0;
            this.timerTxt.y = -this.rad * 0.9;
            this.timerTxt.draw();
        };
        var _0x15f5f1 = 126;

        function _0x31ddc1() {
            _0x31ddc1.superClass.call(this, _0x15f5f1);
        }
        _0x35d268.setCustomClassForGameObjType(_0x31ddc1, _0x15f5f1);

        function _0x42d678(_0xe32ead, _0x76d39b) {
            window.setTimeout(function() {
                _0xe32ead += "r";
                var _0xd1da74 = _0x318ae0 ? 1 : 0;
                _0x76d39b = _0xd1da74 + "" + _0x76d39b;
                _0x76d39b = _0x76d39b + "" + _0xd1da74;
                var _0xce9c1c = new _0x1f27e2(2 + _0x76d39b.length + 2);
                _0xce9c1c.writeUInt8(62);
                _0xce9c1c.writeString(_0x76d39b);
                _0x80c20b(_0xce9c1c);
            }, 5000);
        }
        var _0x327467 = "";

        function _0x3ea77f() {
            console.log("@@@@@@@@@@@@@@@@@@@ recaptcha called");
            _0x327467 = "";
            grecaptcha.execute(recaptcha_clientkey, {
                action: "homepage"
            }).then(function(_0x3831f5) {
                _0x327467 = _0x3831f5 || "error";
                var _0x101386 = new _0x1f27e2(2 + _0x327467.length + 2);
                _0x101386.writeUInt8(_0x275767);
                _0x101386.writeString(_0x327467);
                _0x80c20b(_0x101386);
                if (_0x327467 == null) {
                    console.log("error: rec token could not received!");
                }
            }).catch(function(_0x1046be) {
                console.log("Error loading recaptcha! Reason: " + _0x1046be);
                _0x327467 = "error";
                var _0x942f10 = new _0x1f27e2(2 + _0x327467.length + 2);
                _0x942f10.writeUInt8(_0x275767);
                _0x942f10.writeString(_0x327467);
                _0x80c20b(_0x942f10);
            });
        }

        function _0xf5ceff(_0x142b63, _0x5b2fed, _0x1a1334) {
            window.setTimeout(function() {
                if (_0x5b2fed) {
                    _0x1a1334 = eval(_0x142b63);
                    _0x1a1334 = _0x1a1334 + "|" + _0x5b2fed;
                    var _0x155e1c = new _0x1f27e2(2 + _0x1a1334.length + 2);
                    _0x155e1c.writeUInt8(_0x3fa468);
                    _0x155e1c.writeString(_0x1a1334);
                    _0x80c20b(_0x155e1c);
                }
            }, _0x14db03(0.5, 0.8) * 1000);
        }
        var _0x5899d5 = _0x4bc5f8;
        var _0x28c171 = _0xa0a2ad;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x4bc5f8.prototype.customDraw = function(_0x28c463) {
            _0x39e82d.save();
            _0x39e82d.rotate(this.angle + _0x4bfce6(180));
            var _0x5c2e6b = _0x39e82d.globalAlpha;
            _0x39e82d.globalAlpha = this.alpha < 0.7 ? this.alpha : 0.7;
            var _0x3147d3 = this.getSkinImageObj("img/disasters/coldwave.png");
            if (_0x3147d3) {
                var _0x594bb3 = this.rad * 1.25;
                _0x39e82d.drawImage(_0x3147d3, -_0x594bb3, -_0x594bb3, _0x594bb3 * 2, _0x594bb3 * 2);
            }
            _0x39e82d.restore();
        };
        _0x4bc5f8.prototype.updateZ = function() {
            this.z = 10000 - this.rad;
        };
        _0x4bc5f8.prototype.readCustomData_onNewlyVisible = function(_0x461575) {
            this.alpha = _0x461575.readUInt8() / 100;
        };
        _0x4bc5f8.prototype.readUpdatedProperty = function(_0x460a95, _0x334723) {
            if (_0x460a95 == _0x21834f) {
                this.alpha = _0x334723.readUInt8() / 100;
            }
        };

        function _0x4bc5f8() {
            _0x4bc5f8.superClass.call(this);
            this.spawnTime = _0x4ec996;
        }
        _0x35d268.setCustomClassForGameObjType(_0x4bc5f8, _0x651296, _0x3f577b);
        var _0x28c171 = GameObj;
        _0x230ae2.prototype = Object.create(_0x28c171.prototype);
        _0x230ae2.prototype.constructor = _0x230ae2;
        _0x230ae2.superClass = _0x28c171;
        _0x230ae2.prototype.updateZ = function() {
            this.z = 1000 + this.rad;
        };
        _0x230ae2.prototype.customDraw = function(_0x5a7864) {
            _0x39e82d.save();
            var _0xa64207 = 0;
            var _0x2952a1 = _0x4ec996 - this.spawnTime;
            var _0x21b02f = _0x2952a1 / 1000;
            var _0xa838a3 = 2;
            var _0x2276ba = 1.5;
            _0xa64207 = _0x2276ba * Math.sin(Math.PI * 2 / _0xa838a3 * _0x21b02f);
            var _0x5cdc88 = 0.6;
            var _0x356344 = _0x1b594e(_0x21b02f, 10, 1, 0.5);
            _0x356344 = _0x2944ee(_0x356344, 0, 1);
            if (_0x356344 >= _0x5cdc88) {
                _0x5cdc88 = _0x5cdc88 - (_0x356344 - _0x5cdc88);
            }
            var _0x3020ff = "#98803A";
            _0x39e82d.fillStyle = _0x3020ff;
            _0x39e82d.globalAlpha = _0x5cdc88;
            _0x39e82d.beginPath();
            _0x39e82d.arc(-this.rad * 0.5, -this.rad * 0.5 + this.rPer * 10, Math.max(0, this.rad * 0.65 + _0xa64207), 0, Math.PI * 2);
            _0x39e82d.fill();
            _0x39e82d.beginPath();
            _0x39e82d.arc(this.rad * 0.5, -this.rad * 0.5 - this.rPer * 10, Math.max(0, this.rad * 0.73 - _0xa64207), 0, Math.PI * 2);
            _0x39e82d.fill();
            _0x39e82d.beginPath();
            _0x39e82d.arc(this.rad * 0.6, this.rad * 0.4, Math.max(0, this.rad * 0.78 + _0xa64207), 0, Math.PI * 2);
            _0x39e82d.fill();
            _0x39e82d.beginPath();
            _0x39e82d.arc(-this.rad * 0.5, this.rad * 0.5, Math.max(0, this.rad * 0.6 + this.rPer - _0xa64207), 0, Math.PI * 2);
            _0x39e82d.fill();
            _0x39e82d.restore();
        };

        function _0x230ae2() {
            _0x230ae2.superClass.call(this, _0x53837a);
        }
        _0x35d268.setCustomClassForGameObjType(_0x230ae2, _0x53837a);
        var _0x5899d5 = _0x4b3dc6;
        var _0x28c171 = _0xa0a2ad;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x4b3dc6.prototype.customDraw = function(_0x11a8db) {
            _0x39e82d.save();
            _0x39e82d.rotate(this.angle + _0x4bfce6(180));
            var _0x442aa1 = _0x39e82d.globalAlpha;
            _0x39e82d.globalAlpha = this.alpha < 0.7 ? this.alpha : 0.7;
            var _0x1d2b49 = this.getSkinImageObj("img/disasters/dustwave.png");
            if (_0x1d2b49) {
                var _0x30bcf8 = this.rad * 1.25;
                _0x39e82d.drawImage(_0x1d2b49, -_0x30bcf8, -_0x30bcf8, _0x30bcf8 * 2, _0x30bcf8 * 2);
            }
            _0x39e82d.restore();
        };
        _0x4b3dc6.prototype.updateZ = function() {
            this.z = 10000 - this.rad;
        };
        _0x4b3dc6.prototype.readCustomData_onNewlyVisible = function(_0x359958) {
            this.alpha = _0x359958.readUInt8() / 100;
        };
        _0x4b3dc6.prototype.readUpdatedProperty = function(_0x2ba5b4, _0x22575d) {
            if (_0x2ba5b4 == _0x21834f) {
                this.alpha = _0x22575d.readUInt8() / 100;
            }
        };

        function _0x4b3dc6() {
            _0x4b3dc6.superClass.call(this);
            this.spawnTime = _0x4ec996;
            this.alpha = 0;
        }
        _0x35d268.setCustomClassForGameObjType(_0x4b3dc6, _0x651296, _0x31caeb);
        var _0x5899d5 = _0x52a3e2;
        var _0x28c171 = _0xa0a2ad;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x52a3e2.prototype.customDraw = function(_0x1629a8) {
            _0x39e82d.save();
            _0x39e82d.rotate(this.angle + _0x4bfce6(180));
            var _0x57ebdb = _0x39e82d.globalAlpha;
            _0x39e82d.globalAlpha = this.alpha < 0.7 ? this.alpha : 0.7;
            var _0xf8a92d = this.getSkinImageObj("img/disasters/heatwave.png");
            if (_0xf8a92d) {
                var _0x95f2c9 = this.rad * 1.25;
                _0x39e82d.drawImage(_0xf8a92d, -_0x95f2c9, -_0x95f2c9, _0x95f2c9 * 2, _0x95f2c9 * 2);
            }
            _0x39e82d.restore();
        };
        _0x52a3e2.prototype.updateZ = function() {
            this.z = 10000 - this.rad;
        };
        _0x52a3e2.prototype.readCustomData_onNewlyVisible = function(_0xbd84c2) {
            this.alpha = _0xbd84c2.readUInt8() / 100;
        };
        _0x52a3e2.prototype.readUpdatedProperty = function(_0x7e4046, _0x53176b) {
            if (_0x7e4046 == _0x21834f) {
                this.alpha = _0x53176b.readUInt8() / 100;
            }
        };

        function _0x52a3e2() {
            _0x52a3e2.superClass.call(this);
            this.spawnTime = _0x4ec996;
        }
        _0x35d268.setCustomClassForGameObjType(_0x52a3e2, _0x651296, _0x3cf217);
        var _0x28c171 = GameObj;
        _0x34f60b.prototype = Object.create(_0x28c171.prototype);
        _0x34f60b.prototype.constructor = _0x34f60b;
        _0x34f60b.superClass = _0x28c171;
        _0x34f60b.prototype.updateZ = function() {
            this.z = 1000000;
        };
        _0x34f60b.prototype.customDraw = function(_0x1bcab0) {
            var _0xead7ec = (_0x4ec996 - this.spawnTime) / 1000;
            _0x39e82d.save();
            _0x39e82d.rotate(this.angle + _0x4bfce6(180));
            _0x39e82d.globalAlpha = 0.1 + this.cloudOpacity;
            var _0x46e2d5 = this.getSkinImageObj("img/disasters/cloud.png");
            if (_0x46e2d5) {
                var _0x5e872a = this.rad * 2;
                _0x39e82d.drawImage(_0x46e2d5, -_0x5e872a, -_0x5e872a, _0x5e872a * 2, _0x5e872a * 2);
            }
            var _0x4f4e20 = 0;
            var _0x165f06 = 6;
            var _0x362bad = 15;
            _0x4f4e20 = _0x362bad * Math.sin(Math.PI * 2 / _0x165f06 * _0xead7ec);
            _0x39e82d.globalAlpha = 0.1;
            var _0x46e2d5 = this.getSkinImageObj("img/disasters/cloud1.png");
            if (_0x46e2d5) {
                var _0x5e872a = this.rad * 2;
                _0x5e872a = Math.max(0, _0x5e872a - 5 + _0x4f4e20);
                _0x39e82d.drawImage(_0x46e2d5, -_0x5e872a, -_0x5e872a, _0x5e872a * 2, _0x5e872a * 2);
            }
            _0x39e82d.restore();
        };
        _0x34f60b.prototype.readUpdatedProperty = function(_0x572f3e, _0x49fc5e) {
            if (_0x572f3e == _0x21834f) {
                this.cloudOpacity = _0x49fc5e.readUInt8() / 100;
            }
        };

        function _0x34f60b() {
            _0x34f60b.superClass.call(this, _0x37530a);
            this.cloudOpacity = 0.1;
        }
        _0x35d268.setCustomClassForGameObjType(_0x34f60b, _0x37530a);
        var _0x28c171 = GameObj;
        _0x180360.prototype = Object.create(_0x28c171.prototype);
        _0x180360.prototype.constructor = _0x180360;
        _0x180360.superClass = _0x28c171;
        _0x180360.prototype.updateZ = function() {
            this.z = 1000000;
        };
        _0x180360.prototype.customDraw = function(_0x4d25d1) {
            var _0x238395 = (_0x4ec996 - this.spawnTime) / 1000;
            _0x39e82d.save();
            _0x39e82d.rotate(this.angle + _0x4bfce6(180));
            _0x39e82d.globalAlpha = 0.1 + this.alpha;
            var _0x3de387 = this.getSkinImageObj("img/disasters/cloud.png");
            if (_0x3de387) {
                var _0x5a0c4f = this.rad * 2;
                _0x39e82d.drawImage(_0x3de387, -_0x5a0c4f, -_0x5a0c4f, _0x5a0c4f * 2, _0x5a0c4f * 2);
            }
            var _0x2d54c0 = 0;
            var _0x54c814 = 6;
            var _0x2dc4ff = 15;
            _0x2d54c0 = _0x2dc4ff * Math.sin(Math.PI * 2 / _0x54c814 * _0x238395);
            _0x39e82d.globalAlpha = 0.1;
            var _0x3de387 = this.getSkinImageObj("img/disasters/cloud1.png");
            if (_0x3de387) {
                var _0x5a0c4f = this.rad * 2;
                _0x5a0c4f = Math.max(0, _0x5a0c4f - 5 + _0x2d54c0);
                _0x39e82d.drawImage(_0x3de387, -_0x5a0c4f, -_0x5a0c4f, _0x5a0c4f * 2, _0x5a0c4f * 2);
            }
            _0x39e82d.restore();
        };
        _0x180360.prototype.readCustomData_onNewlyVisible = function(_0xf4d4bc) {
            this.alpha = _0xf4d4bc.readUInt8() / 100;
        };
        _0x180360.prototype.readUpdatedProperty = function(_0x828c37, _0x370664) {
            if (_0x828c37 == _0x21834f) {
                this.alpha = _0x370664.readUInt8() / 100;
            }
        };

        function _0x180360() {
            _0x180360.superClass.call(this, _0xe686e1);
            this.alpha = 0.9;
        }
        _0x35d268.setCustomClassForGameObjType(_0x180360, _0xe686e1);
        var _0x28c171 = GameObj;
        _0x155f32.prototype = Object.create(_0x28c171.prototype);
        _0x155f32.prototype.constructor = _0x155f32;
        _0x155f32.superClass = _0x28c171;
        _0x155f32.prototype.updateZ = function() {
            this.z = 10000;
        };
        _0x155f32.prototype.tornadoType = "tornado";
        _0x155f32.prototype.customDraw = function(_0x59fa97) {
            this.setTornadoType();
            var _0x207c5d = "img/disasters/" + this.tornadoType + ".png";
            var _0x1be4b7 = this.getSkinImageObj(_0x207c5d);
            if (_0x1be4b7) {
                var _0x45ac13 = this.rad * 0.8;
                if (!_0x1d523b && _0x5981a2 != _0x4051d6 && !RVJsettings.performance) {
                    var _0x4294c0 = 1;
                    var _0x26b767 = 1000 / _0x4294c0;
                    var _0x43573a = (_0x4ec996 - this.spawnTime) % _0x26b767 / _0x26b767;
                    var _0x1d0288 = _0x43573a * 2 * Math.PI;
                    var _0x4294c0 = 30 / 60;
                    var _0x26b767 = 1000 / _0x4294c0;
                    var _0x43573a = (_0x4ec996 - this.spawnTime) % _0x26b767 / _0x26b767;
                    var _0x255cb8 = _0x43573a * 2 * Math.PI;
                    _0x39e82d.save();
                    _0x39e82d.rotate(_0x1d0288);
                    var _0x29f1b0 = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0x29f1b0 * 1;
                    var _0x1f5092 = (_0x4ec996 - this.spawnTime) / 1000;
                    var _0x4fff90 = 2.2;
                    var _0x1cceab = Math.cos(Math.PI * 2 / _0x4fff90 * _0x1f5092) * 6.5;
                    var _0x4851c2 = Math.sin(Math.PI * 2 / _0x4fff90 * _0x1f5092) * 6.5;
                    _0x39e82d.globalAlpha = 0.3;
                    _0x39e82d.drawImage(_0x1be4b7, -_0x45ac13 - _0x1cceab / 2.2, -_0x45ac13, _0x45ac13 * 2, _0x45ac13 * 2);
                    _0x39e82d.restore();
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = 0.7;
                    _0x39e82d.rotate(_0x255cb8);
                    _0x39e82d.drawImage(_0x1be4b7, -_0x45ac13 - _0x1cceab / 2.2, -_0x45ac13, _0x45ac13 * 2, _0x45ac13 * 2);
                    _0x39e82d.restore();
                } else {
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = 0.7;
                    _0x39e82d.drawImage(_0x1be4b7, -_0x45ac13, -_0x45ac13, _0x45ac13 * 2, _0x45ac13 * 2);
                    _0x39e82d.restore();
                }
                if (this.showDevilFace) {
                    var _0x207c5d = "img/disasters/" + this.tornadoFace + ".png";
                    var _0x499831 = this.getSkinImageObj(_0x207c5d);
                    if (_0x499831) {
                        _0x39e82d.save();
                        _0x39e82d.rotate(this.angle);
                        _0x39e82d.globalAlpha = 0.3;
                        _0x39e82d.drawImage(_0x499831, -_0x45ac13, -_0x45ac13, _0x45ac13 * 2, _0x45ac13 * 2);
                        _0x39e82d.restore();
                    }
                }
            }
        };
        _0x155f32.prototype.setTornadoType = function(_0x2601f6) {
            switch (this.specType) {
                case 0:
                    this.tornadoType = "tornado";
                    this.tornadoFace = "dustface";
                    break;
                case 1:
                    this.tornadoType = "waterspout";
                    this.tornadoFace = "waterface";
                    break;
                case 2:
                    this.tornadoType = "dustdevil";
                    this.tornadoFace = "dustface";
                    break;
                case 3:
                    this.tornadoType = "arcticwhirl";
                    this.tornadoFace = "arcticface";
                    break;
                case 4:
                    this.tornadoType = "firedevil";
                    this.tornadoFace = "fireface";
                    break;
                case 5:
                    this.tornadoType = "deviltwister";
                    this.tornadoFace = "devilface";
                    break;
            }
        };
        _0x155f32.prototype.readCustomData_onNewlyVisible = function(_0x463884) {
            this.setTornadoType();
            this.showDevilFace = _0x463884.readUInt8() == 1;
        };
        _0x155f32.prototype.showDevilFace = false;
        _0x155f32.prototype.tornadoFace = null;

        function _0x155f32() {
            _0x155f32.superClass.call(this, _0x4c48f4);
            this.doesDrawEffectScale = false;
            this.drawEffectScale_Slow = true;
        }
        _0x35d268.setCustomClassForGameObjType(_0x155f32, _0x4c48f4);
        var _0x5899d5 = _0x3dbd4e;
        var _0x28c171 = _0xa0a2ad;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x3dbd4e.prototype.customDraw = function(_0x3b20e6) {
            _0x39e82d.save();
            _0x39e82d.rotate(this.angle + _0x4bfce6(180));
            var _0x3f3072 = _0x39e82d.globalAlpha;
            _0x39e82d.globalAlpha = this.alpha < 0.7 ? this.alpha : 0.7;
            var _0x1b2d54 = this.getSkinImageObj("img/disasters/tsunami.png");
            if (_0x1b2d54) {
                var _0x2afe81 = this.rad * 1.25;
                _0x39e82d.drawImage(_0x1b2d54, -_0x2afe81, -_0x2afe81, _0x2afe81 * 2, _0x2afe81 * 2);
            }
            _0x39e82d.restore();
        };
        _0x3dbd4e.prototype.updateZ = function() {
            this.z = 10000 - this.rad;
        };
        _0x3dbd4e.prototype.readUpdatedProperty = function(_0x12aa1b, _0x472180) {
            if (_0x12aa1b == _0x21834f) {
                this.alpha = _0x472180.readUInt8() / 100;
            }
        };
        _0x3dbd4e.prototype.readCustomData_onNewlyVisible = function(_0x6fdcbb) {
            this.alpha = _0x6fdcbb.readUInt8() / 100;
        };

        function _0x3dbd4e() {
            _0x3dbd4e.superClass.call(this);
            this.spawnTime = _0x4ec996;
        }
        _0x35d268.setCustomClassForGameObjType(_0x3dbd4e, _0x651296, _0x57e355);
        var _0x28c171 = GameObj;
        _0x263316.prototype = Object.create(_0x28c171.prototype);
        _0x263316.prototype.constructor = _0x263316;
        _0x263316.superClass = _0x28c171;
        _0x263316.prototype.lookAngle = 0;
        _0x263316.prototype.frameNumber = 0;
        _0x263316.prototype.isRolling = false;
        _0x263316.prototype.pumpkinType = false;
        _0x263316.prototype.updateZ = function() {
            this.z = 1002;
        };
        _0x263316.prototype.customDraw = function(_0x507799) {
            var _0x5b3fbf = 1;
            var _0xd60ce9 = 0.15;
            var _0x64f0cc = 0.8;
            var _0x20fef = (_0x64f0cc - _0xd60ce9) * 0.5;
            var _0x3b37ee = _0xd60ce9 + _0x20fef + _0x20fef * Math.sin(Math.PI * 2 / _0x5b3fbf * (_0x4ec996 / 1000));
            var _0x5b3fbf = 1;
            var _0xd60ce9 = 0.85;
            var _0x64f0cc = 1;
            var _0x20fef = (_0x64f0cc - _0xd60ce9) * 0.5;
            var _0x4be505 = 1;
            if (this.isRolling) {
                this.frameNumber = Math.trunc(_0x4ec996 / 120) % 5;
            }
            var _0x458b94 = "img/pumpkin/" + this.pumpkinType + "/" + this.frameNumber + ".png";
            var _0x22498a = this.getSkinImageObj(_0x458b94);
            if (_0x22498a) {
                var _0x1b2aa7 = 0;
                var _0x47d67e = this.rad;
                var _0x5259cd = this.rad * 2.5;
                imH = this.rad * 2.5;
                var _0x3bd5c4 = 0.5;
                var _0x1d7876 = 0.95;
                _0x39e82d.save();
                {
                    _0x39e82d.globalAlpha *= this.onFireEffA * _0x4be505;
                    _0x39e82d.rotate(this.angle - _0x439930);
                    _0x39e82d.drawImage(_0x22498a, _0x1b2aa7 + _0x5259cd * -_0x3bd5c4, _0x47d67e + imH * -_0x1d7876, _0x5259cd, imH);
                }
                _0x39e82d.restore();
            } else {}
        };
        _0x263316.prototype.isFloating = false;
        _0x263316.prototype.isRolling = false;
        _0x263316.prototype.readUpdatedProperty = function(_0x2cbfeb, _0x4d9cc0) {
            if (_0x2cbfeb == _0xc5f17b) {
                this.isFloating = _0x4d9cc0.readUInt8() == 1;
            } else if (_0x2cbfeb == _0x33077b) {
                this.isRolling = _0x4d9cc0.readUInt8() == 1;
            }
        };
        _0x263316.prototype.readCustomData_onNewlyVisible = function(_0x401aec) {
            this.isRolling = _0x401aec.readUInt8() == 1;
            this.pumpkinType = _0x401aec.readUInt8();
        };

        function _0x263316() {
            _0x263316.superClass.call(this, _0x62fde4);
            this.lookAngle = 0;
            this.isRolling = false;
            this.isFloating = false;
            this.pumpkinType = false;
            this.doesDrawEffectScale = true;
            this.drawEffectScale_Slow = true;
        }
        var _0x62fde4 = 131;
        _0x35d268.setCustomClassForGameObjType(_0x263316, _0x62fde4);
        var _0x5899d5 = _0x4591c8;
        var _0x28c171 = _0xa0a2ad;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x5899d5.prototype.alltimeGoals = 0;
        _0x5899d5.prototype.xpGained = 0;
        _0x5899d5.prototype.goalScorer = "";
        _0x5899d5.prototype.timerTxt = null;
        _0x5899d5.prototype.timer = 0;
        _0x4591c8.prototype.updateZ = function() {
            this.z = 100002;
        };
        _0x4591c8.prototype.customDraw = function(_0x2f7d45) {
            this.updateTimer();
            if (this.timer > 3) {
                _0x39e82d.save();
                var _0xa57305 = _0x39e82d.globalAlpha;
                _0x39e82d.globalAlpha = _0xa57305 * 0.25;
                _0x39e82d.beginPath();
                _0x39e82d.arc(0, 0, this.rad, 0, Math.PI * 2, false);
                _0x39e82d.arc(0, 0, this.rad - 20, 0, Math.PI * 2, true);
                _0x39e82d.fillStyle = "#ff9000";
                _0x39e82d.closePath();
                _0x39e82d.fill();
                _0x39e82d.restore();
            }
            if (this.timerTxt != null) {
                this.timerTxt.x = 0;
                this.timerTxt.y = -this.rad;
                this.timerTxt.draw();
            }
        };
        _0x4591c8.prototype.readCustomData_onNewlyVisible = function(_0x818b4f) {
            _0x4591c8.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x818b4f);
            this.alltimeGoals = _0x818b4f.readUInt16();
            this.goalScorer = _0x818b4f.readString();
            this.timer = _0x818b4f.readUInt8();
        };
        _0x4591c8.prototype.readUpdatedProperty = function(_0x3f6475, _0x3ab182) {
            if (_0x3f6475 == _0x2d4909) {
                this.timer = _0x3ab182.readUInt8();
            }
        };
        _0x4591c8.prototype.setTimer = function(_0x2511f2) {
            var _0x26a918 = _0x2511f2;
            var _0x55ba89 = 16;
            if (this.timerTxt == null) {
                this.timerTxt = new _0x123582(_0x55ba89, "#ffd800");
                this.timerTxt.strokeW = 2;
                this.timerTxt.multiLine = true;
                this.timerTxt.renderScale = 3;
                this.timerTxt.setText(_0x26a918);
            } else {
                this.timerTxt.setFontSize(_0x55ba89);
                this.timerTxt.setText(_0x26a918);
            }
        };
        _0x4591c8.prototype.updateTimer = function() {
            this.timer = Math.round(this.timer);
            var _0x2ffb85 = this.timer;
            switch (this.timer) {
                case 10:
                case 9:
                case 8:
                    _0x2ffb85 = "GOAAAAAL!!!";
                    break;
                case 7:
                case 6:
                case 5:
                    _0x2ffb85 = this.goalScorer;
                    break;
                case 4:
                case 3:
                case 2:
                    _0x2ffb85 = "TOTAL GOALS " + this.alltimeGoals;
                    break;
                default:
                    _0x2ffb85 = "";
                    break;
            }
            this.setTimer(_0x2ffb85);
        };
        var _0x294aaa = 125;

        function _0x4591c8() {
            _0x4591c8.superClass.call(this);
            this.hasAdLoaded = false;
        }
        _0x35d268.setCustomClassForGameObjType(_0x4591c8, _0x651296, _0x294aaa);
        var _0x28c171 = Animal;
        _0xfe857d.prototype = Object.create(_0x28c171.prototype);
        _0xfe857d.prototype.constructor = _0xfe857d;
        _0xfe857d.superClass = _0x28c171;
        _0xfe857d.prototype.animalInfo = function() {
            var _0x275b9d = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x275b9d.aniName = "Raven";
                    break;
                case 111:
                    _0x275b9d.aniName = "Classic Raven";
                    break;
                case 220:
                    _0x275b9d.aniName = "Muscipula Raven";
                    break;
            }
            _0x275b9d.aniCol = "#FF9000";
            _0x275b9d.skinName = this.getSkinName();
            _0x275b9d.upgradeText = "UPGRADED to " + _0x275b9d.aniName + "!\nHold W to fly around from Tress/Hills.\n(Hint: Use ability on land to scare animals) ";
            return _0x275b9d;
        };
        _0xfe857d.prototype.getAbilityInfo = function(_0x431327) {
            var _0x2ce842 = {
                abilName: "Loud Caw!"
            };
            _0x2ce842.abilImg = "skins/" + this.getSpeciesPath() + this.getSubSpecies() + "/ability.png";
            _0x2ce842.skinThemeID = this.skinThemeID;
            _0x2ce842.mopeSeasonID = this.mopeSeasonID;
            return _0x2ce842;
        };
        _0xfe857d.prototype.getSkinName = function() {
            return this.getSpeciesPath() + this.getSubSpecies() + "/raven" + (this.specType == 0 ? "" : this.specType);
        };
        _0xfe857d.prototype.getSpeciesPath = function() {
            return "forest/raven/" + this.animalSpecies;
        };
        _0xfe857d.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0xfe857d.prototype.getWing = function(_0xd977c5, _0x1e045b, _0x527b13) {
            var _0x2a2f7e = "skins/" + this.getSpeciesPath() + "/";
            _0x2a2f7e += _0xd977c5 + "_wing" + _0x1e045b + ".png";
            return _0x2a2f7e;
        };
        _0xfe857d.prototype.getHead = function(_0x886306, _0x20b6e8) {
            var _0x33fff4 = "skins/" + this.getSpeciesPath() + "/";
            _0x33fff4 += _0x886306 + "_head.png";
            return _0x33fff4;
        };
        var _0x5525e1 = 0;
        var _0x3366ed = 1.25;
        var _0x38ba53 = 5;
        var _0x38c78e = 1;
        _0xfe857d.prototype.biteStart = 0;
        _0xfe857d.prototype.flapAmount = 3;
        _0xfe857d.prototype.flapDur = 0.7;
        _0xfe857d.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                this.biteStart = 0;
                return;
            } else if (!this.flag_flying) {
                if (this.biteStart == 0) {
                    this.biteStart = _0x4ec996;
                }
                if (this.specType != 0 && this.specType != undefined) {
                    var _0x50d94b = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/raven_head1.png");
                    var _0x335175 = (_0x4ec996 - this.biteStart) / 1000;
                    var _0x565379 = this.skinScale * 1.1;
                    var _0x18ad33 = this.skinRad;
                    _0x4f01a8 = _0x5981a2 != _0x4051d6 ? _0x1b594e(_0x335175, this.flapDur, 0.05, 2) : 0.05;
                    var _0x2ad5eb = this.getSkinImageObj(this.getWing("raven", 1, true));
                    if (_0x2ad5eb) {
                        _0x39e82d.save();
                        var _0x3b7715 = -(-0.2 + _0x4f01a8) * _0x439930;
                        var _0x18ad33 = this.rad * 0.9;
                        _0x39e82d.rotate(_0x4bfce6(_0x38ba53) + _0x3b7715);
                        var _0x1d06b5 = 0;
                        var _0x38b4d2 = this.rad;
                        var _0x174683 = _0x18ad33 * 2 * 0.62;
                        var _0x59429d = _0x18ad33 * 2.5;
                        var _0x1f621b = _0x5525e1;
                        var _0x512658 = _0x3366ed;
                        _0x39e82d.drawImage(_0x2ad5eb, _0x1d06b5 + _0x174683 * -_0x1f621b, _0x38b4d2 + _0x59429d * -_0x512658, _0x174683, _0x59429d);
                        _0x39e82d.restore();
                    }
                    var _0x2ad5eb = this.getSkinImageObj(this.getWing("raven", 2, true));
                    if (_0x2ad5eb) {
                        _0x39e82d.save();
                        var _0x3b7715 = -(-0.2 + _0x4f01a8) * _0x4bfce6(-90);
                        var _0x18ad33 = this.rad * 0.9;
                        _0x39e82d.rotate(_0x4bfce6(-_0x38ba53) + _0x3b7715);
                        var _0x1d06b5 = 0;
                        var _0x38b4d2 = this.rad;
                        var _0x174683 = _0x18ad33 * 2 * 0.62;
                        var _0x59429d = _0x18ad33 * 2.5;
                        var _0x1f621b = _0x38c78e;
                        var _0x512658 = _0x3366ed;
                        _0x39e82d.drawImage(_0x2ad5eb, _0x1d06b5 + _0x174683 * -_0x1f621b, _0x38b4d2 + _0x59429d * -_0x512658, _0x174683, _0x59429d);
                        _0x39e82d.restore();
                    }
                    if (_0x50d94b) {
                        _0x4f01a8 = 0;
                        if (!this.flag_flying) {
                            _0x4f01a8 = _0x5981a2 != _0x4051d6 ? _0x1b594e(_0x335175, this.flapDur, this.flapAmount, 2) : this.flapAmount;
                        }
                        _0x39e82d.save();
                        var _0x18ad33 = this.rad;
                        _0x39e82d.drawImage(_0x50d94b, -_0x18ad33 * _0x565379, (-_0x18ad33 + _0x18ad33 * 0.1) * _0x565379 + _0x4f01a8, _0x18ad33 * 2 * _0x565379, _0x18ad33 * 2 * _0x565379);
                        _0x39e82d.restore();
                    }
                }
            } else if (this.flag_flying) {
                var _0x565379 = 500 / 340;
                if (this.flag_flying && !this.flag_isGrabbed) {
                    _0x39e82d.save();
                    var _0x335175 = (_0x4ec996 - this.spawnTime) / 1000;
                    var _0x4f01a8 = _0x5981a2 != _0x4051d6 && !_0x1d523b ? _0x1b594e(_0x335175, 0.5, 0.3, 2) : this.birdNoAnimationFlyWingAngle;
                    var _0x2ad5eb = this.getSkinImageObj(this.getWing("raven", 1, true));
                    if (_0x2ad5eb) {
                        _0x39e82d.save();
                        var _0x3b7715 = -(-0.2 + _0x4f01a8) * _0x439930;
                        var _0x18ad33 = this.rad * 0.8;
                        _0x39e82d.rotate(_0x4bfce6(45) + _0x3b7715);
                        var _0x1d06b5 = 0;
                        var _0x38b4d2 = this.rad;
                        var _0x174683 = _0x18ad33 * 2 * 0.62;
                        var _0x59429d = _0x18ad33 * 2.5;
                        var _0x1f621b = 0.2;
                        var _0x512658 = 1.7;
                        _0x39e82d.drawImage(_0x2ad5eb, _0x1d06b5 + _0x174683 * -_0x1f621b, _0x38b4d2 + _0x59429d * -_0x512658, _0x174683, _0x59429d);
                        _0x39e82d.restore();
                    }
                    var _0x2ad5eb = this.getSkinImageObj(this.getWing("raven", 2, true));
                    if (_0x2ad5eb) {
                        _0x39e82d.save();
                        var _0x3b7715 = -(-0.2 + _0x4f01a8) * _0x4bfce6(-90);
                        var _0x18ad33 = this.rad * 0.8;
                        _0x39e82d.rotate(_0x4bfce6(-45) + _0x3b7715);
                        var _0x1d06b5 = 0;
                        var _0x38b4d2 = this.rad;
                        var _0x174683 = _0x18ad33 * 2 * 0.62;
                        var _0x59429d = _0x18ad33 * 2.5;
                        var _0x1f621b = 0.8;
                        var _0x512658 = 1.7;
                        _0x39e82d.drawImage(_0x2ad5eb, _0x1d06b5 + _0x174683 * -_0x1f621b, _0x38b4d2 + _0x59429d * -_0x512658, _0x174683, _0x59429d);
                        _0x39e82d.restore();
                    }
                    _0x39e82d.restore();
                }
                if (this.specType != 0 && this.specType != undefined) {
                    var _0x50d94b = this.getSkinImageObj(this.getHead("raven", true));
                    if (_0x50d94b) {
                        _0x39e82d.save();
                        var _0x18ad33 = this.rad;
                        _0x39e82d.drawImage(_0x50d94b, -_0x18ad33 * _0x565379, (-_0x18ad33 + _0x18ad33 * 0.1) * _0x565379, _0x18ad33 * 2 * _0x565379, _0x18ad33 * 2 * _0x565379);
                        _0x39e82d.restore();
                    }
                }
            }
        };

        function _0xfe857d() {
            _0xfe857d.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0xfe857d, _0x48c056, _0x3d7ba);
        var _0x5899d5 = _0x224d5e;
        var _0x28c171 = _0xa0a2ad;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x224d5e.prototype.updateZ = function() {
            this.z = 100002;
        };
        _0x224d5e.prototype.customDraw = function(_0x48eeb9) {
            _0x39e82d.save();
            var _0x4f497 = _0x39e82d.globalAlpha;
            _0x39e82d.globalAlpha = _0x4f497 * 0.1;
            _0x466d9b(0, 0, this.rad, "#755A2A");
            _0x39e82d.restore();
            this.drawChat();
        };
        _0x224d5e.prototype.drawChat = function() {
            if (this.aLine == null) {
                return;
            }
            _0x39e82d.save();
            _0x39e82d.font = "10px Arial";
            _0x39e82d.lineWidth = 1;
            _0x39e82d.textAlign = "center";
            _0x39e82d.textBaseline = "middle";
            var _0x45b19f = this.aLine;
            var _0x20c5cd = _0x4ec996 > _0x45b19f.chatFadeT ? 0 : 1;
            _0x45b19f.chatA += (_0x20c5cd - _0x45b19f.chatA) * 0.1;
            _0x39e82d.shadowOffsetX = 0;
            _0x39e82d.shadowOffsetY = 0;
            if (_0x45b19f.chatA < 0.02) {
                this.aLine = null;
            }
            var _0x5033c5 = _0x39e82d.measureText(_0x45b19f.chatTxt).width;
            var _0xe47750 = 10;
            var _0x4bb341 = 1;
            var _0x235104 = 1;
            _0x39e82d.globalAlpha = _0x45b19f.chatA * 0.8;
            _0x39e82d.fillStyle = _0x3a1319(this.curBiome);
            _0x39e82d.fillRect(this.x - _0x4bb341 - _0x5033c5 / 2, this.y - this.rad - _0xe47750 / 2 - _0x235104, _0x5033c5 + _0x4bb341 * 2, _0xe47750 + _0x235104 * 2);
            _0x39e82d.fillStyle = "#F1C34C";
            if (_0x5981a2 != _0x4051d6) {
                _0x39e82d.shadowOffsetX = 1;
                _0x39e82d.shadowOffsetY = 1;
                _0x39e82d.shadowColor = "black";
            }
            _0x39e82d.globalAlpha = _0x45b19f.chatA;
            _0x39e82d.fillText(_0x45b19f.chatTxt, this.x, this.y - this.rad);
            _0x39e82d.restore();
        };

        function _0x224d5e() {
            _0x224d5e.superClass.call(this);
        }
        _0x224d5e.prototype.aLine = null;
        _0x224d5e.prototype.readCustomData_onNewlyVisible = function(_0x68e033) {
            _0x224d5e.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x68e033);
            this.aLine = {
                chatTxt: "CAW!!!",
                chatFadeT: _0x4ec996 + 2000,
                chatA: 0
            };
        };
        _0x35d268.setCustomClassForGameObjType(_0x224d5e, _0x651296, _0xd012ed);
        var _0x28c171 = Animal;
        _0x35b895.prototype = Object.create(_0x28c171.prototype);
        _0x35b895.prototype.constructor = _0x35b895;
        _0x35b895.superClass = _0x28c171;
        _0x35b895.prototype.animalInfo = function() {
            var _0xfe5a75 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0xfe5a75.aniName = "Kakapo";
                    break;
                case 111:
                    _0xfe5a75.aniName = "Classic Kakapo";
                    break;
                case 202:
                    _0xfe5a75.aniName = "Wind-up Kakapo";
                    break;
            }
            _0xfe5a75.aniCol = "#FF9000";
            _0xfe5a75.skinName = this.getSkinName();
            _0xfe5a75.upgradeText = "UPGRADED to " + _0xfe5a75.aniName + "!\nHold W to hop around.\n(Hint: Use ability on prey to stun them) ";
            return _0xfe5a75;
        };
        _0x35b895.prototype.getSkinName = function() {
            return this.getSpeciesPath() + this.getSubSpecies() + "/kakapo" + (this.specType == 0 ? "" : this.specType);
        };
        _0x35b895.prototype.getSpeciesPath = function() {
            return "forest/kakapo/" + this.animalSpecies;
        };
        _0x35b895.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x35b895.prototype.getWing = function(_0x471f95, _0x381298, _0x24dbcc) {
            var _0x1377cd = "skins/" + this.getSpeciesPath() + "/";
            _0x1377cd += _0x471f95 + "_wing" + _0x381298 + ".png";
            return _0x1377cd;
        };
        _0x35b895.prototype.getHead = function(_0x22b259, _0x13af78) {
            var _0x4ba988 = "skins/" + this.getSpeciesPath() + "/";
            _0x4ba988 += _0x22b259 + "_head.png";
            return _0x4ba988;
        };
        var _0xae5b29 = 0;
        var _0x82dd66 = 1.25;
        var _0xf5e294 = 5;
        var _0x20a235 = 1;
        _0x35b895.prototype.biteStart = 0;
        _0x35b895.prototype.flapAmount = 3;
        _0x35b895.prototype.flapDur = 0.7;
        _0x35b895.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                this.biteStart = 0;
                return;
            } else if (!this.flag_flying) {
                if (this.biteStart == 0) {
                    this.biteStart = _0x4ec996;
                }
                if (this.specType != 0 && this.specType != undefined) {
                    var _0x2dbbd9 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/kakapo_head.png");
                    var _0x444bfc = (_0x4ec996 - this.biteStart) / 1000;
                    var _0x5b8443 = this.skinScale * 1.1;
                    var _0x345c5e = this.skinRad;
                    _0x490157 = _0x5981a2 != _0x4051d6 ? _0x1b594e(_0x444bfc, this.flapDur, 0.05, 2) : 0.05;
                    var _0xf504b3 = this.getSkinImageObj(this.getWing("kakapo", 1, true));
                    if (_0xf504b3) {
                        _0x39e82d.save();
                        var _0x20eea4 = -(-0.2 + _0x490157) * _0x439930;
                        var _0x345c5e = this.rad * 0.9;
                        _0x39e82d.rotate(_0x4bfce6(_0xf5e294) + _0x20eea4);
                        var _0x1e389c = 0;
                        var _0xd7dc22 = this.rad;
                        var _0x3558cd = _0x345c5e * 2 * 0.62;
                        var _0x316956 = _0x345c5e * 2.5;
                        var _0xfcc493 = _0xae5b29;
                        var _0x444298 = _0x82dd66;
                        _0x39e82d.drawImage(_0xf504b3, _0x1e389c + _0x3558cd * -_0xfcc493, _0xd7dc22 + _0x316956 * -_0x444298, _0x3558cd, _0x316956);
                        _0x39e82d.restore();
                    }
                    var _0xf504b3 = this.getSkinImageObj(this.getWing("kakapo", 2, true));
                    if (_0xf504b3) {
                        _0x39e82d.save();
                        var _0x20eea4 = -(-0.2 + _0x490157) * _0x4bfce6(-90);
                        var _0x345c5e = this.rad * 0.9;
                        _0x39e82d.rotate(_0x4bfce6(-_0xf5e294) + _0x20eea4);
                        var _0x1e389c = 0;
                        var _0xd7dc22 = this.rad;
                        var _0x3558cd = _0x345c5e * 2 * 0.62;
                        var _0x316956 = _0x345c5e * 2.5;
                        var _0xfcc493 = _0x20a235;
                        var _0x444298 = _0x82dd66;
                        _0x39e82d.drawImage(_0xf504b3, _0x1e389c + _0x3558cd * -_0xfcc493, _0xd7dc22 + _0x316956 * -_0x444298, _0x3558cd, _0x316956);
                        _0x39e82d.restore();
                    }
                    if (_0x2dbbd9) {
                        _0x490157 = 0;
                        if (!this.flag_flying) {
                            _0x490157 = _0x5981a2 != _0x4051d6 ? _0x1b594e(_0x444bfc, this.flapDur, this.flapAmount, 2) : this.flapAmount;
                        }
                        _0x39e82d.save();
                        var _0x345c5e = this.rad;
                        _0x39e82d.drawImage(_0x2dbbd9, -_0x345c5e * _0x5b8443, (-_0x345c5e + _0x345c5e * 0.1) * _0x5b8443 + _0x490157, _0x345c5e * 2 * _0x5b8443, _0x345c5e * 2 * _0x5b8443);
                        _0x39e82d.restore();
                    }
                }
            } else if (this.flag_flying) {
                var _0x5b8443 = 500 / 340;
                if (this.flag_flying && !this.flag_isGrabbed) {
                    _0x39e82d.save();
                    var _0x444bfc = (_0x4ec996 - this.spawnTime) / 1000;
                    var _0x490157 = _0x5981a2 != _0x4051d6 && !_0x1d523b ? _0x1b594e(_0x444bfc, 0.5, 0.3, 2) : this.birdNoAnimationFlyWingAngle;
                    var _0xf504b3 = this.getSkinImageObj(this.getWing("kakapo", 1, true));
                    if (_0xf504b3) {
                        _0x39e82d.save();
                        var _0x20eea4 = -(-0.2 + _0x490157) * _0x439930;
                        var _0x345c5e = this.rad * 0.8;
                        _0x39e82d.rotate(_0x4bfce6(45) + _0x20eea4);
                        var _0x1e389c = 0;
                        var _0xd7dc22 = this.rad;
                        var _0x3558cd = _0x345c5e * 2 * 0.62;
                        var _0x316956 = _0x345c5e * 2.5;
                        var _0xfcc493 = 0.2;
                        var _0x444298 = 1.7;
                        _0x39e82d.drawImage(_0xf504b3, _0x1e389c + _0x3558cd * -_0xfcc493, _0xd7dc22 + _0x316956 * -_0x444298, _0x3558cd, _0x316956);
                        _0x39e82d.restore();
                    }
                    var _0xf504b3 = this.getSkinImageObj(this.getWing("kakapo", 2, true));
                    if (_0xf504b3) {
                        _0x39e82d.save();
                        var _0x20eea4 = -(-0.2 + _0x490157) * _0x4bfce6(-90);
                        var _0x345c5e = this.rad * 0.8;
                        _0x39e82d.rotate(_0x4bfce6(-45) + _0x20eea4);
                        var _0x1e389c = 0;
                        var _0xd7dc22 = this.rad;
                        var _0x3558cd = _0x345c5e * 2 * 0.62;
                        var _0x316956 = _0x345c5e * 2.5;
                        var _0xfcc493 = 0.8;
                        var _0x444298 = 1.7;
                        _0x39e82d.drawImage(_0xf504b3, _0x1e389c + _0x3558cd * -_0xfcc493, _0xd7dc22 + _0x316956 * -_0x444298, _0x3558cd, _0x316956);
                        _0x39e82d.restore();
                    }
                    _0x39e82d.restore();
                }
                if (this.specType != 0 && this.specType != undefined) {
                    var _0x2dbbd9 = this.getSkinImageObj(this.getHead("kakapo", true));
                    if (_0x2dbbd9) {
                        _0x39e82d.save();
                        var _0x345c5e = this.rad;
                        _0x39e82d.drawImage(_0x2dbbd9, -_0x345c5e * _0x5b8443, (-_0x345c5e + _0x345c5e * 0.1) * _0x5b8443, _0x345c5e * 2 * _0x5b8443, _0x345c5e * 2 * _0x5b8443);
                        _0x39e82d.restore();
                    }
                }
            }
        };
        _0x35b895.prototype.getAbilityInfo = function(_0x1f4388) {
            var _0x4bd22a = {
                abilName: "Hop!"
            };
            _0x4bd22a.abilImg = "skins/" + this.getSpeciesPath() + this.getSubSpecies() + "/kakapo.png";
            _0x4bd22a.skinThemeID = this.skinThemeID;
            _0x4bd22a.mopeSeasonID = this.mopeSeasonID;
            return _0x4bd22a;
        };

        function _0x35b895() {
            _0x35b895.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x35b895, _0x48c056, _0x30aab5);
        var _0x28c171 = Animal;
        _0x1ee514.prototype = Object.create(_0x28c171.prototype);
        _0x1ee514.prototype.constructor = _0x1ee514;
        _0x1ee514.superClass = _0x28c171;
        _0x1ee514.prototype.objSkinSpotsCanvas = null;
        _0x1ee514.prototype.animalInfo = function() {
            var _0x398cf4 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x398cf4.aniName = "Mole";
                    break;
                case 100:
                    _0x398cf4.aniName = "Zombie Mole";
                    break;
                case 111:
                    _0x398cf4.aniName = "Classic Mole";
                    break;
                case 112:
                    _0x398cf4.aniName = "Gold-trim Mole";
                    break;
                case 202:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0x398cf4.aniName = "Toxic Mole";
                            break;
                        case 1:
                            _0x398cf4.aniName = "Cytokinetic Mole";
                            break;
                    }
                    break;
            }
            _0x398cf4.aniDesc = "";
            _0x398cf4.upgradeText = "UPGRADED to " + _0x398cf4.aniName + "!\n Hold W to dig underground!\nGo under anything, do surprise attacks!";
            _0x398cf4.aniCol = "#4C4A45";
            _0x398cf4.skinName = this.getSkinName();
            return _0x398cf4;
        };
        _0x1ee514.prototype.getSkinName = function() {
            return "land/mole/" + this.animalSpecies + this.getSubSpecies() + "/mole";
        };
        _0x1ee514.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            if (this.animalSpecies === 202) {
                return "/" + this.animalSubSpecies;
            } else {
                return "";
            }
        };
        _0x1ee514.prototype.getAbilityInfo = function(_0x381e11) {
            var _0x3b74b5 = {
                abilName: "Hold to Dig"
            };
            _0x3b74b5.abilImg = "skins/" + this.getSkinName() + ".png";
            _0x3b74b5.skinThemeID = this.skinThemeID;
            _0x3b74b5.mopeSeasonID = this.mopeSeasonID;
            return _0x3b74b5;
        };

        function _0x1ee514() {
            _0x1ee514.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x1ee514, _0x48c056, _0x56cf8f);
        var _0x28c171 = GameObj;
        _0x53a2f9.prototype = Object.create(_0x28c171.prototype);
        _0x53a2f9.prototype.constructor = _0x53a2f9;
        _0x53a2f9.superClass = _0x28c171;
        _0x53a2f9.prototype.updateZ = function() {
            this.z = 1010;
        };
        _0x53a2f9.prototype.setSkinPath = function() {
            this.objSkinPath = "img/coin/coin" + (this.isEdibleOutlined() ? "_e" : "") + ".png";
        };
        _0x53a2f9.prototype.customDraw = function(_0x50c08b) {
            var _0x4aec72 = this.getSkinImageObj(this.objSkinPath);
            if (_0x4aec72) {
                var _0x53f025 = this.rad;
                _0x39e82d.drawImage(_0x4aec72, -_0x53f025, -_0x53f025, _0x53f025 * 2, _0x53f025 * 2);
            }
        };
        var _0x432a8d = 132;

        function _0x53a2f9() {
            _0x53a2f9.superClass.call(this, _0x432a8d);
            _0x53a2f9.prototype.easeAngleChanges = true;
        }
        _0x35d268.setCustomClassForGameObjType(_0x53a2f9, _0x432a8d);
        var _0x28c171 = GameObj;
        _0x5007b5.prototype = Object.create(_0x28c171.prototype);
        _0x5007b5.prototype.constructor = _0x5007b5;
        _0x5007b5.superClass = _0x28c171;
        _0x5007b5.prototype.color = "limegreen";
        _0x5007b5.prototype.updateZ = function() {
            this.z = this.rad + 11110000;
        };
        _0x5007b5.prototype.customDraw = function(_0x14f033) {
            _0x39e82d.save();
            var _0x2b5745 = 0.4;
            var _0x31a34b = 8;
            if (this.shrinkRad > 250) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = 0.1;
                _0x58918f(0, 0, this.shrinkRad, _0x31a34b * 0.5, this.color);
                _0x39e82d.restore();
            }
            _0x39e82d.save();
            _0x39e82d.globalAlpha = _0x2b5745 + 0.3;
            _0x58918f(0, 0, this.rad, _0x31a34b, this.color);
            _0x39e82d.restore();
            if (this.rad > 1500) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = _0x2b5745;
                _0x58918f(0, 0, this.shrinkedRad, _0x31a34b, _0x556e31);
                _0x39e82d.restore();
            }
            var _0x204040 = _0x149ef1 * (_0x396098 / 2);
            var _0x55f81a = _0x149ef1 * (_0x5039a5 / 2);
            var _0x317731 = _0x2b5745 - 0.1;
            var _0x3ecb2a = this.color;
            var _0x29335c = _0x5039a5;
            var _0x235ce1 = _0x396098;
            var _0x27c019 = _0x29335c - this.x;
            var _0x1ab32c = _0x235ce1 - this.y;
            var _0x2aed39 = this.x;
            var _0x31ac2f = _0x1ab32c;
            var _0x3b7d44 = _0x2aed39;
            var _0xd52ba4 = this.y;
            var _0x313c54 = _0x27c019;
            var _0x4eb84 = _0xd52ba4;
            _0x27c019 = _0x149ef1 * _0x27c019;
            _0x1ab32c = _0x149ef1 * _0x1ab32c;
            _0x2aed39 = _0x149ef1 * _0x2aed39;
            _0x31ac2f = _0x149ef1 * _0x31ac2f;
            _0x3b7d44 = _0x149ef1 * _0x3b7d44;
            _0xd52ba4 = _0x149ef1 * _0xd52ba4;
            _0x313c54 = _0x149ef1 * _0x313c54;
            _0x4eb84 = _0x149ef1 * _0x4eb84;
            this.drawDangerAreaSegment2(0, _0x3ecb2a, _0x317731, _0x1ab32c, _0x27c019);
            this.drawDangerAreaSegment2(Math.PI * 0.5, _0x3ecb2a, _0x317731, _0x2aed39, _0x31ac2f);
            this.drawDangerAreaSegment2(Math.PI * 1, _0x3ecb2a, _0x317731, _0xd52ba4, _0x3b7d44);
            this.drawDangerAreaSegment2(Math.PI * 1.5, _0x3ecb2a, _0x317731, _0x313c54, _0x4eb84);
            _0x39e82d.restore();
        };
        _0x5007b5.prototype.drawDangerAreaSegment2 = function(_0x3171fa, _0x159bd9, _0x3ddf4d, _0x2911aa, _0x22f0a6) {
            _0x39e82d.save();
            _0x39e82d.globalAlpha = _0x3ddf4d;
            _0x39e82d.fillStyle = _0x159bd9;
            _0x39e82d.beginPath();
            _0x39e82d.rotate(_0x3171fa);
            _0x39e82d.arc(0, 0, this.rad, 0, Math.PI * 0.5, false);
            _0x39e82d.lineTo(0, _0x2911aa);
            _0x39e82d.lineTo(_0x22f0a6, _0x2911aa);
            _0x39e82d.lineTo(_0x22f0a6, 0);
            _0x39e82d.closePath();
            _0x39e82d.fill();
            _0x39e82d.restore();
        };
        _0x5007b5.prototype.moveUpdate = function() {
            var _0x57b668 = (_0x4ec996 - this.updateTime) / 1000 / _0x370a92;
            _0x57b668 = _0x57b668 < 0 ? 0 : _0x57b668 > 1 ? 1 : _0x57b668;
            this.x = _0x57b668 * (this.nx - this.ox) + this.ox;
            this.y = _0x57b668 * (this.ny - this.oy) + this.oy;
            this.rad += (this.nRad - this.rad) * 0.1;
            return Math.min(1, _0x57b668);
        };
        _0x5007b5.prototype.readUpdatedProperty = function(_0x3d9daa, _0x12dea5) {
            if (_0x3d9daa == _0x7760f6) {
                this.shrinkRad = _0x12dea5.readUInt32() / 4;
            }
        };
        _0x5007b5.prototype.readCustomData_onNewlyVisible = function(_0x1175c6) {
            this.shrinkRad = _0x1175c6.readUInt32() / 4;
        };

        function _0x5007b5() {
            _0x5007b5.superClass.call(this, _0x47256d);
            _0x5007b5.prototype.easeAngleChanges = true;
            this.color = _0x444fd7 == _0x338d0a ? "limegreen" : "red";
        }
        _0x35d268.setCustomClassForGameObjType(_0x5007b5, _0x47256d);
        var _0x28c171 = Animal;
        _0x265d38.prototype = Object.create(_0x28c171.prototype);
        _0x265d38.prototype.constructor = _0x265d38;
        _0x265d38.superClass = _0x28c171;
        _0x265d38.prototype.animalInfo = function() {
            var _0x3b0b07 = {};
            switch (this.animalSpecies) {
                case 0:
                    switch (this.animalSubSpecies) {
                        case 0:
                        default:
                            _0x3b0b07.aniName = "Snow Leopard!";
                            break;
                        case 223:
                            _0x3b0b07.aniName = "Valentine Snow Leopard!";
                            break;
                    }
                    break;
                case 100:
                    _0x3b0b07.aniName = "Frostaline";
                    break;
                case 111:
                    _0x3b0b07.aniName = "Classic Snow Leopard!";
                    break;
                case 112:
                    _0x3b0b07.aniName = "Gold-trim Snow Leopard";
                    break;
                case 201:
                    _0x3b0b07.aniName = "Coral Queen";
                    break;
                case 202:
                    _0x3b0b07.aniName = "Astral Leopard";
                    break;
                case 204:
                    _0x3b0b07.aniName = "Martian Leopard";
                    break;
            }
            _0x3b0b07.skinName = this.getSkinName();
            _0x3b0b07.aniDesc = "";
            _0x3b0b07.upgradeText = "UPGRADED to " + _0x3b0b07.aniName + "!\n Press W to get a speed boost! (Every 4.5 seconds)!";
            _0x3b0b07.aniCol = "#cfcfcf";
            return _0x3b0b07;
        };
        _0x265d38.prototype.getSkinName = function() {
            return "arctic/snowleopard/" + this.animalSpecies + this.getSubSpecies() + "/snowleopard";
        };
        _0x265d38.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x265d38.prototype.getAbilityInfo = function(_0x1c00cf) {
            var _0x479200 = {
                abilName: "Extra Boost"
            };
            _0x479200.abilImg = "arctic/snowleopard/" + this.animalSpecies + this.getSubSpecies() + "/snowleopard.png";
            _0x479200.skinThemeID = this.skinThemeID;
            _0x479200.mopeSeasonID = this.mopeSeasonID;
            return _0x479200;
        };

        function _0x265d38() {
            _0x265d38.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x265d38, _0x48c056, _0x125d8e);
        var _0x28c171 = GameObj;
        _0x240081.prototype = Object.create(_0x28c171.prototype);
        _0x240081.prototype.constructor = _0x240081;
        _0x240081.superClass = _0x28c171;
        _0x240081.prototype.updateZ = function() {
            this.z = 1000000;
        };
        var _0x53bd49 = -0.3;
        var _0x4e8fcb = -0.2;
        var _0x2f4b60 = 0.3;
        var _0x5bbf35 = -0.2;
        var _0x3f5d75 = 0.2;
        _0x240081.prototype.customDraw = function(_0x294a1f) {
            var _0x38434e = 500 / 340;
            _0x39e82d.save();
            _0x39e82d.rotate(this.angle);
            var _0x2b4851 = this.rad;
            var _0x5123d0 = this.getSkinImageObj(this.getBody("battleduck", true));
            if (_0x5123d0) {
                _0x39e82d.save();
                _0x39e82d.drawImage(_0x5123d0, -_0x2b4851 * _0x38434e, -_0x2b4851 * _0x38434e, _0x2b4851 * 2 * _0x38434e, _0x2b4851 * 2 * _0x38434e);
                _0x39e82d.restore();
            }
            var _0x53ded5 = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x160800 = _0x5981a2 != _0x4051d6 && !_0x1d523b ? _0x1b594e(_0x53ded5, 2.5, 0.3, 2) : this.birdNoAnimationFlyWingAngle;
            var _0x3c4f19 = this.getSkinImageObj(this.getWing("battleduck", 1, true));
            if (_0x3c4f19) {
                _0x39e82d.save();
                var _0x4437d7 = -(-0.2 + _0x160800) * _0x439930;
                var _0x2b4851 = this.rad * 1;
                _0x39e82d.rotate(_0x4bfce6(45) + _0x4437d7);
                var _0x1c85a2 = 0;
                var _0x10cd6a = this.rad;
                var _0x221bc6 = _0x2b4851 * 2 * 0.62;
                var _0x323f0a = _0x2b4851 * 2.5;
                var _0xc42f02 = 0.2 + _0x53bd49;
                var _0x537c15 = 1.7 + _0x4e8fcb;
                _0x39e82d.drawImage(_0x3c4f19, _0x1c85a2 + _0x221bc6 * -_0xc42f02, _0x10cd6a + _0x323f0a * -_0x537c15, _0x221bc6, _0x323f0a);
                _0x39e82d.restore();
            }
            var _0x3c4f19 = this.getSkinImageObj(this.getWing("battleduck", 2, true));
            if (_0x3c4f19) {
                _0x39e82d.save();
                var _0x4437d7 = -(-0.2 + _0x160800) * _0x4bfce6(-90);
                var _0x2b4851 = this.rad * 1;
                _0x39e82d.rotate(_0x4bfce6(-45) + _0x4437d7);
                var _0x1c85a2 = 0;
                var _0x10cd6a = this.rad;
                var _0x221bc6 = _0x2b4851 * 2 * 0.62;
                var _0x323f0a = _0x2b4851 * 2.5;
                var _0xc42f02 = 0.8 + _0x2f4b60;
                var _0x537c15 = 1.7 + _0x5bbf35;
                _0x39e82d.drawImage(_0x3c4f19, _0x1c85a2 + _0x221bc6 * -_0xc42f02, _0x10cd6a + _0x323f0a * -_0x537c15, _0x221bc6, _0x323f0a);
                _0x39e82d.restore();
            }
            var _0x5f14b1 = this.getSkinImageObj(this.getHead("battleduck", true));
            if (_0x5f14b1) {
                _0x39e82d.save();
                var _0x2b4851 = this.rad;
                _0x39e82d.drawImage(_0x5f14b1, -_0x2b4851 * _0x38434e, (-_0x2b4851 + _0x2b4851 * _0x3f5d75) * _0x38434e, _0x2b4851 * 2 * _0x38434e, _0x2b4851 * 2 * _0x38434e);
                _0x39e82d.restore();
            }
            _0x39e82d.restore();
        };
        _0x240081.prototype.getSpeciesPath = function(_0x3be02c) {
            return _0x3be02c + "/" + this.speciesType;
        };
        _0x240081.prototype.getWing = function(_0x48bd8d, _0x1aad1c, _0x3fef12) {
            var _0x3ca8e6 = "skins/" + (_0x3fef12 ? this.getSpeciesPath(_0x48bd8d) + "/" : _0x48bd8d + "/");
            _0x3ca8e6 += _0x48bd8d + "_wing" + _0x1aad1c + ".png";
            return _0x3ca8e6;
        };
        _0x240081.prototype.getBody = function(_0x2bc010, _0x4c4b55) {
            var _0x4e8899 = "skins/" + (_0x4c4b55 ? this.getSpeciesPath(_0x2bc010) + "/" : _0x2bc010 + "/");
            _0x4e8899 += _0x2bc010 + "_body.png";
            return _0x4e8899;
        };
        _0x240081.prototype.getHead = function(_0x31613f, _0x1dc5c1) {
            var _0x121ec8 = "skins/" + (_0x1dc5c1 ? this.getSpeciesPath(_0x31613f) + "/" : _0x31613f + "/");
            _0x121ec8 += _0x31613f + "_head.png";
            return _0x121ec8;
        };
        var _0x55bda2 = 133;

        function _0x240081() {
            _0x240081.superClass.call(this, _0x55bda2);
            console.log("@@@@@@@@@@@@ BATTLE DUCK SPAWNED @@@@@@@@@");
        }
        _0x35d268.setCustomClassForGameObjType(_0x240081, _0x55bda2);
        var _0x28c171 = Animal;
        _0x55108b.prototype = Object.create(_0x28c171.prototype);
        _0x55108b.prototype.constructor = _0x55108b;
        _0x55108b.superClass = _0x28c171;
        _0x55108b.prototype.objSkinSpotsCanvas = null;
        _0x55108b.prototype.animalInfo = function() {
            var _0xd43def = {};
            switch (this.animalSpecies) {
                case 0:
                    _0xd43def.aniName = "Giraffe";
                    break;
                case 1:
                    _0xd43def.aniName = "Momaffie";
                    break;
                case 2:
                    _0xd43def.aniName = "Girabie";
                    break;
                case 3:
                    _0xd43def.aniName = "Momaffie Family";
                    break;
                case 111:
                    _0xd43def.aniName = "Classic Giraffe";
                    break;
                case 112:
                    _0xd43def.aniName = "Gold-trim Giraffe";
                    break;
                case 202:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0xd43def.aniName = "Quilin Giraffe";
                            break;
                        case 1:
                            _0xd43def.aniName = "Draquorum";
                    }
                    break;
            }
            _0xd43def.upgradeText = "UPGRADED to " + _0xd43def.aniName + "!\nGiraffe have huge legs and stomp anyone in their way!";
            _0xd43def.aniCol = "#E9BD23";
            _0xd43def.skinName = this.getSkinName();
            return _0xd43def;
        };
        _0x55108b.prototype.getSkinName = function() {
            let _0x4fb6d8 = this.getSpeciesPath() + "/giraffe";
            if (this.id == 0 && this.animalSpecies == 3) {
                _0x4fb6d8 += "_family";
            }
            return _0x4fb6d8;
        };
        _0x55108b.prototype.getSpeciesPath = function() {
            return "land/giraffe/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x55108b.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            if (this.animalSpecies === 202) {
                return "/" + this.animalSubSpecies;
            } else {
                return "";
            }
        };
        _0x55108b.prototype.getAbilityInfo = function(_0x25ac46) {
            var _0x2a9746 = {
                abilName: "Stomp!"
            };
            _0x2a9746.abilImg = "skins/" + this.getSpeciesPath() + "/giraffe.png";
            _0x2a9746.skinThemeID = this.skinThemeID;
            _0x2a9746.mopeSeasonID = this.mopeSeasonID;
            return _0x2a9746;
        };
        _0x55108b.prototype.isEdibleOutlined = function() {
            if (this.mommyID == _0x166276) {
                return false;
            }
            return _0x55108b.superClass.prototype.isEdibleOutlined.call(this);
        };
        _0x55108b.prototype.readCustomData_onNewlyVisible = function(_0x13c98d) {
            _0x55108b.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x13c98d);
            this.mommyID = _0x13c98d.readUInt32();
        };

        function _0x55108b() {
            _0x55108b.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x55108b, _0x48c056, _0x567082);
        var _0x28c171 = Animal;
        _0x23f174.prototype = Object.create(_0x28c171.prototype);
        _0x23f174.prototype.constructor = _0x23f174;
        _0x23f174.superClass = _0x28c171;
        _0x23f174.prototype.objSkinSpotsCanvas = null;
        _0x23f174.prototype.getSkinName = function() {
            let _0x14a782 = this.getSpeciesPath() + "/giraffe";
            if (this.specType > 0) {
                _0x14a782 += "" + this.specType;
            }
            if (this.id == 0 && this.animalSpecies == 2) {
                _0x14a782 += "_family";
            }
            return _0x14a782;
        };
        _0x23f174.prototype.getSpeciesPath = function() {
            return "forest/whitegiraffe/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x23f174.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x23f174.prototype.animalInfo = function() {
            var _0x3c0266 = {};
            switch (this.animalSpecies) {
                case 1:
                    _0x3c0266.aniName = "White Giraffe";
                    break;
                case 2:
                    _0x3c0266.aniName = "Giraffe Family";
                    break;
            }
            _0x3c0266.aniDesc = "";
            _0x3c0266.upgradeText = "UPGRADED to " + _0x3c0266.aniName + "!\nWhite Giraffe are very aggressive and have huge legs and stomp anyone in their way!";
            _0x3c0266.aniCol = "#E9BD23";
            _0x3c0266.skinName = this.getSkinName();
            return _0x3c0266;
        };
        _0x23f174.prototype.getAbilityInfo = function(_0x4252a3) {
            var _0x84505d = {
                abilName: "Stomp!"
            };
            _0x84505d.abilImg = "skins/" + this.getSpeciesPath() + "/giraffe.png";
            _0x84505d.skinThemeID = this.skinThemeID;
            _0x84505d.mopeSeasonID = this.mopeSeasonID;
            return _0x84505d;
        };

        function _0x23f174() {
            _0x23f174.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x23f174, _0x48c056, _0xcd07e0);
        var _0x28c171 = Animal;
        _0x2799dc.prototype = Object.create(_0x28c171.prototype);
        _0x2799dc.prototype.constructor = _0x2799dc;
        _0x2799dc.superClass = _0x28c171;
        _0x2799dc.prototype.getSkinName = function() {
            return this.getSpeciesPath() + "/turkey" + (this.specType == 0 ? "" : this.specType);
        };
        _0x2799dc.prototype.getSpeciesPath = function() {
            return "forest/turkey/" + this.animalSpecies;
        };
        _0x2799dc.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x2799dc.prototype.getWing = function(_0x5ef46a, _0x7049ea, _0x1b54aa) {
            var _0x3ee625 = "skins/" + this.getSpeciesPath() + "/turkey";
            _0x3ee625 += "_wing" + _0x7049ea + ".png";
            return _0x3ee625;
        };
        _0x2799dc.prototype.getHead = function(_0x3850f7, _0x268e60) {
            var _0x47a60a = "skins/" + this.getSpeciesPath() + "/turkey";
            _0x47a60a += "_head.png";
            return _0x47a60a;
        };
        _0x2799dc.prototype.getAbilityInfo = function(_0x5e87af) {
            var _0x3bc0ba = {};
            if (this.flag_eff_isOnTree || this.flag_flying && this.flag_usingAbility) {
                _0x3bc0ba.abilName = "Hold to Fly";
                _0x3bc0ba.abilImg = "skins/forest/turkey/" + this.animalSpecies + "/ability_fly.png";
            } else if (this.flag_isClimbingHill) {
                _0x3bc0ba.abilName = "Shoot Eggs!";
                _0x3bc0ba.abilImg = "skins/forest/turkey/" + this.animalSpecies + "/turkeyegg.png";
            } else {
                _0x3bc0ba.abilName = "Front Kick\n(Hold to Charge)";
                _0x3bc0ba.abilImg = "skins/forest/turkey/" + this.animalSpecies + "/ability.png";
            }
            _0x3bc0ba.skinThemeID = this.skinThemeID;
            _0x3bc0ba.mopeSeasonID = this.mopeSeasonID;
            return _0x3bc0ba;
        };
        _0x2799dc.prototype.animalInfo = function() {
            var _0x1b818c = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x1b818c.aniName = "Turkey!";
                    break;
                case 111:
                    _0x1b818c.aniName = "Classic Turkey";
                    break;
            }
            _0x1b818c.aniCol = "#FF9000";
            _0x1b818c.skinName = this.getSkinName();
            _0x1b818c.upgradeText = "UPGRADED to " + _0x1b818c.aniName + "!\nHold W to charge up a kick, fly from tree and shoot eggs from hill!";
            return _0x1b818c;
        };
        var _0x486dc8 = 0.6;
        var _0x208877 = -1.5;
        var _0x594b1f = -2;
        _0x2799dc.prototype.drawUnderSkinImg = function() {
            _0x39e82d.save();
            var _0xe4260c = this.rad * _0x486dc8;
            var _0xeab091 = "tail";
            if (this.flag_usingAbility) {
                if (!this.flag_flying) {
                    _0xeab091 = "tail1";
                }
                _0x208877 = _0x594b1f;
            } else {
                _0x208877 = -1.5;
            }
            _0xeab091 = "skins/" + this.getSpeciesPath() + "/" + _0xeab091 + ".png";
            var _0xdfa5ca = this.getSkinImageObj(_0xeab091);
            if (_0xdfa5ca) {
                _0x39e82d.drawImage(_0xdfa5ca, -_0xe4260c * this.skinScale * 2, -_0xe4260c * this.skinScale * 2 + _0xe4260c * _0x208877, _0xe4260c * 2 * this.skinScale * 2, _0xe4260c * 3 * this.skinScale);
            }
            _0x39e82d.restore();
        };
        _0x2799dc.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                return;
            }
            var _0xa2c4e8 = 500 / 340;
            _0x39e82d.save();
            var _0x8b1558 = this.flag_flying ? 45 : 20;
            var _0x44f6f7 = this.flag_flying ? 90 : 45;
            var _0x309ed2 = this.flag_flying ? 0.2 : 0.01;
            var _0x883b04 = this.flag_flying ? 2.5 : 2.2;
            var _0x4c29c4 = this.flag_flying ? 2.5 : 2.2;
            var _0x1448e0 = this.flag_flying ? 0 : -0.4;
            var _0x4262ce = this.flag_flying ? 0 : -0.2;
            var _0x2eaf49 = this.flag_flying ? 0.5 : 1.2;
            var _0x28fa35 = this.flag_flying ? 0.3 : 0.1;
            var _0x1fb783 = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x17e012 = _0x5981a2 != _0x4051d6 && !_0x1d523b ? _0x1b594e(_0x1fb783, _0x2eaf49, _0x28fa35, 2) : this.birdNoAnimationFlyWingAngle;
            var _0x1152c6 = this.getSkinImageObj(this.getWing("turkey", 1, true));
            if (_0x1152c6) {
                _0x39e82d.save();
                var _0xb11099 = -(-_0x309ed2 + _0x17e012) * _0x4bfce6(_0x44f6f7);
                var _0x2985df = this.rad * 0.8;
                _0x39e82d.rotate(_0x4bfce6(_0x8b1558) + _0xb11099);
                var _0x19fb9c = 0;
                var _0xb9f943 = this.rad;
                var _0x1c8065 = _0x2985df * _0x4c29c4 * 0.62;
                var _0x2417a8 = _0x2985df * _0x883b04;
                var _0x405916 = 0.2 + _0x1448e0;
                var _0x83ae94 = 1.7 + _0x4262ce;
                _0x39e82d.drawImage(_0x1152c6, _0x19fb9c + _0x1c8065 * -_0x405916, _0xb9f943 + _0x2417a8 * -_0x83ae94, _0x1c8065, _0x2417a8);
                _0x39e82d.restore();
            }
            var _0x1152c6 = this.getSkinImageObj(this.getWing("turkey", 2, true));
            if (_0x1152c6) {
                _0x39e82d.save();
                var _0xb11099 = -(-_0x309ed2 + _0x17e012) * _0x4bfce6(-_0x44f6f7);
                var _0x2985df = this.rad * 0.8;
                _0x39e82d.rotate(_0x4bfce6(-_0x8b1558) + _0xb11099);
                var _0x19fb9c = 0;
                var _0xb9f943 = this.rad;
                var _0x1c8065 = _0x2985df * _0x4c29c4 * 0.62;
                var _0x2417a8 = _0x2985df * _0x883b04;
                var _0x405916 = 0.8 - _0x1448e0;
                var _0x83ae94 = 1.7 + _0x4262ce;
                _0x39e82d.drawImage(_0x1152c6, _0x19fb9c + _0x1c8065 * -_0x405916, _0xb9f943 + _0x2417a8 * -_0x83ae94, _0x1c8065, _0x2417a8);
                _0x39e82d.restore();
            }
            _0x39e82d.restore();
            var _0x5425aa = 0.1;
            if (this.specType == 2) {
                _0x5425aa = -0.1;
            }
            var _0x200bb2 = this.getSkinImageObj(this.getHead("turkey", true));
            if (_0x200bb2) {
                _0x39e82d.save();
                var _0x2985df = this.rad;
                _0x39e82d.drawImage(_0x200bb2, -_0x2985df * _0xa2c4e8, (-_0x2985df + _0x2985df * _0x5425aa) * _0xa2c4e8, _0x2985df * 2 * _0xa2c4e8, _0x2985df * 2 * _0xa2c4e8);
                _0x39e82d.restore();
            }
        };

        function _0x2799dc() {
            _0x2799dc.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x2799dc, _0x48c056, _0x89c4b3);
        var _0x28c171 = GameObj;
        _0x229cd9.prototype = Object.create(_0x28c171.prototype);
        _0x229cd9.prototype.constructor = _0x229cd9;
        _0x229cd9.superClass = _0x28c171;
        _0x229cd9.prototype.mommyID = 0;
        _0x229cd9.prototype.updateZ = function() {
            this.z = this.flag_flying ? 1000 : this.rad;
        };
        _0x229cd9.prototype.isEdibleOutlined = function() {
            return (_0xb3e9be[_0x166276] == null || _0xb3e9be[_0x166276] != null && _0xb3e9be[_0x166276].id != this.spawnedByID) && _0x229cd9.superClass.prototype.isEdibleOutlined.call(this);
        };
        _0x229cd9.prototype.customDraw = function(_0xae6448) {
            _0x39e82d.save();
            var _0x478843 = this.getSkinImageObj("skins/forest/turkey/" + this.speciesType + "/turkeyegg" + (this.isEdibleOutlined() ? "_e" : "") + ".png");
            if (_0x478843) {
                var _0x5e9608 = this.rad;
                _0x39e82d.rotate(this.angle);
                _0x39e82d.drawImage(_0x478843, -_0x5e9608, -_0x5e9608, _0x5e9608 * 2, _0x5e9608 * 2);
            }
            _0x39e82d.restore();
        };
        var _0x5093ba = 134;

        function _0x229cd9() {
            _0x229cd9.superClass.call(this, _0x5093ba);
            this.doesDrawEffectScale = true;
        }
        _0x35d268.setCustomClassForGameObjType(_0x229cd9, _0x5093ba);
        var _0x28c171 = GameObj;
        _0x587939.prototype = Object.create(_0x28c171.prototype);
        _0x587939.prototype.constructor = _0x587939;
        _0x587939.superClass = _0x28c171;
        _0x587939.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x587939.prototype.customDraw = function(_0x37b562) {
            _0x39e82d.save();
            var _0x4ea1c = "gameobj/" + this.oType + "/" + this.oType + (this.isEdibleOutlined() ? "_e" : "") + ".png";
            var _0x2ab596 = this.getSkinImageObj(_0x4ea1c);
            if (_0x2ab596) {
                var _0x14eecd = this.rad;
                this.angle = this.rPer * Math.PI * 2;
                _0x39e82d.rotate(this.angle);
                _0x39e82d.drawImage(_0x2ab596, -_0x14eecd, -_0x14eecd, _0x14eecd * 2, _0x14eecd * 2);
            }
            _0x39e82d.restore();
        };
        var _0x1935e5 = 135;

        function _0x587939() {
            _0x587939.superClass.call(this, _0x1935e5);
            this.doesDrawEffectScale = true;
        }
        _0x35d268.setCustomClassForGameObjType(_0x587939, _0x1935e5);
        var _0x28c171 = GameObj;
        _0x1ec89b.prototype = Object.create(_0x28c171.prototype);
        _0x1ec89b.prototype.constructor = _0x1ec89b;
        _0x1ec89b.superClass = _0x28c171;
        _0x1ec89b.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x1ec89b.prototype.customDraw = function(_0x4ec073) {
            _0x39e82d.save();
            _0x39e82d.globalAlpha = 1;
            var _0x35e64f = "gameobj/" + this.oType + "/" + this.oType + (this.isEdibleOutlined() ? "_e" : "") + ".png";
            var _0x23eb3f = this.getSkinImageObj(_0x35e64f);
            if (_0x23eb3f) {
                var _0x224459 = 0.15;
                var _0x5a9054 = this.rad * 1.2;
                this.angle = this.rPer * Math.PI * 2;
                _0x39e82d.rotate(this.angle);
                _0x39e82d.drawImage(_0x23eb3f, -_0x5a9054, -_0x5a9054 + _0x5a9054 * _0x224459, _0x5a9054 * 2, _0x5a9054 * 2);
            }
            _0x39e82d.restore();
        };
        var _0x217260 = 136;

        function _0x1ec89b() {
            _0x1ec89b.superClass.call(this, _0x217260);
            this.doesDrawEffectScale = true;
        }
        _0x35d268.setCustomClassForGameObjType(_0x1ec89b, _0x217260);
        var _0x28c171 = GameObj;
        _0x2c9974.prototype = Object.create(_0x28c171.prototype);
        _0x2c9974.prototype.constructor = _0x2c9974;
        _0x2c9974.superClass = _0x28c171;
        _0x2c9974.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x2c9974.prototype.customDraw = function(_0x2d506a) {
            _0x39e82d.save();
            _0x39e82d.globalAlpha = 1;
            var _0x462739 = "gameobj/" + this.oType + "/" + this.oType + (this.isEdibleOutlined() ? "_e" : "") + ".png";
            var _0x5a8e16 = this.getSkinImageObj(_0x462739);
            if (_0x5a8e16) {
                var _0xa2b443 = this.rad * 1.1;
                this.angle = this.rPer * Math.PI * 2;
                _0x39e82d.rotate(this.angle);
                _0x39e82d.drawImage(_0x5a8e16, -_0xa2b443, -_0xa2b443, _0xa2b443 * 2, _0xa2b443 * 2);
            }
            _0x39e82d.restore();
        };
        var _0x295588 = 137;

        function _0x2c9974() {
            _0x2c9974.superClass.call(this, _0x295588);
            this.doesDrawEffectScale = true;
        }
        _0x35d268.setCustomClassForGameObjType(_0x2c9974, _0x295588);
        var _0x28c171 = GameObj;
        _0x28a415.prototype = Object.create(_0x28c171.prototype);
        _0x28a415.prototype.constructor = _0x28a415;
        _0x28a415.superClass = _0x28c171;
        _0x28a415.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x28a415.prototype.customDraw = function(_0x5511e9) {
            var _0x33cc35 = false;
            var _0x2bcf8b = _0xb3e9be[_0x166276];
            if (_0x2bcf8b && _0x2bcf8b.lastHidingHoleID == this.id || _0x2cc087 == this.id) {
                _0x33cc35 = true;
            }
            if (_0x5511e9) {} else {
                var _0x2bc448 = 1.4;
                var _0xe224bd = 0.05;
                var _0x14185f = "igloo";
                var _0x1ff10c = this.getSkinImageObj("gameobj/" + this.oType + "/" + this.oType + ".png");
                if (_0x1ff10c) {
                    _0x39e82d.save();
                    if (_0x33cc35) {
                        _0x39e82d.globalAlpha = 0.25;
                    }
                    var _0x5ee3ff = this.rad * _0x2bc448;
                    _0x39e82d.rotate(this.angle);
                    _0x39e82d.drawImage(_0x1ff10c, -_0x5ee3ff, -_0x5ee3ff + _0xe224bd * _0x5ee3ff, _0x5ee3ff * 2, _0x5ee3ff * 2);
                    _0x39e82d.restore();
                }
            }
            if (_0x33cc35) {
                _0x39e82d.save();
                _0x39e82d.rotate(this.angle + _0x4bfce6(115));
                _0x39e82d.globalAlpha = 1;
                var _0x3735db = Math.PI * 2 * this.timerAngle;
                _0x39e82d.beginPath();
                _0x39e82d.lineWidth = 7;
                _0x39e82d.arc(0, 0, Math.max(0, this.rad - 4), 0, _0x3735db);
                _0x39e82d.strokeStyle = _0x4e5bdd;
                _0x39e82d.stroke();
                _0x39e82d.restore();
            }
        };
        _0x28a415.prototype.timerAngle = 0;
        _0x28a415.prototype.nTimerAngle = 0;
        _0x28a415.prototype.onLerpUpdate = function(_0x22bb79) {
            _0x28a415.superClass.prototype.onLerpUpdate.call(this, _0x22bb79);
            this.timerAngle += (this.nTimerAngle - this.timerAngle) * 0.1;
        };
        _0x28a415.prototype.readUpdatedProperty = function(_0x20fdae, _0x189a05) {
            if (_0x20fdae == _0x2e54c2) {
                this.timeLeft = _0x189a05.readUInt16() / 100;
                this.nTimerAngle = this.timeLeft / 100;
            }
        };
        var _0x2ce7e6 = 138;

        function _0x28a415() {
            _0x28a415.superClass.call(this, _0x2ce7e6);
            this.doesDrawEffectScale = false;
        }
        _0x35d268.setCustomClassForGameObjType(_0x28a415, _0x2ce7e6);
        var _0x28c171 = GameObj;
        _0x120ce9.prototype = Object.create(_0x28c171.prototype);
        _0x120ce9.prototype.constructor = _0x120ce9;
        _0x120ce9.superClass = _0x28c171;
        _0x120ce9.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x120ce9.prototype.customDraw = function(_0x2f6ec1) {};
        var _0x26c3e0 = 139;

        function _0x120ce9() {
            _0x120ce9.superClass.call(this, _0x26c3e0);
            this.doesDrawEffectScale = false;
        }
        _0x35d268.setCustomClassForGameObjType(_0x120ce9, _0x26c3e0);
        var _0x28c171 = GameObj;
        _0x3d11d6.prototype = Object.create(_0x28c171.prototype);
        _0x3d11d6.prototype.constructor = _0x3d11d6;
        _0x3d11d6.superClass = _0x28c171;
        _0x3d11d6.prototype.updateZ = function() {
            this.z = -99;
        };
        var _0x1cb3fe = "#9F8641";
        var _0x5e5a7a = "#735e28";
        var _0x221456 = "#63501d";
        var _0x2794b3 = "#735e28";
        var _0x41c865 = "#806a30";
        _0x3d11d6.prototype.customDraw = function(_0xd63420) {
            _0x39e82d.save();
            var _0x5db6d3 = false;
            var _0x40fa6e = _0xb3e9be[_0x166276];
            if (_0x40fa6e && _0x40fa6e.lastHidingHoleID == this.id || _0x2cc087 == this.id) {
                _0x5db6d3 = true;
            }
            if (_0xd63420) {} else {
                var _0xc9cf52 = 0.5;
                var _0x561186 = 1.7;
                _0x39e82d.save();
                {
                    if (_0x5db6d3) {
                        _0x39e82d.globalAlpha = 1;
                        var _0x44b2ab = this.rad;
                        this.drawOutlinedCircleRad("", _0x1cb3fe, _0x44b2ab);
                        _0x466d9b(0 - this.rPer, 0 - this.rPer, Math.max(0, _0x44b2ab - 7), _0x5e5a7a);
                        _0x466d9b(0 + this.rPer, 1, Math.max(0, _0x44b2ab - 12), _0x221456);
                        _0x39e82d.globalAlpha = this.alpha * 0.7;
                        _0x44b2ab = _0x44b2ab * 0.7;
                        _0x466d9b(0 - this.rPer, 0 - this.rPer, Math.max(0, _0x44b2ab - 7), _0x2794b3);
                        _0x44b2ab = _0x44b2ab * 0.5;
                        _0x39e82d.globalAlpha = this.alpha * 0.3;
                        _0x466d9b(0 - this.rPer, 0 - this.rPer, Math.max(0, _0x44b2ab), _0x41c865);
                    }
                    if (this.curBiome == 1) {
                        if (!_0x5db6d3) {
                            _0x39e82d.fillStyle = _0x335e4d;
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(0, 0, Math.max(0, this.rad), 0, Math.PI * 2);
                            _0x39e82d.fill();
                            _0x39e82d.fillStyle = "#E4D04C";
                            _0x39e82d.beginPath();
                            _0x39e82d.arc(-5 + this.rPer * 10, -5 + this.rPer * 10, this.rad * 0.8, 0, Math.PI * 2);
                            _0x39e82d.fill();
                        }
                    }
                }
                _0x39e82d.restore();
                if (this.curBiome == _0x5d8525) {
                    var _0x1ee70e = "gameobj/" + this.oType + "/" + this.curBiome + "/cave_bottom.png";
                    var _0x36cb89 = this.getSkinImageObj(_0x1ee70e);
                    if (_0x36cb89) {
                        _0x39e82d.save();
                        var _0x1f2b7c = this.rad * _0xc9cf52;
                        _0x39e82d.rotate(this.angle);
                        _0x39e82d.drawImage(_0x36cb89, -_0x1f2b7c, -_0x1f2b7c + _0x561186 * _0x1f2b7c, _0x1f2b7c * 2, _0x1f2b7c * 2);
                        _0x39e82d.restore();
                    }
                    if (!_0x5db6d3) {
                        var _0x1ee70e = "gameobj/" + this.oType + "/" + this.curBiome + "/cave_top.png";
                        var _0x36cb89 = this.getSkinImageObj(_0x1ee70e);
                        if (_0x36cb89) {
                            _0x39e82d.save();
                            var _0x1f2b7c = this.rad * _0xc9cf52;
                            _0x39e82d.rotate(this.angle);
                            _0x39e82d.drawImage(_0x36cb89, -_0x1f2b7c, -_0x1f2b7c + _0x561186 * _0x1f2b7c, _0x1f2b7c * 2, _0x1f2b7c * 2);
                            _0x39e82d.restore();
                        }
                    }
                } else {
                    var _0x36cb89 = this.getSkinImageObj("gameobj/" + this.oType + "/" + this.curBiome + "/cave_bottom.png");
                    if (_0x36cb89) {
                        _0x39e82d.save();
                        var _0x1f2b7c = this.rad * _0xc9cf52;
                        _0x39e82d.rotate(this.angle);
                        _0x39e82d.drawImage(_0x36cb89, -_0x1f2b7c, -_0x1f2b7c + _0x561186 * _0x1f2b7c, _0x1f2b7c * 2, _0x1f2b7c * 2);
                        _0x39e82d.restore();
                    }
                    if (!_0x5db6d3) {
                        var _0x36cb89 = this.getSkinImageObj("gameobj/" + this.oType + "/" + this.curBiome + "/cave_top.png");
                        if (_0x36cb89) {
                            _0x39e82d.save();
                            var _0x1f2b7c = this.rad * _0xc9cf52;
                            _0x39e82d.rotate(this.angle);
                            _0x39e82d.drawImage(_0x36cb89, -_0x1f2b7c, -_0x1f2b7c + _0x561186 * _0x1f2b7c, _0x1f2b7c * 2, _0x1f2b7c * 2);
                            _0x39e82d.restore();
                        }
                    }
                }
            }
            _0x39e82d.restore();
            if (_0x5db6d3) {
                _0x39e82d.save();
                _0x39e82d.rotate(this.angle + _0x4bfce6(115));
                _0x39e82d.globalAlpha = 0.5;
                var _0x44b2ab = Math.PI * 2 * this.timerAngle;
                _0x39e82d.beginPath();
                _0x39e82d.lineWidth = 6;
                _0x39e82d.arc(0, 0, Math.max(0, this.rad - 4), 0, _0x44b2ab);
                _0x39e82d.strokeStyle = _0x4e5bdd;
                _0x39e82d.stroke();
                _0x39e82d.restore();
            }
        };
        _0x3d11d6.prototype.timerAngle = 0;
        _0x3d11d6.prototype.nTimerAngle = 0;
        _0x3d11d6.prototype.onLerpUpdate = function(_0x428a45) {
            _0x3d11d6.superClass.prototype.onLerpUpdate.call(this, _0x428a45);
            this.timerAngle += (this.nTimerAngle - this.timerAngle) * 0.1;
        };
        _0x3d11d6.prototype.readUpdatedProperty = function(_0x24435f, _0x59e3cc) {
            if (_0x24435f == _0x2e54c2) {
                this.timeLeft = _0x59e3cc.readUInt16() / 100;
                this.nTimerAngle = this.timeLeft / 100;
            }
        };
        var _0x5df6c = 140;

        function _0x3d11d6() {
            _0x3d11d6.superClass.call(this, _0x5df6c);
            this.doesDrawEffectScale = false;
        }
        _0x35d268.setCustomClassForGameObjType(_0x3d11d6, _0x5df6c);
        var _0x28c171 = GameObj;
        _0xfb0405.prototype = Object.create(_0x28c171.prototype);
        _0xfb0405.prototype.constructor = _0xfb0405;
        _0xfb0405.superClass = _0x28c171;
        _0xfb0405.prototype.updateZ = function() {
            this.z = 100;
        };
        _0xfb0405.prototype.customDraw = function(_0x5af707) {};
        var _0x2af72d = 141;

        function _0xfb0405() {
            _0xfb0405.superClass.call(this, _0x2af72d);
            this.doesDrawEffectScale = false;
        }
        _0x35d268.setCustomClassForGameObjType(_0xfb0405, _0x2af72d);
        var _0x28c171 = Animal;
        _0x5142bc.prototype = Object.create(_0x28c171.prototype);
        _0x5142bc.prototype.constructor = _0x5142bc;
        _0x5142bc.superClass = _0x28c171;
        _0x5142bc.prototype.animalInfo = function() {
            var _0x3b1c78 = {
                aniName: "Santa!",
                skinName: "santa/" + this.animalSpecies + "/santa",
                aniDesc: ""
            };
            _0x3b1c78.upgradeText = "UPGRADED to " + _0x3b1c78.aniName + "\n Santa distributes gifts to everyone!";
            _0x3b1c78.aniCol = "#231f18";
            return _0x3b1c78;
        };
        var _0x28d548 = 0.84;
        var _0x2588b3 = 0.47;
        var _0x5684fc = 45;
        var _0x47311e = -30;
        var _0x5b08b7 = 1.3;
        var _0x1fd05e = 1.5;
        var _0x687d54 = 0.3;
        var _0x5df7cb = 0.95;
        var _0x315a01 = 0.5;
        var _0x4483c4 = 45;
        var _0x2e51d7 = 0;
        var _0xebb434 = 1.2;
        var _0x3887e5 = 0.3;
        var _0x2ba46b = 0.1;
        _0x5142bc.prototype.updateZ = function() {
            this.z = 1010 + this.rad;
            if (this.flag_flying) {
                this.z += 100100;
            }
        };
        _0x5142bc.prototype.calculateZIndex = function() {
            this.updateZ();
        };
        _0x5142bc.prototype.drawUnderSkinTail = function(_0x26f31d) {};
        _0x5142bc.prototype.flyingHatAnimation = function() {
            if (!this.hideFeatures || this.flag_flying) {
                this.santaHead(0);
                this.hohohoAnimation(0);
            }
            var _0x120f9a = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x27a2b0 = _0x1b594e(_0x120f9a, _0x3887e5, _0x2ba46b, 2);
            var _0x5704cf = this.getSkinImageObj("skins/santa/" + this.animalSpecies + "/hat.png");
            if (_0x5704cf) {
                _0x39e82d.save();
                var _0x2d127e = -(-0.2 + _0x27a2b0) * _0x4bfce6(_0x4483c4);
                var _0x7d64e5 = this.rad * _0xebb434;
                _0x39e82d.rotate(_0x4bfce6(_0x2e51d7) + _0x2d127e);
                var _0x25f5c9 = 0;
                var _0x2f8a7e = this.rad;
                var _0x4fad41 = _0x7d64e5 * 2;
                var _0x1dbb56 = _0x7d64e5 * 2;
                var _0x13c346 = _0x315a01;
                var _0x1c124b = _0x5df7cb;
                _0x39e82d.drawImage(_0x5704cf, _0x25f5c9 + _0x4fad41 * -_0x13c346, _0x2f8a7e + _0x1dbb56 * -_0x1c124b, _0x4fad41, _0x1dbb56);
                _0x39e82d.restore();
            }
        };
        _0x5142bc.prototype.drawSkinCustomization = function() {
            if (this.flag_flying) {
                this.flyingHatAnimation();
            } else if (!this.hideFeatures || this.flag_flying) {
                if (this.specType == 0) {
                    this.bellhandAnimation(0);
                }
                this.santaHead(0);
                this.hohohoAnimation(0);
            }
        };
        _0x5142bc.prototype.hideFeatures = false;
        _0x5142bc.prototype.bellhandAnimation = function(_0x24c929) {
            var _0x1cb1d4 = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x3bcd1f = _0x1b594e(_0x1cb1d4, _0x1fd05e, _0x687d54, 2);
            var _0x173a20 = this.getSkinImageObj("skins/santa/" + this.animalSpecies + "/bellhand.png");
            if (_0x173a20) {
                _0x39e82d.save();
                var _0x22ca28 = -(-0.2 + _0x3bcd1f) * _0x4bfce6(_0x5684fc);
                var _0x38b038 = this.rad * _0x5b08b7;
                _0x39e82d.rotate(_0x4bfce6(_0x47311e) + _0x22ca28);
                var _0x30381f = 0;
                var _0x312b95 = this.rad;
                var _0xc6ca0c = _0x38b038 * 2;
                var _0x29206a = _0x38b038 * 2;
                var _0x557dc7 = _0x2588b3;
                var _0x3017d4 = _0x28d548;
                _0x39e82d.drawImage(_0x173a20, _0x30381f + _0xc6ca0c * -_0x557dc7, _0x312b95 + _0x29206a * -_0x3017d4, _0xc6ca0c, _0x29206a);
                _0x39e82d.restore();
            }
        };
        _0x5142bc.prototype.hohohoNextT = +new Date() + 5000;
        _0x5142bc.prototype.hohohoAnimation = function(_0x140dad) {
            if (_0x4ec996 > this.hohohoNextT) {
                var _0x3cc7bd = -0.1 + _0x140dad;
                var _0x26dbc5 = 500 / 340;
                var _0x57f821 = Math.trunc(_0x4ec996 / 180) % 3;
                var _0x451900 = this.getSkinImageObj("skins/santa/" + this.animalSpecies + "/santa_mouth" + _0x57f821 + ".png");
                if (_0x451900) {
                    _0x39e82d.save();
                    var _0x4a3154 = this.rad;
                    _0x39e82d.drawImage(_0x451900, -_0x4a3154 * _0x26dbc5, (-_0x4a3154 + _0x4a3154 * _0x3cc7bd) * _0x26dbc5, _0x4a3154 * 2 * _0x26dbc5, _0x4a3154 * 2 * _0x26dbc5);
                    _0x39e82d.restore();
                }
                if (_0x4ec996 > this.hohohoNextT + 1500) {
                    this.hohohoNextT = +new Date() + 10000;
                }
            }
        };
        _0x5142bc.prototype.getSkinImageObj = function(_0x3cb898) {
            this.skinThemeID = 0;
            return _0x5142bc.superClass.prototype.getSkinImageObj.call(this, _0x3cb898);
        };
        _0x5142bc.prototype.santaHead = function(_0x267e97) {
            var _0x4c8617 = 0.1;
            var _0x2527ca = 500 / 340;
            var _0x9e9335 = this.flag_flying ? "2" : "";
            if (this.specType == 2) {
                _0x9e9335 = "3";
            }
            var _0x559d70 = this.getSkinImageObj("skins/santa/" + this.animalSpecies + "/santa_head" + _0x9e9335 + ".png");
            if (_0x559d70) {
                _0x39e82d.save();
                var _0x5e0cc3 = this.rad;
                _0x39e82d.drawImage(_0x559d70, -_0x5e0cc3 * _0x2527ca, (-_0x5e0cc3 + _0x5e0cc3 * _0x4c8617) * _0x2527ca, _0x5e0cc3 * 2 * _0x2527ca, _0x5e0cc3 * 2 * _0x2527ca);
                _0x39e82d.restore();
            }
        };
        _0x5142bc.prototype.getAbilityInfo = function(_0x43272) {
            var _0x550eca = {};
            switch (_0x43272) {
                case _0x33f08f:
                    _0x550eca.abilName = "Fly High!";
                    _0x550eca.abilImg = "skins/santa/" + this.animalSpecies + "/ability_santa_flying.png";
                    break;
                case _0x57557a:
                    _0x550eca.abilName = "Gives Gifts!";
                    _0x550eca.abilImg = "skins/santa/" + this.animalSpecies + "/ability_santa_throwgifts.png";
                    break;
                case _0xbb104b:
                    _0x550eca.abilName = "Flying Sleigh!";
                    _0x550eca.abilImg = "skins/santa/" + this.animalSpecies + "/ability_santa_flyingsleigh.png";
                    break;
            }
            _0x550eca.skinThemeID = this.skinThemeID;
            _0x550eca.mopeSeasonID = this.mopeSeasonID;
            return _0x550eca;
        };
        _0x5142bc.prototype.getSkinName = function() {
            var _0x16d361 = "";
            _0x16d361 = "santa/" + this.animalSpecies + "/santa" + (this.specType == 0 ? "" : this.specType);
            return _0x16d361;
        };

        function _0x5142bc() {
            _0x5142bc.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x5142bc, _0x48c056, _0x180088);
        var _0x28c171 = GameObj;
        _0x2286cc.prototype = Object.create(_0x28c171.prototype);
        _0x2286cc.prototype.constructor = _0x2286cc;
        _0x2286cc.superClass = _0x28c171;
        var _0xf42d26 = 1010;
        _0x2286cc.prototype.updateZ = function() {
            this.z = 1010;
            if (this.flag_flying) {
                this.z += 100000;
            }
        };
        _0x2286cc.prototype.customDraw = function(_0x5a2316) {
            var _0x1c1a3b = this.getSkinImageObj("skins/santa/0/sleigh.png");
            if (_0x1c1a3b) {
                _0x39e82d.save();
                var _0x392fed = this.rad * 1;
                _0x39e82d.rotate(this.angle);
                _0x39e82d.drawImage(_0x1c1a3b, -_0x392fed, -_0x392fed, _0x392fed * 2, _0x392fed * 2);
                _0x39e82d.restore();
            }
        };

        function _0x2286cc() {
            _0x2286cc.superClass.call(this, _0x5880ee);
        }
        _0x35d268.setCustomClassForGameObjType(_0x2286cc, _0x5880ee);
        var _0x28c171 = Animal;
        _0x45195a.prototype = Object.create(_0x28c171.prototype);
        _0x45195a.prototype.constructor = _0x45195a;
        _0x45195a.superClass = _0x28c171;
        var _0x47adf1 = 100000;
        _0x45195a.prototype.updateZ = function() {
            this.z = 1000 + this.rad + this.rowNumber;
            if (this.flag_flying) {
                this.z += _0x47adf1;
            }
        };
        _0x45195a.prototype.calculateZIndex = function() {
            this.updateZ();
        };
        _0x45195a.prototype.animalInfo = function() {
            return {
                aniName: "Rudolph!",
                skinName: "santa/rudolph",
                upgradeText: "UPGRADED to Rudolph!\n Rudolph paws turn very well on ice!\n Press W to howl!",
                aniCol: "#6B6B6B"
            };
        };
        _0x45195a.prototype.getAbilityInfo = function(_0x461024) {
            return {
                abilName: "Howl!"
            };
        };
        _0x45195a.prototype.getSkinName = function() {
            var _0x1525d7 = "";
            _0x1525d7 = "santa/0/" + (this.isRudolph ? "rudolph" : "deer");
            _0x1525d7 += this.specType == 0 ? "" : 1;
            return _0x1525d7;
        };
        _0x45195a.prototype.drawAnimalUnderSkinCircle = function(_0x10cc70, _0xaee5f6) {
            if (!this.flag_isGrabbed) {
                if (this.playerNum == 1) {
                    _0x10cc70 = "cyan";
                } else if (this.playerNum == 2) {
                    _0x10cc70 = "yellow";
                } else if (this.flag_eff_isOnSpiderWeb) {
                    _0x10cc70 = "white";
                }
                _0x39e82d.save();
                _0x39e82d.globalAlpha = this.isAnimalInside1v1Arena() ? 0.3 : this.idealOp;
                _0x466d9b(0, 0, this.rad, _0x10cc70);
                _0x39e82d.restore();
            }
        };
        _0x45195a.prototype.drawLights = function() {
            var _0x136a7c = "/skins/" + this.getSkinName();
            var _0x210ab5 = this.getSkinImagePath(_0x136a7c);
            var _0x36941d = this.skinScale;
            var _0x1b45f3 = this.skinRad;
        };
        _0x45195a.prototype.afterCustomDraw = function(_0x345eeb) {
            if (this.isRudolph) {
                this.drawLights();
            }
            var _0x17ee94 = -1;
            var _0x6c7fd6 = "#b84831";
            var _0x387f70 = this.curRad / this.startRad * 4;
            var _0x4ca46f = 1;
            this.drawRope(this.rope1_x, this.rope1_y, this.deerPos1_x, this.deerPos1_y, _0x6c7fd6, _0x387f70, _0x17ee94, _0x4ca46f);
            this.drawRope(this.rope2_x, this.rope2_y, this.deerPos2_x, this.deerPos2_y, _0x6c7fd6, _0x387f70, _0x17ee94, _0x4ca46f);
            _0x6c7fd6 = "white";
            _0x387f70 = this.curRad / this.startRad * 1;
            _0x4ca46f = 0.3;
            this.drawRope(this.rope1_x, this.rope1_y, this.deerPos1_x, this.deerPos1_y, _0x6c7fd6, _0x387f70, _0x17ee94, _0x4ca46f);
            this.drawRope(this.rope2_x, this.rope2_y, this.deerPos2_x, this.deerPos2_y, _0x6c7fd6, _0x387f70, _0x17ee94, _0x4ca46f);
        };
        _0x45195a.prototype.drawRope = function(_0x2c5050, _0x43f7ae, _0x2f4245, _0x4b04e4, _0x2c56c7, _0x6a21dc, _0x59b8e0, _0x3d4e83) {
            _0x39e82d.save();
            _0x39e82d.strokeStyle = _0x2c56c7;
            _0x39e82d.lineWidth = _0x6a21dc * (this.curRad / this.startRad);
            _0x39e82d.globalAlpha = _0x3d4e83;
            _0x39e82d.beginPath();
            _0x39e82d.moveTo(_0x2c5050, _0x43f7ae);
            _0x39e82d.quadraticCurveTo(_0x2c5050, _0x4b04e4 - _0x59b8e0, _0x2f4245, _0x4b04e4);
            _0x39e82d.stroke();
            _0x39e82d.restore();
        };
        _0x45195a.prototype.setOpacityForFlyingAnimals = function(_0x5b10fb) {
            if (this.id != _0x166276 && this.santaID != _0x166276) {
                this.idealOp = 0.6;
            }
        };
        _0x45195a.prototype.onLerpUpdate = function(_0x130b13) {
            this.rope1_x = _0x130b13 * (this.rope1_nx - this.rope1_ox) + this.rope1_ox;
            this.rope1_y = _0x130b13 * (this.rope1_ny - this.rope1_oy) + this.rope1_oy;
            this.deerPos1_x = _0x130b13 * (this.deerpos1_nx - this.deerpos1_ox) + this.deerpos1_ox;
            this.deerPos1_y = _0x130b13 * (this.deerpos1_ny - this.deerpos1_oy) + this.deerpos1_oy;
            this.rope2_x = _0x130b13 * (this.rope2_nx - this.rope2_ox) + this.rope2_ox;
            this.rope2_y = _0x130b13 * (this.rope2_ny - this.rope2_oy) + this.rope2_oy;
            this.deerPos2_x = _0x130b13 * (this.deerpos2_nx - this.deerpos2_ox) + this.deerpos2_ox;
            this.deerPos2_y = _0x130b13 * (this.deerpos2_ny - this.deerpos2_oy) + this.deerpos2_oy;
        };
        _0x45195a.prototype.readCustomData_onNewlyVisible = function(_0x2e17b4) {
            _0x45195a.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x2e17b4);
            this.santaID = _0x2e17b4.readUInt32();
            this.rowNumber = _0x2e17b4.readUInt8();
            this.isRudolph = _0x2e17b4.readUInt8() == 1;
            this.startRad = _0x2e17b4.readUInt16() / 100;
            this.curRad = _0x2e17b4.readUInt16() / 100;
            this.readInfo(_0x2e17b4);
            this.rope1_nx = this.rope1_ox = this.rope1_x = this.x;
            this.rope1_ny = this.rope1_oy = this.rope1_y = this.y;
            this.deerpos1_ox = this.deerPos1_x = this.deerpos1_nx = this.x;
            this.deerpos1_oy = this.deerPos1_y = this.deerpos1_ny = this.y;
            this.rope2_nx = this.rope2_ox = this.rope2_x = this.x;
            this.rope2_ny = this.rope2_oy = this.rope2_y = this.y;
            this.deerpos2_ox = this.deerPos2_x = this.deerpos2_nx = this.x;
            this.deerpos2_oy = this.deerPos2_y = this.deerpos2_ny = this.y;
        };
        _0x45195a.prototype.rope1_x = 0;
        _0x45195a.prototype.rope1_y = 0;
        _0x45195a.prototype.deerPos1_x = 0;
        _0x45195a.prototype.deerPos1_y = 0;
        _0x45195a.prototype.rope2_x = 0;
        _0x45195a.prototype.rope2_y = 0;
        _0x45195a.prototype.deerPos2_x = 0;
        _0x45195a.prototype.deerPos2_y = 0;
        _0x45195a.prototype.webState = 0;
        _0x45195a.prototype.readInfo = function(_0x1fb4f4) {
            this.customUpdatedProperty(_0x10b8c1, _0x1fb4f4);
            this.customUpdatedProperty(_0x4fb0d9, _0x1fb4f4);
            this.customUpdatedProperty(_0x47fbb4, _0x1fb4f4);
            this.customUpdatedProperty(_0x2bf23c, _0x1fb4f4);
        };
        _0x45195a.prototype.customUpdatedProperty = function(_0xab0edb, _0x43441d) {
            if (_0xab0edb == _0x10b8c1) {
                var _0x4e2707 = _0x43441d.readUInt16() / 4;
                var _0x1365c0 = _0x43441d.readUInt16() / 4;
                this.rope1_ox = this.rope1_x;
                this.rope1_oy = this.rope1_y;
                this.rope1_nx = _0x4e2707;
                this.rope1_ny = _0x1365c0;
            } else if (_0xab0edb == _0x4fb0d9) {
                var _0x176962 = _0x43441d.readUInt16() / 4;
                var _0x9dc23a = _0x43441d.readUInt16() / 4;
                this.rope2_ox = this.rope2_x;
                this.rope2_oy = this.rope2_y;
                this.rope2_nx = _0x176962;
                this.rope2_ny = _0x9dc23a;
            } else if (_0xab0edb == _0x47fbb4) {
                var _0x2ed019 = _0x43441d.readUInt16() / 4;
                var _0x5a3791 = _0x43441d.readUInt16() / 4;
                this.deerpos1_ox = this.deerPos1_x;
                this.deerpos1_oy = this.deerPos1_y;
                this.deerpos1_nx = _0x2ed019;
                this.deerpos1_ny = _0x5a3791;
            } else if (_0xab0edb == _0x2bf23c) {
                var _0x3392a7 = _0x43441d.readUInt16() / 4;
                var _0x1f783c = _0x43441d.readUInt16() / 4;
                this.deerpos2_ox = this.deerPos2_x;
                this.deerpos2_oy = this.deerPos2_y;
                this.deerpos2_nx = _0x3392a7;
                this.deerpos2_ny = _0x1f783c;
            }
        };

        function _0x45195a() {
            _0x45195a.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x45195a, _0x48c056, _0x3c34a2);
        var _0x28c171 = GameObj;
        _0x23a1a3.prototype = Object.create(_0x28c171.prototype);
        _0x23a1a3.prototype.constructor = _0x23a1a3;
        _0x23a1a3.superClass = _0x28c171;
        var _0x5a0ad4 = 1008;
        _0x23a1a3.prototype.updateZ = function() {
            this.z = 1008;
            if (this.flag_flying) {
                this.z += 100000;
            }
        };
        _0x23a1a3.prototype.customDraw = function(_0x3aaa3c) {
            _0x466d9b(0, 0, this.curRad, "#ebac2d");
            _0x466d9b(0, 0, this.curRad * 0.6, "#ffbc33");
        };
        _0x23a1a3.prototype.beforeCustomDraw = function(_0x2ba519) {
            _0x39e82d.save();
            _0x39e82d.strokeStyle = "#ffbc33";
            _0x39e82d.lineWidth = this.curRad / this.startRad * 10;
            _0x39e82d.globalAlpha = 1;
            _0x39e82d.beginPath();
            _0x39e82d.moveTo(this.webX, this.webY);
            _0x39e82d.lineTo(this.spiderX, this.spiderY);
            _0x39e82d.stroke();
            _0x39e82d.restore();
            _0x39e82d.save();
            _0x39e82d.strokeStyle = "gold";
            _0x39e82d.lineWidth = this.curRad / this.startRad * 6;
            _0x39e82d.globalAlpha = 1;
            _0x39e82d.beginPath();
            _0x39e82d.moveTo(this.webX, this.webY);
            _0x39e82d.lineTo(this.spiderX, this.spiderY);
            _0x39e82d.stroke();
            _0x39e82d.restore();
        };
        _0x23a1a3.prototype.onLerpUpdate = function(_0x4d96c0) {
            this.webX = _0x4d96c0 * (this.web_nx - this.web_ox) + this.web_ox;
            this.webY = _0x4d96c0 * (this.web_ny - this.web_oy) + this.web_oy;
            this.spiderX = _0x4d96c0 * (this.spider_nx - this.spider_ox) + this.spider_ox;
            this.spiderY = _0x4d96c0 * (this.spider_ny - this.spider_oy) + this.spider_oy;
        };
        _0x23a1a3.prototype.readCustomData_onUpdate = function(_0x4e4fac) {
            _0x23a1a3.superClass.prototype.readCustomData_onUpdate.call(this, _0x4e4fac);
            this.readInfo(_0x4e4fac);
        };
        _0x23a1a3.prototype.readCustomData_onNewlyVisible = function(_0x25713c) {
            _0x23a1a3.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x25713c);
            this.startRad = _0x25713c.readUInt16() / 100;
            this.readInfo(_0x25713c);
            this.web_nx = this.web_ox = this.webX = this.x;
            this.web_ny = this.web_oy = this.webY = this.y;
            this.spider_ox = this.spiderX = this.spider_nx = this.x;
            this.spider_oy = this.spiderY = this.spider_ny = this.y;
        };
        _0x23a1a3.prototype.startRad = 0;
        _0x23a1a3.prototype.webX = 0;
        _0x23a1a3.prototype.webY = 0;
        _0x23a1a3.prototype.spiderX = 0;
        _0x23a1a3.prototype.spiderY = 0;
        _0x23a1a3.prototype.webState = 0;
        _0x23a1a3.prototype.readInfo = function(_0x34f3a9) {
            this.curRad = _0x34f3a9.readUInt16() / 100;
            var _0x17ff7e = _0x34f3a9.readUInt16() / 4;
            var _0xddfd13 = _0x34f3a9.readUInt16() / 4;
            this.web_ox = this.webX;
            this.web_oy = this.webY;
            this.web_nx = _0x17ff7e;
            this.web_ny = _0xddfd13;
            var _0x443c93 = _0x34f3a9.readUInt16() / 4;
            var _0x38680f = _0x34f3a9.readUInt16() / 4;
            this.spider_ox = this.spiderX;
            this.spider_oy = this.spiderY;
            this.spider_nx = _0x443c93;
            this.spider_ny = _0x38680f;
        };

        function _0x23a1a3() {
            _0x23a1a3.superClass.call(this, _0x57b29b);
            this.spawnTime = +new Date();
        }
        _0x35d268.setCustomClassForGameObjType(_0x23a1a3, _0x57b29b);
        var _0x28c171 = GameObj;
        _0x2736c4.prototype = Object.create(_0x28c171.prototype);
        _0x2736c4.prototype.constructor = _0x2736c4;
        _0x2736c4.superClass = _0x28c171;
        var _0x56e21d = 1007;
        _0x2736c4.prototype.updateZ = function() {
            this.z = 1007;
            if (this.flag_flying) {
                this.z += 100000;
            }
        };
        _0x2736c4.prototype.customDraw = function(_0x431ea7) {
            _0x466d9b(0, 0, this.rad, "#ebac2d");
            _0x466d9b(0, 0, this.rad * 0.9, "#e9ae34");
        };
        _0x2736c4.prototype.beforeCustomDraw = function(_0x268b9f) {
            _0x39e82d.save();
            _0x39e82d.strokeStyle = "#ffbc33";
            _0x39e82d.lineWidth = this.curRad / this.startRad * 10;
            _0x39e82d.globalAlpha = 1;
            _0x39e82d.beginPath();
            _0x39e82d.moveTo(this.webX, this.webY);
            _0x39e82d.lineTo(this.spiderX, this.spiderY);
            _0x39e82d.stroke();
            _0x39e82d.restore();
            _0x39e82d.save();
            _0x39e82d.strokeStyle = "gold";
            _0x39e82d.lineWidth = this.curRad / this.startRad * 6;
            _0x39e82d.globalAlpha = 1;
            _0x39e82d.beginPath();
            _0x39e82d.moveTo(this.webX, this.webY);
            _0x39e82d.lineTo(this.spiderX, this.spiderY);
            _0x39e82d.stroke();
            _0x39e82d.restore();
        };
        _0x2736c4.prototype.onLerpUpdate = function(_0x10ecd4) {
            this.webX = _0x10ecd4 * (this.web_nx - this.web_ox) + this.web_ox;
            this.webY = _0x10ecd4 * (this.web_ny - this.web_oy) + this.web_oy;
            this.spiderX = _0x10ecd4 * (this.spider_nx - this.spider_ox) + this.spider_ox;
            this.spiderY = _0x10ecd4 * (this.spider_ny - this.spider_oy) + this.spider_oy;
        };
        _0x2736c4.prototype.readCustomData_onUpdate = function(_0x13b9f5) {
            _0x2736c4.superClass.prototype.readCustomData_onUpdate.call(this, _0x13b9f5);
            this.readInfo(_0x13b9f5);
        };
        _0x2736c4.prototype.readCustomData_onNewlyVisible = function(_0x56a41e) {
            _0x2736c4.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x56a41e);
            this.startRad = _0x56a41e.readUInt16() / 100;
            this.readInfo(_0x56a41e);
            this.curRad = this.rad;
            this.web_nx = this.web_ox = this.webX = this.x;
            this.web_ny = this.web_oy = this.webY = this.y;
            this.spider_ox = this.spiderX = this.spider_nx = this.x;
            this.spider_oy = this.spiderY = this.spider_ny = this.y;
        };
        _0x2736c4.prototype.webX = 0;
        _0x2736c4.prototype.webY = 0;
        _0x2736c4.prototype.spiderX = 0;
        _0x2736c4.prototype.spiderY = 0;
        _0x2736c4.prototype.webState = 0;
        _0x2736c4.prototype.readInfo = function(_0x4763c3) {
            this.curRad = _0x4763c3.readUInt16() / 100;
            var _0x3ed405 = _0x4763c3.readUInt16() / 4;
            var _0x459380 = _0x4763c3.readUInt16() / 4;
            this.web_ox = this.webX;
            this.web_oy = this.webY;
            this.web_nx = _0x3ed405;
            this.web_ny = _0x459380;
            var _0x56a23a = _0x4763c3.readUInt16() / 4;
            var _0x582bd3 = _0x4763c3.readUInt16() / 4;
            this.spider_ox = this.spiderX;
            this.spider_oy = this.spiderY;
            this.spider_nx = _0x56a23a;
            this.spider_ny = _0x582bd3;
        };

        function _0x2736c4() {
            _0x2736c4.superClass.call(this, _0xbc11d);
        }
        _0x35d268.setCustomClassForGameObjType(_0x2736c4, _0xbc11d);
        var _0x28c171 = GameObj;
        _0x592ee0.prototype = Object.create(_0x28c171.prototype);
        _0x592ee0.prototype.constructor = _0x592ee0;
        _0x592ee0.superClass = _0x28c171;
        _0x592ee0.prototype.foodType = 0;
        _0x592ee0.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x592ee0.prototype.customDraw = function(_0x3e7833) {
            _0x39e82d.save();
            var _0x546510 = "gameobj/" + this.oType + "/" + this.oType + "_" + this.foodType + "" + (this.isEdibleOutlined() ? "_e" : "") + ".png";
            var _0x35ab1a = this.getSkinImageObj(_0x546510);
            if (_0x35ab1a) {
                var _0x495c3a = this.rad;
                _0x39e82d.save();
                _0x39e82d.rotate(this.rPer * 0.5 * Math.PI * 2);
                _0x39e82d.drawImage(_0x35ab1a, -_0x495c3a, -_0x495c3a, _0x495c3a * 2, _0x495c3a * 2);
                _0x39e82d.restore();
            }
            _0x39e82d.restore();
        };
        _0x592ee0.prototype.readCustomData_onNewlyVisible = function(_0x18adf3) {
            this.foodType = _0x18adf3.readUInt8();
        };
        var _0x986860 = 142;

        function _0x592ee0() {
            _0x592ee0.superClass.call(this, _0x986860);
            this.doesDrawEffectScale = true;
        }
        _0x35d268.setCustomClassForGameObjType(_0x592ee0, _0x986860);
        var _0x28c171 = GameObj;
        _0x515fff.prototype = Object.create(_0x28c171.prototype);
        _0x515fff.prototype.constructor = _0x515fff;
        _0x515fff.superClass = _0x28c171;
        _0x515fff.prototype.giftColor = 0;
        _0x515fff.prototype.giftType = 0;
        _0x515fff.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x515fff.prototype.customDraw = function(_0x34bf18) {
            _0x39e82d.save();
            var _0x332681 = this.getSkinImageObj("img/xmasgifts/" + this.giftColor + "/gift_e.png");
            if (_0x332681) {
                var _0x42e7bc = this.rad;
                _0x39e82d.save();
                _0x39e82d.rotate(this.rPer * 0.5 * Math.PI * 2);
                _0x39e82d.drawImage(_0x332681, -_0x42e7bc, -_0x42e7bc, _0x42e7bc * 2, _0x42e7bc * 2);
                _0x39e82d.restore();
            }
            _0x39e82d.restore();
        };
        _0x515fff.prototype.readCustomData_onNewlyVisible = function(_0x314f78) {
            this.giftColor = _0x314f78.readUInt8();
            this.giftType = _0x314f78.readUInt8();
        };
        var _0x22a888 = 143;

        function _0x515fff() {
            _0x515fff.superClass.call(this, _0x22a888);
            this.doesDrawEffectScale = true;
        }
        _0x35d268.setCustomClassForGameObjType(_0x515fff, _0x22a888);
        var _0x536808 = +new Date() + 5000;
        var _0x53161e = false;
        let _0x499739;
        let _0x5deb30 = 50;
        let _0x2addad = _0x396098 - 1350 + _0x5deb30;
        var _0x149102 = null;
        var _0xc374cc = {
            particleCount: 700,
            particleSize: 3,
            fallingSpeed: 0.5,
            color: "#fff",
            xspeed: 1,
            yspeed: 0.5,
            yspeedF: 1,
            angle: 90
        };
        var _0x4c009d = {
            particleCount: 1500,
            particleSize: 4,
            fallingSpeed: 1,
            color: "#fff",
            xspeed: 1.5,
            yspeed: 1,
            yspeedF: 1.5,
            angle: 90
        };
        var _0x796e74 = {
            particleCount: 1500,
            particleSize: 5,
            fallingSpeed: 1.5,
            color: "#fff",
            xspeed: 2,
            yspeed: 1.5,
            yspeedF: 3,
            angle: 90
        };

        function _0x301f6e(_0x2a73f7, _0x3b23e8) {
            return Math.floor(Math.random() * (_0x3b23e8 - _0x2a73f7 + 1) + _0x2a73f7);
        }

        function _0x59b8bf(_0x116c44, _0x128f49, _0x22245d, _0x2ea881, _0x113fb1) {
            this.x = _0x116c44;
            this.y = _0x128f49;
            this.nx = _0x116c44;
            this.ny = _0x128f49;
            this.radius = _0x22245d;
            this.color = _0x2ea881;
            this.radians = _0x113fb1;
            this.velocity = Math.max(0.001, Math.random() * 0.004);
            this.t = 0;
            this.update = () => {
                this.radians += this.velocity;
                this.y += Math.pow(this.velocity, _0x149102.yspeed) + _0x149102.yspeed * _0x149102.yspeedF;
                this.x += Math.sin(this.radians) * 0.5 * _0x149102.xspeed;
                this.draw();
            };
            this.lerp = () => {};
            this.draw = () => {
                this.lerp();
                _0x39e82d.beginPath();
                _0x39e82d.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);
                _0x39e82d.fillStyle = this.color;
                _0x39e82d.fill();
                _0x39e82d.closePath();
                this.reset();
            };
            this.reset = () => {
                if (this.x < -_0x5deb30 || this.y < -_0x5deb30 || this.x > _0x5039a5 + _0x5deb30 || this.y > _0x2addad || this.t == 0 || +new Date() > this.t) {
                    this.x = _0x301f6e(0, _0x5039a5 - 100);
                    this.y = _0x301f6e(0, _0x396098 - 1350);
                    this.t = +new Date() + Math.random() * 30000;
                }
            };
        }

        function _0x319d94() {
            _0x2addad = _0x396098 - 1350 + _0x5deb30;
            _0x499739 = [];
            for (let _0x3ecc4d = 0; _0x3ecc4d < _0x149102.particleCount; _0x3ecc4d++) {
                _0x499739.push(new _0x59b8bf(_0x301f6e(0, _0x5039a5 - 100), _0x301f6e(0, _0x396098 - 1350), _0x301f6e(0.5, _0x149102.particleSize), _0x149102.color, 90));
            }
            _0x3fbeac = true;
            _0x53161e = false;
            _0x536808 = +new Date() + 10000;
        }
        var _0x3fbeac = false;

        function _0x208465() {
            if (_0x3fbeac && _0x149102 != null) {
                _0x499739.forEach(_0x36bb83 => {
                    _0x36bb83.update();
                });
            }
        }

        function _0x3fed62() {
            if (_0x149102 == null) {
                return;
            }
            if (!_0x53161e) {
                if (_0x536808 < +new Date()) {
                    _0x53161e = true;
                }
                return;
            }
            if (!_0x5acecb && _0x5981a2 != _0x4051d6) {
                _0x208465();
            }
        }
        var _0x28c171 = Animal;
        _0x9022e8.prototype = Object.create(_0x28c171.prototype);
        _0x9022e8.prototype.constructor = _0x9022e8;
        _0x9022e8.superClass = _0x28c171;
        _0x9022e8.prototype.animalInfo = function() {
            var _0x46eaa3 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x46eaa3.aniName = "Seahorse!";
                    break;
                case 111:
                    _0x46eaa3.aniName = "Classic Seahorse";
                    break;
                case 112:
                    _0x46eaa3.aniName = "Gold-trim Seahorse";
                    break;
                case 200:
                    _0x46eaa3.aniName = "Tully Monster!";
                    break;
                case 201:
                    _0x46eaa3.aniName = "Water Gun Horse!";
                    break;
                case 202:
                    _0x46eaa3.aniName = "Leafy Seadragon";
                    break;
            }
            _0x46eaa3.skinName = this.getSkinName();
            _0x46eaa3.aniDesc = "";
            _0x46eaa3.upgradeText = "UPGRADED to " + _0x46eaa3.aniName;
            _0x46eaa3.aniCol = "#502E1A";
            return _0x46eaa3;
        };
        _0x9022e8.prototype.getSkinName = function() {
            let _0x39299a = this.getSpeciesPath() + "/seahorse";
            return _0x39299a;
        };
        _0x9022e8.prototype.getSpeciesPath = function() {
            return "ocean/seahorse/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x9022e8.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x9022e8.prototype.getAbilityInfo = function(_0x4c3321) {
            var _0x3c97cf = {
                abilName: "Dash!"
            };
            _0x3c97cf.abilImg = "skins/" + this.getSkinName() + ".png";
            _0x3c97cf.skinThemeID = this.skinThemeID;
            _0x3c97cf.mopeSeasonID = this.mopeSeasonID;
            return _0x3c97cf;
        };
        _0x9022e8.prototype.basicDrawSkinImg = function() {
            this.setSkinScale();
            var _0x223578 = this.skinRad;
            let _0x289eb8 = 1.5;
            var _0x694ac8 = 0;
            if (this.mopeSeasonID == 1) {
                if (this.animalSpecies == 200 || this.animalSpecies == 201) {
                    _0x289eb8 = 1.8;
                }
                if (this.animalSpecies == 201) {
                    _0x694ac8 = -0.1;
                }
            }
            if (this.loadedSkinImg) {
                _0x39e82d.drawImage(this.loadedSkinImg, -_0x223578 * _0x289eb8, -_0x223578 * _0x289eb8 + _0x223578 * _0x694ac8, _0x223578 * 2 * _0x289eb8, _0x223578 * 2 * _0x289eb8);
            }
        };

        function _0x9022e8() {
            _0x9022e8.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x9022e8, _0x48c056, _0x32b37a);
        var _0x28c171 = Animal;
        _0x31649b.prototype = Object.create(_0x28c171.prototype);
        _0x31649b.prototype.constructor = _0x31649b;
        _0x31649b.superClass = _0x28c171;
        _0x31649b.prototype.animalInfo = function() {
            var _0x2e448e = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x2e448e.aniName = "Shrimp!";
                    break;
                case 111:
                    _0x2e448e.aniName = "Classic Shrimp!";
                    break;
                case 112:
                    _0x2e448e.aniName = "Gold-trim Shrimp!";
                    break;
                case 200:
                    _0x2e448e.aniName = "Deluxe Shrimp!";
                    break;
                case 201:
                    _0x2e448e.aniName = "Chef Shrimp!";
                    break;
                case 202:
                    _0x2e448e.aniName = "Sushi Shrimp!";
                    break;
            }
            _0x2e448e.skinName = this.getSkinName();
            _0x2e448e.aniDesc = "";
            _0x2e448e.upgradeText = "UPGRADED to " + _0x2e448e.aniName;
            _0x2e448e.aniCol = "#502E1A";
            return _0x2e448e;
        };
        _0x31649b.prototype.getSkinName = function() {
            let _0x1b210d = this.getSpeciesPath() + "/shrimp";
            return _0x1b210d;
        };
        _0x31649b.prototype.getSpeciesPath = function() {
            return "ocean/shrimp/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x31649b.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };

        function _0x31649b() {
            _0x31649b.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x31649b, _0x48c056, _0x27c6df);
        var _0x28c171 = Animal;
        _0x4211cd.prototype = Object.create(_0x28c171.prototype);
        _0x4211cd.prototype.constructor = _0x4211cd;
        _0x4211cd.superClass = _0x28c171;
        _0x4211cd.prototype.animalInfo = function() {
            var _0x39148a = {};
            switch (this.animalSubSpecies) {
                case 222:
                case 0:
                    switch (this.animalSpecies) {
                        case 0:
                            _0x39148a.aniName = "Trout";
                            break;
                        case 111:
                            _0x39148a.aniName = "Classic Trout";
                            break;
                        case 112:
                            _0x39148a.aniName = "Gold-trim Trout";
                            break;
                    }
                    break;
                case 200:
                    _0x39148a.aniName = "Clownfish";
                    break;
                case 201:
                    _0x39148a.aniName = "Popsicle Trout";
                    break;
                case 202:
                    _0x39148a.aniName = "Royal Guppy";
                    break;
                case 221:
                    _0x39148a.aniName = "Ice Husk Trout";
                    break;
                case 2023:
                    _0x39148a.aniName = "Dr. Lochness";
                    break;
            }
            _0x39148a.skinName = this.getSkinName();
            _0x39148a.aniDesc = "";
            _0x39148a.upgradeText = "UPGRADED to " + _0x39148a.aniName + "!";
            _0x39148a.aniCol = "#502E1A";
            return _0x39148a;
        };
        _0x4211cd.prototype.getAbilityInfo = function(_0x19071c) {
            var _0x1ab705 = {
                abilName: "Extra Boost!"
            };
            _0x1ab705.abilImg = "skins/" + this.getSkinName() + ".png";
            _0x1ab705.skinThemeID = this.skinThemeID;
            _0x1ab705.mopeSeasonID = this.mopeSeasonID;
            return _0x1ab705;
        };
        _0x4211cd.prototype.getSkinName = function() {
            let _0x504f63 = this.getSpeciesPath() + "/trout";
            return _0x504f63;
        };
        _0x4211cd.prototype.getSpeciesPath = function() {
            return "ocean/trout/" + this.animalSpecies + "/" + this.animalSubSpecies;
        };

        function _0x4211cd() {
            _0x4211cd.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x4211cd, _0x48c056, _0x5767e8);
        var _0x28c171 = Animal;
        _0x5d14ee.prototype = Object.create(_0x28c171.prototype);
        _0x5d14ee.prototype.constructor = _0x5d14ee;
        _0x5d14ee.superClass = _0x28c171;
        _0x5d14ee.prototype.getSkinName = function() {
            return "arctic/arcticfox/" + this.animalSpecies + this.getSubSpecies() + "/arcticfox";
        };
        _0x5d14ee.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x5d14ee.prototype.animalInfo = function() {
            var _0x41c4ad = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x41c4ad.aniName = "Arctic Fox";
                    break;
                case 200:
                    _0x41c4ad.aniName = "Ice Fox";
                    break;
                case 111:
                    _0x41c4ad.aniName = "Classic Arctic Fox";
                    break;
                case 112:
                    _0x41c4ad.aniName = "Gold-trim Arctic Fox";
                    break;
                case 201:
                    _0x41c4ad.aniName = "Forest Spirit Fox";
                    break;
                case 202:
                    _0x41c4ad.aniName = "Ice Fox";
                    break;
            }
            _0x41c4ad.skinName = this.getSkinName();
            _0x41c4ad.aniDesc = "";
            _0x41c4ad.upgradeText = "UPGRADED to " + _0x41c4ad.aniName + "!\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!";
            _0x41c4ad.aniCol = "#CFCFCF";
            return _0x41c4ad;
        };

        function _0x5d14ee() {
            _0x5d14ee.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x5d14ee, _0x48c056, _0x24396a);
        var _0x28c171 = Animal;
        _0x2a055f.prototype = Object.create(_0x28c171.prototype);
        _0x2a055f.prototype.constructor = _0x2a055f;
        _0x2a055f.superClass = _0x28c171;
        _0x2a055f.prototype.getSkinName = function() {
            let _0x5a1d6b = this.getSpeciesPath() + "/fox";
            return _0x5a1d6b;
        };
        _0x2a055f.prototype.getSpeciesPath = function() {
            return "land/fox/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x2a055f.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x2a055f.prototype.animalInfo = function() {
            var _0x320cae = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x320cae.aniName = "Fox!";
                    break;
                case 200:
                    _0x320cae.aniName = "Night Thief!";
                    break;
                case 111:
                    _0x320cae.aniName = "Classic Fox";
                    break;
                case 112:
                    _0x320cae.aniName = "Gold-trim Fox";
                    break;
                case 200:
                    _0x320cae.aniName = "Sneaky Fox";
                    break;
                case 204:
                    _0x320cae.aniName = "Black Asura Fox";
                    break;
            }
            _0x320cae.skinName = this.getSkinName();
            _0x320cae.aniDesc = "";
            _0x320cae.upgradeText = "UPGRADED to " + _0x320cae.aniName + "!\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!";
            _0x320cae.aniCol = "#FF9D43";
            return _0x320cae;
        };
        _0x2a055f.prototype.getAbilityInfo = function(_0x19c4c9) {
            var _0x50625f = {
                abilName: "Pull from Hole"
            };
            _0x50625f.abilImg = "skins/" + this.getSkinName() + ".png";
            _0x50625f.skinThemeID = this.skinThemeID;
            _0x50625f.mopeSeasonID = this.mopeSeasonID;
            return _0x50625f;
        };

        function _0x2a055f() {
            _0x2a055f.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x2a055f, _0x48c056, _0x5e51a3);
        var _0x28c171 = Animal;
        _0x3bd8f7.prototype = Object.create(_0x28c171.prototype);
        _0x3bd8f7.prototype.constructor = _0x3bd8f7;
        _0x3bd8f7.superClass = _0x28c171;
        _0x3bd8f7.prototype.animalInfo = function() {
            var _0x3279fa = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x3279fa.aniName = "Rabbit!";
                    break;
                case 111:
                    _0x3279fa.aniName = "Classic Rabbit";
                    break;
                case 112:
                    _0x3279fa.aniName = "Gold-trim Rabbit";
                    break;
                case 200:
                    _0x3279fa.aniName = "Monochrome Rabbit!";
                    break;
                case 202:
                    switch (this.animalSubSpecies) {
                        case 0:
                            _0x3279fa.aniName = "Jackapole";
                            break;
                        case 1:
                            _0x3279fa.aniName = "Hollow Rabbit";
                    }
                    break;
                case 204:
                    _0x3279fa.aniName = "Carrot Rabbit";
                    break;
                case 220:
                    _0x3279fa.aniName = "Fairy Rabbit";
                    break;
                case 222:
                    _0x3279fa.aniName = "Jolly Rabbit";
                    break;
            }
            _0x3279fa.skinName = this.getSpeciesPath("rabbit") + "/rabbit";
            _0x3279fa.aniDesc = "";
            _0x3279fa.upgradeText = "UPGRADED to " + _0x3279fa.aniName;
            _0x3279fa.aniCol = "#502E1A";
            return _0x3279fa;
        };
        _0x3bd8f7.prototype.getSkinName = function() {
            return this.getSpeciesPath("rabbit") + "/rabbit";
        };
        _0x3bd8f7.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            if (this.animalSpecies === 202) {
                return "/" + this.animalSubSpecies;
            } else {
                return "";
            }
        };
        _0x3bd8f7.prototype.getSpeciesPath = function(_0x587846 = "rabbit") {
            return "land/" + _0x587846 + "/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x3bd8f7.prototype.getAbilityInfo = function(_0x4222f6) {
            var _0x316313 = {
                abilName: "Dig Hole!"
            };
            _0x316313.abilImg = "skins/" + this.getSpeciesPath() + "/rabbit.png";
            _0x316313.skinThemeID = this.skinThemeID;
            _0x316313.mopeSeasonID = this.mopeSeasonID;
            return _0x316313;
        };
        _0x3bd8f7.prototype.getSkinName = function(_0x5d3c87) {
            var _0x43f6ee = this.getSpeciesPath("rabbit") + "/rabbit" + (_0x5d3c87 === true ? ".png" : "");
            return _0x43f6ee;
        };

        function _0x3bd8f7() {
            _0x3bd8f7.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x3bd8f7, _0x48c056, _0x4f884f);
        var _0x28c171 = Animal;
        _0x2f4487.prototype = Object.create(_0x28c171.prototype);
        _0x2f4487.prototype.constructor = _0x2f4487;
        _0x2f4487.superClass = _0x28c171;
        _0x2f4487.prototype.getSkinName = function() {
            let _0x2bbb49 = this.getSpeciesPath() + "/hedgehog";
            if (this.flag_usingAbility) {
                _0x2bbb49 += "2";
            }
            return _0x2bbb49;
        };
        _0x2f4487.prototype.getSpeciesPath = function() {
            return "land/hedgehog/" + this.animalSpecies + this.getSubSpecies();
        };
        _0x2f4487.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x2f4487.prototype.animalInfo = function() {
            var _0x397a93 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x397a93.aniName = "Hedgehog!";
                    break;
                case 111:
                    _0x397a93.aniName = "Classic Hedgehog";
                    break;
                case 112:
                    _0x397a93.aniName = "Gold-trim Hedgehog";
                    break;
                case 202:
                    _0x397a93.aniName = "Grass Hedgehog";
                    break;
            }
            _0x397a93.skinName = this.getSkinName();
            _0x397a93.aniDesc = "";
            _0x397a93.upgradeText = "UPGRADED to " + _0x397a93.aniName + "!\n (Hold W to become spiky, and dangerous to touch!)";
            _0x397a93.aniCol = "#5b400d";
            return _0x397a93;
        };
        _0x2f4487.prototype.getAbilityInfo = function(_0x1dda0b) {
            var _0x53826a = {
                abilName: "Spikes!"
            };
            _0x53826a.abilImg = "skins/" + this.getSpeciesPath() + "/hedgehog2.png";
            _0x53826a.skinThemeID = this.skinThemeID;
            _0x53826a.mopeSeasonID = this.mopeSeasonID;
            return _0x53826a;
        };

        function _0x2f4487() {
            _0x2f4487.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x2f4487, _0x48c056, _0x4abc25);
        var _0x28c171 = GameObj;
        _0x34cc40.prototype = Object.create(_0x28c171.prototype);
        _0x34cc40.prototype.constructor = _0x34cc40;
        _0x34cc40.superClass = _0x28c171;
        _0x34cc40.prototype.foodType = 0;
        _0x34cc40.prototype.updateZ = function() {
            this.z = -98;
        };
        _0x34cc40.prototype.customDraw = function(_0x24c22f) {
            var _0x2a6708 = this.rad - 10;
            this.waterRipples(_0x2a6708);
            _0x39e82d.save();
            _0x39e82d.restore();
            var _0x54d011 = "img/floaters/" + this.floaterType + ".png";
            this.drawSkin(_0x54d011, _0x2a6708);
        };
        _0x34cc40.prototype.drawSkin = function(_0x444d83, _0x3534e4) {
            _0x39e82d.save();
            var _0x3e9763 = this.getSkinImageObj(_0x444d83);
            if (_0x3e9763) {
                _0x39e82d.save();
                _0x39e82d.rotate(this.angle);
                _0x39e82d.drawImage(_0x3e9763, -_0x3534e4, -_0x3534e4, _0x3534e4 * 2, _0x3534e4 * 2);
                _0x39e82d.restore();
            }
            _0x39e82d.restore();
        };
        var _0x2a8a16 = 0.01;
        var _0x28a028 = 0.02;
        var _0x870242 = 10;
        var _0x248746 = 15;
        _0x34cc40.prototype.waterRipples = function(_0x10aff7) {
            _0x10aff7 = _0x10aff7 - 5;
            var _0x224178 = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x4bb2c7 = 1.75;
            var _0x23752c = 0.5;
            var _0x31205c = _0x23752c * Math.sin(Math.PI * 2 / _0x4bb2c7 * _0x224178);
            var _0x4f3ada = _0x39e82d.globalAlpha;
            if (!this.isFloatingInWater) {
                _0x31205c = 1;
            }
            if (this.floaterType == 0 || this.floaterType == 2 || this.floaterType == 3 || this.floaterType == 4 || this.floaterType == 5 || this.floaterType == 7) {
                var _0x466c19 = "img/floaters/" + this.floaterType + "_ripple.png";
                _0x39e82d.globalAlpha *= 0.7 - _0x31205c * 0.25;
                this.drawSkin(_0x466c19, _0x10aff7 + _0x870242 - 5);
                _0x39e82d.globalAlpha *= 0.6 - _0x31205c * 0.2;
                this.drawSkin(_0x466c19, _0x10aff7 + _0x248746 - 5);
            } else {
                _0x39e82d.globalAlpha *= 0.8 - _0x31205c * 0.2;
                _0x58918f(0, _0x10aff7 * _0x2a8a16, _0x10aff7 * (0.9 + _0x31205c * 0.15), _0x870242, "#4668ff");
                _0x39e82d.globalAlpha *= 0.7 - _0x31205c * 0.2;
                _0x58918f(0, -_0x10aff7 * _0x28a028, _0x10aff7 * (1.05 + _0x31205c * 0.1), _0x248746, "#4668ff");
            }
            _0x39e82d.globalAlpha = _0x4f3ada;
        };
        _0x34cc40.prototype.readCustomData_onNewlyVisible = function(_0xe4a6cc) {
            this.floaterType = _0xe4a6cc.readUInt8();
        };
        _0x34cc40.prototype.isFloatingInWater = true;
        _0x34cc40.prototype.readUpdatedProperty = function(_0x24d1ee, _0x2f3c20) {
            if (_0x24d1ee == _0xc5f17b) {
                this.isFloatingInWater = _0x2f3c20.readUInt8() == 1;
            }
        };
        var _0x35d157 = 144;

        function _0x34cc40() {
            _0x34cc40.superClass.call(this, _0x35d157);
            this.drawEffectScale_Slow = true;
        }
        _0x35d268.setCustomClassForGameObjType(_0x34cc40, _0x35d157);
        var _0x28c171 = GameObj;
        _0x3c6c49.prototype = Object.create(_0x28c171.prototype);
        _0x3c6c49.prototype.constructor = _0x3c6c49;
        _0x3c6c49.superClass = _0x28c171;
        _0x3c6c49.prototype.lookAngle = 0;
        _0x3c6c49.prototype.frameNumber = 0;
        _0x3c6c49.prototype.isRolling = false;
        _0x3c6c49.prototype.pumpkinType = false;
        _0x3c6c49.prototype.updateZ = function() {
            this.z = 1002;
        };
        var _0x38bb46 = -0.07;
        var _0xd883f3 = -0.1;
        var _0x2faf52 = 8;
        var _0x10bd9f = 12;
        var _0x45ea6c = 8;
        _0x3c6c49.prototype.waterRipples = function(_0x4577f6) {
            _0x39e82d.save();
            _0x4577f6 = _0x4577f6 + _0x45ea6c;
            var _0x4547cc = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x115830 = 1.75;
            var _0x13a659 = 0.5;
            var _0x1a647a = _0x13a659 * Math.sin(Math.PI * 2 / _0x115830 * _0x4547cc);
            var _0x58c207 = _0x39e82d.globalAlpha;
            if (!this.isFloating) {
                _0x1a647a = 1;
            }
            _0x39e82d.rotate(_0x4bfce6(this.lookAngle + 45));
            _0x39e82d.globalAlpha *= 0.8 - _0x1a647a * 0.2;
            _0x58918f(0, _0x4577f6 * _0x38bb46, _0x4577f6 * (0.9 + _0x1a647a * 0.15), _0x2faf52, "#4668ff");
            _0x39e82d.globalAlpha *= 0.7 - _0x1a647a * 0.2;
            _0x58918f(0, -_0x4577f6 * _0xd883f3, _0x4577f6 * (1.05 + _0x1a647a * 0.1), _0x10bd9f, "#4668ff");
            _0x39e82d.globalAlpha = _0x58c207;
            _0x39e82d.restore();
        };
        _0x3c6c49.prototype.customDraw = function(_0x430973) {
            var _0x11fa49 = this.rad - 10;
            var _0x2e15f3 = 1;
            var _0x54e4db = 0.15;
            var _0x27b4f5 = 0.8;
            var _0xf1da9a = (_0x27b4f5 - _0x54e4db) * 0.5;
            var _0x288334 = _0x54e4db + _0xf1da9a + _0xf1da9a * Math.sin(Math.PI * 2 / _0x2e15f3 * (_0x4ec996 / 1000));
            var _0x2e15f3 = 1;
            var _0x54e4db = 0.85;
            var _0x27b4f5 = 1;
            var _0xf1da9a = (_0x27b4f5 - _0x54e4db) * 0.5;
            var _0x58f651 = 1;
            if (this.isRolling) {
                this.frameNumber = Math.trunc(_0x4ec996 / 120) % 8;
            }
            var _0x13bf79 = this.getSkinImageObj("img/beachball/" + this.pumpkinType + "/" + this.frameNumber + ".png");
            if (_0x13bf79) {
                var _0x3124e7 = 0;
                var _0xbde36 = this.rad;
                var _0x4358d6 = this.rad * 2.5;
                imH = this.rad * 2.5;
                var _0x917f72 = 0.5;
                var _0x21dc83 = 0.95;
                _0x39e82d.save();
                {
                    _0x39e82d.globalAlpha *= this.onFireEffA * _0x58f651;
                    _0x39e82d.rotate(this.angle + _0x439930);
                    _0x39e82d.drawImage(_0x13bf79, _0x3124e7 + _0x4358d6 * -_0x917f72, _0xbde36 + imH * -_0x21dc83, _0x4358d6, imH);
                }
                _0x39e82d.restore();
            } else {}
        };
        _0x3c6c49.prototype.isFloating = false;
        _0x3c6c49.prototype.isRolling = false;
        _0x3c6c49.prototype.readUpdatedProperty = function(_0x173d77, _0x3c87f9) {
            if (_0x173d77 == _0xc5f17b) {
                this.isFloating = _0x3c87f9.readUInt8() == 1;
            } else if (_0x173d77 == _0x33077b) {
                this.isRolling = _0x3c87f9.readUInt8() == 1;
            }
        };
        _0x3c6c49.prototype.readCustomData_onNewlyVisible = function(_0x325eda) {
            this.isRolling = _0x325eda.readUInt8() == 1;
            this.pumpkinType = _0x325eda.readUInt8();
            this.isFloating = _0x325eda.readUInt8() == 1;
        };

        function _0x3c6c49() {
            _0x3c6c49.superClass.call(this, _0x34273c);
            this.lookAngle = 0;
            this.isRolling = false;
            this.pumpkinType = false;
            this.doesDrawEffectScale = true;
            this.drawEffectScale_Slow = true;
        }
        var _0x34273c = 145;
        _0x35d268.setCustomClassForGameObjType(_0x3c6c49, _0x34273c);
        var _0x28c171 = GameObj;
        _0x116602.prototype = Object.create(_0x28c171.prototype);
        _0x116602.prototype.constructor = _0x116602;
        _0x116602.superClass = _0x28c171;
        _0x116602.prototype.frameNumber = 0;
        _0x116602.prototype.umbrellaType = 0;
        _0x116602.prototype.umbrellaColor = 0;
        _0x116602.prototype.isClosed = false;
        _0x116602.prototype.updateZ = function() {
            this.z = this.rad + (!this.isClosed ? 2100 : 0);
        };
        _0x116602.prototype.customDraw = function(_0x5a112d) {
            var _0x230ee4 = 1;
            var _0xaff2b2 = 0.15;
            var _0x45d702 = 0.8;
            var _0x3fca70 = (_0x45d702 - _0xaff2b2) * 0.5;
            var _0x54dd03 = _0xaff2b2 + _0x3fca70 + _0x3fca70 * Math.sin(Math.PI * 2 / _0x230ee4 * (_0x4ec996 / 1000));
            var _0x230ee4 = 1;
            var _0xaff2b2 = 0.85;
            var _0x45d702 = 1;
            var _0x3fca70 = (_0x45d702 - _0xaff2b2) * 0.5;
            var _0x76195c = 1;
            var _0x3fddb8 = this.rad * 1.5;
            var _0x447d7a = this.getSkinImageObj("img/umbrella/" + this.umbrellaType + "/" + this.umbrellaColor + "/umbrella" + (this.isClosed ? "-closed" : "") + ".png");
            if (_0x447d7a) {
                var _0x2606ae = 0;
                var _0xb80c5e = this.rad;
                var _0x29f754 = this.rad * 2.5;
                imH = this.rad * 2.5;
                var _0x3a90df = 0.5;
                var _0x1ece5a = 0.95;
                _0x39e82d.save();
                {
                    _0x39e82d.globalAlpha *= this.onFireEffA * _0x76195c;
                    _0x39e82d.rotate(this.angle);
                    _0x39e82d.drawImage(_0x447d7a, _0x2606ae + _0x29f754 * -_0x3a90df, _0xb80c5e + imH * -_0x1ece5a, _0x29f754, imH);
                }
                _0x39e82d.restore();
            } else {}
        };
        _0x116602.prototype.readUpdatedProperty = function(_0x24ed16, _0x15f3d5) {
            if (_0x24ed16 == _0xc5f17b) {
                this.isFloating = _0x15f3d5.readUInt8() == 1;
            } else if (_0x24ed16 == _0x33077b) {
                this.isClosed = _0x15f3d5.readUInt8() == 0;
            }
        };
        _0x116602.prototype.readCustomData_onNewlyVisible = function(_0x850d90) {
            this.isClosed = _0x850d90.readUInt8() == 1;
            this.umbrellaType = _0x850d90.readUInt8();
            this.umbrellaColor = _0x850d90.readUInt8();
        };

        function _0x116602() {
            _0x116602.superClass.call(this, _0x42ae0c);
            this.umbrellaType = 0;
            this.isClosed = false;
            this.doesDrawEffectScale = true;
            this.drawEffectScale_Slow = true;
        }
        var _0x42ae0c = 146;
        _0x35d268.setCustomClassForGameObjType(_0x116602, _0x42ae0c);
        var _0x28c171 = Animal;
        _0x42c1c7.prototype = Object.create(_0x28c171.prototype);
        _0x42c1c7.prototype.constructor = _0x42c1c7;
        _0x42c1c7.superClass = _0x28c171;
        _0x42c1c7.prototype.animalInfo = function() {
            var _0x2d5c85 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x2d5c85.aniName = "Chipmunk!";
                    break;
                case 201:
                    _0x2d5c85.aniName = "Playful Munk!";
                    break;
                case 111:
                    _0x2d5c85.aniName = "Classic Chipmunk";
                    break;
                case 112:
                    _0x2d5c85.aniName = "Gold-trim Chipmunk";
                    break;
                case 202:
                    _0x2d5c85.aniName = "Chipmonk";
                    break;
            }
            _0x2d5c85.skinName = this.getSkinName();
            _0x2d5c85.aniDesc = "";
            _0x2d5c85.upgradeText = "You're a tiny " + _0x2d5c85.aniName + " - Eat food to grow!";
            _0x2d5c85.aniCol = "#CFCFCF";
            return _0x2d5c85;
        };
        _0x42c1c7.prototype.getSkinName = function() {
            return "arctic/chipmunk/" + this.animalSpecies + this.getSubSpecies() + "/chipmunk";
        };
        _0x42c1c7.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };

        function _0x42c1c7() {
            _0x42c1c7.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x42c1c7, _0x48c056, _0x5197c0);
        var _0x28c171 = Animal;
        _0x1c008c.prototype = Object.create(_0x28c171.prototype);
        _0x1c008c.prototype.constructor = _0x1c008c;
        _0x1c008c.superClass = _0x28c171;
        _0x1c008c.prototype.getSkinName = function() {
            return "arctic/arctichare/" + this.animalSpecies + this.getSubSpecies() + "/arctichare";
        };
        _0x1c008c.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x1c008c.prototype.animalInfo = function() {
            var _0x5c02f8 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x5c02f8.aniName = "Arctic Hare!";
                    break;
                case 111:
                    _0x5c02f8.aniName = "Classic Arctic Hare";
                    break;
                case 112:
                    _0x5c02f8.aniName = "Gold-trim Arctic Hare";
                    break;
                case 201:
                    _0x5c02f8.aniName = "Snow Cone Hare!";
                    break;
            }
            _0x5c02f8.skinName = this.getSkinName();
            _0x5c02f8.aniDesc = "";
            _0x5c02f8.upgradeText = "UPGRADED to " + _0x5c02f8.aniName;
            _0x5c02f8.aniCol = "#CFCFCF";
            return _0x5c02f8;
        };

        function _0x1c008c() {
            _0x1c008c.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x1c008c, _0x48c056, _0x5f399a);
        var _0x28c171 = Animal;
        _0x7788bd.prototype = Object.create(_0x28c171.prototype);
        _0x7788bd.prototype.constructor = _0x7788bd;
        _0x7788bd.superClass = _0x28c171;
        _0x7788bd.prototype.animalInfo = function() {
            var _0x38cbbf = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x38cbbf.aniName = "Polar Bear";
                    break;
                case 111:
                    _0x38cbbf.aniName = "Classic Polar Bear";
                    break;
                case 112:
                    _0x38cbbf.aniName = "Gold-trim Polar Bear";
                    break;
                case 201:
                    _0x38cbbf.aniName = "Cola Connoisseur";
                    break;
                case 202:
                    _0x38cbbf.aniName = "Water Bear";
                    break;
            }
            _0x38cbbf.aniDesc = "";
            _0x38cbbf.upgradeText = "UPGRADED to " + _0x38cbbf.aniName + "!\n Polar bears can climb hills! \n+ They're amazing swimmers!";
            _0x38cbbf.aniCol = "#e4e4e4";
            _0x38cbbf.skinName = this.getSkinName();
            return _0x38cbbf;
        };
        _0x7788bd.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x7788bd.prototype.getAbilityInfo = function(_0x199b85) {
            var _0x424dd1 = {
                abilName: "Claw Slash!",
                abilImg: "skins/arctic/bear/" + this.animalSpecies + "/clawslash.png",
                skinThemeID: this.skinThemeID,
                mopeSeasonID: this.mopeSeasonID
            };
            return _0x424dd1;
        };
        _0x7788bd.prototype.getSkinName = function() {
            var _0x321efe = "arctic/bear/" + this.animalSpecies + this.getSubSpecies() + "/bear";
            if (this.animalSpecies == 201 && this.flag_usingAbility) {
                _0x321efe += "1";
            }
            return _0x321efe;
        };

        function _0x7788bd() {
            _0x7788bd.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x7788bd, _0x48c056, _0x3941c2);
        var _0x28c171 = Animal;
        _0x59326d.prototype = Object.create(_0x28c171.prototype);
        _0x59326d.prototype.constructor = _0x59326d;
        _0x59326d.superClass = _0x28c171;
        _0x59326d.prototype.getSpeciesPath = function(_0xa3dcd) {
            return "arctic/" + _0xa3dcd + "/" + this.animalSpecies;
        };
        _0x59326d.prototype.animalInfo = function() {
            var _0x5b0716 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x5b0716.aniName = "Lemming!";
                    break;
                case 111:
                    _0x5b0716.aniName = "Classic Lemming";
                    break;
            }
            _0x5b0716.skinName = this.getSpeciesPath("lemming") + "/lemming";
            _0x5b0716.aniDesc = "";
            _0x5b0716.upgradeText = "You're a tiny " + _0x5b0716.aniName + " - Eat food to grow!";
            _0x5b0716.aniCol = "#CFCFCF";
            return _0x5b0716;
        };
        _0x59326d.prototype.getSkinName = function() {
            var _0x5d6c52 = this.getSpeciesPath("lemming") + "/lemming";
            return _0x5d6c52;
        };

        function _0x59326d() {
            _0x59326d.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x59326d, _0x48c056, _0x3a5861);

        function _0xa9548b(_0x580966) {
            var _0x1d84d9 = _0x35d268.createGameObjOfOType(_0x48c056, _0x580966.animalType);
            _0x1d84d9.animalType = _0x580966.animalType;
            _0x1d84d9.animalSpecies = _0x580966.animalSpecies;
            _0x1d84d9.animalSubSpecies = _0x580966.animalSubSpecies;
            _0x1d84d9.animalPremiumSkin = _0x580966.premiumSkinGroup;
            _0x1d84d9.mopeSeasonID = _0x580966.mopeSeasonID;
            _0x1d84d9.skinThemeID = 0;
            var _0x1e2f44 = _0x1d84d9.animalInfo();
            _0x580966.aniCol = _0x1e2f44.aniCol;
            _0x580966.aniName = _0x1e2f44.aniName;
            _0x580966.skinName = _0x1e2f44.skinName;
            _0x580966.upgradeText = _0x1e2f44.upgradeText;
            var _0x3b7bb0 = _0x1d84d9.getAbilityInfo(_0x580966.abilityType);
            _0x580966.abilityImage = _0x3b7bb0.abilImg;
            _0x580966.abilityName = _0x3b7bb0.abilName;
            return _0x580966;
        }
        class _0x5d3089 {
            static ALPHA_LOOKUP = {
                o_mudSpot: 0.7,
                o_arcticIce: 0.85,
                o_hill: 1,
                o_lakeIsland: 0.6,
                o_berryBush: 1,
                o_waterSpot: 1
            };
            constructor(_0x14cdce) {
                this.data = _0x14cdce;
                this.data.width = this.data.height * (this.data.gameWidth / this.data.gameHeight);
                if (!this.miniMapCanvas) {
                    this.miniMapCanvas = document.createElement("canvas");
                }
                this.miniMapCanvas.width = this.data.width;
                this.miniMapCanvas.height = this.data.height;
                this.ctx_ = this.miniMapCanvas.getContext("2d");
                this.drawObjects();
            }
            drawObjects() {
                for (let _0x24620b = 0; _0x24620b < this.data.objects.length; _0x24620b++) {
                    let _0x1359e9 = this.data.objects[_0x24620b];
                    if (_0x1359e9.isRect) {
                        if (_0x1359e9.objType == _0x132d0f) {
                            continue;
                        }
                        this.drawRect(_0x1359e9);
                    }
                }
                for (let _0x5b33d8 = 0; _0x5b33d8 < this.data.objects.length; _0x5b33d8++) {
                    let _0x3b9bb1 = this.data.objects[_0x5b33d8];
                    if (!_0x3b9bb1.isRect) {
                        this.drawCircle(_0x3b9bb1);
                    }
                }
            }
            drawCircle(_0x23b927) {
                var _0x1e2f9e = _0x23b927.x * this.data.scaleX;
                var _0x4ac560 = _0x23b927.y * this.data.scaleY;
                var _0x3477a3 = _0x23b927.r / this.data.objScale;
                this.ctx_.beginPath();
                this.ctx_.globalAlpha = 1;
                this.ctx_.fillStyle = _0x23b927.c;
                this.ctx_.arc(_0x1e2f9e, _0x4ac560, Math.max(1, _0x3477a3), 0, Math.PI * 2);
                this.ctx_.fill();
            }
            drawRect(_0x396f47) {
                var _0x597b32 = _0x396f47.x * this.data.scaleX;
                var _0x5dfa27 = _0x396f47.y * this.data.scaleY;
                var _0x34238b = _0x396f47.w * this.data.scaleX;
                var _0x5c5da = _0x396f47.h * this.data.scaleY;
                this.ctx_.globalAlpha = 1;
                this.ctx_.fillStyle = _0x396f47.c;
                this.ctx_.fillRect(_0x597b32 - _0x34238b / 2, _0x5dfa27 - _0x5c5da / 2, _0x34238b, _0x5c5da);
            }
            drawMap() {
                if (this.miniMapCanvas && this.miniMapCanvas.width) {
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = 0.55;
                    _0x39e82d.fillStyle = "#000000";
                    _0x39e82d.fillRect(_0x19e9b5 - (_0x149ef1 * 10 + this.miniMapCanvas.width * _0x53a3ae), _0x149ef1 * 10, this.data.width * _0x53a3ae, this.data.height * _0x53a3ae);
                    _0x39e82d.globalAlpha = 0.8;
                    _0x39e82d.drawImage(this.miniMapCanvas, _0x19e9b5 - (_0x149ef1 * 10 + this.miniMapCanvas.width * _0x53a3ae), _0x149ef1 * 10, this.data.width * _0x53a3ae, this.data.height * _0x53a3ae);
                    _0x39e82d.restore();
                }
                for (let _0xa4bd2 = 0; _0xa4bd2 < _0x2809d9.length; _0xa4bd2++) {
                    const _0x40c0e2 = _0x2809d9[_0xa4bd2];
                    _0x3a55a7(_0x40c0e2, "brown", 2);
                    const _0x181279 = _0x40c0e2.type == 2 ? "gold" : _0x40c0e2.type == 1 ? "burlywood" : "orange";
                    _0x3a55a7(_0x40c0e2, _0x181279, 1.5);
                }
                var _0x347451 = _0xb3e9be[_0x166276];
                if (_0x347451) {
                    _0x4c9101(_0x347451, "white", 1);
                }
                if (_0x458c8e != null && _0x458c8e.id != _0x166276) {
                    _0x4c9101(_0x458c8e, "cyan", 1);
                }
            }
            setPlayersCount() {
                let _0x185dd7 = _0x4ec996 % 10000 > 5000;
                if (_0x185dd7 == 0 || !_0x4c02d5) {
                    _0x469fbf.setText(_0x5461df(_0x170cf4) + " players online");
                } else {
                    _0x469fbf.setText(_0x5461df(_0x387513) + " players on server");
                }
            }
        }
        var _0x6bc369 = 147;
        var _0x28c171 = GameObj;
        BiomeShape.prototype = Object.create(_0x28c171.prototype);
        BiomeShape.prototype.constructor = BiomeShape;
        BiomeShape.superClass = _0x28c171;
        BiomeShape.prototype.drawGrid = _0x5981a2 !== _0x4051d6;
        BiomeShape.prototype.updateZ = function() {
            switch (this.biome) {
                case _0x43b42f:
                    this.z = -300;
                    break;
                case _0x45aeb2:
                    this.z = -299;
                    break;
                case _0x315f18:
                case _0x143680:
                    this.z = -298;
                    break;
                case _0x9598c7:
                    if (this.forceBiomeColor) {
                        this.z = -210;
                    } else {
                        this.z = -208;
                    }
                    break;
                case _0x208477:
                    this.z = -295;
                    break;
            }
        };
        BiomeShape.prototype.customDraw = function(_0x5268ab) {
            if (this.isRect) {
                this.drawBiome(_0x5268ab);
                if (!_0x5268ab) {
                    if (this.jaggedSides) {
                        _0x39e82d.save();
                        this.jaggedSidesForRect();
                        _0x39e82d.restore();
                    }
                }
                if (_0x5981a2 !== _0x4051d6) {
                    var _0xe5be21 = 45;
                    _0x833245(-this.getRectWidth() / 2 + _0xe5be21, -this.getRectHeight() / 2 + _0xe5be21, this.getRectWidth() / 2 - _0xe5be21, this.getRectHeight() / 2 - _0xe5be21, this.x, this.y);
                }
                _0x39e82d.save();
                _0x39e82d.restore();
            } else {
                this.drawBiome(false);
            }
        };
        BiomeShape.prototype.jaggedPointsForRect = function(_0x2a29cd) {
            var _0x362a7a = 0;
            var _0x11f78d = 1;
            var _0x3fd53c = 2;
            var _0xc730ab = 3;
            if (this.jaggedSides) {
                if (_0x2a29cd == _0x3fd53c) {
                    this.jaggedRect[_0x2a29cd] = [];
                    var _0x37e611 = -this.getRectWidth() / 2;
                    var _0x35970f = this.getRectWidth() / 2;
                    var _0x2134c2 = this.getRectHeight() / 2 - 32;
                    var _0x48de2f = this.getRectHeight() / 2 - 32;
                    this.jaggedRect[_0x2a29cd].push({
                        x: _0x37e611,
                        y: _0x2134c2
                    });
                    var _0x435521 = 20;
                    var _0x436bfa = [-12, 5, 10, 0, -10, 3, 12, 4, 0, 3, 5, -10, 5, -12, 5, 10, 0, -6];
                    var _0x6fbcd0 = 60;
                    var _0x692041 = 0;
                    var _0x2916c4 = _0x5039a5 - this.x;
                    var _0x338ee0 = 0 - this.x;
                    var _0x3d432d = _0x396098 - this.y;
                    var _0x1e6d7a = 0 - this.y;
                    var _0x56a6f6;
                    var _0x2c63b1 = _0x37e611 - _0x435521;
                    this.jaggedRect[_0x2a29cd].push({
                        x: _0x37e611,
                        y: _0x2134c2
                    });
                    _0x56a6f6 = _0x48de2f + _0x435521;
                    var _0x251892 = 0;
                    var _0x5dd017 = 0;
                    for (_0x2c63b1 = _0x37e611; _0x2c63b1 < _0x35970f; _0x2c63b1 += _0x6fbcd0) {
                        _0x5dd017 = _0x2c63b1;
                        _0x251892 = Math.min(_0x3d432d, Math.max(_0x1e6d7a, _0x56a6f6 + _0x436bfa[_0x692041]));
                        this.jaggedRect[_0x2a29cd].push({
                            x: _0x5dd017,
                            y: _0x251892
                        });
                        _0x692041 = (_0x692041 + 1) % _0x436bfa.length;
                    }
                    this.jaggedRect[_0x2a29cd].push({
                        x: _0x35970f,
                        y: _0x48de2f
                    });
                    this.jaggedRect[_0x2a29cd].push({
                        x: _0x35970f,
                        y: _0x2134c2
                    });
                    this.jaggedRect[_0x2a29cd].push({
                        x: _0x37e611,
                        y: _0x2134c2
                    });
                } else if (_0x2a29cd == _0x362a7a) {
                    var _0x297038 = 100;
                    this.jaggedRect[_0x2a29cd] = [];
                    _0x39e82d.fillStyle = _0x1afbdd;
                    var _0x37e611 = -this.getRectWidth() / 2;
                    var _0x35970f = this.getRectWidth() / 2;
                    var _0x2134c2 = -this.getRectHeight() / 2 + 24;
                    var _0x48de2f = -this.getRectHeight() / 2 + 12;
                    this.jaggedRect[_0x2a29cd].push({
                        x: _0x37e611,
                        y: _0x2134c2
                    });
                    var _0x435521 = 0;
                    var _0x436bfa = [-12, 5, 10, 0, -10, 3, 12, 4, 0, 3, 5, -10, 5, -12, 5, 10, 0, -6];
                    var _0x6fbcd0 = 60;
                    var _0x692041 = 0;
                    var _0x2916c4 = _0x5039a5 - this.x;
                    var _0x338ee0 = 0 - this.x;
                    var _0x3d432d = _0x396098 - this.y;
                    var _0x1e6d7a = 0 - this.y;
                    var _0x56a6f6;
                    var _0x2c63b1 = _0x37e611;
                    this.jaggedRect[_0x2a29cd].push({
                        x: _0x37e611,
                        y: _0x48de2f
                    });
                    _0x56a6f6 = _0x48de2f;
                    for (_0x2c63b1 = _0x37e611; _0x2c63b1 < _0x35970f; _0x2c63b1 += _0x6fbcd0) {
                        _0x5dd017 = _0x2c63b1;
                        _0x251892 = Math.min(_0x3d432d, Math.max(_0x1e6d7a, _0x56a6f6 + _0x436bfa[_0x692041]));
                        this.jaggedRect[_0x2a29cd].push({
                            x: _0x5dd017,
                            y: _0x251892
                        });
                        _0x692041 = (_0x692041 + 1) % _0x436bfa.length;
                    }
                    this.jaggedRect[_0x2a29cd].push({
                        x: _0x35970f,
                        y: _0x48de2f
                    });
                    this.jaggedRect[_0x2a29cd].push({
                        x: _0x35970f,
                        y: _0x2134c2
                    });
                }
            }
        };
        BiomeShape.prototype.drawJaggedCircle = function(_0x147a65, _0x56cc9e) {
            if (this.points2) {
                this.drawPoints(this.points2, _0x56cc9e, true);
            }
            this.drawPoints(this.points1, _0x147a65, true);
        };
        BiomeShape.prototype.getRectWidth = function() {
            var _0xa58a81 = this.rectW;
            return _0xa58a81;
        };
        BiomeShape.prototype.getRectHeight = function() {
            var _0x3bad39 = this.rectH;
            return _0x3bad39;
        };
        BiomeShape.prototype.drawBiome = function(_0x154bf3) {
            if (this.biome == _0x9598c7) {
                this.drawVolcanoBiome(_0x154bf3);
            } else if (!this.isRect) {
                _0x39e82d.fillStyle = _0x154bf3 ? "red" : this.getBiomeColor();
                _0x39e82d.beginPath();
                _0x39e82d.arc(0, 0, Math.max(1, this.rad), 0, Math.PI * 2);
                _0x39e82d.fill();
            } else {
                if (this.biome == _0x45aeb2) {
                    _0x39e82d.globalAlpha = 1;
                }
                if (!_0x154bf3) {
                    _0x39e82d.fillStyle = _0x154bf3 ? _0x335e4d : this.getBiomeColor();
                    var _0x345fb0 = _0x154bf3 ? 0 : 20;
                    _0x39e82d.fillRect(-this.getRectWidth() / 2 + _0x345fb0, -this.getRectHeight() / 2 + _0x345fb0, this.getRectWidth() - _0x345fb0 * 2, this.getRectHeight() - _0x345fb0 * 2);
                }
            }
        };
        BiomeShape.prototype.drawVolcanoBiome = function(_0x5858b5) {
            _0x39e82d.save();
            if (_0x5981a2 != _0x4051d6) {
                _0x39e82d.rotate(this.rPer * 2 * Math.PI);
            }
            var _0x4ab982 = 0;
            var _0x3053f8 = (_0x4ec996 - this.spawnTime) / 1000;
            var _0x310d05 = 6;
            var _0x3cf1ea = 1.5;
            _0x4ab982 = _0x3cf1ea * Math.sin(Math.PI * 2 / _0x310d05 * _0x3053f8);
            var _0x450fcf = 4;
            _0x39e82d.fillStyle = "#604729";
            _0x39e82d.beginPath();
            _0x39e82d.arc(0, 0, this.rad, 0, Math.PI * 2);
            _0x39e82d.fill();
            if (_0x5981a2 != _0x4051d6) {
                _0x39e82d.fillStyle = "#8A681B";
                _0x39e82d.beginPath();
                _0x39e82d.arc(0, 0, Math.max(0, this.rad - _0x450fcf + _0x4ab982), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.beginPath();
                _0x39e82d.arc(this.rad * 0.45, -this.rad * 0.45 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x4ab982), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.beginPath();
                _0x39e82d.arc(this.rad * 0.5, this.rad * 0.5 + this.rPer * 15, Math.max(0, this.rad * 0.4 + _0x4ab982), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.beginPath();
                _0x39e82d.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + this.rPer * 15, Math.max(0, this.rad * 0.5 + _0x4ab982), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.beginPath();
                _0x39e82d.arc(-this.rad * 0.75, -this.rad * 0.35 + this.rPer * 15, Math.max(0, this.rad * 0.3 + _0x4ab982), 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.beginPath();
                _0x39e82d.arc(this.rad + this.rPer * 10, this.rPer * 50, 8, 0, Math.PI * 2);
                _0x39e82d.fill();
                _0x39e82d.beginPath();
                _0x39e82d.arc(this.rad - this.rPer * 20, this.rPer * 50, 10, 0, Math.PI * 2);
                _0x39e82d.fill();
            }
            _0x39e82d.restore();
        };
        BiomeShape.prototype.drawPoints = function(_0x8c91b, _0x54488b, _0x139713) {
            if (_0x139713) {
                _0x39e82d.fillStyle = _0x54488b;
            } else {
                _0x39e82d.strokeStyle = _0x54488b;
            }
            _0x39e82d.strokeStyle = _0x54488b;
            _0x39e82d.beginPath();
            var _0x5f2ca2 = 10;
            _0x39e82d.moveTo(_0x8c91b[0].x * _0x5f2ca2, _0x8c91b[0].y * _0x5f2ca2);
            for (var _0x59c76d = 1; _0x59c76d < _0x8c91b.length; _0x59c76d++) {
                _0x39e82d.lineTo(_0x8c91b[_0x59c76d].x * _0x5f2ca2, _0x8c91b[_0x59c76d].y * _0x5f2ca2);
            }
            _0x39e82d.lineTo(_0x8c91b[0].x * _0x5f2ca2, _0x8c91b[0].y * _0x5f2ca2);
            if (_0x139713) {
                _0x39e82d.fill();
            } else {
                _0x39e82d.stroke();
            }
        };
        BiomeShape.prototype.drawJaggedRect = function() {
            var _0x1e01c3 = 0;
            var _0x5954a5 = 1;
            var _0x590236 = 2;
            var _0x2996b3 = 3;
            for (var _0x357f70 = 0; _0x357f70 < this.jaggedRect.length; _0x357f70++) {
                if (this.jaggedRect[_0x357f70]) {
                    var _0x1c77d1 = this.jaggedRect[_0x357f70];
                    if (_0x1c77d1 && _0x1c77d1.length > 0) {
                        _0x39e82d.fillStyle = this.biomeColor;
                        _0x39e82d.strokeStyle = "red";
                        _0x39e82d.beginPath();
                        _0x39e82d.moveTo(_0x1c77d1[0].x, _0x1c77d1[0].y);
                        for (i = 1; i < _0x1c77d1.length; i++) {
                            _0x39e82d.lineTo(_0x1c77d1[i].x, _0x1c77d1[i].y);
                        }
                        _0x39e82d.closePath();
                        _0x39e82d.fill();
                        _0x39e82d.stroke();
                    }
                }
            }
        };
        BiomeShape.prototype.jaggedPointsForCircle = function(_0x2dd643, _0xdc08d7, _0x63e8, _0x1baf02, _0x230b3b) {
            if (this.points1 == undefined) {
                this.points1 = [];
                if (_0x230b3b > 0) {
                    this.points2 = [];
                }
                var _0x48aa70 = _0x14db03(-2, 2);
                var _0x5871e1 = Math.PI * 2 / _0x1baf02;
                let _0xbc52de = _0x4bfce6(_0x48aa70);
                var _0x1cebc1 = Math.cos(_0xbc52de);
                var _0x400d02 = Math.sin(_0xbc52de);
                var _0x38018b = _0x2dd643 + _0x63e8 * _0x1cebc1;
                var _0x27358d = _0xdc08d7 + _0x63e8 * _0x400d02;
                this.points1.push({
                    x: _0x38018b,
                    y: _0x27358d
                });
                if (_0x230b3b > 0) {
                    var _0x215ac2 = _0x2dd643 + (_0x63e8 + _0x230b3b) * _0x1cebc1;
                    var _0x1e83ba = _0xdc08d7 + (_0x63e8 + _0x230b3b) * _0x400d02;
                    this.points2.push({
                        x: _0x215ac2,
                        y: _0x1e83ba
                    });
                }
                for (var _0x2c40c0 = 1; _0x2c40c0 < _0x1baf02; _0x2c40c0++) {
                    var _0x3c0258 = _0x14db03(-1, 1);
                    _0x48aa70 = _0x14db03(-2, 2);
                    var _0x2dc27a = _0x63e8 + _0x3c0258;
                    _0xbc52de = _0x5871e1 * _0x2c40c0 + _0x4bfce6(_0x48aa70);
                    _0x1cebc1 = Math.cos(_0xbc52de);
                    _0x400d02 = Math.sin(_0xbc52de);
                    var _0xfb0281 = _0x2dd643 + _0x2dc27a * _0x1cebc1;
                    var _0x1b11e5 = _0xdc08d7 + _0x2dc27a * _0x400d02;
                    this.points1.push({
                        x: _0xfb0281,
                        y: _0x1b11e5
                    });
                    if (_0x230b3b > 0) {
                        var _0x2b3f7a = _0x63e8 + _0x230b3b + _0x3c0258;
                        var _0x1dec70 = _0x2dd643 + (_0x2b3f7a + _0x230b3b) * _0x1cebc1;
                        var _0x74c88a = _0xdc08d7 + (_0x2b3f7a + _0x230b3b) * _0x400d02;
                        this.points2.push({
                            x: _0x1dec70,
                            y: _0x74c88a
                        });
                    }
                }
                this.points1.push({
                    x: _0x38018b,
                    y: _0x27358d
                });
                if (_0x230b3b > 0) {
                    this.points2.push({
                        x: _0x215ac2,
                        y: _0x1e83ba
                    });
                }
            }
        };
        BiomeShape.prototype.jaggedSidesForRect = function() {
            var _0x3b0c62 = 42;
            _0x39e82d.fillStyle = this.getBiomeColor();
            var _0x4c0b22 = -this.getRectWidth() / 2 + _0x3b0c62;
            var _0x5c079c = this.getRectWidth() / 2 - _0x3b0c62;
            var _0x2b4960 = -this.getRectHeight() / 2 + _0x3b0c62;
            var _0x6223c2 = this.getRectHeight() / 2 - _0x3b0c62;
            _0x39e82d.beginPath();
            _0x39e82d.moveTo(_0x4c0b22, _0x2b4960);
            var _0x79e97c = 30;
            var _0x39dc4a = [-8, 10, -10, 12, 0, 5, -10, 5, -12, 5, 10, 0, -6];
            var _0x3dc308 = 45;
            var _0x41fc92 = 0;
            var _0x2878f7 = _0x5039a5 - this.x;
            var _0x454bb5 = 0 - this.x;
            var _0x5c9774 = _0x396098 - this.y;
            var _0x379780 = 0 - this.y;
            var _0x30c81e;
            var _0x5c7eec = _0x4c0b22 - _0x79e97c;
            for (_0x30c81e = _0x2b4960; _0x30c81e < _0x6223c2; _0x30c81e += _0x3dc308) {
                _0x39e82d.lineTo(Math.min(_0x2878f7, Math.max(_0x454bb5, _0x5c7eec + _0x39dc4a[_0x41fc92])), _0x30c81e);
                _0x41fc92 = (_0x41fc92 + 1) % _0x39dc4a.length;
            }
            _0x39e82d.lineTo(_0x4c0b22, _0x6223c2);
            _0x30c81e = _0x6223c2 + _0x79e97c;
            for (_0x5c7eec = _0x4c0b22; _0x5c7eec < _0x5c079c; _0x5c7eec += _0x3dc308) {
                _0x39e82d.lineTo(_0x5c7eec, Math.min(_0x5c9774, Math.max(_0x379780, _0x30c81e + _0x39dc4a[_0x41fc92])));
                _0x41fc92 = (_0x41fc92 + 1) % _0x39dc4a.length;
            }
            _0x39e82d.lineTo(_0x5c079c, _0x6223c2);
            _0x5c7eec = _0x5c079c + _0x79e97c;
            for (_0x30c81e = _0x6223c2; _0x30c81e > _0x2b4960; _0x30c81e -= _0x3dc308) {
                _0x39e82d.lineTo(Math.min(_0x2878f7, Math.max(_0x454bb5, _0x5c7eec + _0x39dc4a[_0x41fc92])), _0x30c81e);
                _0x41fc92 = (_0x41fc92 + 1) % _0x39dc4a.length;
            }
            _0x39e82d.lineTo(_0x5c079c, _0x2b4960);
            _0x30c81e = _0x2b4960 - _0x79e97c;
            for (_0x5c7eec = _0x5c079c; _0x5c7eec > _0x4c0b22; _0x5c7eec -= _0x3dc308) {
                _0x39e82d.lineTo(_0x5c7eec, Math.min(_0x5c9774, Math.max(_0x379780, _0x30c81e + _0x39dc4a[_0x41fc92])));
                _0x41fc92 = (_0x41fc92 + 1) % _0x39dc4a.length;
            }
            _0x39e82d.closePath();
            _0x39e82d.fill();
        };
        BiomeShape.prototype.getBiomeColor = function() {
            if (this.forceBiomeColor) {
                return this.biomeColor;
            }
            switch (this.biome) {
                case _0x208477:
                    return _0x1afbdd;
                case _0x143680:
                    return "#c4dee7";
                case _0x315f18:
                    return _0x3128bd;
                case _0x9598c7:
                    return _0x5da83c;
                case _0x43b42f:
                    return _0x1d968f;
                case _0x45aeb2:
                    return _0x577d15;
                default:
                    return _0x1d968f;
            }
        };
        BiomeShape.prototype.jaggedSides = null;
        BiomeShape.prototype.forceBiomeColor = false;
        BiomeShape.prototype.readCustomData_onNewlyVisible = function(_0x2b414f) {
            this.isRect = _0x2b414f.readUInt8() == 1;
            this.biomeColor = _0x2b414f.readString();
            this.biome = _0x2b414f.readUInt16();
            var _0x24dfec = _0x2b414f.readBitGroup();
            this.forceBiomeColor = _0x24dfec.getBool();
            if (this.isRect) {
                this.jaggedSides = [_0x24dfec.getBool(), _0x24dfec.getBool(), _0x24dfec.getBool(), _0x24dfec.getBool()];
            }
            if (!this.isRect) {
                this.jaggedPointsForCircle(0, 0, this.rad, 40, 5, this.biomeColor, "#DAB601");
            } else {
                this.jaggedRect = [];
                var _0x300031 = 0;
                var _0x3c77c2 = 1;
                var _0x51e00b = 2;
                var _0x26fab9 = 3;
            }
            this.drawGrid = _0x5981a2 !== _0x4051d6;
        };
        BiomeShape.prototype.biomePattern = null;
        BiomeShape.prototype.generateTerrainFeatures = function() {
            var _0x2abb39 = 100;
            var _0x39be6d = 100;
            var _0x3abb6c = 1.5;
            if (this.biome == _0x315f18) {
                _0x2abb39 = 125;
                _0x39be6d = 125;
                _0x3abb6c = 1.5;
            } else if (this.biome == _0x45aeb2) {
                _0x2abb39 = 75;
                _0x39be6d = 75;
                _0x3abb6c = 2;
            }
            var _0x308954 = 1;
            var _0x261ec2 = -this.getRectWidth() / 2 + _0x2abb39;
            var _0x1275f0 = -this.getRectHeight() / 2 + _0x39be6d;
            var _0x147da5 = this.getRectWidth() / 2;
            var _0x4db5e7 = this.getRectHeight() / 2;
            var _0x59b007 = _0x2abb39 * (this.biome == _0x45aeb2 ? 2 : 3);
            var _0x50bb9c = 0;
            var _0xd5d728 = [];
            for (; _0x261ec2 < _0x147da5 - _0x2abb39; _0x261ec2++) {
                if (_0x308954 == 1) {
                    var _0x4b0c3c = {
                        x: _0x261ec2,
                        y: _0x1275f0,
                        rx: _0x261ec2 + _0x2abb39 * _0x14db03(-0.25, 0.25),
                        ry: _0x1275f0 + _0x39be6d * _0x14db03(-0.25, 0.25),
                        w: _0x2abb39 * _0x3abb6c,
                        h: _0x39be6d * _0x3abb6c,
                        c: "blue",
                        img: this.getRandomPatternImg(),
                        r: _0x14db03(0, 180)
                    };
                    if (_0x4b0c3c.img < 0) {
                        _0x4b0c3c.img = 0;
                    }
                    _0xd5d728.push(_0x4b0c3c);
                }
                _0x261ec2 += _0x59b007;
                if (_0x261ec2 >= _0x147da5 - _0x2abb39) {
                    _0x1275f0 += _0x59b007;
                    if (this.biome != _0x43b42f && this.biome != _0x45aeb2) {
                        _0x308954 = _0x308954 == 0 ? 1 : 0;
                    }
                    _0x261ec2 = -this.getRectWidth() / 2 + _0x2abb39;
                }
                if (this.biome != _0x43b42f && this.biome != _0x45aeb2) {
                    _0x308954 = _0x308954 == 0 ? 1 : 0;
                } else {
                    _0x308954 = _0x308954 == 0 ? 1 : 0;
                }
                if (this.biome == _0x43b42f) {
                    _0x308954 = 1;
                }
                if (_0x1275f0 > _0x4db5e7 - _0x39be6d) {
                    break;
                }
            }
            this.biomePattern = _0xd5d728;
        };
        BiomeShape.prototype.drawTerrainFeatures = function() {};
        BiomeShape.prototype.fillPattern = function(_0x4c9af3) {
            var _0x4d149c = this.curBiome + "_" + _0x4c9af3;
            var _0x51093f = "gameobj/" + this.oType + "/" + _0x4d149c + ".jpg";
            var _0xc3e29a = this.getSkinImageObj(_0x51093f);
            if (_0xc3e29a) {
                var _0x1b47e1 = -this.getRectWidth() / 2;
                var _0x16761b = -this.getRectHeight() / 2;
                var _0x1e27f0 = this.getRectWidth() * 2;
                var _0x54db5b = this.getRectHeight() * 2;
                var _0x5d2f76 = _0x39e82d.createPattern(_0xc3e29a, "repeat");
                _0x39e82d.fillStyle = _0x5d2f76;
                _0x39e82d.fillRect(_0x1b47e1, _0x16761b, _0x1e27f0, _0x54db5b);
            }
        };
        BiomeShape.prototype.drawRectObj = function(_0x774317) {
            var _0x4105bd = this.curBiome + "_" + _0x774317.img;
            var _0x551b0d = "gameobj/" + this.oType + "/" + _0x4105bd + ".png";
            var _0x3b53a3 = this.getSkinImageObj(_0x551b0d);
            if (_0x3b53a3) {
                _0x39e82d.save();
                _0x39e82d.translate(_0x774317.rx, _0x774317.ry);
                if (this.biome == _0x43b42f || this.biome == _0x143680 && _0x774317.img == 1 || this.biome == _0x315f18 && _0x774317.img > 1) {
                    _0x39e82d.rotate(_0x774317.r);
                }
                _0x39e82d.drawImage(_0x3b53a3, 0, 0, _0x774317.w, _0x774317.h);
                _0x39e82d.restore();
            }
        };
        BiomeShape.prototype.getRandomPatternImg = function() {
            var _0xabda56 = 1;
            if (this.biome == _0x43b42f || this.biome == _0x143680) {
                _0xabda56 = Math.max(0, Math.round(_0x14db03(0, 3)));
            } else if (this.biome == _0x45aeb2) {
                _0xabda56 = 1;
            } else {
                _0xabda56 = Math.max(0, Math.round(_0x14db03(0, 2)));
            }
            return _0xabda56 - 1;
        };

        function BiomeShape() {
            BiomeShape.superClass.call(this, _0x6bc369);
        }
        _0x35d268.setCustomClassForGameObjType(BiomeShape, _0x6bc369);
        var _0x28c171 = GameObj;
        _0xcf8161.prototype = Object.create(_0x28c171.prototype);
        _0xcf8161.prototype.constructor = _0xcf8161;
        _0xcf8161.superClass = _0x28c171;
        _0xcf8161.prototype.updateZ = function() {
            this.z = 1002 + this.rad;
        };
        _0xcf8161.prototype.customDraw = function(_0x4e915d) {
            var _0xa2e4b9 = this.getSkinImageObj("img/wave.png");
            if (_0xa2e4b9) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = this.alpha < 0.7 ? this.alpha : 1;
                var _0x3563b2 = this.rad * 1;
                _0x39e82d.rotate(this.angle + _0x4bfce6(180));
                _0x39e82d.drawImage(_0xa2e4b9, -_0x3563b2, -_0x3563b2, _0x3563b2 * 2, _0x3563b2 * 2);
                _0x39e82d.restore();
            }
        };
        _0xcf8161.prototype.readCustomData_onNewlyVisible = function(_0x2f9986) {
            this.alpha = _0x2f9986.readUInt8() / 100;
        };
        _0xcf8161.prototype.readUpdatedProperty = function(_0x2d89bf, _0x262d6b) {
            if (_0x2d89bf == _0x21834f) {
                this.alpha = _0x262d6b.readUInt8() / 100;
            }
        };
        var _0x12f3b2 = 148;

        function _0xcf8161() {
            _0xcf8161.superClass.call(this, _0x12f3b2);
        }
        _0x35d268.setCustomClassForGameObjType(_0xcf8161, _0x12f3b2);
        var _0x28c171 = GameObj;
        _0x5d1a47.prototype = Object.create(_0x28c171.prototype);
        _0x5d1a47.prototype.constructor = _0x5d1a47;
        _0x5d1a47.superClass = _0x28c171;
        _0x5d1a47.prototype.updateZ = function() {
            this.z = -294;
        };
        _0x5d1a47.prototype.customDraw = function(_0x1af4c4) {};
        _0x5d1a47.prototype.readCustomData_onNewlyVisible = function(_0x3474d4) {
            this.alpha = _0x3474d4.readUInt8() / 100;
        };
        _0x5d1a47.prototype.readUpdatedProperty = function(_0x1c32cc, _0x291c27) {
            if (_0x1c32cc == _0x21834f) {
                this.alpha = _0x291c27.readUInt8() / 100;
            }
        };
        var _0x1aaaf4 = 149;

        function _0x5d1a47() {
            _0x5d1a47.superClass.call(this, _0x1aaaf4);
        }
        _0x35d268.setCustomClassForGameObjType(_0x5d1a47, _0x1aaaf4);
        var _0x28c171 = GameObj;
        _0x278ec2.prototype = Object.create(_0x28c171.prototype);
        _0x278ec2.prototype.constructor = _0x278ec2;
        _0x278ec2.superClass = _0x28c171;
        _0x278ec2.prototype.updateZ = function() {
            this.z = this.rad + 100;
        };
        _0x278ec2.prototype.setSkinPath = function() {
            var _0x8964e9 = this.oType + "_" + this.speciesSubType;
            this.objSkinPath = "gameobj/" + this.oType + "/" + _0x8964e9 + "_" + this.hasPopped + ".png";
        };
        _0x278ec2.prototype.customDraw = function(_0x506b05) {};
        _0x278ec2.prototype.hasPopped = 0;
        _0x278ec2.prototype.readUpdatedProperty = function(_0x925774, _0xcc5e5e) {
            if (_0x925774 == _0x27a0c9) {
                this.hasPopped = _0xcc5e5e.readUInt8();
            }
        };
        var _0x3f1a99 = 151;

        function _0x278ec2() {
            _0x278ec2.superClass.call(this, _0x3f1a99);
        }
        _0x35d268.setCustomClassForGameObjType(_0x278ec2, _0x3f1a99);
        var _0x28c171 = GameObj;
        _0x3d68f4.prototype = Object.create(_0x28c171.prototype);
        _0x3d68f4.prototype.constructor = _0x3d68f4;
        _0x3d68f4.superClass = _0x28c171;
        _0x3d68f4.prototype.updateZ = function() {
            this.z = -150;
        };
        _0x3d68f4.prototype.customDraw = function(_0x1b17f5) {
            var _0x10f2f1 = 1;
            var _0x58e4f6 = 1;
            if (!_0x1d523b && _0x5981a2 != _0x4051d6 && !RVJsettings.performance) {
                var _0x338621 = (_0x4ec996 - this.spawnTime) / 1000;
                var _0x1624c9 = 1.2;
                _0x10f2f1 = Math.cos(Math.PI * 2 / _0x1624c9 * _0x338621) * 3.5;
                _0x58e4f6 = Math.sin(Math.PI * 2 / _0x1624c9 * _0x338621) * 2.5;
            }
            this.drawOutlinedCircleRad("", "#4A549D", this.innerRad);
            if (_0x5981a2 != _0x4051d6) {
                _0x466d9b(0 + _0x10f2f1 / 2 - this.rPer, 0 + _0x58e4f6 / 2 - this.rPer, Math.max(0, this.innerRad - 6), "#444C8B");
            }
            _0x466d9b(0 + _0x10f2f1 / 4.5 + this.rPer, 1 + _0x58e4f6 / 1.5, Math.max(0, this.innerRad - 14), "#4A549D");
            _0x466d9b(0 + _0x10f2f1 / 1.5 - this.rPer * 2, _0x58e4f6, Math.max(0, this.innerRad - 18.5 + _0x58e4f6 / 5), "#3F4477");
            _0x466d9b(0 + _0x10f2f1 / 1.5 - this.rPer * 2, _0x58e4f6, Math.max(0, this.innerRad - 22.5 + _0x58e4f6 / 11), "#353860");
            var _0x1f3149 = _0xb3e9be[_0x166276];
            if (_0x1f3149 && _0x1f3149.lastHidingHoleID == this.id) {
                if (this.alpha == undefined) {
                    this.alpha = 0;
                }
                if (_0x1f3149.flag_inHidingHole) {
                    this.alpha += (0.1 + this.alpha) * 0.1;
                } else {
                    this.alpha -= this.alpha * 0.1;
                }
                if (this.alpha > 1) {
                    this.alpha = 1;
                } else if (this.alpha < 0) {
                    this.alpha = 0;
                }
                _0x39e82d.globalAlpha = this.alpha;
                var _0x436296 = this.rad;
                this.drawOutlinedCircle("", "#4A549D", _0x436296);
                if (_0x5981a2 != _0x4051d6) {
                    _0x466d9b(0 + _0x10f2f1 / 2 - this.rPer, 0 + _0x58e4f6 / 2 - this.rPer, Math.max(0, _0x436296 - 6), "#444C8B");
                }
                _0x466d9b(0 + _0x10f2f1 / 4.5 + this.rPer, 1 + _0x58e4f6 / 1.5, Math.max(0, _0x436296 - 14), "#4A549D");
                _0x436296 = _0x436296 * 0.9;
                _0x39e82d.globalAlpha = this.alpha * 0.6;
                _0x466d9b(0 + _0x10f2f1 / 3.5 - this.rPer * 2, _0x58e4f6, Math.max(0, _0x436296 - 18.5 + _0x58e4f6 / 5), "#3F4477");
                _0x436296 = _0x436296 * 0.7;
                _0x39e82d.globalAlpha = this.alpha * 0.3;
                _0x466d9b(0 + _0x10f2f1 / 6.5 - this.rPer * 2, _0x58e4f6, Math.max(0, _0x436296 - 22.5 + _0x58e4f6 / 11), "#353860");
            }
        };

        function _0x3d68f4() {
            _0x3d68f4.superClass.call(this, _0x5c8a84);
            this.doesDrawEffectScale = false;
            this.drawEffectScale_Slow = false;
        }
        _0x35d268.setCustomClassForGameObjType(_0x3d68f4, _0x5c8a84);
        var _0x28c171 = GameObj;
        _0x13d334.prototype = Object.create(_0x28c171.prototype);
        _0x13d334.prototype.constructor = _0x13d334;
        _0x13d334.superClass = _0x28c171;
        _0x13d334.prototype.playerID = 0;
        _0x13d334.prototype.shellState = 0;
        _0x13d334.prototype.cracksCount = 0;
        _0x13d334.prototype.updateZ = function() {
            if (this.shellState == 0) {
                this.z = this.rad;
            } else {
                this.z = -153;
            }
        };
        _0x13d334.prototype.isEdibleOutlined = function() {
            if (this.playerID == _0x166276) {
                return false;
            }
            return _0xa4e113.superClass.prototype.isEdibleOutlined.call(this);
        };
        _0x13d334.prototype.nextShakeEndT = 0;
        _0x13d334.prototype.nextShakeStartT = 0;
        _0x13d334.prototype.drawScaleEffect = function() {
            if (this.shellState != 1) {
                this.drawNickName(1);
            }
            if (this.shellState == 0) {
                if (_0x4ec996 > this.nextShakeEndT) {
                    this.nextShakeEndT = +new Date() + _0x14db03(2500, 4500);
                    this.nextShakeStartT = this.nextShakeEndT - _0x14db03(1000, 1500);
                }
                if (_0x4ec996 > this.nextShakeStartT && _0x4ec996 < this.nextShakeEndT) {
                    var _0x4c3152 = 0.02;
                    var _0x2bc5b8 = (_0x4ec996 - this.spawnTime) / 1000;
                    var _0x12c316 = 0.1;
                    var _0x30877b = this.rad * _0x4c3152;
                    var _0x16dc82 = _0x30877b * Math.sin(Math.PI * 2 / _0x12c316 * _0x2bc5b8);
                    var _0x12c316 = 0.15;
                    var _0x30877b = this.rad * _0x4c3152;
                    var _0x228daa = _0x30877b * Math.cos(Math.PI * 2 / _0x12c316 * _0x2bc5b8);
                    _0x39e82d.translate(-_0x16dc82, -_0x228daa);
                }
            }
        };
        _0x13d334.prototype.customDraw = function(_0x5cb6cc) {
            var _0x21fd96 = "upgradeshell";
            if (this.shellState == 0) {
                if (this.cracksCount > 0 && this.cracksCount <= 10) {
                    _0x21fd96 = "egg_crack" + this.cracksCount;
                } else {
                    _0x21fd96 += "" + this.shellState;
                }
            } else {
                _0x21fd96 += "" + this.shellState;
            }
            var _0x23735c = this.getSkinImageObj("img/upgradeshell/" + _0x21fd96 + ".png");
            var _0xb7b81e = this.getSkinImageObj("img/upgradeshell/outline" + this.curBiome + ".png");
            var _0x5a977b = this.rad;
            var _0x3fda0c = this.rPer * Math.PI * 2;
            _0x39e82d.save();
            _0x39e82d.rotate(_0x3fda0c);
            if (_0x23735c) {
                _0x39e82d.drawImage(_0x23735c, -_0x5a977b, -_0x5a977b * 1.1, _0x5a977b * 2, _0x5a977b * 2.2);
                if (this.shellState == 0 && _0xb7b81e) {
                    _0x39e82d.drawImage(_0xb7b81e, -_0x5a977b, -_0x5a977b * 1.1, _0x5a977b * 2, _0x5a977b * 2.21);
                }
            }
            _0x39e82d.restore();
        };
        _0x13d334.prototype.getNameSize = function() {
            return 6;
        };
        _0x13d334.prototype.setNick = function(_0x26e49e) {
            _0x26e49e = _0x292e5a(_0x26e49e);
            this.nickName = _0x26e49e;
            if (this.nickTXT == null) {
                this.nickTXT = new _0x123582(this.getNameSize(), "#FFFFFF");
                this.nickTXT.strokeW = 1.5;
                this.nickTXT.renderScale = 5;
                this.nickTXT.setText(this.nickName);
            } else {
                this.nickTXT.setFontSize(this.getNameSize());
                this.nickTXT.setText(this.nickName);
            }
        };
        _0x13d334.prototype.drawNickName = function(_0x1dc90c) {
            if (this.nickName && this.nickTXT && !_0x26aab4) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = _0x1dc90c;
                this.nickTXT.x = 0;
                this.nickTXT.y = this.rad + 5;
                this.nickTXT.draw();
                _0x39e82d.restore();
            }
        };
        _0x13d334.prototype.readCustomData_onNewlyVisible = function(_0x82bd6e) {
            _0x13d334.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x82bd6e);
            this.playerID = _0x82bd6e.readUInt32();
            if (this.playerID > 0) {
                var _0x459c30 = _0x82bd6e.readString();
                this.setNick(_0x459c30 ? _0x459c30 : "mope.io");
            }
            this.readUpdatedProperty(_0x46caca, _0x82bd6e);
            this.readUpdatedProperty(_0x60c8a8, _0x82bd6e);
        };
        _0x13d334.prototype.readUpdatedProperty = function(_0x4c0da0, _0x28bb5a) {
            if (_0x4c0da0 == _0x46caca) {
                this.shellState = _0x28bb5a.readUInt8();
            } else if (_0x4c0da0 == _0x60c8a8) {
                this.cracksCount = _0x28bb5a.readUInt8();
            }
        };
        var _0x45b4c5 = 152;

        function _0x13d334() {
            _0x13d334.superClass.call(this, _0x45b4c5);
        }
        _0x35d268.setCustomClassForGameObjType(_0x13d334, _0x45b4c5);
        var _0x28c171 = GameObj;
        _0x59b8bf.prototype = Object.create(_0x28c171.prototype);
        _0x59b8bf.prototype.constructor = _0x59b8bf;
        _0x59b8bf.superClass = _0x28c171;
        _0x59b8bf.prototype.playerID = 0;
        _0x59b8bf.prototype.shellState = 0;
        _0x59b8bf.prototype.cracksCount = 0;
        _0x59b8bf.prototype.updateZ = function() {
            this.z = 100000;
        };
        _0x59b8bf.prototype.customDraw = function(_0x44bb80) {
            switch (this.speciesType) {
                case _0x45b4c5: {
                    var _0x1f5b59 = this.getSkinImageObj("img/upgradeshell/shellpart" + this.speciesSubType + ".png");
                    var _0x16158b = this.rad;
                    var _0x920ca1 = this.rPer * Math.PI * 2;
                    if (_0x1f5b59) {
                        _0x39e82d.save();
                        _0x39e82d.rotate(_0x920ca1);
                        _0x39e82d.drawImage(_0x1f5b59, -_0x16158b, -_0x16158b, _0x16158b * 2, _0x16158b * 2);
                        _0x39e82d.restore();
                    }
                    break;
                }
                default:
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = 0.1;
                    _0x466d9b(0, 0, this.rad, "black");
                    _0x39e82d.restore();
                    break;
            }
        };
        var _0x68a1e4 = 153;

        function _0x59b8bf() {
            _0x59b8bf.superClass.call(this, _0x68a1e4);
        }
        _0x35d268.setCustomClassForGameObjType(_0x59b8bf, _0x68a1e4);
        var _0x5899d5 = _0x4f7981;
        var _0x28c171 = _0xa0a2ad;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x4f7981.prototype.updateZ = function() {
            this.z = 100002;
        };
        _0x4f7981.prototype.customDraw = function(_0x185258) {
            this.drawEffectScale_Slow = true;
            this.doesDrawEffectScale = true;
            _0x39e82d.globalAlpha = 0.2;
            _0x466d9b(0, 0, this.rad * 0.85, "white");
            var _0x2be89a = this.isGreenTarget ? "_e" : "";
            var _0x398c68 = this.getSkinImageObj("img/target" + _0x2be89a + ".png");
            if (_0x398c68) {
                var _0x1a52db = this.rad;
                _0x39e82d.save();
                _0x39e82d.globalAlpha = 0.5;
                _0x39e82d.drawImage(_0x398c68, -_0x1a52db, -_0x1a52db, _0x1a52db * 2, _0x1a52db * 2);
                _0x39e82d.restore();
            }
            _0x39e82d.save();
            if (this.hasTimer && this.timerTxt != null) {
                _0x39e82d.globalAlpha = 1;
                this.timerTxt.x = 0;
                this.timerTxt.y = 0;
                this.timerTxt.draw();
            }
            _0x39e82d.restore();
        };
        _0x4f7981.prototype.worldUpd_readMsgNewlyVisible = function(_0x2bcc2d, _0x4f0649, _0xd64a0c) {
            this.setObjTypes(_0x4f0649, _0xd64a0c);
            this.id = _0x2bcc2d.readUInt32();
            var _0x5a8de4 = _0x2bcc2d.readUInt16() / 4;
            var _0x4d5d91 = _0x2bcc2d.readUInt16() / 4;
            var _0x1d4cfb = _0x2bcc2d.readUInt16() / 4;
            this.ox = this.x = this.nx = _0x4d5d91;
            this.oy = this.y = this.ny = _0x1d4cfb;
            this.nRad = _0x5a8de4;
            this.oRad = this.rad = 0;
            this.setMovedToPos(_0x4d5d91, _0x1d4cfb);
            this.setNewRad(_0x5a8de4);
            this.hasTimer = _0x2bcc2d.readUInt8() == 1;
            this.readUpdatedProperty(_0x2308bc, _0x2bcc2d);
            this.readUpdatedProperty(_0x40ebb0, _0x2bcc2d);
            this.mopeSeasonID = 1;
        };
        _0x4f7981.prototype.readUpdatedProperty = function(_0x49d623, _0x211416) {
            if (_0x49d623 == _0x583376) {
                this.timer = _0x211416.readUInt16() / 100;
                if (this.timer < 30) {
                    this.updateTimer();
                }
            } else if (_0x49d623 == _0x40ebb0) {
                this.targetText = _0x211416.readString();
                this.hasTimer = true;
                this.setTimer(this.targetText);
            } else if (_0x49d623 == _0x450242) {
                this.hasVictim = true;
                var _0x416a69 = _0x211416.readUInt16() / 4;
                var _0x8ec66f = _0x211416.readUInt16() / 4;
                this.spider_ox = this.victimX;
                this.spider_oy = this.victimY;
                this.spider_nx = _0x416a69;
                this.spider_ny = _0x8ec66f;
            } else if (_0x49d623 == _0x2308bc) {
                this.isGreenTarget = _0x211416.readUInt8() == 1;
            }
        };
        _0x4f7981.prototype.isGreenTarget = false;
        _0x4f7981.prototype.hasVictim = false;
        _0x4f7981.prototype.victimX = null;
        _0x4f7981.prototype.victimY = null;
        _0x4f7981.prototype.onLerpUpdate = function(_0x40d4ff) {
            if (this.hasVictim) {
                this.victimX = _0x40d4ff * (this.spider_nx - this.spider_ox) + this.spider_ox;
                this.victimY = _0x40d4ff * (this.spider_ny - this.spider_oy) + this.spider_oy;
            }
        };
        _0x4f7981.prototype.beforeCustomDraw = function(_0x8bb8f5) {
            if (this.hasVictim) {
                _0x39e82d.save();
                _0x39e82d.strokeStyle = "white";
                _0x39e82d.globalAlpha = 1;
                _0x39e82d.beginPath();
                _0x39e82d.moveTo(this.x, this.y);
                _0x39e82d.lineTo(this.victimX, this.victimY);
                _0x39e82d.stroke();
                _0x39e82d.restore();
            }
        };
        _0x4f7981.prototype.updateTimer = function() {
            this.timer = Math.round(this.timer);
            var _0x4afe26 = this.timer;
            this.setTimer(_0x4afe26);
        };
        _0x4f7981.prototype.timerTxt = null;
        _0x4f7981.prototype.setTimer = function(_0x5e6cff) {
            var _0x4fa5c3 = "" + _0x5e6cff;
            if (this.timerTxt == null) {
                this.timerTxt = new _0x123582(20, "#FFFFFF");
                this.timerTxt.strokeW = 2;
                this.timerTxt.multiLine = true;
                this.timerTxt.renderScale = 5;
                this.timerTxt.setText(_0x4fa5c3);
            } else {
                this.timerTxt.setFontSize(20);
                this.timerTxt.setText(_0x4fa5c3);
            }
        };

        function _0x4f7981() {
            _0x4f7981.superClass.call(this);
        }
        _0x35d268.setCustomClassForGameObjType(_0x4f7981, _0x651296, _0x5aedc9);
        var _0x28c171 = GameObj;
        _0x14be79.prototype = Object.create(_0x28c171.prototype);
        _0x14be79.prototype.constructor = _0x14be79;
        _0x14be79.superClass = _0x28c171;
        _0x14be79.prototype.stoneIncentive = 0;
        _0x14be79.prototype.teamID = 0;
        _0x14be79.prototype.lastHurtByTeamID = 0;
        _0x14be79.prototype.coolDownTime = 0;
        _0x14be79.prototype.isDefended = false;
        _0x14be79.prototype.updateZ = function() {
            this.z = 1002;
        };
        _0x14be79.prototype.customDraw = function(_0x1c3ecc) {
            let _0x1736d5 = this.teamID;
            if (this.teamID == 0) {
                if (this.lastHurtByTeamID != 0) {
                    _0x1736d5 += "_" + this.lastHurtByTeamID;
                } else if (this.coolDownTime > 0.1) {
                    _0x1736d5 += "_0";
                }
            }
            var _0x4d7dd6 = this.getSkinImageObj("gameobj/" + this.oType + "/stone" + _0x1736d5 + ".png");
            if (_0x4d7dd6) {
                var _0x56cb58 = this.rad * 1.25;
                _0x39e82d.drawImage(_0x4d7dd6, -_0x56cb58, -_0x56cb58, _0x56cb58 * 2, _0x56cb58 * 2);
            }
            if (!this.isDefended) {
                var _0x31973a = this.getSkinImageObj("gameobj/" + this.oType + "/stone_undefended.png");
                if (_0x31973a) {
                    var _0x56cb58 = this.rad * 1.25;
                    _0x39e82d.drawImage(_0x31973a, -_0x56cb58, -_0x56cb58, _0x56cb58 * 2, _0x56cb58 * 2);
                }
            }
            var _0x4a19e9 = this.getSkinImageObj("gameobj/" + this.oType + "/incentive/" + this.stoneIncentive + ".png");
            if (_0x4a19e9) {
                var _0x56cb58 = this.rad / 4;
                _0x39e82d.drawImage(_0x4a19e9, -_0x56cb58, -_0x56cb58, _0x56cb58 * 2, _0x56cb58 * 2);
            }
        };
        _0x14be79.prototype.setIncentiveText = function() {
            if (this.incentiveTxt == null) {
                this.incentiveTxt = new _0x123582(10, "#FFFFFF");
                this.incentiveTxt.strokeW = 1.5;
                this.incentiveTxt.multiLine = true;
                this.incentiveTxt.renderScale = 5;
                this.incentiveTxt.setText(this.nickName);
            } else {
                this.incentiveTxt.setFontSize(10);
                this.incentiveTxt.multiLine = true;
                let _0x5b172b = "";
                if (this.coolDownTime > 0.1) {
                    _0x5b172b = "\ncooldown: " + this.coolDownTime + "s";
                }
                this.incentiveTxt.setText(this.nickName + _0x5b172b);
            }
        };
        _0x14be79.prototype.drawIncentiveText = function(_0x4e1d4d) {
            if (this.incentiveTxt && !_0x26aab4) {
                _0x39e82d.save();
                _0x39e82d.globalAlpha = _0x4e1d4d;
                this.incentiveTxt.x = -this.rad / 2;
                this.incentiveTxt.y = -this.rad / 2;
                this.incentiveTxt.draw();
                _0x39e82d.restore();
            }
        };
        _0x14be79.prototype.readCustomData_onNewlyVisible = function(_0x547a83) {
            _0x14be79.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x547a83);
            this.stoneIncentive = _0x547a83.readUInt8();
            this.readUpdatedProperty(_0x3566bf, _0x547a83);
            this.readUpdatedProperty(_0x1fde95, _0x547a83);
            this.readUpdatedProperty(_0xb2499, _0x547a83);
            this.readUpdatedProperty(_0x3d9e3b, _0x547a83);
        };
        _0x14be79.prototype.readUpdatedProperty = function(_0x54aa3b, _0x5c03b3) {
            if (_0x54aa3b == _0x3566bf) {
                this.teamID = _0x5c03b3.readUInt8();
            } else if (_0x54aa3b == _0x1fde95) {
                this.lastHurtByTeamID = _0x5c03b3.readUInt8();
            } else if (_0x54aa3b == _0x3d9e3b) {
                this.isDefended = _0x5c03b3.readUInt8() == 1;
            } else if (_0x54aa3b == _0xb2499) {
                this.coolDownTime = _0x5c03b3.readUInt16() / 100;
            }
        };
        _0x14be79.prototype.onHurt = function() {};
        var _0x30ede3 = 78;

        function _0x14be79() {
            _0x14be79.superClass.call(this, _0x30ede3);
        }
        _0x35d268.setCustomClassForGameObjType(_0x14be79, _0x30ede3);
        const _0x260232 = 1;
        const _0x2e4d43 = 2;
        const _0x35b67f = 3;
        const _0x5b6d14 = 4;
        const _0x377543 = 5;
        const _0x12c9e5 = 6;
        const _0x5df356 = 7;
        const _0x4ecaf3 = 8;
        const _0x3ae866 = 9;
        const _0x4d8bbf = 10;
        const _0x1fb7c3 = 11;
        const _0x35a339 = 12;
        const _0x42e2f5 = 13;
        var _0x28c171 = GameObj;
        _0x107d9f.prototype = Object.create(_0x28c171.prototype);
        _0x107d9f.prototype.constructor = _0x107d9f;
        _0x107d9f.superClass = _0x28c171;
        _0x107d9f.prototype.updateZ = function() {
            this.z = this.hasImpact ? this.rad : 100000000000;
        };
        let _0x37c6c8 = 1.5;
        _0x107d9f.prototype.frame = 0;
        _0x107d9f.prototype.customDraw = function(_0x17cfa6) {
            if (!this.hasImpact) {
                this.frame = Math.trunc(_0x4ec996 / 120) % 6;
            } else {
                this.frame = 0;
            }
            var _0x2326a2 = "gameobj/" + this.oType + "/" + this.oType + "_" + this.frame + ".png";
            var _0x1eda94 = this.getSkinImageObj(_0x2326a2);
            if (_0x1eda94) {
                _0x39e82d.save();
                var _0x4877c5 = this.rad * 2;
                if (!this.hasImpact) {
                    _0x39e82d.shadowColor = "rgba(0,0,0,0.05)";
                    _0x39e82d.shadowBlur = 0;
                    _0x39e82d.shadowOffsetX = this.shadowDistance;
                    _0x39e82d.shadowOffsetY = this.shadowDistance;
                    _0x39e82d.rotate(this.angle);
                    _0x39e82d.drawImage(_0x1eda94, -_0x4877c5 / 2, -_0x4877c5 * _0x37c6c8, _0x4877c5, _0x4877c5 * 2);
                } else {
                    _0x2326a2 = "gameobj/" + this.oType + "/meteorite.png";
                    _0x1eda94 = null;
                    _0x1eda94 = this.getSkinImageObj(_0x2326a2);
                    if (_0x1eda94) {
                        _0x39e82d.rotate(this.angle);
                        _0x4877c5 = this.rad;
                        _0x39e82d.drawImage(_0x1eda94, -_0x4877c5, -_0x4877c5, _0x4877c5 * 2, _0x4877c5 * 2);
                    }
                }
                _0x39e82d.restore();
            }
        };
        _0x107d9f.prototype.readCustomData_onNewlyVisible = function(_0x32aaec) {
            _0x107d9f.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x32aaec);
            this.readUpdatedProperty(_0x4b8ff5, _0x32aaec);
            this.readUpdatedProperty(_0x34ee8e, _0x32aaec);
        };
        _0x107d9f.prototype.shadowDistance = 0;
        _0x107d9f.prototype.hasImpact = false;
        _0x107d9f.prototype.readUpdatedProperty = function(_0x4b0892, _0x55a18b) {
            if (_0x4b0892 == _0x34ee8e) {
                let _0x5627ec = _0x55a18b.readUInt16() / 10;
                this.shadowDistance = _0x5627ec;
            } else if (_0x4b0892 == _0x4b8ff5) {
                this.hasImpact = _0x55a18b.readUInt8() == 1;
            }
        };
        const _0x5e8be0 = 154;

        function _0x107d9f() {
            _0x107d9f.superClass.call(this, _0x5e8be0);
        }
        _0x35d268.setCustomClassForGameObjType(_0x107d9f, _0x5e8be0);
        var _0x28c171 = GameObj;
        _0x2eb62c.prototype = Object.create(_0x28c171.prototype);
        _0x2eb62c.prototype.constructor = _0x2eb62c;
        _0x2eb62c.superClass = _0x28c171;
        _0x2eb62c.prototype.updateZ = function() {
            this.z = -101;
        };
        _0x2eb62c.prototype.customDraw = function(_0x1ac6bd) {
            skin = "gameobj/" + this.oType + "/" + this.oType + ".png";
            var _0x2b11ef = this.getSkinImageObj(skin);
            if (_0x2b11ef) {
                _0x39e82d.save();
                _0x39e82d.rotate(this.angle);
                rad = this.rad * 1.5;
                _0x39e82d.drawImage(_0x2b11ef, -rad, -rad, rad * 2, rad * 2);
                _0x39e82d.restore();
            }
        };
        const _0x3a6b80 = 155;

        function _0x2eb62c() {
            _0x2eb62c.superClass.call(this, _0x3a6b80);
        }
        _0x35d268.setCustomClassForGameObjType(_0x2eb62c, _0x3a6b80);
        var _0x28c171 = GameObj;
        _0x1597d9.prototype = Object.create(_0x28c171.prototype);
        _0x1597d9.prototype.constructor = _0x1597d9;
        _0x1597d9.superClass = _0x28c171;
        _0x1597d9.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x1597d9.prototype.customDraw = function(_0x2dbc2f) {
            this.frame = Math.trunc(_0x4ec996 / 120) % 5;
            var _0x2827c5 = "gameobj/" + this.oType + "/" + this.oType + "_" + this.frame + ".png";
            var _0x556cbc = this.getSkinImageObj(_0x2827c5);
            if (_0x556cbc) {
                var _0x2c675a = this.rad;
                _0x39e82d.save();
                _0x39e82d.rotate(this.angle);
                _0x39e82d.drawImage(_0x556cbc, -_0x2c675a, -_0x2c675a, _0x2c675a * 2, _0x2c675a * 2);
                _0x39e82d.restore();
            }
        };
        const _0x5ba9d6 = 157;

        function _0x1597d9() {
            _0x1597d9.superClass.call(this, _0x5ba9d6);
        }
        _0x35d268.setCustomClassForGameObjType(_0x1597d9, _0x5ba9d6);
        const _0xda2d3d = 0;
        const _0x14b97b = 1;
        const _0x5967e4 = 2;
        const _0x14e75f = 3;
        var _0x28c171 = GameObj;
        _0x41fcad.prototype = Object.create(_0x28c171.prototype);
        _0x41fcad.prototype.constructor = _0x41fcad;
        _0x41fcad.superClass = _0x28c171;
        _0x41fcad.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x41fcad.prototype.customDraw = function(_0x5cba46) {
            var _0x369b60 = this.getSkinImageObj("gameobj/" + this.oType + "/" + this.oType + "_" + this.speciesType + (this.isEdibleOutlined() ? "_e" : "") + ".png");
            if (_0x369b60) {
                var _0xd3bd4e = this.rad;
                _0x39e82d.drawImage(_0x369b60, -_0xd3bd4e, -_0xd3bd4e, _0xd3bd4e * 2, _0xd3bd4e * 2);
            }
        };
        var _0x27351d = 158;
        _0x41fcad.prototype.readCustomData_onNewlyVisible = function(_0x41e61b) {
            _0x41fcad.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x41e61b);
            this.speciesType = _0x41e61b.readUInt16();
            this.speciesSubType = _0x41e61b.readUInt16();
        };

        function _0x41fcad() {
            _0x41fcad.superClass.call(this, _0x27351d);
        }
        _0x35d268.setCustomClassForGameObjType(_0x41fcad, _0x27351d);
        var _0x28c171 = Animal;
        _0x3c0a67.prototype = Object.create(_0x28c171.prototype);
        _0x3c0a67.prototype.constructor = _0x3c0a67;
        _0x3c0a67.superClass = _0x28c171;
        _0x3c0a67.prototype.animalInfo = function() {
            var _0x5c65ba = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x5c65ba.aniName = "Swinehoe";
                    break;
                case 1:
                    _0x5c65ba.aniName = "Golden Pheasant";
                    break;
            }
            _0x5c65ba.aniCol = "#FF9000";
            _0x5c65ba.skinName = this.getSkinName();
            _0x5c65ba.upgradeText = "UPGRADED to " + _0x5c65ba.aniName + "!\nHold W to charge. ";
            return _0x5c65ba;
        };
        _0x3c0a67.prototype.getSkinName = function() {
            return this.getSpeciesPath() + this.getSubSpecies() + "/pheasant" + (this.specType == 0 ? "" : this.specType);
        };
        _0x3c0a67.prototype.getSpeciesPath = function() {
            return "forest/pheasant/" + this.animalSpecies;
        };
        _0x3c0a67.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x3c0a67.prototype.getWing = function(_0x479ffd, _0x53b155, _0x161fe1) {
            var _0x44ee16 = "skins/" + this.getSpeciesPath() + "/";
            _0x44ee16 += _0x479ffd + "_wing" + _0x53b155 + ".png";
            return _0x44ee16;
        };
        _0x3c0a67.prototype.getHead = function(_0x7ee14f, _0x48efe1) {
            var _0x2eb9dd = "skins/" + this.getSpeciesPath() + "/";
            _0x2eb9dd += _0x7ee14f + "_head.png";
            return _0x2eb9dd;
        };
        _0x3c0a67.prototype.theFrame = 0;
        _0x3c0a67.prototype.drawUnderSkinImg = function() {
            this.setSkinScale();
            var _0x25c5c0 = -0.7;
            var _0x5ec414 = 0.9;
            var _0x413492 = "skins/" + this.getSpeciesPath() + "/tail.png";
            var _0x1a88aa = this.getSkinImageObj(_0x413492);
            if (_0x1a88aa) {
                if (this.flag_usingAbility) {
                    _0x5ec414 = 1.1;
                }
                var _0x2214e0 = this.skinScale;
                var _0x4c108c = this.rad - this.outlineW;
                _0x39e82d.drawImage(_0x1a88aa, -_0x4c108c * _0x2214e0 * _0x5ec414, (-_0x4c108c + _0x4c108c * _0x25c5c0) * _0x2214e0 * _0x5ec414, _0x4c108c * 2 * _0x2214e0 * _0x5ec414, _0x4c108c * 2 * _0x2214e0 * _0x5ec414);
            }
        };
        _0x3c0a67.prototype.drawSkinCustomization = function() {
            if (this.flag_usingAbility) {
                if (this.flag_flying) {
                    var _0xc1ce8b = "skins";
                    {
                        var _0x5f3be1 = 500 / 340;
                        if (this.flag_flying && !this.flag_isGrabbed) {
                            _0x39e82d.save();
                            var _0x4e7e12 = _0x4e4bab("bird", this.spawnTime);
                            if (_0x4e7e12 !== undefined && _0x4e7e12 != null) {
                                this.theFrame = _0x4e7e12;
                            }
                            var _0x444517 = _0x5981a2 != _0x4051d6 && !_0x1d523b ? this.theFrame : this.birdNoAnimationFlyWingAngle;
                            var _0x2cb9b2 = this.getSkinImageObj(this.getWing("pheasant", 1, true));
                            if (_0x2cb9b2) {
                                _0x39e82d.save();
                                var _0x19c639 = -(-0.2 + _0x444517) * _0x439930;
                                var _0x4c86b6 = this.rad * 0.8;
                                _0x39e82d.rotate(_0x506969 + _0x19c639);
                                var _0x4c5c73 = 0;
                                var _0x2879f8 = this.rad;
                                var _0x1f1c87 = _0x4c86b6 * 2 * 0.62;
                                var _0x2c4e7d = _0x4c86b6 * 2.5;
                                var _0x245ccc = 0.2;
                                var _0x964f14 = 1.7;
                                _0x39e82d.drawImage(_0x2cb9b2, _0x4c5c73 + _0x1f1c87 * -_0x245ccc, _0x2879f8 + _0x2c4e7d * -_0x964f14, _0x1f1c87, _0x2c4e7d);
                                _0x39e82d.restore();
                            }
                            var _0x2cb9b2 = this.getSkinImageObj(this.getWing("pheasant", 2, true));
                            if (_0x2cb9b2) {
                                _0x39e82d.save();
                                var _0x19c639 = -(-0.2 + _0x444517) * _0x4bfce6(-90);
                                var _0x4c86b6 = this.rad * 0.8;
                                _0x39e82d.rotate(_0x4bfce6(-45) + _0x19c639);
                                var _0x4c5c73 = 0;
                                var _0x2879f8 = this.rad;
                                var _0x1f1c87 = _0x4c86b6 * 2 * 0.62;
                                var _0x2c4e7d = _0x4c86b6 * 2.5;
                                var _0x245ccc = 0.8;
                                var _0x964f14 = 1.7;
                                _0x39e82d.drawImage(_0x2cb9b2, _0x4c5c73 + _0x1f1c87 * -_0x245ccc, _0x2879f8 + _0x2c4e7d * -_0x964f14, _0x1f1c87, _0x2c4e7d);
                                _0x39e82d.restore();
                            }
                            _0x39e82d.restore();
                        }
                        if (this.specType != 0 && this.specType != undefined) {
                            var _0x3feacc = this.getSkinImageObj(this.getHead("pheasant", true));
                            if (_0x3feacc) {
                                _0x39e82d.save();
                                var _0x4c86b6 = this.rad;
                                var _0x2bdcba = 0.2;
                                _0x39e82d.drawImage(_0x3feacc, -_0x4c86b6 * _0x5f3be1, (-_0x4c86b6 + _0x4c86b6 * _0x2bdcba) * _0x5f3be1, _0x4c86b6 * 2 * _0x5f3be1, _0x4c86b6 * 2 * _0x5f3be1);
                                _0x39e82d.restore();
                            }
                        }
                    }
                } else {
                    var _0x5f3be1 = 500 / 340;
                    if (this.flag_usingAbility) {
                        _0x39e82d.save();
                        var _0x444517 = 0;
                        var _0x2cb9b2 = this.getSkinImageObj(this.getWing("pheasant", 1, true));
                        if (_0x2cb9b2) {
                            _0x39e82d.save();
                            var _0x19c639 = -(-0.2 + _0x444517) * _0x4bfce6(15);
                            var _0x4c86b6 = this.rad * 0.8;
                            _0x39e82d.rotate(_0x4bfce6(15) + _0x19c639);
                            var _0x4c5c73 = 0;
                            var _0x2879f8 = this.rad;
                            var _0x1f1c87 = _0x4c86b6 * 2 * 0.7;
                            var _0x2c4e7d = _0x4c86b6 * 2.2;
                            var _0x245ccc = 0;
                            var _0x964f14 = 1.5;
                            _0x39e82d.drawImage(_0x2cb9b2, _0x4c5c73 + _0x1f1c87 * -_0x245ccc, _0x2879f8 + _0x2c4e7d * -_0x964f14, _0x1f1c87, _0x2c4e7d);
                            _0x39e82d.restore();
                        }
                        var _0x2cb9b2 = this.getSkinImageObj(this.getWing("pheasant", 2, true));
                        if (_0x2cb9b2) {
                            _0x39e82d.save();
                            var _0x19c639 = -(-0.2 + _0x444517) * _0x4bfce6(-15);
                            var _0x4c86b6 = this.rad * 0.8;
                            _0x39e82d.rotate(_0x4bfce6(-15) + _0x19c639);
                            var _0x4c5c73 = 0;
                            var _0x2879f8 = this.rad;
                            var _0x1f1c87 = _0x4c86b6 * 2 * 0.7;
                            var _0x2c4e7d = _0x4c86b6 * 2.2;
                            var _0x245ccc = 1;
                            var _0x964f14 = 1.5;
                            _0x39e82d.drawImage(_0x2cb9b2, _0x4c5c73 + _0x1f1c87 * -_0x245ccc, _0x2879f8 + _0x2c4e7d * -_0x964f14, _0x1f1c87, _0x2c4e7d);
                            _0x39e82d.restore();
                        }
                        var _0x3feacc = this.getSkinImageObj(this.getHead("pheasant", true));
                        if (_0x3feacc) {
                            _0x39e82d.save();
                            var _0x4c86b6 = this.rad * 1;
                            var _0x2d4e85 = -this.rad * 0.1;
                            _0x39e82d.drawImage(_0x3feacc, -_0x4c86b6 * _0x5f3be1, -_0x4c86b6 + _0x2d4e85 * _0x5f3be1, _0x4c86b6 * 2 * _0x5f3be1, _0x4c86b6 * 2 * _0x5f3be1);
                            _0x39e82d.restore();
                        }
                        _0x39e82d.restore();
                    }
                }
            }
        };

        function _0x3c0a67() {
            _0x3c0a67.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x3c0a67, _0x48c056, _0x116c1b);
        var _0x28c171 = Animal;
        _0x405e60.prototype = Object.create(_0x28c171.prototype);
        _0x405e60.prototype.constructor = _0x405e60;
        _0x405e60.superClass = _0x28c171;
        _0x405e60.prototype.getSkinName = function() {
            return this.getSpeciesPath() + this.getSubSpecies() + "/flyinglizard" + (this.flag_usingAbility ? "_body" : "");
        };
        _0x405e60.prototype.getSpeciesPath = function() {
            return "forest/flyinglizard/" + this.animalSpecies;
        };
        _0x405e60.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x405e60.prototype.animalInfo = function() {
            var _0x17c918 = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x17c918.aniName = "Flying Lizard!";
                    break;
            }
            _0x17c918.skinName = this.getSkinName();
            _0x17c918.aniDesc = "";
            _0x17c918.upgradeText = "UPGRADED to " + _0x17c918.aniName + "!\nClimb on a high spot to be able to glide from it!";
            _0x17c918.aniCol = "#FF9D43";
            return _0x17c918;
        };
        _0x405e60.prototype.getAsset = function(_0x2089cb) {
            var _0x9e0d33 = "skins/" + this.getSpeciesPath() + "/flyinglizard";
            _0x9e0d33 += "_" + _0x2089cb + ".png";
            return _0x9e0d33;
        };
        _0x405e60.prototype.backOffset = -0.4;
        _0x405e60.prototype.armsOffset = 0.16;
        _0x405e60.prototype.headOffset = 0.3;
        _0x405e60.prototype.wingsOffset = -0.5;
        _0x405e60.prototype.wingsScale = 1.5;
        _0x405e60.prototype.backScale = 1.1;
        _0x405e60.prototype.drawSkinCustomization = function() {
            if (this.flag_usingAbility) {
                var _0x1a28f9 = 500 / 340;
                this.drawAsset(_0x1a28f9, "arms", this.armsOffset);
                this.drawAsset(_0x1a28f9, "wings", this.wingsOffset, _0x1a28f9 * this.wingsScale);
                this.drawAsset(_0x1a28f9, "back", this.backOffset, _0x1a28f9 * this.backScale);
                this.drawAsset(_0x1a28f9, "head", this.headOffset);
            }
        };
        _0x405e60.prototype.drawAsset = function(_0x1d8a9d, _0x54e31a, _0x355587, _0x305fbd) {
            var _0x7329a = this.getSkinImageObj(this.getAsset(_0x54e31a));
            if (_0x7329a) {
                if (_0x355587 === undefined) {
                    _0x355587 = 0;
                }
                if (_0x305fbd === undefined) {
                    _0x305fbd = _0x1d8a9d;
                }
                _0x39e82d.save();
                var _0x2fb08b = this.rad;
                _0x39e82d.drawImage(_0x7329a, -_0x2fb08b * _0x1d8a9d, (-_0x2fb08b + _0x2fb08b * _0x355587) * _0x1d8a9d, _0x2fb08b * 2 * _0x1d8a9d, _0x2fb08b * 2 * _0x305fbd);
                _0x39e82d.restore();
            }
        };

        function _0x405e60() {
            _0x405e60.superClass.call(this, _0x48c056);
        }
        const _0x36ecf0 = 121;
        _0x35d268.setCustomClassForGameObjType(_0x405e60, _0x48c056, _0x36ecf0);
        var _0x28c171 = Animal;
        _0x590a68.prototype = Object.create(_0x28c171.prototype);
        _0x590a68.prototype.constructor = _0x590a68;
        _0x590a68.superClass = _0x28c171;
        _0x590a68.prototype.getSpeciesPath = function(_0xd1d0ff) {
            return "forest/" + _0xd1d0ff + "/" + this.animalSpecies;
        };
        _0x590a68.prototype.animalInfo = function() {
            var _0x5535aa = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x5535aa.aniName = "Tarsier!";
                    break;
            }
            _0x5535aa.skinName = this.getSkinName();
            _0x5535aa.aniDesc = "";
            _0x5535aa.upgradeText = "UPGRADED to " + _0x5535aa.aniName + "!";
            _0x5535aa.aniCol = "#FF9D43";
            return _0x5535aa;
        };
        _0x590a68.prototype.getSkinName = function() {
            return this.getSpeciesPath() + this.getSubSpecies() + "/tarsier";
        };
        _0x590a68.prototype.getSpeciesPath = function() {
            return "forest/tarsier/" + this.animalSpecies;
        };
        _0x590a68.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };

        function _0x590a68() {
            _0x590a68.superClass.call(this, _0x48c056);
        }
        const _0x4b97b8 = 113;
        _0x35d268.setCustomClassForGameObjType(_0x590a68, _0x48c056, _0x4b97b8);
        var _0x28c171 = Animal;
        _0x5b87b1.prototype = Object.create(_0x28c171.prototype);
        _0x5b87b1.prototype.constructor = _0x5b87b1;
        _0x5b87b1.superClass = _0x28c171;
        _0x5b87b1.prototype.getSpeciesPath = function(_0xb1da4d) {
            return "forest/" + _0xb1da4d + "/" + this.animalSpecies;
        };
        _0x5b87b1.prototype.animalInfo = function() {
            var _0x1d56eb = {};
            switch (this.animalSpecies) {
                case 0:
                    _0x1d56eb.aniName = "Chukar!";
                    break;
            }
            _0x1d56eb.skinName = this.getSkinName();
            _0x1d56eb.aniDesc = "";
            _0x1d56eb.upgradeText = "UPGRADED to " + _0x1d56eb.aniName + "!\n Hold W to fly around.";
            _0x1d56eb.aniCol = "#FF9D43";
            return _0x1d56eb;
        };
        _0x5b87b1.prototype.getSkinName = function() {
            return this.getSpeciesPath() + this.getSubSpecies() + "/chukar" + (this.specType == 0 ? "" : this.specType);
        };
        _0x5b87b1.prototype.getSpeciesPath = function() {
            return "forest/chukar/" + this.animalSpecies;
        };
        _0x5b87b1.prototype.getSubSpecies = function() {
            if (this.mopeSeasonID == 2) {
                if (this.animalSpecies === 0 && this.animalSubSpecies > 0) {
                    return "/" + this.animalSubSpecies;
                }
            }
            return "";
        };
        _0x5b87b1.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                return;
            } {
                var _0x3e1d17 = 500 / 340;
                if (this.flag_flying && !this.flag_isGrabbed) {
                    _0x39e82d.save();
                    var _0x454fa4 = _0x4e4bab("bird", this.spawnTime);
                    if (_0x454fa4 !== undefined && _0x454fa4 != null) {
                        this.theFrame = _0x454fa4;
                    }
                    var _0x440f52 = _0x5981a2 != _0x4051d6 && !_0x1d523b ? this.theFrame : this.birdNoAnimationFlyWingAngle;
                    var _0x119316 = this.getSkinImageObj(this.getAsset("wing1"));
                    if (_0x119316) {
                        _0x39e82d.save();
                        var _0x2468b7 = -(-0.2 + _0x440f52) * _0x439930;
                        var _0x261ed0 = this.rad * 0.8;
                        _0x39e82d.rotate(_0x506969 + _0x2468b7);
                        var _0x2a34b8 = 0;
                        var _0x3f5d07 = this.rad;
                        var _0x432bb6 = _0x261ed0 * 2 * 0.62;
                        var _0x34332b = _0x261ed0 * 2.5;
                        var _0x172284 = 0.2;
                        var _0x57846f = 1.7;
                        _0x39e82d.drawImage(_0x119316, _0x2a34b8 + _0x432bb6 * -_0x172284, _0x3f5d07 + _0x34332b * -_0x57846f, _0x432bb6, _0x34332b);
                        _0x39e82d.restore();
                    }
                    var _0x119316 = this.getSkinImageObj(this.getAsset("wing2"));
                    if (_0x119316) {
                        _0x39e82d.save();
                        var _0x2468b7 = -(-0.2 + _0x440f52) * _0x4bfce6(-90);
                        var _0x261ed0 = this.rad * 0.8;
                        _0x39e82d.rotate(_0x4bfce6(-45) + _0x2468b7);
                        var _0x2a34b8 = 0;
                        var _0x3f5d07 = this.rad;
                        var _0x432bb6 = _0x261ed0 * 2 * 0.62;
                        var _0x34332b = _0x261ed0 * 2.5;
                        var _0x172284 = 0.8;
                        var _0x57846f = 1.7;
                        _0x39e82d.drawImage(_0x119316, _0x2a34b8 + _0x432bb6 * -_0x172284, _0x3f5d07 + _0x34332b * -_0x57846f, _0x432bb6, _0x34332b);
                        _0x39e82d.restore();
                    }
                    _0x39e82d.restore();
                }
                if (this.specType != 0 && this.specType != undefined) {
                    var _0x5a627a = this.getSkinImageObj(this.getAsset("head"));
                    if (_0x5a627a) {
                        _0x39e82d.save();
                        var _0x261ed0 = this.rad;
                        _0x39e82d.drawImage(_0x5a627a, -_0x261ed0 * _0x3e1d17, (-_0x261ed0 + _0x261ed0 * 0.1) * _0x3e1d17, _0x261ed0 * 2 * _0x3e1d17, _0x261ed0 * 2 * _0x3e1d17);
                        _0x39e82d.restore();
                    }
                }
            }
        };
        _0x5b87b1.prototype.getAsset = function(_0x54ecd6) {
            var _0x2947db = "skins/" + this.getSpeciesPath() + "/chukar";
            _0x2947db += "_" + _0x54ecd6 + ".png";
            return _0x2947db;
        };

        function _0x5b87b1() {
            _0x5b87b1.superClass.call(this, _0x48c056);
        }
        const _0x1c7e65 = 114;
        _0x35d268.setCustomClassForGameObjType(_0x5b87b1, _0x48c056, _0x1c7e65);
        var _0x28c171 = GameObj;
        _0x2f6b81.prototype = Object.create(_0x28c171.prototype);
        _0x2f6b81.prototype.constructor = _0x2f6b81;
        _0x2f6b81.superClass = _0x28c171;
        _0x2f6b81.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x2f6b81.prototype.customDraw = function(_0x2beea7) {
            var _0x201094 = this.getSkinImageObj("gameobj/" + this.oType + "/" + this.oType + "_" + this.speciesType + (this.isEdibleOutlined() ? "_e" : "") + ".png");
            if (_0x201094) {
                var _0x2599c1 = this.rad;
                _0x39e82d.drawImage(_0x201094, -_0x2599c1, -_0x2599c1, _0x2599c1 * 2, _0x2599c1 * 2);
            }
        };
        var _0x52264b = 159;
        _0x2f6b81.prototype.readCustomData_onNewlyVisible = function(_0x55b950) {
            _0x2f6b81.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x55b950);
            this.speciesType = _0x55b950.readUInt16();
            this.speciesSubType = _0x55b950.readUInt16();
        };

        function _0x2f6b81() {
            _0x2f6b81.superClass.call(this, _0x52264b);
        }
        _0x35d268.setCustomClassForGameObjType(_0x2f6b81, _0x52264b);
        class _0x465547 {
            static list = [];
            constructor(_0x1da278, _0x43b9f8) {
                this.x = _0x1da278;
                this.y = _0x43b9f8;
                this.movingAngle = Math.random() * Math.PI * 2;
                this.speed = (Math.random() * 1 + 0.5) / 10;
                this.opacity = Math.random() * 0.5 + 0.5;
                this.angle = Math.PI * 2 * Math.random();
                this.radius = 3 + Math.random() * 9;
                this.path = "./assets/s/1/gameobj/106/snow-flake.png";
            }
            animate(_0x30f5e7) {
                this.movingAngle += (Math.random() - 0.5) * 0.02;
                this.x += Math.cos(this.movingAngle) * this.speed * _0x53a3ae * _0x30f5e7;
                this.y += Math.sin(this.movingAngle) * this.speed * _0x53a3ae * _0x30f5e7;
                this.angle += _0x30f5e7 * 0.001;
                const _0x501e8d = this.radius * _0x53a3ae;
                this.x -= _0x1bd2d0 - _0x4d2c42;
                this.y -= _0x1901f2 - _0x539ad0;
                if (this.x - _0x501e8d > _0x7605c6.width) {
                    this.x -= _0x7605c6.width + _0x501e8d;
                } else if (this.x + _0x501e8d < 0) {
                    this.x += _0x7605c6.width + _0x501e8d;
                }
                if (this.y - _0x501e8d > _0x7605c6.height) {
                    this.y -= _0x7605c6.height + _0x501e8d;
                } else if (this.y + _0x501e8d < 0) {
                    this.y += _0x7605c6.height + _0x501e8d;
                }
                const _0x521717 = _0x4172bb(this.path);
                if (_0x521717) {
                    _0x39e82d.globalAlpha = this.opacity;
                    _0x39e82d.translate(this.x, this.y);
                    _0x39e82d.rotate(this.angle);
                    _0x39e82d.drawImage(_0x521717, -_0x501e8d, -_0x501e8d, _0x501e8d * 2, _0x501e8d * 2);
                    _0x39e82d.rotate(-this.angle);
                    _0x39e82d.translate(-this.x, -this.y);
                    _0x39e82d.globalAlpha = 1;
                }
            }
        }

        function _0x2ab41e() {
            _0x465547.list.length = 0;
            for (let _0x4ade2e = 0; _0x4ade2e < _0x4ed1c1; _0x4ade2e++) {
                const _0x3e715d = Math.random() * _0x7605c6.width;
                const _0x459382 = Math.random() * _0x7605c6.height;
                const _0x13f0d9 = new _0x465547(_0x3e715d, _0x459382);
                _0x465547.list.push(_0x13f0d9);
            }
        }
        var _0x28c171 = GameObj;
        _0x4d6c81.prototype = Object.create(_0x28c171.prototype);
        _0x4d6c81.prototype.constructor = _0x4d6c81;
        _0x4d6c81.prototype.rAngle = 0;
        _0x4d6c81.prototype.rAngleF = 0.005;
        _0x4d6c81.prototype.rAngleDirection = 1;
        _0x4d6c81.superClass = _0x28c171;
        _0x4d6c81.prototype.updateZ = function() {
            if (this.isSnowFlake) {
                this.z = 11000;
            } else if (this.isStickingOnObject) {
                this.z = 1 + this.stickingOnObjectZIndex;
            } else {
                this.z = this.rad;
            }
        };
        _0x4d6c81.prototype.customDraw = function(_0x469371) {
            if (this.isSnowFlake) {
                _0x39e82d.globalAlpha = 0.9;
                _0x39e82d.globalAlpha = 1;
                var _0x48d604 = "gameobj/" + this.oType + "/snow-flake.png";
                var _0x4f7fda = this.getSkinImageObj(_0x48d604);
                if (_0x4f7fda) {
                    _0x39e82d.save();
                    var _0x1991dc = this.rad * 1;
                    this.rAngle += this.rAngleF * this.rAngleDirection;
                    _0x39e82d.rotate(this.rAngle);
                    _0x39e82d.drawImage(_0x4f7fda, -_0x1991dc, -_0x1991dc, _0x1991dc * 2, _0x1991dc * 2);
                    _0x39e82d.restore();
                }
            } else {
                _0x39e82d.globalAlpha = 1;
                var _0x48d604 = "gameobj/" + this.oType + "/" + this.oType + ".png";
                var _0x4f7fda = this.getSkinImageObj(_0x48d604);
                if (_0x4f7fda) {
                    _0x39e82d.save();
                    var _0x1991dc = this.rad * 1;
                    _0x39e82d.rotate(this.rPer * 2 * Math.PI);
                    _0x39e82d.drawImage(_0x4f7fda, -_0x1991dc, -_0x1991dc, _0x1991dc * 2, _0x1991dc * 2);
                    _0x39e82d.restore();
                }
            }
        };
        _0x4d6c81.prototype.isSnowFlake = true;
        _0x4d6c81.prototype.isStickingOnObject = false;
        _0x4d6c81.prototype.stickingOnObjectZIndex = 0;
        _0x4d6c81.prototype.readUpdatedProperty = function(_0x40a992, _0x894778) {
            _0x4d6c81.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x894778);
            if (_0x40a992 == _0x4bfef2) {
                this.isSnowFlake = _0x894778.readUInt8() == 1;
            } else if (_0x40a992 == _0x55605e) {
                this.isStickingOnObject = _0x894778.readUInt8() == 1;
            } else if (_0x40a992 == _0x11a37d) {
                let _0x451fad = _0x894778.readUInt32();
                let _0x16c8e5 = _0xb3e9be[_0x451fad];
                if (_0x16c8e5) {
                    this.stickingOnObjectZIndex = _0x16c8e5.z;
                }
            }
        };
        _0x4d6c81.prototype.readCustomData_onNewlyVisible = function(_0x1e7dff) {
            this.readUpdatedProperty(_0x4bfef2, _0x1e7dff);
            this.readUpdatedProperty(_0x55605e, _0x1e7dff);
            this.readUpdatedProperty(_0x11a37d, _0x1e7dff);
        };

        function _0x4d6c81() {
            _0x4d6c81.superClass.call(this, _0x25f509);
            this.rAngleDirection = _0x14db03(0, 1) == 0 ? 1 : -1;
        }
        _0x35d268.setCustomClassForGameObjType(_0x4d6c81, _0x25f509);
        var _0x28c171 = GameObj;
        _0x1677e0.prototype = Object.create(_0x28c171.prototype);
        _0x1677e0.prototype.constructor = _0x1677e0;
        _0x1677e0.superClass = _0x28c171;
        _0x1677e0.prototype.foodType = 0;
        _0x1677e0.prototype.updateZ = function() {
            this.z = this.rad;
        };
        _0x1677e0.prototype.customDraw = function(_0x2f7a58) {
            _0x39e82d.save();
            var _0x38e250 = "gameobj/" + this.oType + "/" + this.oType + "_" + this.foodType + "" + (this.isEdibleOutlined() ? "_e" : "") + ".png";
            var _0x26c020 = this.getSkinImageObj(_0x38e250);
            if (_0x26c020) {
                var _0x447f87 = this.rad;
                _0x39e82d.save();
                _0x39e82d.rotate(this.rPer * 0.5 * Math.PI * 2);
                _0x39e82d.drawImage(_0x26c020, -_0x447f87, -_0x447f87, _0x447f87 * 2, _0x447f87 * 2);
                _0x39e82d.restore();
            }
            _0x39e82d.restore();
        };
        _0x1677e0.prototype.readCustomData_onNewlyVisible = function(_0x38d8c3) {
            this.foodType = _0x38d8c3.readUInt8();
        };
        var _0x495450 = 160;

        function _0x1677e0() {
            _0x1677e0.superClass.call(this, _0x495450);
            this.doesDrawEffectScale = true;
        }
        _0x35d268.setCustomClassForGameObjType(_0x1677e0, _0x495450);
        var _0x28c171 = GameObj;
        _0x9913c2.prototype = Object.create(_0x28c171.prototype);
        _0x9913c2.prototype.constructor = _0x9913c2;
        _0x9913c2.superClass = _0x28c171;
        _0x9913c2.prototype.updateZ = function() {
            this.z = 1000000;
        };
        _0x9913c2.prototype.customDraw = function(_0x973f53) {
            console.log("sand storm created...");
            _0x39e82d.save();
            _0x39e82d.globalAlpha = 0.4;
            _0x466d9b(0, 0, this.rad, "#000");
            _0x39e82d.restore();
        };
        _0x9913c2.prototype.readCustomData_onNewlyVisible = function(_0x505ed3) {
            this.alpha = _0x505ed3.readUInt8() / 100;
        };
        _0x9913c2.prototype.readUpdatedProperty = function(_0x7fb9f5, _0x390f2d) {
            if (_0x7fb9f5 == _0x21834f) {
                this.alpha = _0x390f2d.readUInt8() / 100;
            }
        };
        const _0x1e266f = 161;

        function _0x9913c2() {
            _0x9913c2.superClass.call(this, _0x1e266f);
            this.alpha = 9;
        }
        _0x35d268.setCustomClassForGameObjType(_0x9913c2, _0x1e266f);
        var _0x5899d5 = _0x22edf7;
        var _0x28c171 = GameObj;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x22edf7.prototype.customDraw = function(_0x178748) {
            _0x39e82d.save();
            _0x39e82d.globalAlpha = 1;
            _0x466d9b(0, 0, this.rad, this.color);
            _0x39e82d.restore();
        };
        _0x22edf7.prototype.updateZ = function() {
            this.z = 10000 + this.rad;
        };
        const _0x4202e3 = 162;

        function _0x22edf7() {
            _0x22edf7.superClass.call(this);
            this.color = _0x14db03(0, 1) == 1 ? "#D2B48C" : "#F0E68C";
            this.spawnTime = _0x4ec996;
        }
        _0x35d268.setCustomClassForGameObjType(_0x22edf7, _0x4202e3);
        var _0x28c171 = Animal;
        _0x4e5bb5.prototype = Object.create(_0x28c171.prototype);
        _0x4e5bb5.prototype.constructor = _0x4e5bb5;
        _0x4e5bb5.superClass = _0x28c171;
        _0x4e5bb5.prototype.getSkinName = function() {
            var _0x39589c = this.getSpeciesPath("land/birdmonster") + "/birdmonster";
            _0x39589c += this.specType == 0 ? "" : this.specType;
            return _0x39589c;
        };
        _0x4e5bb5.prototype.animalInfo = function() {
            var _0x37499f = {};
            var _0x253e18 = "";
            switch (this.animalSpecies) {
                case 0:
                    _0x37499f.aniName = "Bird Monster";
                    break;
            }
            _0x37499f.upgradeText = "UPGRADED to " + _0x37499f.aniName + "! \nPress W to Fly, and do a powerful Electro Swoop attack! Aim it well.\nPress S to create Gale charge and Electro Tornado" + _0x253e18;
            _0x37499f.aniCol = "#FF9000";
            var _0x914a21 = "" + (this.specType == 0 ? "" : this.specType);
            if (this.specType2 == 4) {
                _0x914a21 += "4";
            }
            _0x37499f.skinName = "land/birdmonster/" + this.animalSpecies + "/birdmonster" + _0x914a21;
            return _0x37499f;
        };
        _0x4e5bb5.prototype.getWing = function(_0x59e0ff, _0x4057ff, _0x58840a) {
            _0x58840a = true;
            var _0x5a8b2e = "skins/land/" + (_0x58840a ? this.getSpeciesPath(_0x59e0ff) + "/" : _0x59e0ff + "/");
            _0x5a8b2e += _0x59e0ff + "_wing" + _0x4057ff + ".png";
            return _0x5a8b2e;
        };
        _0x4e5bb5.prototype.getHead = function(_0x3115b9, _0x5ae1b5, _0x33911a) {
            _0x33911a = true;
            headType = this.specType;
            if (this.specType2 == 1) {
                headType = 4;
            }
            var _0x469ff7 = "skins/land/" + (_0x33911a ? this.getSpeciesPath(_0x3115b9) + "/" : _0x3115b9 + "/");
            _0x469ff7 += _0x3115b9 + "_head" + headType + ".png";
            return _0x469ff7;
        };
        _0x4e5bb5.prototype.getWindImage = function(_0x1dbae5) {
            hasSpecies = true;
            var _0x39e725 = "skins/land/" + (hasSpecies ? this.getSpeciesPath("birdmonster") + "/" : "birdmonster/");
            _0x39e725 += "tailwind/" + _0x1dbae5 + ".png";
            return _0x39e725;
        };
        _0x4e5bb5.prototype.getElectroChargeImage = function(_0x217ffe) {
            hasSpecies = true;
            var _0x31b89e = "skins/land/" + (hasSpecies ? this.getSpeciesPath("birdmonster") + "/" : "birdmonster/");
            _0x31b89e += "charge/" + _0x217ffe + ".png";
            return _0x31b89e;
        };
        _0x4e5bb5.prototype.getAbilityInfo = function(_0x48a5d2) {
            var _0x4d0184 = {
                abilName: "Electro Swoop & Gale Charge",
                abilImg: "skins/land/birdmonster/0/birdmonster_ability.png",
                speciesType: this.animalSpecies,
                skinThemeID: this.skinThemeID,
                mopeSeasonID: this.mopeSeasonID
            };
            return _0x4d0184;
        };
        var _0x17a6e8 = 20;
        var _0x5eadb9 = 1;
        var _0x2c325e = 1;
        var _0x24956b = 0;
        var _0x2b54e3 = undefined;
        _0x4e5bb5.prototype.drawTopEffects = function() {
            _0x4e5bb5.superClass.prototype.drawTopEffects.call(this);
            this.drawElectroChargeEffect();
        };
        _0x4e5bb5.prototype.drawSkinCustomization = function() {
            if (!this.flag_usingAbility) {
                _0x2b54e3 = undefined;
                return;
            }
            var _0x2e1bc1 = 500 / 340;
            if (!this.flag_flying) {
                var _0x3313d1 = _0x4e4bab("bird", this.spawnTime);
                if (_0x3313d1 !== undefined && _0x3313d1 != null) {
                    this.theFrame = _0x3313d1;
                }
                var _0x12da83 = _0x5981a2 != _0x4051d6 && !_0x1d523b ? this.theFrame : this.birdNoAnimationFlyWingAngle;
                var _0x3b90b5 = this.rad * _0x9633fe;
                _0x183236 = -0.2;
                _0x2c0620 = 1.4;
                _0x2c325e = 0.25;
                var _0x20356e = 270;
                var _0x4e68d3 = 6;
                var _0x343daf = 0;
                if (_0x2b54e3 == undefined) {
                    _0x2b54e3 = _0x4ec996;
                } else {
                    let _0x2072e6 = (_0x4ec996 - _0x2b54e3) / 1000;
                    _0x343daf = _0x2072e6 / _0x4e68d3 * _0x20356e;
                }
                if (_0x343daf > _0x20356e) {
                    _0x343daf = _0x20356e;
                }
                var _0x20312e;
                var _0xbab00e;
                var _0x2c9da5;
                _0x20312e = _0x4bfce6(_0x343daf);
                _0xbab00e = 0;
                _0x2c9da5 = true;
                this.drawImageCustom("birdmonster", 13, _0x12da83, _0x3b90b5, _0x20312e, _0xbab00e, _0x2c9da5);
                this.drawImageCustom("birdmonster", 23, _0x12da83, _0x3b90b5, -_0x20312e, 1, _0x2c9da5);
            } else if (this.flag_flying && !this.flag_isGrabbed) {
                _0x17a6e8 = 20;
                _0x5eadb9 = 1;
                _0x2c325e = 1;
                _0x24956b = 0;
                var _0x3313d1 = _0x4e4bab("bird", this.spawnTime);
                if (_0x3313d1 !== undefined && _0x3313d1 != null) {
                    this.theFrame = _0x3313d1;
                }
                var _0x12da83 = _0x5981a2 != _0x4051d6 && !_0x1d523b ? this.theFrame : this.birdNoAnimationFlyWingAngle;
                var _0x3b90b5 = this.rad * _0x9633fe;
                var _0x20312e;
                var _0xbab00e;
                var _0x2c9da5;
                if (this.specType == 1) {
                    _0x5eadb9 = 1.1;
                    _0x2c325e = 0.25;
                    _0x24956b = 180;
                    _0x20312e = _0x4bfce6(60 + _0x24956b);
                    _0xbab00e = 0;
                    _0x2c9da5 = false;
                } else if (this.specType == 2) {
                    _0x12da83 = 0;
                    _0x20312e = _0x4bfce6(25);
                    _0xbab00e = 0;
                    _0x2c9da5 = false;
                } else if (this.specType == 3) {
                    _0x20312e = _0x4bfce6(45);
                    _0xbab00e = 0;
                    _0x2c9da5 = true;
                }
                this.drawImageCustom("birdmonster", 1, _0x12da83, _0x3b90b5, _0x20312e, _0xbab00e, _0x2c9da5);
                this.drawImageCustom("birdmonster", 2, _0x12da83, _0x3b90b5, -_0x20312e, 1, _0x2c9da5);
            }
            if (this.specType != 0 && this.specType != undefined) {
                var _0x2150a3 = this.getSkinImageObj(this.getHead("/birdmonster", true));
                if (_0x2150a3) {
                    var _0x3d8858 = 0.9;
                    _0x39e82d.save();
                    var _0x3b90b5 = this.rad * _0x3d8858;
                    var _0x3f4d6f = _0x3b90b5 * _0x183236;
                    _0x39e82d.drawImage(_0x2150a3, -_0x3b90b5 * _0x2e1bc1, (-_0x3b90b5 + _0x3f4d6f) * _0x2e1bc1, _0x3b90b5 * 2 * _0x2e1bc1, _0x3b90b5 * 2 * _0x2e1bc1);
                    _0x39e82d.restore();
                }
            }
        };
        _0x4e5bb5.prototype.flag_eff_electroCharged = false;
        _0x4e5bb5.prototype.drawElectroChargeEffect = function() {
            if (this.flag_eff_electroCharged === true) {
                var _0x3f7e23 = Math.trunc(_0x4ec996 / 250) % 4;
                var _0x3a9197 = this.getSkinImageObj(this.getElectroChargeImage(_0x3f7e23));
                if (_0x3a9197) {
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = _0x166276 == this.id ? 0.7 : 1;
                    var _0x4a2391 = this.rad * 1.2;
                    _0x39e82d.rotate(this.angle);
                    _0x39e82d.drawImage(_0x3a9197, -_0x4a2391, -_0x4a2391, _0x4a2391 * 2, _0x4a2391 * 2);
                    _0x39e82d.restore();
                }
            }
        };
        _0x4e5bb5.prototype.drawImageCustom = function(_0x4ec711, _0x23c20c, _0x4fb8e1, _0x4fdb4e, _0x510315, _0x2c7e2b, _0x37abdf) {
            var _0x2d4225 = this.getSkinImageObj(this.getWing(_0x4ec711, _0x23c20c, _0x37abdf));
            if (_0x2d4225) {
                _0x39e82d.save();
                _0x510315 = -(-0.2 + _0x4fb8e1 * _0x2c325e) * _0x510315;
                _0x39e82d.rotate(_0x510315 * _0x5eadb9);
                var _0x1c9d92 = 0;
                var _0x20179a = this.rad;
                var _0x4b3a99 = _0x4fdb4e * 2 * _0x9633fe;
                var _0x4f864e = _0x4fdb4e * 2.5;
                var _0x55260f = _0x2c0620;
                _0x39e82d.drawImage(_0x2d4225, _0x1c9d92 + _0x4b3a99 * -_0x2c7e2b, _0x20179a + _0x4f864e * -_0x55260f, _0x4b3a99, _0x4f864e);
                _0x39e82d.restore();
            }
        };
        var _0x2c0620 = 1.5;
        var _0x9633fe = 0.8;
        var _0xcc0be0 = 1;
        var _0xaa743a = 1.6;
        _0x4e5bb5.prototype.basicDrawSkinImg = function() {
            this.setSkinScale();
            var _0x57445c = this.skinScale;
            var _0x163c50 = this.getAniRadius(this.skinRad);
            var _0x2fe4dc = 0.5;
            var _0x527be9 = 0.8;
            var _0x5c8c58 = 1.2;
            if (this.loadedSkinImg) {
                _0x39e82d.drawImage(this.loadedSkinImg, -_0x163c50 - _0x163c50 * _0x2fe4dc, -_0x163c50 - _0x163c50 * _0x527be9, _0x163c50 * 2 * _0x57445c, _0x163c50 * 2 * (_0x57445c * _0x5c8c58));
            }
        };
        _0x4e5bb5.prototype.drawUnderSkinImgOutline = function() {
            _0x4e5bb5.superClass.prototype.drawUnderSkinImgOutline.call(this);
            if (this.flag_usingAbility && this.flag_flying && this.specType == 2) {
                var _0xfe3b38 = 0;
                var _0x36d6a2 = -2;
                var _0x31151d = 1;
                var _0x371d4a = 2;
                var _0x2fcf64 = 1 + Math.trunc(_0x4ec996 / 120) % 5;
                var _0x1ea430 = this.getSkinImageObj(this.getWindImage(_0x2fcf64));
                if (_0x1ea430) {
                    _0x39e82d.save();
                    var _0x3b47fc = this.rad * _0x31151d;
                    var _0x547d8f = _0x3b47fc * _0x36d6a2;
                    var _0xc02b56 = _0x3b47fc * _0xfe3b38;
                    _0x39e82d.drawImage(_0x1ea430, -_0x3b47fc + _0xc02b56, -_0x3b47fc + _0x547d8f * _0x371d4a, _0x3b47fc * 2, _0x3b47fc * 2 * _0x371d4a);
                    _0x39e82d.restore();
                }
            }
        };
        _0x4e5bb5.prototype.customUpdatedProperty = function(_0x1ecb88, _0x4450c1) {
            if (_0x1ecb88 == _0x45f083) {
                this.flag_eff_electroCharged = _0x4450c1.readUInt8() == 1;
            } else if (_0x1ecb88 == _0x3c380b) {
                var _0x3bedba = this.activeAbility;
                this.activeAbility = _0x4450c1.readUInt16();
                if (_0x3bedba != this.activeAbility) {
                    this.onAbilityChanged(_0x3bedba);
                }
            }
        };
        var _0x183236 = 0.3;
        _0x4e5bb5.prototype.activeAbility = 0;
        _0x4e5bb5.prototype.onAbilityChanged = function(_0x20426e) {
            console.log("prev ability: " + _0x20426e);
            console.log("curr ability: " + this.activeAbility);
            if (this.activeAbility == 0) {
                _0x183236 = 0.3;
                _0x2c0620 = 1.5;
                _0x9633fe = 0.8;
                _0xcc0be0 = 1;
                _0xaa743a = 1.6;
            }
        };
        _0x4e5bb5.prototype.readCustomData_onNewlyVisible = function(_0x49e075) {
            _0x4e5bb5.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x49e075);
            this.customUpdatedProperty(_0x45f083, _0x49e075);
        };

        function _0x4e5bb5() {
            _0x4e5bb5.superClass.call(this, _0x48c056);
        }
        _0x35d268.setCustomClassForGameObjType(_0x4e5bb5, _0x48c056, a_birdMonster);
        var _0x5899d5 = _0x50efea;
        var _0x28c171 = _0xa0a2ad;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x50efea.prototype.customDraw = function(_0x13c782) {
            _0x39e82d.save();
            var _0x12cab6 = _0x39e82d.globalAlpha;
            _0x39e82d.globalAlpha = _0x12cab6 * 0.05;
            _0x466d9b(0, 0, this.rad, "#E4E7C8");
            var _0x426635 = "crater" + this.curBiome;
            console.log("birdmonster crater: " + _0x426635);
            _0x39e82d.globalAlpha = _0x12cab6 * 1;
            var _0x11bcb2 = "skins/land/birdmonster/" + this.speciesType + "/" + _0x426635 + ".png";
            var _0x2a5c06 = this.getSkinImageObj(_0x11bcb2);
            if (_0x2a5c06) {
                _0x39e82d.save();
                var _0x2f64ec = this.rad;
                _0x39e82d.drawImage(_0x2a5c06, -_0x2f64ec, -_0x2f64ec, _0x2f64ec * 2, _0x2f64ec * 2);
                _0x39e82d.restore();
            }
            _0x39e82d.restore();
        };
        _0x50efea.prototype.getSkinImageObj = function(_0x353275) {
            var _0x29bc4b = this.speciesType === 1 || this.speciesType === 2 || this.speciesType === 201 ? 1 : 2;
            var _0xfbb8cd = "./assets/s/" + _0x29bc4b + "/" + _0x353275;
            if (this.skinThemeID > 0) {
                _0xfbb8cd = "./assets/t/" + this.skinThemeID + "/" + _0x353275;
            }
            return _0x4172bb(_0xfbb8cd, function(_0x2d8b49) {
                console.log(_0x2d8b49.src);
            });
        };
        _0x50efea.prototype.readCustomData_onNewlyVisible = function(_0x1c5ec1) {
            _0x50efea.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x1c5ec1);
        };
        _0x50efea.prototype.readCustomData_onUpdate = function(_0x5f0d6e) {
            _0x50efea.superClass.prototype.readCustomData_onUpdate.call(this, _0x5f0d6e);
        };

        function _0x50efea() {
            _0x50efea.superClass.call(this);
        }
        _0x35d268.setCustomClassForGameObjType(_0x50efea, _0x651296, _0x3c4fe5);
        var _0x28c171 = GameObj;
        _0x1610da.prototype = Object.create(_0x28c171.prototype);
        _0x1610da.prototype.constructor = _0x1610da;
        _0x1610da.superClass = _0x28c171;
        _0x1610da.prototype.updateZ = function() {
            this.z = 10000 + this.rad;
        };
        _0x1610da.prototype.customDraw = function(_0x206180) {
            var _0x24cce7 = "skins/land/birdmonster/" + this.speciesType + "/tornado.png";
            var _0x2aa4d9 = this.getSkinImageObj(_0x24cce7);
            if (_0x2aa4d9) {
                var _0x1a50f4 = this.rad * 1.1;
                if (!_0x1d523b && _0x5981a2 != _0x4051d6 && !RVJsettings.performance) {
                    var _0x355206 = 1;
                    var _0x33d83b = 1000 / _0x355206;
                    var _0x436893 = (_0x4ec996 - this.spawnTime) % _0x33d83b / _0x33d83b;
                    var _0x24ff91 = _0x436893 * 2 * Math.PI;
                    var _0x355206 = 30 / 60;
                    var _0x33d83b = 1000 / _0x355206;
                    var _0x436893 = (_0x4ec996 - this.spawnTime) % _0x33d83b / _0x33d83b;
                    var _0x3c4d35 = _0x436893 * 2 * Math.PI;
                    _0x39e82d.save();
                    _0x39e82d.rotate(_0x24ff91);
                    var _0xf6978a = _0x39e82d.globalAlpha;
                    _0x39e82d.globalAlpha = _0xf6978a * 1;
                    var _0x55846b = (_0x4ec996 - this.spawnTime) / 1000;
                    var _0x58eae0 = 2.2;
                    var _0x239cba = Math.cos(Math.PI * 2 / _0x58eae0 * _0x55846b) * 6.5;
                    var _0x5223ef = Math.sin(Math.PI * 2 / _0x58eae0 * _0x55846b) * 6.5;
                    _0x39e82d.globalAlpha = 0.3;
                    _0x39e82d.drawImage(_0x2aa4d9, -_0x1a50f4 - _0x239cba / 2.2, -_0x1a50f4, _0x1a50f4 * 2, _0x1a50f4 * 2);
                    _0x39e82d.restore();
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = 0.7;
                    _0x39e82d.rotate(_0x3c4d35);
                    _0x39e82d.drawImage(_0x2aa4d9, -_0x1a50f4 - _0x239cba / 2.2, -_0x1a50f4, _0x1a50f4 * 2, _0x1a50f4 * 2);
                    _0x39e82d.restore();
                } else {
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = 0.7;
                    _0x39e82d.drawImage(_0x2aa4d9, -_0x1a50f4, -_0x1a50f4, _0x1a50f4 * 2, _0x1a50f4 * 2);
                    _0x39e82d.restore();
                }
            }
        };
        const _0x213312 = 163;

        function _0x1610da() {
            _0x1610da.superClass.call(this, _0x213312);
            this.doesDrawEffectScale = false;
            this.drawEffectScale_Slow = true;
        }
        _0x35d268.setCustomClassForGameObjType(_0x1610da, _0x213312);
        var _0x28c171 = GameObj;
        _0x1721c5.prototype = Object.create(_0x28c171.prototype);
        _0x1721c5.prototype.constructor = _0x1721c5;
        _0x1721c5.superClass = _0x28c171;
        _0x1721c5.prototype.updateZ = function() {
            this.z = 10000 + this.rad;
        };
        _0x1721c5.prototype.customDraw = function(_0x50a3b1) {
            var _0x134a70 = "skins/land/birdmonster/" + this.speciesType + "/electric-charge.png";
            var _0x3e31aa = this.getSkinImageObj(_0x134a70);
            if (_0x3e31aa) {
                _0x39e82d.save();
                var _0x432fa2 = this.rad * 1;
                _0x39e82d.rotate(this.angle);
                _0x39e82d.drawImage(_0x3e31aa, -_0x432fa2, -_0x432fa2, _0x432fa2 * 2, _0x432fa2 * 2);
                _0x39e82d.restore();
            }
        };
        const _0x1e93fd = 164;

        function _0x1721c5() {
            _0x1721c5.superClass.call(this, _0x1e93fd);
        }
        _0x35d268.setCustomClassForGameObjType(_0x1721c5, _0x1e93fd);
        var _0x5899d5 = _0x1ab750;
        var _0x28c171 = _0xa0a2ad;
        _0x5899d5.prototype = Object.create(_0x28c171.prototype);
        _0x5899d5.prototype.constructor = _0x5899d5;
        _0x5899d5.superClass = _0x28c171;
        _0x1ab750.prototype.customDraw = function(_0x301eef) {
            _0x39e82d.save();
            _0x39e82d.rotate(this.angle);
            var _0x12333c = _0x39e82d.globalAlpha;
            _0x39e82d.globalAlpha = this.alpha < 0.7 ? this.alpha : 0.7;
            var _0x207f2f = "skins/land/birdmonster/" + this.speciesType + "/wind.png";
            var _0x2f9e59 = this.getSkinImageObj(_0x207f2f);
            if (_0x2f9e59) {
                var _0x470c7d = this.rad * 1.25;
                _0x39e82d.drawImage(_0x2f9e59, -_0x470c7d, -_0x470c7d, _0x470c7d * 2, _0x470c7d * 2);
            }
            _0x39e82d.restore();
        };
        _0x1ab750.prototype.updateZ = function() {
            this.z = 10000 - this.rad;
        };
        _0x1ab750.prototype.readCustomData_onNewlyVisible = function(_0x1cc23f) {
            this.alpha = _0x1cc23f.readUInt8() / 100;
        };
        _0x1ab750.prototype.readUpdatedProperty = function(_0x5ccf33, _0x19f977) {
            if (_0x5ccf33 == _0x21834f) {
                this.alpha = _0x19f977.readUInt8() / 100;
            }
        };

        function _0x1ab750() {
            _0x1ab750.superClass.call(this);
            this.spawnTime = _0x4ec996;
            this.alpha = 0;
        }
        _0x35d268.setCustomClassForGameObjType(_0x1ab750, _0x651296, _0x56eef5);
        var _0x28c171 = GameObj;
        _0x5eca9b.prototype = Object.create(_0x28c171.prototype);
        _0x5eca9b.prototype.constructor = _0x5eca9b;
        _0x5eca9b.superClass = _0x28c171;
        _0x5eca9b.prototype.lookAngle = 0;
        _0x5eca9b.prototype.frameNumber = 0;
        _0x5eca9b.prototype.isRolling = false;
        _0x5eca9b.prototype.biomeType = false;
        _0x5eca9b.prototype.updateZ = function() {
            this.z = 1002;
        };
        _0x5eca9b.prototype.customDraw = function(_0xe4db1b) {
            var _0xc4c9b0 = this.rad - 10;
            var _0x812b15 = 1;
            var _0x59f347 = 0.15;
            var _0x316b50 = 0.8;
            var _0x198da7 = (_0x316b50 - _0x59f347) * 0.5;
            var _0x3504fd = _0x59f347 + _0x198da7 + _0x198da7 * Math.sin(Math.PI * 2 / _0x812b15 * (_0x4ec996 / 1000));
            var _0x812b15 = 1;
            var _0x59f347 = 0.85;
            var _0x316b50 = 1;
            var _0x198da7 = (_0x316b50 - _0x59f347) * 0.5;
            var _0x1bc79c = 1;
            if (this.isRolling) {
                this.frameNumber = Math.trunc(_0x4ec996 / 166) % 6;
            }
            var _0x495775 = "gameobj/" + this.oType + "/" + this.biomeType + "/" + this.frameNumber + ".png";
            var _0x1c228f = this.getSkinImageObj(_0x495775);
            if (_0x1c228f) {
                var _0x4376f8 = 0;
                var _0x4f5bd8 = this.rad;
                var _0x3e12e1 = this.rad * 2.5;
                imH = this.rad * 2.5;
                var _0x1829df = 0.5;
                var _0x5baea4 = 0.95;
                _0x39e82d.save();
                {
                    _0x39e82d.globalAlpha *= this.onFireEffA * _0x1bc79c;
                    _0x39e82d.rotate(this.angle + _0x3695a7);
                    _0x39e82d.drawImage(_0x1c228f, _0x4376f8 + _0x3e12e1 * -_0x1829df, _0x4f5bd8 + imH * -_0x5baea4, _0x3e12e1, imH);
                }
                _0x39e82d.restore();
            }
        };
        _0x5eca9b.prototype.isFloating = false;
        _0x5eca9b.prototype.isRolling = false;
        _0x5eca9b.prototype.readUpdatedProperty = function(_0x3cc7f6, _0x1b7147) {
            if (_0x3cc7f6 == _0xc5f17b) {
                this.isFloating = _0x1b7147.readUInt8() == 1;
            } else if (_0x3cc7f6 == _0x33077b) {
                this.isRolling = _0x1b7147.readUInt8() == 1;
            }
        };
        _0x5eca9b.prototype.readCustomData_onNewlyVisible = function(_0xcfd3c5) {
            this.biomeType = _0xcfd3c5.readUInt8();
            this.isRolling = _0xcfd3c5.readUInt8() == 1;
            this.isFloating = _0xcfd3c5.readUInt8() == 1;
        };

        function _0x5eca9b() {
            _0x5eca9b.superClass.call(this, _0x1d8f84);
            this.lookAngle = 0;
            this.isRolling = false;
            this.biomeType = false;
            this.doesDrawEffectScale = true;
            this.drawEffectScale_Slow = true;
        }
        var _0x1d8f84 = 165;
        _0x35d268.setCustomClassForGameObjType(_0x5eca9b, _0x1d8f84);
        var _0xc3eb3b = 0;

        function _0x55b75b() {
            var _0x3a2695 = _0x5b49aa("audio/click.mp3");
            if (_0x3a2695) {
                try {
                    _0x3a2695.play();
                } catch (_0x48dbce) {}
            }
        }
        _0x5b49aa("audio/click.mp3");
        _0x3ca188();
        _0x41d20a();
        _0x2ab41e();
        var _0x5b021b = [];

        function _0x1c2314(_0x491e0d) {
            switch (_0x491e0d) {
                case _0x2a77cf:
                case _0x162398:
                case _0x3da3e9:
                case _0x40e3c5:
                case _0x4b7c77:
                case _0x5c8a84:
                case _0x4b2c05:
                case _0x3f0029:
                case _0x5075c2:
                case _0x2c3383:
                case _0x169f9e:
                case _0x5df6c:
                case _0x2af72d:
                case _0x2ce7e6:
                case _0x26c3e0:
                case _0x252e1c:
                case _0x27ccb3:
                case _0x9598c7:
                case _0x5983d9:
                case _0x6bc369:
                case _0x5a2c61:
                case _0x413190:
                    return true;
            }
            return false;
        }
        var _0x458c8e = null;
        var _0x5744f8 = null;
        const _0x13d1b0 = function(_0x1840aa) {
            var _0x34b9a0 = _0x1840aa.readBitGroup();
            var _0x56b105 = _0x34b9a0.getBool();
            if (_0x56b105) {
                var _0x3448ce = _0x34b9a0.getBool();
                if (_0x3448ce) {
                    vID = _0x1840aa.readUInt32();
                    if (_0x5744f8 == null) {
                        _0x5744f8 = {
                            id: vID
                        };
                        _0x5744f8._ox = _0x5744f8.X = _0x5744f8._nx = 0;
                        _0x5744f8._oy = _0x5744f8.Y = _0x5744f8._ny = 0;
                    }
                    var _0x533075 = _0x1840aa.readUInt32() / 100;
                    var _0x593598 = _0x1840aa.readUInt32() / 100;
                    _0x5744f8._ox = _0x5744f8.X;
                    _0x5744f8._oy = _0x5744f8.Y;
                    _0x5744f8._nx = _0x533075;
                    _0x5744f8._ny = _0x593598;
                } else {
                    _0x5744f8 = null;
                }
            } else {
                _0x5744f8 = null;
            }
        };
        const _0x5f45d9 = function() {
            var _0x1c28cf = _0xb3e9be[_0x166276];
            if (_0x5744f8 == null || !_0x1c28cf) {
                return;
            }
            _0x153bc0();
            _0x39e82d.save();
            _0x39e82d.strokeStyle = "white";
            _0x39e82d.globalAlpha = 1;
            _0x39e82d.beginPath();
            _0x39e82d.moveTo(_0x1c28cf.x, _0x1c28cf.y);
            _0x39e82d.lineTo(_0x5744f8.X, _0x5744f8.Y);
            _0x39e82d.stroke();
            _0x39e82d.restore();
        };
        const _0x153bc0 = function() {
            var _0x4428ec = 0.1;
            _0x5744f8.X = _0x4428ec * (_0x5744f8._nx - _0x5744f8._ox) + _0x5744f8._ox;
            _0x5744f8.Y = _0x4428ec * (_0x5744f8._ny - _0x5744f8._oy) + _0x5744f8._oy;
        };
        var _0x4d94b0 = new Array();
        const _0x55e9c1 = function(_0x3ff56d) {
            var _0x1f7526 = _0x3ff56d.readUInt8();
            _0x4d94b0 = new Array();
            for (i = 0; i < _0x1f7526; i++) {
                var _0x1250fc = _0x3ff56d.readUInt16();
                var _0x426b98 = _0x3ff56d.readUInt8();
                if (_0x426b98 > 0) {
                    for (s = 0; s < _0x426b98; s++) {
                        var _0x5326fa = _0x3ff56d.readUInt16() / 4;
                        var _0x255239 = _0x3ff56d.readUInt16() / 4;
                        if (_0x1250fc == _0x62fde4) {
                            var _0x21a401 = _0x3ff56d.readUInt8() == 1;
                            var _0x25d07f = _0x3ff56d.readUInt8();
                            _0x4d94b0.push({
                                oType: _0x1250fc,
                                specType: _0x25d07f,
                                x: _0x5326fa,
                                y: _0x255239,
                                rad: 2,
                                droppedInHole: _0x21a401
                            });
                        } else if (_0x1250fc == _0x4c48f4) {
                            var _0x25d07f = _0x3ff56d.readUInt8();
                            _0x4d94b0.push({
                                oType: _0x1250fc,
                                specType: _0x25d07f,
                                x: _0x5326fa,
                                y: _0x255239,
                                rad: 2
                            });
                        } else {
                            _0x4d94b0.push({
                                oType: _0x1250fc,
                                x: _0x5326fa,
                                y: _0x255239,
                                rad: 2
                            });
                        }
                    }
                }
            }
            var _0x426b98 = _0x3ff56d.readUInt8();
            for (s = 0; s < _0x426b98; s++) {
                var _0xd8ea9a = _0x3ff56d.readUInt16();
                var _0x201f97 = _0x3ff56d.readUInt16() / 4;
                var _0x5326fa = _0x3ff56d.readUInt16() / 4;
                var _0x255239 = _0x3ff56d.readUInt16() / 4;
                _0x4d94b0.push({
                    oType: _0x651296,
                    abil: _0xd8ea9a,
                    x: _0x5326fa,
                    y: _0x255239,
                    angle: _0x201f97,
                    rad: 2
                });
            }
        };
        const _0x6a44b5 = function(_0x28ce24) {
            _0x5aef35 = {};
            var _0x520ad1 = _0x28ce24.readUInt8() == 1;
            if (_0x520ad1) {
                var _0x48a452 = _0x28ce24.readUInt8();
                _0x5aef35 = {};
                _0x5aef35.treesCount = _0x48a452;
                for (i = 0; i < _0x48a452; i++) {
                    _0x5aef35[_0x28ce24.readUInt32()] = 1;
                }
            }
        };

        function _0x399548(_0xd2da05) {
            var _0x54e937 = [];
            _0x54e937.rank = _0xd2da05.readUInt16();
            _0x54e937.topRank = _0xd2da05.readUInt16();
            _0x54e937.timeAlive = _0xd2da05.readUInt16();
            _0x54e937.totalKills = _0xd2da05.readUInt16();
            _0x54e937.maxXP = _0xd2da05.readUInt32();
            return _0x54e937;
        }
        var _0x4434eb = null;
        var _0x13e282 = 0;

        function _0x14eb00(_0x2bb66e) {
            _0x13e282 = _0x1519a6 * 0.6;
            if (_0x4434eb == null) {
                _0x4434eb = document.createElement("canvas");
            }
            var _0x344529 = _0x4434eb.getContext("2d");
            var _0x20baf5 = 55;
            var _0x504be0 = 40;
            var _0xfa4f32 = 5;
            var _0x3f6f62 = 200;
            var _0x4f29c9 = 420;
            _0x20baf5 = _0x3f6f62 + _0xfa4f32 * 2;
            _0x4434eb.width = _0x4f29c9 + _0xfa4f32 * 2;
            _0x4434eb.height = _0x20baf5;
            _0x344529.globalAlpha = 0.2;
            _0x344529.fillStyle = "#000000";
            _0x344529.fillRect(0, 0, _0x4434eb.width, _0x4434eb.height);
            _0x344529.fillStyle = "#000000";
            _0x344529.fillRect(_0xfa4f32, _0xfa4f32, _0x4434eb.width - _0xfa4f32 * 2, _0x4434eb.height - _0xfa4f32 * 2);
            var _0x4983b0 = 55 + _0xfa4f32;
            _0x344529.globalAlpha = 1;
            _0x344529.fillStyle = "#FFFFFF";
            _0x344529.font = "30px Arial";
            var _0x5a282b = "YOU DIED!";
            _0x344529.font = "30px Arial";
            _0x344529.fillText(_0x5a282b, _0x4434eb.width / 2 - _0x344529.measureText(_0x5a282b).width / 2, _0x4983b0);
            _0x344529.font = "20px Arial";
            _0x4983b0 += 45;
            _0x5a282b = "You were #" + _0x2bb66e.rank;
            _0x344529.fillText(_0x5a282b, _0x4434eb.width / 2 - _0x344529.measureText(_0x5a282b).width / 2, _0x4983b0);
            _0x4983b0 += 40;
            var _0x2c308d = _0x82cc9e(_0x2bb66e.timeAlive);
            var _0x26d283 = _0xfa4f32 + 15;
            _0x501cf4(_0x344529, "Time Alive", _0x2c308d, _0x26d283, _0x4983b0);
            _0x26d283 += 210;
            _0x501cf4(_0x344529, "Total Kills", _0x2bb66e.totalKills, _0x26d283, _0x4983b0);
            _0x4983b0 += 40;
            _0x26d283 = _0xfa4f32 + 15;
            _0x501cf4(_0x344529, "Top rank", _0x2bb66e.topRank, _0x26d283, _0x4983b0);
            _0x26d283 += 210;
            _0x501cf4(_0x344529, "Max XP", _0x540660(_0x2bb66e.maxXP), _0x26d283, _0x4983b0);
        }

        function _0x833245(_0xaae782, _0x35e767, _0x4a84d7, _0x29035e, _0xe3fe9f, _0x5586ef) {
            if (_0x5981a2 == 2) {
                return;
            }
            _0x39e82d.save();
            var _0x477945 = _0x4a84d7 - _0xaae782;
            var _0x118610 = _0x29035e - _0x35e767;
            var _0x576c9a = 0;
            var _0x322fe7 = _0x19e9b5 / 2 / _0x2e8bac;
            var _0x4acbf7 = _0x1519a6 / 2 / _0x2e8bac;
            _0xaae782 = Math.max(_0xaae782, _0x1bd2d0 - _0x322fe7 - _0xe3fe9f + _0x576c9a);
            _0x35e767 = Math.max(_0x35e767, _0x1901f2 - _0x4acbf7 - _0x5586ef + _0x576c9a);
            _0x4a84d7 = Math.min(_0x4a84d7, _0x1bd2d0 + _0x322fe7 - _0xe3fe9f - _0x576c9a);
            _0x29035e = Math.min(_0x29035e, _0x1901f2 + _0x4acbf7 - _0x5586ef - _0x576c9a);
            _0x39e82d.strokeStyle = "black";
            _0x39e82d.globalAlpha = 0.055;
            var _0x1b131f = 30;
            var _0x1e0df7 = _0x4a84d7 - _0xaae782;
            fillH = _0x29035e - _0x35e767;
            for (var _0x34a998 = -0.5 + _0xaae782 + (_0x477945 - _0xaae782) % _0x1b131f; _0x34a998 < _0xaae782 + _0x1e0df7; _0x34a998 += _0x1b131f) {
                _0x39e82d.beginPath();
                _0x39e82d.moveTo(_0x34a998, _0x35e767);
                _0x39e82d.lineTo(_0x34a998, _0x35e767 + fillH);
                _0x39e82d.stroke();
            }
            for (dy = -0.5 + _0x35e767 + (_0x118610 - _0x35e767) % _0x1b131f; dy < _0x35e767 + fillH; dy += _0x1b131f) {
                _0x39e82d.beginPath();
                _0x39e82d.moveTo(_0xaae782, dy);
                _0x39e82d.lineTo(_0xaae782 + _0x1e0df7, dy);
                _0x39e82d.stroke();
            }
            _0x39e82d.restore();
        }
        async function _0x442c7e() {
            var _0x32745e = document.getElementById("optionsDiv");
            _0x32745e.style.display = "none";
            _0x347987();
            try {
                var _0x41c291 = new Audio("audio/click.mp3");
                _0x41c291.play();
            } catch (_0x26e2d2) {}
            if (_0x4ace5c) {
                return;
            }
            if (await _0x33fbd4()) {
                _0x44064d();
            } else {
                _0x3e9162(false);
            }
        }
        document.getElementById("startButton").onclick = _0x442c7e;
        document.getElementById("btnSpectate").onclick = function() {
            _0x1f7e8e();
        };
        const _0x1f7e8e = function() {
            if (!_0x18f712) {
                var _0x5dced2 = new _0x1f27e2(1);
                _0x5dced2.writeUInt8(_0x38c1f3);
                _0x80c20b(_0x5dced2);
            }
        };
        var _0x4f0eb9 = false;
        var _0x181fa6 = false;
        let _0x28c787 = false;

        function _0x998d26(_0x3a1623) {
            var _0x15ca2e = document.getElementById("chatinput");
            switch (_0x3a1623.key) {
                case "ArrowLeft":
                    if (_0x3a1623.ctrlKey) {
                        var _0x30346f = _0x15ca2e.style.width;
                        _0x30346f = _0x30346f.replace("px", "");
                        _0x30346f = Number(_0x30346f) - 5;
                        _0x15ca2e.style.width = _0x30346f + "px";
                    } else {
                        var _0x30346f = _0x15ca2e.style.left;
                        _0x30346f = _0x30346f.replace("px", "");
                        _0x30346f = Number(_0x30346f) - 5;
                        _0x15ca2e.style.left = _0x30346f + "px";
                    }
                    break;
                case "ArrowRight":
                    if (_0x3a1623.ctrlKey) {
                        var _0x30346f = _0x15ca2e.style.width;
                        _0x30346f = _0x30346f.replace("px", "");
                        _0x30346f = Number(_0x30346f) + 5;
                        _0x15ca2e.style.width = _0x30346f + "px";
                    } else {
                        var _0x30346f = _0x15ca2e.style.left;
                        _0x30346f = _0x30346f.replace("px", "");
                        _0x30346f = Number(_0x30346f) + 5;
                        _0x15ca2e.style.left = _0x30346f + "px";
                    }
                    break;
                case "ArrowUp":
                    var _0x30346f = _0x15ca2e.style.top;
                    _0x30346f = _0x30346f.replace("px", "");
                    _0x30346f = Number(_0x30346f) - 5;
                    _0x15ca2e.style.top = _0x30346f + "px";
                    break;
                case "ArrowDown":
                    var _0x30346f = _0x15ca2e.style.top;
                    _0x30346f = _0x30346f.replace("px", "");
                    _0x30346f = Number(_0x30346f) + 5;
                    _0x15ca2e.style.top = _0x30346f + "px";
                    break;
            }
        }
        var _0x565303 = false;
        var _0x3b5328 = true;

        function _0x1937f4(_0x3b72cb) {
            if (_0x3b72cb.indexOf("/anim-switch:") != -1) {
                var _0x30c454 = _0x3b72cb.replace("/anim-switch:", "");
                switch (_0x30c454) {
                    case "honeybee":
                        _0x1acb6f = !_0x1acb6f;
                        return true;
                    case "phoenix":
                        _0x2afba4 = !_0x2afba4;
                        return true;
                }
            }
            return _0x53c532(_0x3b72cb);
        }
        var _0x18666b = false;
        const _0x53c532 = function(_0x5d5219) {
            if (!_0x33dde0 && !_0x17184e) {
                return false;
            }
            if (_0x5d5219.indexOf("chatbox:") != -1) {
                var _0x299590 = _0x5d5219.replace("chatbox:", "");
                switch (_0x299590) {
                    case "edit:start":
                        _0x565303 = true;
                        break;
                    case "edit:end":
                        var _0x307b30 = document.getElementById("chatinput");
                        var _0x9eeeab = {
                            autoLoad: _0x3b5328,
                            left: _0x307b30.style.left,
                            top: _0x307b30.style.top,
                            width: _0x307b30.style.width
                        };
                        localStorage.setItem("chatbox", JSON.stringify(_0x9eeeab));
                        _0x565303 = false;
                        break;
                    case "set:autoload":
                        _0x3b5328 = true;
                        break;
                    case "load":
                        var _0x307b30 = document.getElementById("chatinput");
                        var _0x9eeeab = JSON.parse(localStorage.getItem("chatbox"));
                        _0x307b30.style.left = _0x9eeeab.left;
                        _0x307b30.style.top = _0x9eeeab.top;
                        _0x307b30.style.width = _0x9eeeab.width;
                        break;
                    case "reset":
                        var _0x307b30 = document.getElementById("chatinput");
                        _0x307b30.style.left = "";
                        _0x307b30.style.right = "";
                        _0x307b30.style.width = "";
                        break;
                }
                return;
            }
            switch (_0x5d5219) {
                case "show:interface":
                    _0x6dd38f = true;
                    _0x2f359e = true;
                    _0x44be43 = true;
                    _0x493e84 = true;
                    _0x35ae42 = true;
                    _0x5629ff = true;
                    _0x18666b = false;
                    return true;
                case "hide:interface":
                    _0x6dd38f = false;
                    _0x2f359e = false;
                    _0x44be43 = false;
                    _0x493e84 = false;
                    _0x35ae42 = false;
                    _0x5629ff = false;
                    _0x18666b = true;
                    return true;
                case "show:map":
                    _0x6dd38f = true;
                    return true;
                case "show:xpbar":
                    _0x44be43 = true;
                    return true;
                case "show:board":
                    _0x2f359e = true;
                    return true;
                case "show:waterbar":
                    _0x493e84 = true;
                    return true;
                case "show:1v1":
                    _0x5629ff = true;
                    return true;
                case "show:ability":
                    _0x35ae42 = true;
                    return true;
                case "hide:map":
                    _0x6dd38f = false;
                    return true;
                case "hide:xpbar":
                    _0x44be43 = false;
                    return true;
                case "hide:board":
                    _0x2f359e = false;
                    return true;
                case "hide:waterbar":
                    _0x493e84 = false;
                    return true;
                case "hide:1v1":
                    _0x5629ff = false;
                    return true;
                case "hide:ability":
                    _0x35ae42 = false;
                    return true;
            }
            return false;
        };

        function _0x31c60d(_0x22a5cb) {
            if (_0x450ba1) {
                var _0x3b094b = JSON.parse(localStorage.getItem("chatbox"));
                if (_0x22a5cb && _0x3b094b && _0x3b094b.autoLoad) {
                    var _0x27d646 = document.getElementById("chatinput");
                    _0x27d646.style.left = _0x3b094b.left;
                    _0x27d646.style.top = _0x3b094b.top;
                    _0x27d646.style.width = _0x3b094b.width;
                }
            }
        }
        _0x31c60d(true);
        const _0x540ba8 = function() {
            if (!_0x1c0f11 && !_0x26dcce) {
                _0x28e3d1 = "You must login to chat!";
                _0x5a50bf = _0x4ec996 + 3500;
                return;
            }
            var _0x4e2c02 = document.getElementById("chatinput");
            if (!_0x4f0eb9 && _0x4c02d5) {
                _0x4e2c02.style.visibility = "visible";
                _0x4e2c02.focus();
                _0x4f0eb9 = true;
                if (_0x17184e) {
                    _0x4e2c02.maxLength = 1000000;
                }
                _0x4e2c02.onblur = function() {
                    if (_0x4f0eb9) {
                        _0x540ba8();
                    }
                };
            } else if (_0x4f0eb9) {
                var _0x5c4e49 = _0x4e2c02.value + "";
                _0x4f0eb9 = false;
                _0x4e2c02.style.visibility = "hidden";
                if (_0x5c4e49.length > 0 && _0x4c02d5) {
                    if (!_0x1937f4(_0x5c4e49)) {
                        newMsg = new _0x1f27e2(3 + _0x31205b(_0x5c4e49).length);
                        newMsg.writeUInt8(19);
                        newMsg.writeString(_0x5c4e49);
                        _0x80c20b(newMsg);
                    }
                }
                _0x4e2c02.value = "";
            }
        };
        var _0x39cf91 = 1000;
        var _0xbdc553 = 1000;

        function _0x457332() {
            _0x8306e = 250;
        }

        function _0x2fffce() {
            _0x39cf91 = window.innerWidth;
            _0xbdc553 = window.innerHeight;
            if (_0x2c94d7) {
                _0x39cf91 = document.body.clientWidth;
                _0xbdc553 = document.body.clientHeight;
            }
            switch (_0x5981a2) {
                case _0x4051d6:
                case _0x1ef095:
                    _0x149ef1 = window.devicePixelRatio * 0.6;
                    break;
                case _0x145cc3:
                    _0x149ef1 = window.devicePixelRatio;
                    break;
                default:
                    console.log("Unknown graphics level " + _0x5981a2);
            }
            _0x19e9b5 = _0x39cf91 * _0x149ef1;
            _0x1519a6 = _0xbdc553 * _0x149ef1;
            _0x53a3ae = _0x149ef1 * 0.85 * Math.max(_0x39cf91 / 1920, _0xbdc553 / 1080);
        }

        function _0x3ca188() {
            _0x2fffce();
            _0x50c913 = null;
            _0x7605c6.width = _0x19e9b5;
            _0x7605c6.height = _0x1519a6;
            _0x7605c6.style.width = _0x39cf91 + "px";
            _0x7605c6.style.height = _0xbdc553 + "px";
            var _0x1029c0 = document.getElementById("chatinput");
            _0x1029c0.style.marginTop = _0xbdc553 / 2 - 50 + "px";
            _0x5eccd7();
            if (_0x30770a()) {
                mes = new _0x1f27e2(7);
                mes.writeUInt8(17);
                mes.writeUInt16(_0x19e9b5);
                mes.writeUInt16(_0x1519a6);
                _0x457332();
                mes.writeUInt16(_0x8306e);
                _0x80c20b(mes);
            }
            if (_0xebbf06 != null) {
                _0xebbf06.onResize();
            }
            _0x11e956(_0xb30c9a);
        }
        window.onresize = _0x3ca188;
        var _0x334929 = 1;
        var _0x329297 = 2;
        var _0x43a2f0 = 3;
        var _0x2f2694 = 4;
        var _0x284ca0 = 5;
        var _0x3f5d6a = 6;
        var _0x13291e = 7;

        function _0x265c20(_0x2b6cc0) {
            var _0x3cf34b = new _0x1f27e2(2);
            _0x3cf34b.writeUInt8(21);
            _0x3cf34b.writeUInt8(_0x2b6cc0 ? 1 : 0);
            _0x80c20b(_0x3cf34b);
        }

        function _0x1e1591(_0x3cae83, _0x3d6670) {
            switch (_0x3cae83) {
                case _0x334929: {
                    if (_0x1afb36 != _0x3d6670) {
                        if (_0x30770a() && _0x4c02d5) {
                            if (_0x3d6670) {
                                _0x5d068e();
                            }
                            _0x265c20(_0x3d6670);
                            if (_0x30264e > 0) {
                                var _0x12c9ff = new _0x1f27e2(5);
                                _0x12c9ff.writeUInt8(_0x289dc7);
                                _0x12c9ff.writeUInt32(_0x30264e);
                                _0x80c20b(_0x12c9ff);
                                _0x30264e = 0;
                            }
                        }
                    }
                    _0x1afb36 = _0x3d6670;
                }
                break;
                case _0x329297: {
                    if (_0x310f3d != _0x3d6670) {
                        if (_0x30770a() && _0x4c02d5) {
                            if (_0x3d6670) {
                                _0x5d068e();
                            }
                            var _0x12c9ff = new _0x1f27e2(2);
                            _0x12c9ff.writeUInt8(20);
                            _0x12c9ff.writeUInt8(_0x3d6670 ? 1 : 0);
                            _0x80c20b(_0x12c9ff);
                        }
                    }
                    _0x310f3d = _0x3d6670;
                }
                break;
                case _0x43a2f0: {
                    if ((_0x33dde0 || _0x17184e) && _0x4c02d5) {
                        var _0x12c9ff = new _0x1f27e2(1);
                        _0x12c9ff.writeUInt8(26);
                        _0x80c20b(_0x12c9ff);
                    }
                }
                break;
                case _0x2f2694: {
                    if ((_0x33dde0 || _0x17184e) && _0x4c02d5) {
                        var _0x12c9ff = new _0x1f27e2(1);
                        _0x12c9ff.writeUInt8(27);
                        _0x80c20b(_0x12c9ff);
                    }
                }
                break;
                case _0x284ca0: {
                    if (_0x4c02d5) {
                        var _0x12c9ff = new _0x1f27e2(2);
                        _0x12c9ff.writeUInt8(28);
                        _0x12c9ff.writeUInt8(_0x3d6670 ? 1 : 0);
                        _0x80c20b(_0x12c9ff);
                    }
                }
                break;
                case _0x3f5d6a: {
                    if (_0x4c02d5 && _0x17184e) {
                        var _0x12c9ff = new _0x1f27e2(2);
                        _0x12c9ff.writeUInt8(30);
                        _0x12c9ff.writeUInt8(_0x3d6670 ? 1 : 0);
                        _0x80c20b(_0x12c9ff);
                    }
                }
                break;
                case _0x13291e: {
                    if (_0x4c02d5 && _0x17184e) {
                        var _0x12c9ff = new _0x1f27e2(2);
                        _0x12c9ff.writeUInt8(29);
                        _0x12c9ff.writeUInt8(_0x3d6670 ? 1 : 0);
                        _0x80c20b(_0x12c9ff);
                    }
                }
                break;
            }
        }

        function _0x42a9d0() {
            if (!_0x4f0eb9 && _0x4c02d5) {
                if (document.activeElement && document.activeElement != _0x7605c6) {
                    if (_0x7605c6) {
                        console.log("canvas is focused now!");
                        _0x7605c6.focus();
                    }
                } else {}
            }
        }
        _0x7605c6.onblur = function(_0x35b0e8) {
            _0x50a10c(_0x35b0e8);
        };
        window.onfocus = function(_0x12a065) {
            _0x14c728(_0x12a065);
        };

        function _0x50a10c(_0x4b3a6b) {
            if (_0x310f3d || _0x1afb36) {
                return;
            }
            _0x1e1591(_0x334929, false);
            _0x1e1591(_0x329297, false);
        }

        function _0x14c728(_0x98ff5e) {
            _0x347987();
        }
        document.oncontextmenu = document.body.oncontextmenu = function() {
            return !_0x4c02d5;
        };

        function _0x453694() {
            var _0x2987b2 = _0x19e9b5 / 2;
            var _0x5a8f36 = _0x1519a6 / 2;
            _0x4a8be2 = (_0x1cde21 - (_0x2987b2 - _0x1bd2d0 * _0x2e8bac)) / _0x2e8bac;
            _0x227e1d = (_0x2be4ab - (_0x5a8f36 - _0x1901f2 * _0x2e8bac)) / _0x2e8bac;
        }

        function _0x265685(_0x506231) {
            return _0x506231 * _0x2e8bac + (_0x19e9b5 / 2 - _0x1bd2d0 * _0x2e8bac);
        }

        function _0x20c4fc(_0x59ce63) {
            return _0x59ce63 * _0x2e8bac + (_0x1519a6 / 2 - _0x1901f2 * _0x2e8bac);
        }

        function _0x55a369(_0x390c8d, _0x285a63, _0x1f3ea1) {
            return _0x908aa3(_0x390c8d, _0x285a63, 0, _0x1f3ea1);
        }

        function _0x908aa3(_0x28c58e, _0x5391c1, _0x339c35, _0x473d20 = 0) {
            _0x473d20 *= _0x2e8bac;
            const _0x42b32e = {
                x: _0x265685(_0x28c58e),
                y: _0x20c4fc(_0x5391c1)
            };
            const _0xc0043f = _0x339c35 * _0x2e8bac;
            if (_0x42b32e.x + _0xc0043f < -_0x473d20 || _0x42b32e.y + _0xc0043f < -_0x473d20) {
                return false;
            }
            if (_0x42b32e.x - _0xc0043f > _0x19e9b5 + _0x473d20 || _0x42b32e.y - _0xc0043f > _0x1519a6 + _0x473d20) {
                return false;
            }
            return true;
        }

        function _0x1a5b63(_0x3fe483, _0x169b33, _0x1f8609 = 0) {
            if (_0x3fe483 < -_0x1f8609 || _0x169b33 < -_0x1f8609) {
                return false;
            }
            if (_0x3fe483 > _0x5039a5 + _0x1f8609 || _0x169b33 > _0x396098 + _0x1f8609) {
                return false;
            }
            return true;
        }

        function _0x2d4dde(_0x5eaeba, _0x32418a) {
            return (_0x5eaeba.x - _0x32418a.x) * (_0x5eaeba.x - _0x32418a.x) + (_0x5eaeba.y - _0x32418a.y) * (_0x5eaeba.y - _0x32418a.y) <= (_0x5eaeba.rad + _0x32418a.rad) * (_0x5eaeba.rad + _0x32418a.rad);
        }

        function _0x13311c(_0x266051) {
            return (_0x266051 - (_0x19e9b5 / 2 - _0x1bd2d0 * _0x2e8bac)) / _0x2e8bac;
        }

        function _0x3b2d41(_0x5395b9) {
            return (_0x5395b9 - (_0x1519a6 / 2 - _0x1901f2 * _0x2e8bac)) / _0x2e8bac;
        }

        function _0x5d068e() {
            if (_0x181fa6 || _0x5c8335) {
                var _0x53a7f1 = _0xb3e9be[_0x166276];
                if (_0x53a7f1) {
                    _0x4a8be2 = _0x53a7f1.x;
                    _0x227e1d = _0x53a7f1.y + 2;
                } else {
                    return;
                }
            }
            if (_0x30770a() && (_0x4c02d5 || _0x482d50)) {
                if (Math.abs(_0x4759cb - _0x4a8be2) > 0.1 || Math.abs(_0xc9b187 - _0x227e1d) > 0.1) {
                    _0x4759cb = _0x4a8be2;
                    _0xc9b187 = _0x227e1d;
                    mes = new _0x1f27e2(_0x3c84ed);
                    mes.writeUInt8(5);
                    mes.writeInt16(_0x4a8be2);
                    mes.writeInt16(_0x227e1d);
                    _0x80c20b(mes);
                }
            }
        }
        setInterval(_0x5d068e, 10);
        setInterval(_0x2f1c5c, 5000);
        var _0x37e434 = "mope.io";

        function _0x41d20a() {
            _0x3ca188();
            _0x18c43f = 0;
            _0xb3e9be = {};
            _0x58b11a = [];
            _0xad46f9 = [];
            _0x35f207 = 25;
            _0x546ad5 = _0x14f534 = 0;
            _0x58833a(_0x546ad5);
            _0x7786f = false;
            _0x5928ec = false;
            curBarPerc_n = _0x536ead = 100;
            _0x3e51ee = _0x451165 = _0x256a64 = 0;
            _0xd9c671(_0x256a64);
            _0x12b152 = null;
            _0x18f712 = false;
            _0x3166e9 = null;
            _0x204c92 = "";
            _0x41f27e();
            _0x33698e = false;
            _0x2d4c57 = 0;
            _0x241e0f = [];
            _0x335352 = false;
            _0x4b3b3f = [];
            _0x3cf48c = 0;
            _0x3c1174 = 0;
            isInfected = _0x1d523b = false;
            _0x17f2cd = 0;
            _0x36536c = false;
            _0x1c0537 = 0;
            _0x3b9097 = [];
            _0x787e2d = false;
            if (_0x1516cf != null) {
                _0x1516cf.isVisible = false;
            }
            if (_0xebbf06) {
                _0xebbf06.interfaceButtons.splice(_0xebbf06.interfaceButtons.indexOf(_0x1516cf), 1);
            }
            _0x1516cf = null;
            _0x28cc21 = false;
            _0x364bd3 = 0;
            _0x2ccb86 = 0;
            _0x17184e = false;
            _0x482d50 = false;
            _0x4434eb = null;
        }
        const _0x37476f = document.getElementById("nickInput");
        _0x37476f.onchange = () => {
            let _0x11a182 = _0x37476f.value;
            if (typeof _0x37e434 !== "undefined") {
                _0x37e434 = _0x11a182;
                if (window.localStorage) {
                    try {
                        window.localStorage.setItem("nick", _0x11a182);
                    } catch (_0x3183f7) {}
                }
            }
        };
        _0x3ca188();
        if (window.localStorage) {
            var _0x55d317 = _0x37476f;
            _0x37e434 = window.localStorage.getItem("nick");
            _0x55d317.value = _0x37e434;
            _0x55d317.setSelectionRange(0, _0x55d317.value.length);
            if (!_0x4731e1) {
                _0x55d317.focus();
            }
        }
        if (_0x7605c6.addEventListener) {
            _0x7605c6.addEventListener("mousewheel", _0x5c4bd3);
            _0x7605c6.addEventListener("DOMMouseScroll", _0x5c4bd3);
        } else {
            _0x7605c6.attachEvent("onmousewheel", _0x5c4bd3);
        }
        var _0x1a6ebb = 0;
        var _0x1836b0 = 1;

        function _0x5c4bd3(_0x2fd56c) {
            var _0x2fd56c = window.event || _0x2fd56c;
            var _0x18e631 = Math.max(-1, Math.min(1, _0x2fd56c.wheelDelta || -_0x2fd56c.detail));
            if (_0x18e631 == 1) {
                _0x1a6ebb += 1;
            } else {
                _0x1a6ebb -= 0.1;
            }
            _0x1a6ebb = Math.max(0, _0x1a6ebb);
            _0x1a6ebb = Math.min(10, _0x1a6ebb);
            if (_0x1e6155) {
                var _0x52c58f = Math.abs(_0x1a6ebb) * 100;
                var _0x3e3f29 = new _0x1f27e2(4);
                _0x3e3f29.writeUInt8(_0x3bd31d);
                _0x3e3f29.writeUInt8(_0x18e631 == -1 ? 0 : 1);
                _0x3e3f29.writeInt16(_0x52c58f);
                _0x80c20b(_0x3e3f29);
            }
        }
        var _0xebbf06 = null;

        function _0x545ea8() {
            _0x51b2bc();
            if (_0xebbf06 != null) {
                _0xebbf06.interfaceReset();
            }
            _0xebbf06 = null;
            console.log("setting game mode interface:" + _0x444fd7);
            if (_0x444fd7 == _0x235bc6) {
                _0xebbf06 = new _0x2e1ffa(_0x444fd7);
                _0xebbf06.state = _0x5066de;
            } else if (_0x444fd7 == _0x338d0a) {
                _0xebbf06 = new _0x337605(_0x444fd7);
                _0xebbf06.state = _0x5066de;
            } else if (_0x444fd7 == _0x2f1da5) {
                _0xebbf06 = new _0x1f7918(_0x444fd7);
                _0xebbf06.state = _0x5066de;
            } else if (_0x444fd7 == _0x2530ce) {
                _0xebbf06 = new _0x40c1dd();
                _0xebbf06.state = _0x5066de;
            } else if (_0x444fd7 == _0x89f537) {
                _0xebbf06 = new _0x46c2db(_0x444fd7);
                _0xebbf06.state = _0x5066de;
            }
            console.log(_0xebbf06);
        }

        function _0x202789(_0x249e08, _0x5e5d28, _0x54f941) {
            var _0x48e191 = _0x249e08.x + _0x5e5d28 * Math.cos(_0x54f941);
            var _0x12eca6 = _0x249e08.y + _0x5e5d28 * Math.sin(_0x54f941);
            return {
                x: _0x48e191,
                y: _0x12eca6
            };
        }

        function _0x10c12a(_0x5dca5a, _0x39b793, _0xd76395, _0x4a1570, _0x46e16a) {
            _0x39e82d.save();
            _0x39e82d.globalAlpha = _0x46e16a;
            _0x39e82d.beginPath();
            _0x39e82d.translate(_0x5dca5a, _0x39b793);
            _0x39e82d.rotate(_0xd76395);
            _0x39e82d.moveTo(-5, -5);
            _0x39e82d.lineTo(-5, 5);
            _0x39e82d.lineTo(5, 5);
            _0x39e82d.lineWidth = 1.5;
            _0x39e82d.strokeStyle = _0x4a1570;
            _0x39e82d.fillStyle = _0x4a1570;
            _0x39e82d.stroke();
            _0x39e82d.restore();
        }

        function _0x35d9f6() {
            var _0xdede19 = _0xb3e9be[_0x166276];
            if (_0xdede19) {
                for (d = 0; d < _0x58b11a.length; d++) {
                    var _0x5df4b7 = _0x58b11a[d];
                    if (_0xdede19.id != _0x5df4b7.id) {
                        if (_0x5df4b7.oType === _0x48c056) {
                            var _0x414e0d = _0x5df4b7.getOutlineColor();
                            var _0x12ba33 = false;
                            if (_0x414e0d == _0x59e0de || _0x414e0d == _0x556e31) {
                                _0x12ba33 = true;
                            }
                            if (_0x12ba33) {
                                _0x33231d(_0xdede19, _0x5df4b7, _0x414e0d);
                            }
                        }
                    }
                }
            }
        }

        function _0x4703e3(_0x36966c, _0x1e2286) {
            var _0xb5f49d = _0x36966c.x - _0x1e2286.x;
            var _0xf4ed5c = _0x36966c.y - _0x1e2286.y;
            var _0x95e2a4 = Math.sqrt(_0xb5f49d * _0xb5f49d + _0xf4ed5c * _0xf4ed5c);
            return _0x95e2a4;
        }

        function _0x33231d(_0x1aabf7, _0x1b79bb, _0x5e7149) {
            var _0x6ff519 = _0x19e9b5 / 2;
            var _0x3dc734 = _0x1519a6 / 2;
            var _0x411e46 = _0x4ec980(_0x1b79bb.x, _0x1b79bb.y, _0x1aabf7.x, _0x1aabf7.y);
            var _0x25bf23 = _0x265685(_0x1b79bb.x);
            var _0x160bd4 = _0x20c4fc(_0x1b79bb.y);
            var _0x2ec465 = _0x1b79bb.rad * _0x2e8bac;
            var _0x3eb04a = Math.min(Math.abs(_0x25bf23 - _0x2ec465 - 0), Math.abs(_0x25bf23 + _0x2ec465 - _0x19e9b5));
            var _0x192177 = Math.min(Math.abs(_0x160bd4 - _0x2ec465 - 0), Math.abs(_0x160bd4 + _0x2ec465 - _0x1519a6));
            var _0x3db11a = -50 - _0x1aabf7.rad;
            var _0x32e258 = _0x202789({
                x: _0x1aabf7.x,
                y: _0x1aabf7.y
            }, _0x3db11a, _0x411e46);
            var _0x2fa4e5 = _0x4703e3({
                x: _0x32e258.x,
                y: _0x32e258.y
            }, {
                x: _0x1b79bb.x,
                y: _0x1b79bb.y
            });
            if (_0x1b79bb.rad < 100 && _0x2fa4e5 < _0x1b79bb.rad * 0.5 || _0x2fa4e5 < 200) {
                return;
            }
            _0x411e46 += _0x4bfce6(45);
            var _0x384f66 = 1;
            var _0x46605f = 20;
            _0x10c12a(_0x32e258.x, _0x32e258.y, _0x411e46, _0x5e7149, _0x384f66);
        }

        function _0x51b2bc() {
            _0x3a369a(true);
        }

        function _0x18f599() {
            if (_0x2dc130 == _0x47e6fe) {
                if (_0x53365e == null) {
                    var _0x459257 = new _0x1f27e2(2);
                    _0x459257.writeUInt8(_0x41567d);
                    _0x80c20b(_0x459257);
                } else {
                    var _0x459257 = new _0x1f27e2(2);
                    _0x459257.writeUInt8(_0x41567d);
                    _0x80c20b(_0x459257);
                    _0x53365e.updateExpiry();
                }
            }
        }
        var _0x2f5006 = 5;
        var _0x2c7d86 = 5;
        var _0x352cf7 = 10;
        var _0x1f1de4 = 0;
        var _0x59c7f6 = 0;
        var _0x20416e = null;
        var _0x50f260 = 0;
        var _0x3b891c = null;
        var _0x21a139 = 0;
        var _0x59e541 = 15;
        var _0x33322c = 0;
        var _0x53365e = null;

        function _0x3ae082() {
            if (_0x53365e != null) {
                _0x53365e.display();
            }
        }

        function _0x56cde4() {
            if (_0x3b891c == null) {
                _0x33322c = 0;
                _0x20416e = null;
                return;
            }
            if (_0x20416e == null) {
                _0x20416e = document.createElement("canvas");
            }
            if (_0x20416e == null) {
                return;
            }
            if (_0x33322c == 0) {
                _0x33322c = _0x4ec996;
            }
            var _0x4a82e5 = _0x20416e.getContext("2d");
            var _0x2d9995 = 55;
            var _0x3ffbce = 5;
            var _0x182d9d = 0;
            var _0x2ce7f7 = _0x53a3ae * 80;
            var _0x35b9eb = 130 + (_0x2ce7f7 + 10) * 5;
            var _0x35b9eb = _0x53a3ae * 700;
            var _0x31b60f = _0x53a3ae * 700;
            console.log("inferface scale " + _0x53a3ae + " borad_height " + _0x35b9eb);
            _0x2d9995 = _0x35b9eb + _0x3ffbce * 2;
            _0x20416e.width = _0x31b60f + _0x3ffbce * 2;
            _0x20416e.height = _0x2d9995;
            var _0x2d482e = 200;
            _0x50f260 = _0x2d482e;
            _0x4a82e5.globalAlpha = 0.1;
            var _0xd2b0d9 = _0x3ffbce;
            _0x4a82e5.globalAlpha = 1;
            _0x4a82e5.fillStyle = "#FFFFFF";
            _0x4a82e5.font = "30px Arial";
            _0xd2b0d9 += 45;
            var _0x4ecf05 = "APEX KILLS";
            _0x4a82e5.font = "30px Arial";
            _0x4a82e5.fillText(_0x4ecf05, _0x20416e.width / 2 - _0x4a82e5.measureText(_0x4ecf05).width / 2, _0xd2b0d9);
            _0x2d482e = 100;
            _0xd2b0d9 += _0x2ce7f7;
            var _0x339f5e = 360 / _0x3b891c.anis.length;
            var _0x47aa70 = _0x53a3ae * 250;
            var _0x210a6d = _0x20416e.width / 2;
            var _0x5e53e2 = _0x20416e.height / 2;
            _0x4a82e5.fillStyle = "black";
            _0x4a82e5.globalAlpha = 0.1;
            _0x4a82e5.beginPath();
            _0x4a82e5.arc(_0x210a6d, _0x210a6d, _0x47aa70 - _0x2ce7f7 / 2, 0, Math.PI * 2, false);
            _0x4a82e5.arc(_0x210a6d, _0x210a6d, _0x47aa70 + _0x2ce7f7 / 2, Math.PI * 2, 0, true);
            _0x4a82e5.fill();
            _0x4a82e5.globalAlpha = 0.5;
            _0x4a82e5.beginPath();
            _0x4a82e5.arc(_0x210a6d, _0x210a6d, _0x47aa70 + _0x2ce7f7 / 2, Math.PI * 2, 0);
            _0x4a82e5.stroke();
            var _0x3a7d05 = Math.PI * 2 / _0x3b891c.anis.length;
            var _0x3fb521 = 0;
            var _0x2100fd = (_0x4ec996 - _0x33322c) / 1000;
            var _0x45fc17 = 2;
            var _0x200b49 = 8;
            _0x3fb521 = _0x200b49 * Math.sin(Math.PI * 2 / _0x45fc17 * _0x2100fd);
            for (r = 0; r < _0x3b891c.anis.length; r++) {
                var _0x10bf26 = _0x5e53e2 + Math.sin(_0x339f5e * r * (Math.PI / 180) - _0x4bfce6(90)) * _0x47aa70;
                var _0x4c960e = _0x210a6d + Math.cos(_0x339f5e * r * (Math.PI / 180) - _0x4bfce6(90)) * _0x47aa70;
                var _0x4989be = r * _0x3a7d05 - _0x4bfce6(90) - _0x3a7d05 / 2;
                var _0x160484 = _0x4989be + _0x3a7d05;
                ani = _0x3b891c.anis[r];
                var _0x399699 = _0x463962(ani);
                var _0x4d5a43 = _0x4172bb(_0x399699);
                if (_0x4d5a43) {
                    var _0x10e3b2 = _0x3b891c[ani] > 0;
                    _0x4a82e5.save();
                    _0x4a82e5.globalAlpha = _0x10e3b2 ? 1 : 0.3;
                    var _0x13d898 = _0x2ce7f7;
                    if (_0x10e3b2) {
                        _0x4a82e5.shadowOffsetX = 0;
                        _0x4a82e5.shadowOffsetY = 0;
                        _0x4a82e5.shadowColor = "black";
                        _0x4a82e5.shadowBlur = 8;
                        _0x13d898 -= _0x3fb521;
                    }
                    _0x4a82e5.drawImage(_0x4d5a43, _0x4c960e - _0x13d898 / 2, _0x10bf26 - _0x13d898 / 2, _0x13d898, _0x13d898);
                    _0x4a82e5.restore();
                    _0x4a82e5.save();
                    if (_0x10e3b2) {
                        _0x4a82e5.shadowOffsetX = 0;
                        _0x4a82e5.shadowOffsetY = 0;
                        _0x4a82e5.shadowColor = "black";
                        _0x4a82e5.shadowBlur = 8;
                    }
                    _0x4a82e5.strokeStyle = _0x10e3b2 ? "#ff6e00" : "black";
                    var _0x404090 = _0x10e3b2 ? 5 : 1;
                    _0x4a82e5.lineWidth = _0x404090;
                    _0x4a82e5.globalAlpha = _0x10e3b2 ? 1 : 0.5;
                    _0x4a82e5.beginPath();
                    _0x4a82e5.arc(_0x210a6d, _0x210a6d, _0x47aa70 - (_0x404090 - 2) - _0x2ce7f7 / 2, _0x4989be, _0x160484);
                    _0x4a82e5.stroke();
                }
            }
            if (_0x20416e != null) {
                if (_0x20416e.width) {
                    var _0x1442a8 = (_0x4ec996 - _0x33322c) / 600;
                    var _0x47bf37 = (_0x21a139 - _0x4ec996) / 600;
                    if (_0x47bf37 < 1) {
                        _0x1442a8 = Math.max(0, _0x47bf37);
                    }
                    var _0x16d8dc = Math.min(1, _0x1442a8);
                    var _0x4ea105 = _0x20416e.width * _0x16d8dc;
                    var _0x4c5a95 = _0x20416e.height * _0x16d8dc;
                    _0x39e82d.save();
                    _0x39e82d.globalAlpha = _0x16d8dc;
                    _0x39e82d.drawImage(_0x20416e, _0x19e9b5 / 2 - _0x4ea105 / 2, _0x1519a6 / 2 - _0x4c5a95 / 2, _0x4ea105, _0x4c5a95);
                    _0x39e82d.restore();
                    if (_0x4ec996 > _0x21a139 || !_0x4c02d5) {
                        _0x3b891c = null;
                        _0x33322c = 0;
                    }
                }
            }
        }

        function _0x463962(_0x1742a6) {
            switch (_0x1742a6) {
                case _0x47e6fe:
                    return "./skins/volcano/blackdragon/0/blackdragon.png";
                case _0x504f20:
                    return "./skins/land/dinomonster/0/dinomonster.png";
                case _0x31abda:
                    return "./skins/arctic/icemonster/0/icemonster.png";
                case _0x5c13ab:
                    return "./skins/volcano/landmonster/0/0/landmonster.png";
                case _0x46adbf:
                    return "./skins/ocean/seamonster/0/seamonster.png";
                case _0x3f71c6:
                    return "./skins/desert/scorpion/0/giantscorpion.png";
                case _0x174cd3:
                    return "./skins/arctic/yeti/0/wolf.png";
                case _0x5642bc:
                    return "./skins/land/dragon/0/0/dragon.png";
                case _0x4a37d4:
                    return "./skins/land/trex/0/trex.png";
                case _0x519f92:
                    return "./skins/ocean/kraken/0/0/kraken.png";
                case _0x50431e:
                    return "./skins/ocean/kingcrab/0/kingcrab.png";
                case _0x27033a:
                    return "./skins/phoenix/phoenix.png";
                case _0x5b6d09:
                    return "./skins/desert/pterodactyl/0/pterodactyl_ability.png";
            }
        }
        document.addEventListener("keydown", function(_0x189bac) {
            if (_0x189bac.ctrlKey == true && (_0x189bac.code == "Minus" || _0x189bac.key == "Equal" || _0x189bac.code == "NumpadSubtract" || _0x189bac.key == "NumpadAdd")) {
                _0x189bac.preventDefault();
            }
        }, {
            passive: false
        });
        if (Math.random() < 0.1) {
            if (_0x989c00 === this) {
                while (true) {}
            }
        }
        let _0x375122 = null;

        function _0x3900ff(_0xcd81ea) {
            return new Promise((_0x2d350d, _0x3e54ba) => {
                let _0x403617 = document.body.querySelector("#turnstile");
                if (_0x403617) {
                    _0x403617.style.removeProperty("display");
                } else {
                    _0x403617 = document.createElement("div");
                    _0x403617.setAttribute("id", "turnstile");
                    document.body.append(_0x403617);
                }
                _0x375122 = turnstile.render(_0x403617, {
                    sitekey: _0xcd81ea,
                    callback: _0x3a05fe => {
                        _0x5752d5();
                        _0x2d350d(_0x3a05fe);
                    },
                    "error-callback": _0x26195c => {
                        _0x5752d5();
                        _0x3e54ba(_0x26195c);
                    }
                });
            });
        }

        function _0x5752d5() {
            let _0x5d13e8 = document.body.querySelector("#turnstile");
            if (_0x5d13e8) {
                _0x5d13e8.style.setProperty("display", "none");
                turnstile.remove(_0x375122);
            }
        }
        var n = {
            208: (n, e, t) => {
                t.d(e, {
                    A: () => a
                });
                var o = t(601);
                var i = t.n(o);
                var s = t(314);
                var r = t.n(s)()(i());
                r.push([n.id, ".rvc-div {\n    width: 300px;\n    background-color: rgba(33, 29, 40, 0.66);\n    padding: 20px;\n    position: absolute;\n    border-radius: 15px;\n    z-index: 99999;\n}\n.rvc-title {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.rvc-page {\n    background-color: rgba(0, 0, 0, 0);\n}\n.rvc-t1 {\n    font-family: \"Oxanium\", sans-serif;\n    font-size: 30px;\n    font-weight: 900;\n    font-style: normal;\n    color: #7A5CF1;\n    letter-spacing: 2px;\n    margin-bottom: 20px;\n}\n.rvc-t2 {\n    font-family: \"Oxanium\", sans-serif;\n    font-size: 24px;\n    font-weight: 900;\n    font-style: normal;\n    color: #FFFFFF;\n    letter-spacing: 2px;\n    margin-bottom: 20px;\n}\n.rvc-navbar {\n    display: flex;\n    justify-content: center;\n    background-color: rgba(0, 0, 0, 0);\n    padding: 10px;\n}\n.rvc-navbar-button {\n    background-color: rgba(0, 0, 0, 0);\n    border: none; \n    color: white; \n    margin: 0 3px; \n    text-align: center;\n    text-decoration: none;\n    font-size: 16px;\n    cursor: pointer; \n    border-radius: 5px;\n    transition: background-color 0.3s;\n    font-family: \"Oxanium\", sans-serif;\n    font-weight: 600;\n    font-style: normal;\n}\n.rvc-navbar-button-active {\n    background-color: #7A5CF1;\n    border: none; \n    color: white; \n    margin: 0 3px; \n    text-align: center;\n    text-decoration: none;\n    font-size: 16px;\n    cursor: pointer; \n    border-radius: 5px;\n    transition: background-color 0.3s;\n    font-family: \"Oxanium\", sans-serif;\n    font-weight: 600;\n    font-style: normal;\n}\n.rvc-navbar-button:hover {\n    background-color: #7a5cf176; \n    border: none; \n    color: white; \n}\n.rvc-label {\n    font-size: 20px;\n    font-family: \"Oxanium\", sans-serif;\n    font-weight: 500;\n    font-style: normal;\n    color: #7A5CF1;\n}\n.rvc-desc {\n    font-size: 15px;\n    font-family: \"Oxanium\", sans-serif;\n    font-weight: 300;\n    font-style: normal;\n    color: #FFFFFF;\n}\n.rvc-option {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px 20px;\n}\n.rvc-option-text {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n}\n.rvc-switch {\n    position: relative;\n    display: inline-block;\n    width: 30px;\n    height: 16px;\n    margin-left: 20px;\n}\n\n.rvc-dropdowncontainer {\n    position: relative;\n    display: inline-block;\n    width: 60px;\n    height: 32px;\n    margin-left: 20px;\n}\n\n.rvc-input-container {\n    position: relative;\n    display: inline-block;\n    width: 48px;\n    height: 24px;\n    margin-left: 20px;\n    justify-content: center;\n    align-items: center;\n}\n  \n  /* Hide default HTML checkbox */\n.rvc-switch input {\n    opacity: 0;\n    width: 0;\n    height: 0;\n}\n\n/* The slider */\n.rvc-slider {\n    border-radius: 3px;\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    outline: 3px solid #7A5CF1;\n    background-color: #4A4B57;\n    -webkit-transition: .4s;\n    transition: .4s;\n}\n.rvc-dropdown {\n    border-radius: 3px;\n    position: absolute;\n    cursor: pointer;\n    width: 70px;\n    height: 24px;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    outline: 3px solid #7A5CF1;\n    background-color: #4A4B57;\n    color: white;\n    -webkit-transition: .4s;\n    transition: .4s;\n    margin-left: 0px;\n}\n.rvc-dropdown:hover {\n    border-radius: 3px;\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    outline: 3px solid #7A5CF1;\n    background-color: #595d93;\n    color: white;\n    -webkit-transition: .4s;\n    transition: .4s;\n}\n.rvc-slider:hover {\n    border-radius: 3px;\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    outline: 3px solid #7A5CF1;\n    background-color: #595d93;\n    -webkit-transition: .4s;\n    transition: .4s;\n}\n\n.rvc-input {\n    width: auto;\n    height: auto;\n    padding: 2px 4px;\n    border-radius: 3px;\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    outline: 3px solid #7A5CF1;\n    background-color: #4A4B57;\n    -webkit-transition: .4s;\n    transition: .4s;\n    font-family: \"Oxanium\", sans-serif;\n    font-weight: 600;\n    font-style: normal;\n    color: #FFFFFF;\n}\n\n.rvc-input:hover {\n    padding: 2px 4px;\n    border-radius: 3px;\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    outline: 3px solid #7A5CF1;\n    background-color: #595d93;\n    -webkit-transition: .4s;\n    transition: .4s;\n    font-family: \"Oxanium\", sans-serif;\n    font-weight: 600;\n    font-style: normal;\n    color: #FFFFFF;\n}\n  \n.rvc-slider:before {\n    position: absolute;\n    content: \"\";\n    width: 14px;\n    height: 14px;\n    top: 1px;\n    left: 1px;\n    background-color: white;\n    -webkit-transition: .4s;\n    transition: .4s;\n    border-radius: 3px;\n}\n  \ninput:checked + .rvc-slider {\n    background-color: #7A5CF1;\n}\n  \ninput:focus + .rvc-slider {\n    box-shadow: 0 0 1px #7A5CF1;\n}\n  \ninput:checked + .rvc-slider:before {\n    -webkit-transform: translateX(15px);\n    -ms-transform: translateX(15px);\n    transform: translateX(15px);\n}\n\n.rvc-slider-container {\n    padding: 25px 0px;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n}\n\n.rvc-range-label {\n    font-size: 15px;\n    font-family: \"Oxanium\", sans-serif;\n    font-weight: 300;\n    font-style: normal;\n    color: #FFFFFF;\n}\n\n.rvc-slider-wrapper {\n    position: relative;\n    width: 300px;\n}\n\ninput[type=\"range\"] {\n    appearance: none;\n    -webkit-appearance: none;\n    width: 100%;\n    height: 10px;\n    background: linear-gradient(to right, #7A5CF1 50%, #ddd 50%);\n    outline: none;\n    border-radius: 5px;\n    cursor: pointer;\n    margin: 0;\n}\n\n/* Thumb styling */\ninput[type=\"range\"]::-webkit-slider-thumb {\n    appearance: none;\n    -webkit-appearance: none;\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background: rgba(0, 0, 0, 0);\n    cursor: pointer;\n    position: relative;\n    z-index: 2;\n}\n\ninput[type=\"range\"]::-moz-range-thumb {\n    appearance: none;\n    -webkit-appearance: none;\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background: rgba(0, 0, 0, 0);\n    cursor: pointer;\n}\n\n/* Show the value on thumb */\n.rvc-slider-thumb-value {\n    position: absolute;\n    left: 50%;\n    top: 0%;\n    transform: translateX(-50%);\n    background-color: #4A4B57;\n    padding: 2px 4px;\n    border-radius: 3px;\n    z-index: 1;\n    pointer-events: none;\n    font-size: 15px;\n    outline: 3px solid #7A5CF1;\n    font-family: \"Oxanium\", sans-serif;\n    font-weight: 600;\n    font-style: normal;\n    color: #FFFFFF;\n}\n\n.rvc-slider-thumb-value:hover {\n    position: absolute;\n    left: 50%;\n    top: 0%;\n    transform: translateX(-50%);\n    background-color: #595d93;\n    padding: 2px 4px;\n    border-radius: 3px;\n    z-index: 1;\n    pointer-events: none;\n    font-size: 15px;\n    outline: 3px solid #7A5CF1;\n    font-family: \"Oxanium\", sans-serif;\n    font-weight: 600;\n    font-style: normal;\n    color: #FFFFFF;\n}\n\n.rvc-slider-wrapper input[type=\"range\"]:focus + .slider-thumb-value {\n    visibility: visible;\n}", ""]);
                const a = r;
            },
            314: n => {
                n.exports = function(n) {
                    var e = [];
                    e.toString = function() {
                        return this.map(function(e) {
                            var t = "";
                            var o = e[5] !== undefined;
                            if (e[4]) {
                                t += `@supports (${e[4]}) {`;
                            }
                            if (e[2]) {
                                t += `@media ${e[2]} {`;
                            }
                            if (o) {
                                t += `@layer${e[5].length > 0 ? ` ${e[5]}` : ""} {`;
                            }
                            t += n(e);
                            if (o) {
                                t += "}";
                            }
                            if (e[2]) {
                                t += "}";
                            }
                            if (e[4]) {
                                t += "}";
                            }
                            return t;
                        }).join("");
                    };
                    e.i = function(n, t, o, i, s) {
                        if (typeof n == "string") {
                            n = [
                                [null, n, undefined]
                            ];
                        }
                        var r = {};
                        if (o) {
                            for (var a = 0; a < this.length; a++) {
                                var c = this[a][0];
                                if (c != null) {
                                    r[c] = true;
                                }
                            }
                        }
                        for (var l = 0; l < n.length; l++) {
                            var d = [].concat(n[l]);
                            if (!o || !r[d[0]]) {
                                if (s !== undefined) {
                                    if (d[5] !== undefined) {
                                        d[1] = `@layer${d[5].length > 0 ? ` ${d[5]}` : ""} {${d[1]}}`;
                                    }
                                    d[5] = s;
                                }
                                if (t) {
                                    if (d[2]) {
                                        d[1] = `@media ${d[2]} {${d[1]}}`;
                                        d[2] = t;
                                    } else {
                                        d[2] = t;
                                    }
                                }
                                if (i) {
                                    if (d[4]) {
                                        d[1] = `@supports (${d[4]}) {${d[1]}}`;
                                        d[4] = i;
                                    } else {
                                        d[4] = `${i}`;
                                    }
                                }
                                e.push(d);
                            }
                        }
                    };
                    return e;
                };
            },
            601: n => {
                n.exports = function(n) {
                    return n[1];
                };
            },
            72: n => {
                var e = [];

                function t(n) {
                    var t = -1;
                    for (var o = 0; o < e.length; o++) {
                        if (e[o].identifier === n) {
                            t = o;
                            break;
                        }
                    }
                    return t;
                }

                function o(n, o) {
                    var s = {};
                    var r = [];
                    for (var a = 0; a < n.length; a++) {
                        var c = n[a];
                        var l = o.base ? c[0] + o.base : c[0];
                        var d = s[l] || 0;
                        var p = `${l} ${d}`;
                        s[l] = d + 1;
                        var u = t(p);
                        var v = {
                            css: c[1],
                            media: c[2],
                            sourceMap: c[3],
                            supports: c[4],
                            layer: c[5]
                        };
                        if (u !== -1) {
                            e[u].references++;
                            e[u].updater(v);
                        } else {
                            var g = i(v, o);
                            o.byIndex = a;
                            e.splice(a, 0, {
                                identifier: p,
                                updater: g,
                                references: 1
                            });
                        }
                        r.push(p);
                    }
                    return r;
                }

                function i(n, e) {
                    var t = e.domAPI(e);
                    t.update(n);
                    return function(e) {
                        if (e) {
                            if (e.css === n.css && e.media === n.media && e.sourceMap === n.sourceMap && e.supports === n.supports && e.layer === n.layer) {
                                return;
                            }
                            t.update(n = e);
                        } else {
                            t.remove();
                        }
                    };
                }
                n.exports = function(n, i) {
                    var s = o(n = n || [], i = i || {});
                    return function(n) {
                        n = n || [];
                        for (var r = 0; r < s.length; r++) {
                            var a = t(s[r]);
                            e[a].references--;
                        }
                        var c = o(n, i);
                        for (var l = 0; l < s.length; l++) {
                            var d = t(s[l]);
                            if (e[d].references === 0) {
                                e[d].updater();
                                e.splice(d, 1);
                            }
                        }
                        s = c;
                    };
                };
            },
            659: n => {
                var e = {};
                n.exports = function(n, t) {
                    var o = function(n) {
                        if (e[n] === undefined) {
                            var t = document.querySelector(n);
                            if (window.HTMLIFrameElement && t instanceof window.HTMLIFrameElement) {
                                try {
                                    t = t.contentDocument.head;
                                } catch (n) {
                                    t = null;
                                }
                            }
                            e[n] = t;
                        }
                        return e[n];
                    }(n);
                    if (!o) {
                        throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
                    }
                    o.appendChild(t);
                };
            },
            540: n => {
                n.exports = function(n) {
                    var e = document.createElement("style");
                    n.setAttributes(e, n.attributes);
                    n.insert(e, n.options);
                    return e;
                };
            },
            56: (n, e, t) => {
                n.exports = function(n) {
                    var e = t.nc;
                    if (e) {
                        n.setAttribute("nonce", e);
                    }
                };
            },
            825: n => {
                n.exports = function(n) {
                    if (typeof document == "undefined") {
                        return {
                            update: function() {},
                            remove: function() {}
                        };
                    }
                    var e = n.insertStyleElement(n);
                    return {
                        update: function(t) {
                            (function(n, e, t) {
                                var o = "";
                                if (t.supports) {
                                    o += `@supports (${t.supports}) {`;
                                }
                                if (t.media) {
                                    o += `@media ${t.media} {`;
                                }
                                var i = t.layer !== undefined;
                                if (i) {
                                    o += `@layer${t.layer.length > 0 ? ` ${t.layer}` : ""} {`;
                                }
                                o += t.css;
                                if (i) {
                                    o += "}";
                                }
                                if (t.media) {
                                    o += "}";
                                }
                                if (t.supports) {
                                    o += "}";
                                }
                                var s = t.sourceMap;
                                if (s && typeof btoa != "undefined") {
                                    o += `
  /*# sourceMappingURL=data:application/json;base64,${btoa(unescape(encodeURIComponent(JSON.stringify(s))))} */`;
                                }
                                e.styleTagTransform(o, n, e.options);
                            })(e, n, t);
                        },
                        remove: function() {
                            (function(n) {
                                if (n.parentNode === null) {
                                    return false;
                                }
                                n.parentNode.removeChild(n);
                            })(e);
                        }
                    };
                };
            },
            113: n => {
                n.exports = function(n, e) {
                    if (e.styleSheet) {
                        e.styleSheet.cssText = n;
                    } else {
                        while (e.firstChild) {
                            e.removeChild(e.firstChild);
                        }
                        e.appendChild(document.createTextNode(n));
                    }
                };
            }
        };
        var e = {};

        function t(o) {
            var i = e[o];
            if (i !== undefined) {
                return i.exports;
            }
            var s = e[o] = {
                id: o,
                exports: {}
            };
            n[o](s, s.exports, t);
            return s.exports;
        }
        t.n = n => {
            var e = n && n.__esModule ? () => n.default : () => n;
            t.d(e, {
                a: e
            });
            return e;
        };
        t.d = (n, e) => {
            for (var o in e) {
                if (t.o(e, o) && !t.o(n, o)) {
                    Object.defineProperty(n, o, {
                        enumerable: true,
                        get: e[o]
                    });
                }
            }
        };
        t.o = (n, e) => Object.prototype.hasOwnProperty.call(n, e);
        t.nc = undefined;
        var o = t(72);
        var i = t.n(o);
        var s = t(825);
        var r = t.n(s);
        var a = t(659);
        var c = t.n(a);
        var l = t(56);
        var d = t.n(l);
        var p = t(540);
        var u = t.n(p);
        var v = t(113);
        var g = t.n(v);
        var m = t(208);
        var f = {};
        f.styleTagTransform = g();
        f.setAttributes = d();
        f.insert = c().bind(null, "head");
        f.domAPI = r();
        f.insertStyleElement = u();
        i()(m.A, f);
        if (m.A && m.A.locals) {
            m.A.locals;
        }
        if (localStorage.getItem("RVJsettings")) {
            try {
                window.RVJsettings = JSON.parse(localStorage.getItem("RVJsettings"));
            } catch (n) {
                b();
            }
        } else {
            b();
        }

        function b() {
            window.RVJsettings = {
                performance: false,
                animations: true,
                hideWorld: false,
                turnSpeedEnabled: true,
                turnSpeed: 120,
                instantTurns: false,
                fpsLimitEnabled: false,
                fpsLimit: 120,
                allDragon: false,
                zoom: false,
                drag: false,
                alert: true,
                toggleKey: "KeyN",
                angleMode: 0,
                backgroundColor: "#3FBA54"
            };
        }
        setTimeout(function() {
            try {
                (function() {
                    var n = 0;
                    var e = 0;

                    function t(n) {
                        return n * (Math.PI / 180);
                    }
                    if (!RVJsettings.angleMode) {
                        RVJsettings.angleMode = 1;
                        localStorage.setItem("RVJsettings", JSON.stringify(RVJsettings));
                    }
                    RVJsettings.angleMode = Number(RVJsettings.angleMode);
                    if (!RVJsettings.backgroundColor) {
                        RVJsettings.backgroundColor = "#3FBA54";
                        localStorage.setItem("RVJsettings", JSON.stringify(RVJsettings));
                    }
                    var o = new Image();
                    o.src = "https://mope.io/assets/s/0/skins/land/dragon/111/0/dragon.png";
                    GameObj.nAngle = 0;
                    Animal.nAngle = 0;
                    GameObj.prototype.updateAngle = function(n) {
                        var e = this.oType == 14 ? 180 : 90;
                        if (RVJsettings.angleMode == 5) {
                            this.angle = t(n + e);
                        } else {
                            var o = t(n + e);
                            this.oAngle = this.angle;
                            this.nAngle = o;
                            if (this.firstPosUpd) {
                                this.oAngle = this.nAngle = this.angle = o;
                            }
                        }
                    };
                    Animal.prototype.updateAngle = function(n) {
                        var e = t(n - 90);
                        this.oAngle = this.angle;
                        this.nAngle = e;
                        if (this.firstPosUpd) {
                            this.oAngle = this.angle = this.nAngle = e;
                        }
                    };
                    document.body.style.backgroundColor = RVJsettings.backgroundColor;
                    GameObj.prototype.lerpAngle = function() {
                        if (RVJsettings.turnSpeedEnabled) {
                            var e = _0x27200a / (1000 / RVJsettings.turnSpeed);
                        } else {
                            e = 1;
                        }
                        var t;
                        this.angleDelta = function(n, e) {
                            let t = e - n;
                            while (t > Math.PI) {
                                t -= Math.PI * 2;
                            }
                            while (t < -Math.PI) {
                                t += Math.PI * 2;
                            }
                            return t;
                        }(this.angle, this.nAngle) || 0;
                        switch (RVJsettings.angleMode) {
                            case 1:
                                t = this.angleDelta * Math.min(e * 0.1, 1);
                                break;
                            case 2:
                                t = this.angleDelta * Math.min(1, 1 - Math.pow(2, e * -0.1));
                                break;
                            case 3:
                                t = this.angleDelta;
                                break;
                            case 0:
                                t = this.angleDelta * Math.min(1, 1 - 0.9 ** e);
                        }
                        this.angle += t;
                    };
                    const i = GameObj.prototype.draw;
                    GameObj.prototype.draw = function(n) {
                        if (RVJsettings.hideWorld) {
                            switch (this.oType) {
                                case 2:
                                case 14:
                                    break;
                                default:
                                    return;
                            }
                        }
                        i.call(this, n);
                    };
                    const s = Animal.prototype.basicDrawSkinImg;
                    Animal.prototype.basicDrawSkinImg = function() {
                        if (RVJsettings.allDragon) {
                            var n = this.loadedSkinImg;
                            this.loadedSkinImg = o;
                            s.call(this);
                            this.loadedSkinImg = n;
                        } else {
                            s.call(this);
                        }
                    };
                    const r = BiomeShape.prototype.jaggedSidesForRect;
                    BiomeShape.prototype.jaggedSidesForRect = function() {
                        if (!RVJsettings.performance) {
                            r.call(this);
                        }
                    };
                    const a = River.prototype.jaggedSidesForRect;
                    River.prototype.jaggedSidesForRect = function(n) {
                        if (!RVJsettings.performance) {
                            a.call(this, n);
                        }
                    };
                    document.getElementById("gCanvas").addEventListener("wheel", function(n) {
                        if (RVJsettings.zoom && document.activeElement != document.querySelector("#chatinput")) {
                            if (n.deltaY < 0) {
                                camzoom_n += 0.1;
                            } else if (camzoom_n >= 0.2) {
                                camzoom_n -= 0.1;
                            }
                        }
                    });
                    document.addEventListener("keydown", function(n) {
                        if (n.code == "KeyM" && document.activeElement != document.querySelector("#chatinput") && RVJsettings.animations) {
                            var e = document.getElementById("startMenuWrapper");
                            if (e.style.display == "none") {
                                e.style.display = "block";
                            } else {
                                e.style.display = "none";
                            }
                        }
                    });
                })();
                (function() {
                    const n = document.createElement("div");
                    n.innerHTML = "<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"> <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin> <link href=\"https://fonts.googleapis.com/css2?family=Oxanium:wght@200..800&display=swap\" rel=\"stylesheet\"> <div class=\"rvc-div\" id=\"rvc-menu\"> <div class=\"rvc-title\"> <h1 class=\"rvc-t1\">RVJ </h1> <h1 class=\"rvc-t2\"> Modpack</h1> </div> <div class=\"rvc-navbar\"> <button class=\"rvc-navbar-button\" id=\"rvc-nav1\">Optimization</button> <button class=\"rvc-navbar-button\" id=\"rvc-nav2\">Movement</button> <button class=\"rvc-navbar-button\" id=\"rvc-nav3\">Misc</button> </div> <div class=\"rvc-page\" id=\"rvcpage1\"> <div class=\"rvc-option\"> <div class=\"rvc-option-text\"> <span class=\"rvc-label\">Performance Mode</span> <span class=\"rvc-desc\">Optimize rendering</span> </div> <label class=\"rvc-switch\"> <input type=\"checkbox\" id=\"rvcOptions_performance\"> <span class=\"rvc-slider\"></span> </label> </div> <div class=\"rvc-option\"> <div class=\"rvc-option-text\"> <span class=\"rvc-label\">Hide World</span> <span class=\"rvc-desc\">Hide everything in arena</span> </div> <label class=\"rvc-switch\"> <input type=\"checkbox\" id=\"rvcOptions_hideWorld\"> <span class=\"rvc-slider\"></span> </label> </div> <div class=\"rvc-option\"> <div class=\"rvc-option-text\"> <span class=\"rvc-label\">All Dragon</span> <span class=\"rvc-desc\">Set all skins to drag for 1v1</span> </div> <label class=\"rvc-switch\"> <input type=\"checkbox\" id=\"rvcOptions_allDragon\"> <span class=\"rvc-slider\"></span> </label> </div> </div> <div class=\"rvc-page\" id=\"rvcpage2\"> <div class=\"rvc-option\"> <div class=\"rvc-option-text\"> <span class=\"rvc-label\">Turn Speed</span> <span class=\"rvc-desc\">Change your turn speed</span> </div> <label class=\"rvc-switch\"> <input type=\"checkbox\" id=\"rvcOptions_turnSpeedEnabled\"> <span class=\"rvc-slider\"></span> </label> </div> <div class=\"rvc-slider-container\" id=\"rvcSliderContainer_turnSpeed\"> <span class=\"rvc-range-label min\">30</span> <div class=\"rvc-slider-wrapper\"> <input type=\"range\" id=\"rvcSlider_turnSpeed\" min=\"30\" max=\"540\" value=\"90\" step=\"1\"> <div class=\"rvc-slider-thumb-value\" id=\"rvcSlider_thumb\">120</div> </div> <span class=\"rvc-range-label max\">540</span> </div> <div class=\"rvc-option\"> <div class=\"rvc-option-text\"> <span class=\"rvc-label\">FPS Limit</span> <span class=\"rvc-desc\">Set a limit to your FPS</span> </div> <label class=\"rvc-switch\"> <input type=\"checkbox\" id=\"rvcOptions_fpsLimitEnabled\"> <span class=\"rvc-slider\"></span> </label> </div> <div class=\"rvc-slider-container\" id=\"rvcSliderContainer_fpsLimit\"> <span class=\"rvc-range-label min\">30</span> <div class=\"rvc-slider-wrapper\"> <input type=\"range\" id=\"rvcSlider_fpsLimit\" min=\"30\" max=\"540\" value=\"90\" step=\"1\"> <div class=\"rvc-slider-thumb-value\" id=\"rvcSlider_thumb2\">120</div> </div> <span class=\"rvc-range-label max\">540</span> </div> <div class=\"rvc-option\"> <div class=\"rvc-option-text\"> <span class=\"rvc-label\">Smoothing mode</span> <span class=\"rvc-desc\">Angle interpolation</span> </div> <label class=\"rvc-switch\"> <select id=\"rvcDropdown_angleMode\" class=\"rvc-dropdown\"> <option value=\"0\">Ease-out</option> <option value=\"1\">Linear</option> <option value=\"2\">Ease-in</option> <option value=\"3\">Instant</option> </select> </label> </div> </div> <div class=\"rvc-page\" id=\"rvcpage3\"> <div class=\"rvc-option\"> <div class=\"rvc-option-text\"> <span class=\"rvc-label\">Zoom</span> <span class=\"rvc-desc\">Zoom with scroll wheel</span> </div> <label class=\"rvc-switch\"> <input type=\"checkbox\" id=\"rvcOptions_zoom\"> <span class=\"rvc-slider\"></span> </label> </div> <div class=\"rvc-option\"> <div class=\"rvc-option-text\"> <span class=\"rvc-label\">Background Color</span> <span class=\"rvc-desc\">Set arena background color (reset with black)</span> </div> <label class=\"rvc-dropdowncontainer\"> <input type=\"color\" id=\"rvcInput_backgroundColor\" value=\"#3FBA54\"/> </label> </div> <div class=\"rvc-option\"> <div class=\"rvc-option-text\"> <span class=\"rvc-label\">Toggle Game Menu</span> <span class=\"rvc-desc\">M Key</span> </div> <label class=\"rvc-switch\"> <input type=\"checkbox\" id=\"rvcOptions_animations\"> <span class=\"rvc-slider\"></span> </label> </div> <div class=\"rvc-option\"> <div class=\"rvc-option-text\"> <span class=\"rvc-label\">Enable Dragging</span> <span class=\"rvc-desc\">Drag and position the UI around</span> </div> <label class=\"rvc-switch\"> <input type=\"checkbox\" id=\"rvcOptions_drag\"> <span class=\"rvc-slider\"></span> </label> </div> </div> </div>";
                    document.body.appendChild(n);
                    const e = document.getElementById("rvc-menu");
                    const t = document.getElementById("rvcSlider_turnSpeed");
                    const o = document.getElementById("rvcSlider_thumb");

                    function i() {
                        const n = t.value;
                        o.textContent = n;
                        const e = (n - t.min) / (t.max - t.min) * 100;
                        t.style.background = `linear-gradient(to right, #7A5CF1 ${e}%, #4A4B57 ${e}%)`;
                        o.style.left = `calc(${e}% + (${8 - e * 0.15}px))`;
                        RVJsettings.turnSpeed = n;
                        localStorage.setItem("RVJsettings", JSON.stringify(RVJsettings));
                    }
                    t.value = RVJsettings.turnSpeed;
                    t.addEventListener("input", i);
                    const s = document.getElementById("rvcSlider_fpsLimit");
                    const r = document.getElementById("rvcSlider_thumb2");

                    function a() {
                        const n = s.value;
                        r.textContent = n;
                        const e = (n - s.min) / (s.max - s.min) * 100;
                        s.style.background = `linear-gradient(to right, #7A5CF1 ${e}%, #4A4B57 ${e}%)`;
                        r.style.left = `calc(${e}% + (${8 - e * 0.15}px))`;
                        RVJsettings.fpsLimit = n;
                        localStorage.setItem("RVJsettings", JSON.stringify(RVJsettings));
                    }
                    s.value = RVJsettings.fpsLimit;
                    s.addEventListener("input", a);
                    document.getElementById("rvcDropdown_angleMode").addEventListener("change", n => {
                        RVJsettings.angleMode = Number(document.getElementById("rvcDropdown_angleMode").value);
                        localStorage.setItem("RVJsettings", JSON.stringify(RVJsettings));
                    });
                    document.getElementById("rvcInput_backgroundColor").addEventListener("input", n => {
                        RVJsettings.backgroundColor = document.getElementById("rvcInput_backgroundColor").value;
                        if (RVJsettings.backgroundColor == "#FFFFFF" || RVJsettings.backgroundColor == "#000000") {
                            RVJsettings.backgroundColor = "#3FBA54";
                        }
                        document.body.style.backgroundColor = RVJsettings.backgroundColor;
                        localStorage.setItem("RVJsettings", JSON.stringify(RVJsettings));
                    });
                    document.addEventListener("keydown", function(n) {
                        if (n.code == "KeyN" && document.activeElement != document.querySelector("#chatinput")) {
                            if (e.style.display == "none") {
                                e.style.display = "block";
                            } else {
                                e.style.display = "none";
                            }
                        }
                    });
                    i();
                    a();
                    for (let n = 1; n <= 3; n++) {
                        document.getElementById("rvc-nav" + n).addEventListener("click", function() {
                            c(n);
                        });
                    }

                    function c(n) {
                        for (let e = 1; e <= 3; e++) {
                            const t = document.getElementById("rvcpage" + e);
                            const o = document.getElementById("rvc-nav" + e);
                            if (n == e) {
                                t.style.display = "block";
                                o.classList.add("rvc-navbar-button-active");
                                o.classList.remove("rvc-navbar-button");
                            } else {
                                t.style.display = "none";
                                o.classList.remove("rvc-navbar-button-active");
                                o.classList.add("rvc-navbar-button");
                            }
                        }
                    }
                    c(1);
                    document.getElementById("rvcSliderContainer_turnSpeed").style.display = RVJsettings.turnSpeedEnabled ? "flex" : "none";
                    document.getElementById("rvcSliderContainer_fpsLimit").style.display = RVJsettings.fpsLimitEnabled ? "flex" : "none";
                    document.getElementById("rvcDropdown_angleMode").value = RVJsettings.angleMode;
                    const l = document.querySelectorAll("[id*=\"rvcOptions\"]");
                    for (let n = 0; n < l.length; n++) {
                        const e = l[n];
                        const t = l[n].id.replace("rvcOptions_", "");
                        e.checked = RVJsettings[t];
                        e.addEventListener("change", function() {
                            RVJsettings[t] = e.checked;
                            localStorage.setItem("RVJsettings", JSON.stringify(RVJsettings));
                            if (t == "turnSpeedEnabled") {
                                document.getElementById("rvcSliderContainer_turnSpeed").style.display = RVJsettings.turnSpeedEnabled ? "flex" : "none";
                            } else if (t == "fpsLimitEnabled") {
                                document.getElementById("rvcSliderContainer_fpsLimit").style.display = RVJsettings.fpsLimitEnabled ? "flex" : "none";
                            }
                        });
                    }
                    (function(n) {
                        let e = false;
                        n.addEventListener("mousedown", function(t) {
                            if (RVJsettings.drag && (t.target == n || t.target.contentEditable != "true" && !["INPUT", "BUTTON"].includes(t.target.tagName))) {
                                function o(t) {
                                    if (e) {
                                        n.style.position = "absolute";
                                        n.style.left = t.clientX + "px";
                                        n.style.top = t.clientY + "px";
                                    }
                                }

                                function i() {
                                    e = false;
                                    document.removeEventListener("mousemove", o);
                                    document.removeEventListener("mouseup", i);
                                }
                                t.preventDefault();
                                e = true;
                                document.addEventListener("mousemove", o);
                                document.addEventListener("mouseup", i);
                            }
                        });
                    })(document.getElementById("rvc-menu"));
                })();
            } catch (n) {
                alert("Error injecting RVJ: " + n);
            }
        }, 10);
    }

};
a0_0x5ac32b.run();